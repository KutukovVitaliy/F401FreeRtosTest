
F401FreeRTOS_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a368  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e4  0800a508  0800a508  0001a508  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a9ec  0800a9ec  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a9ec  0800a9ec  0001a9ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a9f4  0800a9f4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a9f4  0800a9f4  0001a9f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a9f8  0800a9f8  0001a9f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a9fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004e04  200001e0  0800abdc  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004fe4  0800abdc  00024fe4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c08e  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039fb  00000000  00000000  0003c29e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001538  00000000  00000000  0003fca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013f0  00000000  00000000  000411d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004f8d  00000000  00000000  000425c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000161f3  00000000  00000000  00047555  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098ca8  00000000  00000000  0005d748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f63f0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006998  00000000  00000000  000f6444  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a4f0 	.word	0x0800a4f0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	0800a4f0 	.word	0x0800a4f0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96e 	b.w	8000eac <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468c      	mov	ip, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	f040 8083 	bne.w	8000cfe <__udivmoddi4+0x116>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d947      	bls.n	8000c8e <__udivmoddi4+0xa6>
 8000bfe:	fab2 f282 	clz	r2, r2
 8000c02:	b142      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	f1c2 0020 	rsb	r0, r2, #32
 8000c08:	fa24 f000 	lsr.w	r0, r4, r0
 8000c0c:	4091      	lsls	r1, r2
 8000c0e:	4097      	lsls	r7, r2
 8000c10:	ea40 0c01 	orr.w	ip, r0, r1
 8000c14:	4094      	lsls	r4, r2
 8000c16:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c1a:	0c23      	lsrs	r3, r4, #16
 8000c1c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c20:	fa1f fe87 	uxth.w	lr, r7
 8000c24:	fb08 c116 	mls	r1, r8, r6, ip
 8000c28:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x60>
 8000c34:	18fb      	adds	r3, r7, r3
 8000c36:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3a:	f080 8119 	bcs.w	8000e70 <__udivmoddi4+0x288>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 8116 	bls.w	8000e70 <__udivmoddi4+0x288>
 8000c44:	3e02      	subs	r6, #2
 8000c46:	443b      	add	r3, r7
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c50:	fb08 3310 	mls	r3, r8, r0, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c5c:	45a6      	cmp	lr, r4
 8000c5e:	d909      	bls.n	8000c74 <__udivmoddi4+0x8c>
 8000c60:	193c      	adds	r4, r7, r4
 8000c62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c66:	f080 8105 	bcs.w	8000e74 <__udivmoddi4+0x28c>
 8000c6a:	45a6      	cmp	lr, r4
 8000c6c:	f240 8102 	bls.w	8000e74 <__udivmoddi4+0x28c>
 8000c70:	3802      	subs	r0, #2
 8000c72:	443c      	add	r4, r7
 8000c74:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c78:	eba4 040e 	sub.w	r4, r4, lr
 8000c7c:	2600      	movs	r6, #0
 8000c7e:	b11d      	cbz	r5, 8000c88 <__udivmoddi4+0xa0>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c5 4300 	strd	r4, r3, [r5]
 8000c88:	4631      	mov	r1, r6
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	b902      	cbnz	r2, 8000c92 <__udivmoddi4+0xaa>
 8000c90:	deff      	udf	#255	; 0xff
 8000c92:	fab2 f282 	clz	r2, r2
 8000c96:	2a00      	cmp	r2, #0
 8000c98:	d150      	bne.n	8000d3c <__udivmoddi4+0x154>
 8000c9a:	1bcb      	subs	r3, r1, r7
 8000c9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ca0:	fa1f f887 	uxth.w	r8, r7
 8000ca4:	2601      	movs	r6, #1
 8000ca6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000caa:	0c21      	lsrs	r1, r4, #16
 8000cac:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	d907      	bls.n	8000ccc <__udivmoddi4+0xe4>
 8000cbc:	1879      	adds	r1, r7, r1
 8000cbe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0xe2>
 8000cc4:	428b      	cmp	r3, r1
 8000cc6:	f200 80e9 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000cca:	4684      	mov	ip, r0
 8000ccc:	1ac9      	subs	r1, r1, r3
 8000cce:	b2a3      	uxth	r3, r4
 8000cd0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cd4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cd8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cdc:	fb08 f800 	mul.w	r8, r8, r0
 8000ce0:	45a0      	cmp	r8, r4
 8000ce2:	d907      	bls.n	8000cf4 <__udivmoddi4+0x10c>
 8000ce4:	193c      	adds	r4, r7, r4
 8000ce6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x10a>
 8000cec:	45a0      	cmp	r8, r4
 8000cee:	f200 80d9 	bhi.w	8000ea4 <__udivmoddi4+0x2bc>
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	eba4 0408 	sub.w	r4, r4, r8
 8000cf8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cfc:	e7bf      	b.n	8000c7e <__udivmoddi4+0x96>
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0x12e>
 8000d02:	2d00      	cmp	r5, #0
 8000d04:	f000 80b1 	beq.w	8000e6a <__udivmoddi4+0x282>
 8000d08:	2600      	movs	r6, #0
 8000d0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d0e:	4630      	mov	r0, r6
 8000d10:	4631      	mov	r1, r6
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	fab3 f683 	clz	r6, r3
 8000d1a:	2e00      	cmp	r6, #0
 8000d1c:	d14a      	bne.n	8000db4 <__udivmoddi4+0x1cc>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d302      	bcc.n	8000d28 <__udivmoddi4+0x140>
 8000d22:	4282      	cmp	r2, r0
 8000d24:	f200 80b8 	bhi.w	8000e98 <__udivmoddi4+0x2b0>
 8000d28:	1a84      	subs	r4, r0, r2
 8000d2a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d2e:	2001      	movs	r0, #1
 8000d30:	468c      	mov	ip, r1
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	d0a8      	beq.n	8000c88 <__udivmoddi4+0xa0>
 8000d36:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d3a:	e7a5      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000d3c:	f1c2 0320 	rsb	r3, r2, #32
 8000d40:	fa20 f603 	lsr.w	r6, r0, r3
 8000d44:	4097      	lsls	r7, r2
 8000d46:	fa01 f002 	lsl.w	r0, r1, r2
 8000d4a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d4e:	40d9      	lsrs	r1, r3
 8000d50:	4330      	orrs	r0, r6
 8000d52:	0c03      	lsrs	r3, r0, #16
 8000d54:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d58:	fa1f f887 	uxth.w	r8, r7
 8000d5c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d64:	fb06 f108 	mul.w	r1, r6, r8
 8000d68:	4299      	cmp	r1, r3
 8000d6a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x19c>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d76:	f080 808d 	bcs.w	8000e94 <__udivmoddi4+0x2ac>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 808a 	bls.w	8000e94 <__udivmoddi4+0x2ac>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b281      	uxth	r1, r0
 8000d88:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d8c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d94:	fb00 f308 	mul.w	r3, r0, r8
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x1c4>
 8000d9c:	1879      	adds	r1, r7, r1
 8000d9e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000da2:	d273      	bcs.n	8000e8c <__udivmoddi4+0x2a4>
 8000da4:	428b      	cmp	r3, r1
 8000da6:	d971      	bls.n	8000e8c <__udivmoddi4+0x2a4>
 8000da8:	3802      	subs	r0, #2
 8000daa:	4439      	add	r1, r7
 8000dac:	1acb      	subs	r3, r1, r3
 8000dae:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000db2:	e778      	b.n	8000ca6 <__udivmoddi4+0xbe>
 8000db4:	f1c6 0c20 	rsb	ip, r6, #32
 8000db8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dbc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dc0:	431c      	orrs	r4, r3
 8000dc2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dc6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dca:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dce:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	0c3b      	lsrs	r3, r7, #16
 8000dd6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dda:	fa1f f884 	uxth.w	r8, r4
 8000dde:	fb0e 1119 	mls	r1, lr, r9, r1
 8000de2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000de6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dea:	458a      	cmp	sl, r1
 8000dec:	fa02 f206 	lsl.w	r2, r2, r6
 8000df0:	fa00 f306 	lsl.w	r3, r0, r6
 8000df4:	d908      	bls.n	8000e08 <__udivmoddi4+0x220>
 8000df6:	1861      	adds	r1, r4, r1
 8000df8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dfc:	d248      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000dfe:	458a      	cmp	sl, r1
 8000e00:	d946      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e02:	f1a9 0902 	sub.w	r9, r9, #2
 8000e06:	4421      	add	r1, r4
 8000e08:	eba1 010a 	sub.w	r1, r1, sl
 8000e0c:	b2bf      	uxth	r7, r7
 8000e0e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e12:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e16:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e1a:	fb00 f808 	mul.w	r8, r0, r8
 8000e1e:	45b8      	cmp	r8, r7
 8000e20:	d907      	bls.n	8000e32 <__udivmoddi4+0x24a>
 8000e22:	19e7      	adds	r7, r4, r7
 8000e24:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e28:	d22e      	bcs.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2a:	45b8      	cmp	r8, r7
 8000e2c:	d92c      	bls.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2e:	3802      	subs	r0, #2
 8000e30:	4427      	add	r7, r4
 8000e32:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e36:	eba7 0708 	sub.w	r7, r7, r8
 8000e3a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e3e:	454f      	cmp	r7, r9
 8000e40:	46c6      	mov	lr, r8
 8000e42:	4649      	mov	r1, r9
 8000e44:	d31a      	bcc.n	8000e7c <__udivmoddi4+0x294>
 8000e46:	d017      	beq.n	8000e78 <__udivmoddi4+0x290>
 8000e48:	b15d      	cbz	r5, 8000e62 <__udivmoddi4+0x27a>
 8000e4a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e4e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e52:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e56:	40f2      	lsrs	r2, r6
 8000e58:	ea4c 0202 	orr.w	r2, ip, r2
 8000e5c:	40f7      	lsrs	r7, r6
 8000e5e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e62:	2600      	movs	r6, #0
 8000e64:	4631      	mov	r1, r6
 8000e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e70b      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e9      	b.n	8000c48 <__udivmoddi4+0x60>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6fd      	b.n	8000c74 <__udivmoddi4+0x8c>
 8000e78:	4543      	cmp	r3, r8
 8000e7a:	d2e5      	bcs.n	8000e48 <__udivmoddi4+0x260>
 8000e7c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e80:	eb69 0104 	sbc.w	r1, r9, r4
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7df      	b.n	8000e48 <__udivmoddi4+0x260>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e7d2      	b.n	8000e32 <__udivmoddi4+0x24a>
 8000e8c:	4660      	mov	r0, ip
 8000e8e:	e78d      	b.n	8000dac <__udivmoddi4+0x1c4>
 8000e90:	4681      	mov	r9, r0
 8000e92:	e7b9      	b.n	8000e08 <__udivmoddi4+0x220>
 8000e94:	4666      	mov	r6, ip
 8000e96:	e775      	b.n	8000d84 <__udivmoddi4+0x19c>
 8000e98:	4630      	mov	r0, r6
 8000e9a:	e74a      	b.n	8000d32 <__udivmoddi4+0x14a>
 8000e9c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea0:	4439      	add	r1, r7
 8000ea2:	e713      	b.n	8000ccc <__udivmoddi4+0xe4>
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	443c      	add	r4, r7
 8000ea8:	e724      	b.n	8000cf4 <__udivmoddi4+0x10c>
 8000eaa:	bf00      	nop

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000eb8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ebc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000ec0:	f003 0301 	and.w	r3, r3, #1
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d013      	beq.n	8000ef0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000ec8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ecc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000ed0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d00b      	beq.n	8000ef0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000ed8:	e000      	b.n	8000edc <ITM_SendChar+0x2c>
    {
      __NOP();
 8000eda:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000edc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d0f9      	beq.n	8000eda <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000ee6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000eea:	687a      	ldr	r2, [r7, #4]
 8000eec:	b2d2      	uxtb	r2, r2
 8000eee:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000ef0:	687b      	ldr	r3, [r7, #4]
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	370c      	adds	r7, #12
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr

08000efe <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch)
{
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b082      	sub	sp, #8
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff ffd1 	bl	8000eb0 <ITM_SendChar>
	return(ch);
 8000f0e:	687b      	ldr	r3, [r7, #4]
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f1c:	f000 fc8a 	bl	8001834 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f20:	f000 f848 	bl	8000fb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f24:	f000 f8fa 	bl	800111c <MX_GPIO_Init>
  MX_DMA_Init();
 8000f28:	f000 f8d8 	bl	80010dc <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000f2c:	f000 f8ac 	bl	8001088 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  //size_t fre=xPortGetFreeHeapSize();
  printf("Programm started!\n");
 8000f30:	4816      	ldr	r0, [pc, #88]	; (8000f8c <main+0x74>)
 8000f32:	f007 fa7b 	bl	800842c <puts>
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8000f36:	4b16      	ldr	r3, [pc, #88]	; (8000f90 <main+0x78>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	68da      	ldr	r2, [r3, #12]
 8000f3c:	4b14      	ldr	r3, [pc, #80]	; (8000f90 <main+0x78>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f042 0210 	orr.w	r2, r2, #16
 8000f44:	60da      	str	r2, [r3, #12]
  	HAL_UART_Receive_DMA(&huart1, (uint8_t*)receive_buff, 255);
 8000f46:	22ff      	movs	r2, #255	; 0xff
 8000f48:	4912      	ldr	r1, [pc, #72]	; (8000f94 <main+0x7c>)
 8000f4a:	4811      	ldr	r0, [pc, #68]	; (8000f90 <main+0x78>)
 8000f4c:	f002 fb27 	bl	800359e <HAL_UART_Receive_DMA>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000f50:	f003 fa50 	bl	80043f4 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  BigMac = osSemaphoreNew( 20, 0, NULL/*&BigMac_attributes */);
 8000f54:	2200      	movs	r2, #0
 8000f56:	2100      	movs	r1, #0
 8000f58:	2014      	movs	r0, #20
 8000f5a:	f003 fb42 	bl	80045e2 <osSemaphoreNew>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	4a0d      	ldr	r2, [pc, #52]	; (8000f98 <main+0x80>)
 8000f62:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000f64:	4a0d      	ldr	r2, [pc, #52]	; (8000f9c <main+0x84>)
 8000f66:	2100      	movs	r1, #0
 8000f68:	480d      	ldr	r0, [pc, #52]	; (8000fa0 <main+0x88>)
 8000f6a:	f003 fa8d 	bl	8004488 <osThreadNew>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	4a0c      	ldr	r2, [pc, #48]	; (8000fa4 <main+0x8c>)
 8000f72:	6013      	str	r3, [r2, #0]

  /* creation of ledBlynk */
  ledBlynkHandle = osThreadNew(Start_ledBlynk, NULL, &ledBlynk_attributes);
 8000f74:	4a0c      	ldr	r2, [pc, #48]	; (8000fa8 <main+0x90>)
 8000f76:	2100      	movs	r1, #0
 8000f78:	480c      	ldr	r0, [pc, #48]	; (8000fac <main+0x94>)
 8000f7a:	f003 fa85 	bl	8004488 <osThreadNew>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	4a0b      	ldr	r2, [pc, #44]	; (8000fb0 <main+0x98>)
 8000f82:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000f84:	f003 fa5a 	bl	800443c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f88:	e7fe      	b.n	8000f88 <main+0x70>
 8000f8a:	bf00      	nop
 8000f8c:	0800a520 	.word	0x0800a520
 8000f90:	20004f04 	.word	0x20004f04
 8000f94:	20004da4 	.word	0x20004da4
 8000f98:	20004d98 	.word	0x20004d98
 8000f9c:	0800a5a4 	.word	0x0800a5a4
 8000fa0:	080011f9 	.word	0x080011f9
 8000fa4:	20004d9c 	.word	0x20004d9c
 8000fa8:	0800a5c8 	.word	0x0800a5c8
 8000fac:	08001229 	.word	0x08001229
 8000fb0:	20004da0 	.word	0x20004da0

08000fb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b094      	sub	sp, #80	; 0x50
 8000fb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fba:	f107 0320 	add.w	r3, r7, #32
 8000fbe:	2230      	movs	r2, #48	; 0x30
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f006 fd3a 	bl	8007a3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fc8:	f107 030c 	add.w	r3, r7, #12
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]
 8000fd6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fd8:	2300      	movs	r3, #0
 8000fda:	60bb      	str	r3, [r7, #8]
 8000fdc:	4b28      	ldr	r3, [pc, #160]	; (8001080 <SystemClock_Config+0xcc>)
 8000fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe0:	4a27      	ldr	r2, [pc, #156]	; (8001080 <SystemClock_Config+0xcc>)
 8000fe2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fe6:	6413      	str	r3, [r2, #64]	; 0x40
 8000fe8:	4b25      	ldr	r3, [pc, #148]	; (8001080 <SystemClock_Config+0xcc>)
 8000fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ff0:	60bb      	str	r3, [r7, #8]
 8000ff2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	607b      	str	r3, [r7, #4]
 8000ff8:	4b22      	ldr	r3, [pc, #136]	; (8001084 <SystemClock_Config+0xd0>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001000:	4a20      	ldr	r2, [pc, #128]	; (8001084 <SystemClock_Config+0xd0>)
 8001002:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001006:	6013      	str	r3, [r2, #0]
 8001008:	4b1e      	ldr	r3, [pc, #120]	; (8001084 <SystemClock_Config+0xd0>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001010:	607b      	str	r3, [r7, #4]
 8001012:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001014:	2301      	movs	r3, #1
 8001016:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001018:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800101c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800101e:	2302      	movs	r3, #2
 8001020:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001022:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001026:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001028:	2319      	movs	r3, #25
 800102a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 128;
 800102c:	2380      	movs	r3, #128	; 0x80
 800102e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001030:	2302      	movs	r3, #2
 8001032:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001034:	2304      	movs	r3, #4
 8001036:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001038:	f107 0320 	add.w	r3, r7, #32
 800103c:	4618      	mov	r0, r3
 800103e:	f001 fad5 	bl	80025ec <HAL_RCC_OscConfig>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001048:	f000 f930 	bl	80012ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800104c:	230f      	movs	r3, #15
 800104e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001050:	2302      	movs	r3, #2
 8001052:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 8001054:	2390      	movs	r3, #144	; 0x90
 8001056:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001058:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800105c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800105e:	2300      	movs	r3, #0
 8001060:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001062:	f107 030c 	add.w	r3, r7, #12
 8001066:	2100      	movs	r1, #0
 8001068:	4618      	mov	r0, r3
 800106a:	f001 fd37 	bl	8002adc <HAL_RCC_ClockConfig>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001074:	f000 f91a 	bl	80012ac <Error_Handler>
  }
}
 8001078:	bf00      	nop
 800107a:	3750      	adds	r7, #80	; 0x50
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40023800 	.word	0x40023800
 8001084:	40007000 	.word	0x40007000

08001088 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800108c:	4b11      	ldr	r3, [pc, #68]	; (80010d4 <MX_USART1_UART_Init+0x4c>)
 800108e:	4a12      	ldr	r2, [pc, #72]	; (80010d8 <MX_USART1_UART_Init+0x50>)
 8001090:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001092:	4b10      	ldr	r3, [pc, #64]	; (80010d4 <MX_USART1_UART_Init+0x4c>)
 8001094:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001098:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800109a:	4b0e      	ldr	r3, [pc, #56]	; (80010d4 <MX_USART1_UART_Init+0x4c>)
 800109c:	2200      	movs	r2, #0
 800109e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010a0:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <MX_USART1_UART_Init+0x4c>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010a6:	4b0b      	ldr	r3, [pc, #44]	; (80010d4 <MX_USART1_UART_Init+0x4c>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010ac:	4b09      	ldr	r3, [pc, #36]	; (80010d4 <MX_USART1_UART_Init+0x4c>)
 80010ae:	220c      	movs	r2, #12
 80010b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010b2:	4b08      	ldr	r3, [pc, #32]	; (80010d4 <MX_USART1_UART_Init+0x4c>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010b8:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <MX_USART1_UART_Init+0x4c>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010be:	4805      	ldr	r0, [pc, #20]	; (80010d4 <MX_USART1_UART_Init+0x4c>)
 80010c0:	f002 f98e 	bl	80033e0 <HAL_UART_Init>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80010ca:	f000 f8ef 	bl	80012ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20004f04 	.word	0x20004f04
 80010d8:	40011000 	.word	0x40011000

080010dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	607b      	str	r3, [r7, #4]
 80010e6:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <MX_DMA_Init+0x3c>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	4a0b      	ldr	r2, [pc, #44]	; (8001118 <MX_DMA_Init+0x3c>)
 80010ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010f0:	6313      	str	r3, [r2, #48]	; 0x30
 80010f2:	4b09      	ldr	r3, [pc, #36]	; (8001118 <MX_DMA_Init+0x3c>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010fa:	607b      	str	r3, [r7, #4]
 80010fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 80010fe:	2200      	movs	r2, #0
 8001100:	2100      	movs	r1, #0
 8001102:	2044      	movs	r0, #68	; 0x44
 8001104:	f000 fc90 	bl	8001a28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8001108:	2044      	movs	r0, #68	; 0x44
 800110a:	f000 fca9 	bl	8001a60 <HAL_NVIC_EnableIRQ>

}
 800110e:	bf00      	nop
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40023800 	.word	0x40023800

0800111c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b08a      	sub	sp, #40	; 0x28
 8001120:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001122:	f107 0314 	add.w	r3, r7, #20
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	605a      	str	r2, [r3, #4]
 800112c:	609a      	str	r2, [r3, #8]
 800112e:	60da      	str	r2, [r3, #12]
 8001130:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	613b      	str	r3, [r7, #16]
 8001136:	4b2d      	ldr	r3, [pc, #180]	; (80011ec <MX_GPIO_Init+0xd0>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	4a2c      	ldr	r2, [pc, #176]	; (80011ec <MX_GPIO_Init+0xd0>)
 800113c:	f043 0304 	orr.w	r3, r3, #4
 8001140:	6313      	str	r3, [r2, #48]	; 0x30
 8001142:	4b2a      	ldr	r3, [pc, #168]	; (80011ec <MX_GPIO_Init+0xd0>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	f003 0304 	and.w	r3, r3, #4
 800114a:	613b      	str	r3, [r7, #16]
 800114c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	60fb      	str	r3, [r7, #12]
 8001152:	4b26      	ldr	r3, [pc, #152]	; (80011ec <MX_GPIO_Init+0xd0>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	4a25      	ldr	r2, [pc, #148]	; (80011ec <MX_GPIO_Init+0xd0>)
 8001158:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800115c:	6313      	str	r3, [r2, #48]	; 0x30
 800115e:	4b23      	ldr	r3, [pc, #140]	; (80011ec <MX_GPIO_Init+0xd0>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	60bb      	str	r3, [r7, #8]
 800116e:	4b1f      	ldr	r3, [pc, #124]	; (80011ec <MX_GPIO_Init+0xd0>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	4a1e      	ldr	r2, [pc, #120]	; (80011ec <MX_GPIO_Init+0xd0>)
 8001174:	f043 0301 	orr.w	r3, r3, #1
 8001178:	6313      	str	r3, [r2, #48]	; 0x30
 800117a:	4b1c      	ldr	r3, [pc, #112]	; (80011ec <MX_GPIO_Init+0xd0>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	f003 0301 	and.w	r3, r3, #1
 8001182:	60bb      	str	r3, [r7, #8]
 8001184:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001186:	2300      	movs	r3, #0
 8001188:	607b      	str	r3, [r7, #4]
 800118a:	4b18      	ldr	r3, [pc, #96]	; (80011ec <MX_GPIO_Init+0xd0>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	4a17      	ldr	r2, [pc, #92]	; (80011ec <MX_GPIO_Init+0xd0>)
 8001190:	f043 0302 	orr.w	r3, r3, #2
 8001194:	6313      	str	r3, [r2, #48]	; 0x30
 8001196:	4b15      	ldr	r3, [pc, #84]	; (80011ec <MX_GPIO_Init+0xd0>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	f003 0302 	and.w	r3, r3, #2
 800119e:	607b      	str	r3, [r7, #4]
 80011a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80011a2:	2201      	movs	r2, #1
 80011a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011a8:	4811      	ldr	r0, [pc, #68]	; (80011f0 <MX_GPIO_Init+0xd4>)
 80011aa:	f001 fa05 	bl	80025b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80011ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b4:	2301      	movs	r3, #1
 80011b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011bc:	2300      	movs	r3, #0
 80011be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011c0:	f107 0314 	add.w	r3, r7, #20
 80011c4:	4619      	mov	r1, r3
 80011c6:	480a      	ldr	r0, [pc, #40]	; (80011f0 <MX_GPIO_Init+0xd4>)
 80011c8:	f001 f85a 	bl	8002280 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011cc:	2301      	movs	r3, #1
 80011ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011d0:	2300      	movs	r3, #0
 80011d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011d4:	2301      	movs	r3, #1
 80011d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d8:	f107 0314 	add.w	r3, r7, #20
 80011dc:	4619      	mov	r1, r3
 80011de:	4805      	ldr	r0, [pc, #20]	; (80011f4 <MX_GPIO_Init+0xd8>)
 80011e0:	f001 f84e 	bl	8002280 <HAL_GPIO_Init>

}
 80011e4:	bf00      	nop
 80011e6:	3728      	adds	r7, #40	; 0x28
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	40023800 	.word	0x40023800
 80011f0:	40020800 	.word	0x40020800
 80011f4:	40020000 	.word	0x40020000

080011f8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)==GPIO_PIN_RESET)
 8001200:	2101      	movs	r1, #1
 8001202:	4807      	ldr	r0, [pc, #28]	; (8001220 <StartDefaultTask+0x28>)
 8001204:	f001 f9c0 	bl	8002588 <HAL_GPIO_ReadPin>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d104      	bne.n	8001218 <StartDefaultTask+0x20>
	  	  {
	  		  osSemaphoreRelease(BigMac);
 800120e:	4b05      	ldr	r3, [pc, #20]	; (8001224 <StartDefaultTask+0x2c>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4618      	mov	r0, r3
 8001214:	f003 fac0 	bl	8004798 <osSemaphoreRelease>

	  	  }
	  	  osDelay(200);
 8001218:	20c8      	movs	r0, #200	; 0xc8
 800121a:	f003 f9c7 	bl	80045ac <osDelay>
	  if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)==GPIO_PIN_RESET)
 800121e:	e7ef      	b.n	8001200 <StartDefaultTask+0x8>
 8001220:	40020000 	.word	0x40020000
 8001224:	20004d98 	.word	0x20004d98

08001228 <Start_ledBlynk>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_ledBlynk */
void Start_ledBlynk(void *argument)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_ledBlynk */
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire( BigMac, portMAX_DELAY);
 8001230:	4b12      	ldr	r3, [pc, #72]	; (800127c <Start_ledBlynk+0x54>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f04f 31ff 	mov.w	r1, #4294967295
 8001238:	4618      	mov	r0, r3
 800123a:	f003 fa5b 	bl	80046f4 <osSemaphoreAcquire>
	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,GPIO_PIN_RESET);
 800123e:	2200      	movs	r2, #0
 8001240:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001244:	480e      	ldr	r0, [pc, #56]	; (8001280 <Start_ledBlynk+0x58>)
 8001246:	f001 f9b7 	bl	80025b8 <HAL_GPIO_WritePin>
	  osDelay(500);
 800124a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800124e:	f003 f9ad 	bl	80045ac <osDelay>
	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,GPIO_PIN_SET);
 8001252:	2201      	movs	r2, #1
 8001254:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001258:	4809      	ldr	r0, [pc, #36]	; (8001280 <Start_ledBlynk+0x58>)
 800125a:	f001 f9ad 	bl	80025b8 <HAL_GPIO_WritePin>
	  printf("BigMac Count = %d\n", (int)osSemaphoreGetCount(BigMac));
 800125e:	4b07      	ldr	r3, [pc, #28]	; (800127c <Start_ledBlynk+0x54>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4618      	mov	r0, r3
 8001264:	f003 fadc 	bl	8004820 <osSemaphoreGetCount>
 8001268:	4603      	mov	r3, r0
 800126a:	4619      	mov	r1, r3
 800126c:	4805      	ldr	r0, [pc, #20]	; (8001284 <Start_ledBlynk+0x5c>)
 800126e:	f007 f857 	bl	8008320 <iprintf>
	  osDelay(500);
 8001272:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001276:	f003 f999 	bl	80045ac <osDelay>
	  osSemaphoreAcquire( BigMac, portMAX_DELAY);
 800127a:	e7d9      	b.n	8001230 <Start_ledBlynk+0x8>
 800127c:	20004d98 	.word	0x20004d98
 8001280:	40020800 	.word	0x40020800
 8001284:	0800a534 	.word	0x0800a534

08001288 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a04      	ldr	r2, [pc, #16]	; (80012a8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d101      	bne.n	800129e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800129a:	f000 faed 	bl	8001878 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800129e:	bf00      	nop
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	40014400 	.word	0x40014400

080012ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012b0:	b672      	cpsid	i
}
 80012b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012b4:	e7fe      	b.n	80012b4 <Error_Handler+0x8>
	...

080012b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	607b      	str	r3, [r7, #4]
 80012c2:	4b12      	ldr	r3, [pc, #72]	; (800130c <HAL_MspInit+0x54>)
 80012c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c6:	4a11      	ldr	r2, [pc, #68]	; (800130c <HAL_MspInit+0x54>)
 80012c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012cc:	6453      	str	r3, [r2, #68]	; 0x44
 80012ce:	4b0f      	ldr	r3, [pc, #60]	; (800130c <HAL_MspInit+0x54>)
 80012d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012d6:	607b      	str	r3, [r7, #4]
 80012d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	603b      	str	r3, [r7, #0]
 80012de:	4b0b      	ldr	r3, [pc, #44]	; (800130c <HAL_MspInit+0x54>)
 80012e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e2:	4a0a      	ldr	r2, [pc, #40]	; (800130c <HAL_MspInit+0x54>)
 80012e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012e8:	6413      	str	r3, [r2, #64]	; 0x40
 80012ea:	4b08      	ldr	r3, [pc, #32]	; (800130c <HAL_MspInit+0x54>)
 80012ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012f2:	603b      	str	r3, [r7, #0]
 80012f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80012f6:	2200      	movs	r2, #0
 80012f8:	210f      	movs	r1, #15
 80012fa:	f06f 0001 	mvn.w	r0, #1
 80012fe:	f000 fb93 	bl	8001a28 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001302:	bf00      	nop
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40023800 	.word	0x40023800

08001310 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b08a      	sub	sp, #40	; 0x28
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001318:	f107 0314 	add.w	r3, r7, #20
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
 8001322:	609a      	str	r2, [r3, #8]
 8001324:	60da      	str	r2, [r3, #12]
 8001326:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a34      	ldr	r2, [pc, #208]	; (8001400 <HAL_UART_MspInit+0xf0>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d162      	bne.n	80013f8 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	613b      	str	r3, [r7, #16]
 8001336:	4b33      	ldr	r3, [pc, #204]	; (8001404 <HAL_UART_MspInit+0xf4>)
 8001338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133a:	4a32      	ldr	r2, [pc, #200]	; (8001404 <HAL_UART_MspInit+0xf4>)
 800133c:	f043 0310 	orr.w	r3, r3, #16
 8001340:	6453      	str	r3, [r2, #68]	; 0x44
 8001342:	4b30      	ldr	r3, [pc, #192]	; (8001404 <HAL_UART_MspInit+0xf4>)
 8001344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001346:	f003 0310 	and.w	r3, r3, #16
 800134a:	613b      	str	r3, [r7, #16]
 800134c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	60fb      	str	r3, [r7, #12]
 8001352:	4b2c      	ldr	r3, [pc, #176]	; (8001404 <HAL_UART_MspInit+0xf4>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	4a2b      	ldr	r2, [pc, #172]	; (8001404 <HAL_UART_MspInit+0xf4>)
 8001358:	f043 0301 	orr.w	r3, r3, #1
 800135c:	6313      	str	r3, [r2, #48]	; 0x30
 800135e:	4b29      	ldr	r3, [pc, #164]	; (8001404 <HAL_UART_MspInit+0xf4>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	60fb      	str	r3, [r7, #12]
 8001368:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800136a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800136e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001370:	2302      	movs	r3, #2
 8001372:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001378:	2303      	movs	r3, #3
 800137a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800137c:	2307      	movs	r3, #7
 800137e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001380:	f107 0314 	add.w	r3, r7, #20
 8001384:	4619      	mov	r1, r3
 8001386:	4820      	ldr	r0, [pc, #128]	; (8001408 <HAL_UART_MspInit+0xf8>)
 8001388:	f000 ff7a 	bl	8002280 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream5;
 800138c:	4b1f      	ldr	r3, [pc, #124]	; (800140c <HAL_UART_MspInit+0xfc>)
 800138e:	4a20      	ldr	r2, [pc, #128]	; (8001410 <HAL_UART_MspInit+0x100>)
 8001390:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001392:	4b1e      	ldr	r3, [pc, #120]	; (800140c <HAL_UART_MspInit+0xfc>)
 8001394:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001398:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800139a:	4b1c      	ldr	r3, [pc, #112]	; (800140c <HAL_UART_MspInit+0xfc>)
 800139c:	2200      	movs	r2, #0
 800139e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013a0:	4b1a      	ldr	r3, [pc, #104]	; (800140c <HAL_UART_MspInit+0xfc>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80013a6:	4b19      	ldr	r3, [pc, #100]	; (800140c <HAL_UART_MspInit+0xfc>)
 80013a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013ac:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013ae:	4b17      	ldr	r3, [pc, #92]	; (800140c <HAL_UART_MspInit+0xfc>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013b4:	4b15      	ldr	r3, [pc, #84]	; (800140c <HAL_UART_MspInit+0xfc>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80013ba:	4b14      	ldr	r3, [pc, #80]	; (800140c <HAL_UART_MspInit+0xfc>)
 80013bc:	2200      	movs	r2, #0
 80013be:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80013c0:	4b12      	ldr	r3, [pc, #72]	; (800140c <HAL_UART_MspInit+0xfc>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013c6:	4b11      	ldr	r3, [pc, #68]	; (800140c <HAL_UART_MspInit+0xfc>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80013cc:	480f      	ldr	r0, [pc, #60]	; (800140c <HAL_UART_MspInit+0xfc>)
 80013ce:	f000 fb55 	bl	8001a7c <HAL_DMA_Init>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80013d8:	f7ff ff68 	bl	80012ac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	4a0b      	ldr	r2, [pc, #44]	; (800140c <HAL_UART_MspInit+0xfc>)
 80013e0:	639a      	str	r2, [r3, #56]	; 0x38
 80013e2:	4a0a      	ldr	r2, [pc, #40]	; (800140c <HAL_UART_MspInit+0xfc>)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80013e8:	2200      	movs	r2, #0
 80013ea:	2105      	movs	r1, #5
 80013ec:	2025      	movs	r0, #37	; 0x25
 80013ee:	f000 fb1b 	bl	8001a28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80013f2:	2025      	movs	r0, #37	; 0x25
 80013f4:	f000 fb34 	bl	8001a60 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80013f8:	bf00      	nop
 80013fa:	3728      	adds	r7, #40	; 0x28
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40011000 	.word	0x40011000
 8001404:	40023800 	.word	0x40023800
 8001408:	40020000 	.word	0x40020000
 800140c:	20004ea4 	.word	0x20004ea4
 8001410:	40026488 	.word	0x40026488

08001414 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b08c      	sub	sp, #48	; 0x30
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800141c:	2300      	movs	r3, #0
 800141e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001420:	2300      	movs	r3, #0
 8001422:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM10 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001424:	2200      	movs	r2, #0
 8001426:	6879      	ldr	r1, [r7, #4]
 8001428:	2019      	movs	r0, #25
 800142a:	f000 fafd 	bl	8001a28 <HAL_NVIC_SetPriority>

  /* Enable the TIM10 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800142e:	2019      	movs	r0, #25
 8001430:	f000 fb16 	bl	8001a60 <HAL_NVIC_EnableIRQ>
  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8001434:	2300      	movs	r3, #0
 8001436:	60fb      	str	r3, [r7, #12]
 8001438:	4b1e      	ldr	r3, [pc, #120]	; (80014b4 <HAL_InitTick+0xa0>)
 800143a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143c:	4a1d      	ldr	r2, [pc, #116]	; (80014b4 <HAL_InitTick+0xa0>)
 800143e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001442:	6453      	str	r3, [r2, #68]	; 0x44
 8001444:	4b1b      	ldr	r3, [pc, #108]	; (80014b4 <HAL_InitTick+0xa0>)
 8001446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001448:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144c:	60fb      	str	r3, [r7, #12]
 800144e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001450:	f107 0210 	add.w	r2, r7, #16
 8001454:	f107 0314 	add.w	r3, r7, #20
 8001458:	4611      	mov	r1, r2
 800145a:	4618      	mov	r0, r3
 800145c:	f001 fd0e 	bl	8002e7c <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001460:	f001 fcf8 	bl	8002e54 <HAL_RCC_GetPCLK2Freq>
 8001464:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001468:	4a13      	ldr	r2, [pc, #76]	; (80014b8 <HAL_InitTick+0xa4>)
 800146a:	fba2 2303 	umull	r2, r3, r2, r3
 800146e:	0c9b      	lsrs	r3, r3, #18
 8001470:	3b01      	subs	r3, #1
 8001472:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8001474:	4b11      	ldr	r3, [pc, #68]	; (80014bc <HAL_InitTick+0xa8>)
 8001476:	4a12      	ldr	r2, [pc, #72]	; (80014c0 <HAL_InitTick+0xac>)
 8001478:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 800147a:	4b10      	ldr	r3, [pc, #64]	; (80014bc <HAL_InitTick+0xa8>)
 800147c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001480:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8001482:	4a0e      	ldr	r2, [pc, #56]	; (80014bc <HAL_InitTick+0xa8>)
 8001484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001486:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8001488:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <HAL_InitTick+0xa8>)
 800148a:	2200      	movs	r2, #0
 800148c:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800148e:	4b0b      	ldr	r3, [pc, #44]	; (80014bc <HAL_InitTick+0xa8>)
 8001490:	2200      	movs	r2, #0
 8001492:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim10) == HAL_OK)
 8001494:	4809      	ldr	r0, [pc, #36]	; (80014bc <HAL_InitTick+0xa8>)
 8001496:	f001 fd23 	bl	8002ee0 <HAL_TIM_Base_Init>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d104      	bne.n	80014aa <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim10);
 80014a0:	4806      	ldr	r0, [pc, #24]	; (80014bc <HAL_InitTick+0xa8>)
 80014a2:	f001 fd77 	bl	8002f94 <HAL_TIM_Base_Start_IT>
 80014a6:	4603      	mov	r3, r0
 80014a8:	e000      	b.n	80014ac <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3730      	adds	r7, #48	; 0x30
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	40023800 	.word	0x40023800
 80014b8:	431bde83 	.word	0x431bde83
 80014bc:	20004f48 	.word	0x20004f48
 80014c0:	40014400 	.word	0x40014400

080014c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014c8:	e7fe      	b.n	80014c8 <NMI_Handler+0x4>

080014ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ca:	b480      	push	{r7}
 80014cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ce:	e7fe      	b.n	80014ce <HardFault_Handler+0x4>

080014d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014d4:	e7fe      	b.n	80014d4 <MemManage_Handler+0x4>

080014d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014d6:	b480      	push	{r7}
 80014d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014da:	e7fe      	b.n	80014da <BusFault_Handler+0x4>

080014dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014e0:	e7fe      	b.n	80014e0 <UsageFault_Handler+0x4>

080014e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014e2:	b480      	push	{r7}
 80014e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014e6:	bf00      	nop
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80014f4:	4802      	ldr	r0, [pc, #8]	; (8001500 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80014f6:	f001 fdaf 	bl	8003058 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80014fa:	bf00      	nop
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	20004f48 	.word	0x20004f48

08001504 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001508:	4803      	ldr	r0, [pc, #12]	; (8001518 <USART1_IRQHandler+0x14>)
 800150a:	f002 f8d3 	bl	80036b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  USER_UART_IRQHandler(&huart1);
 800150e:	4802      	ldr	r0, [pc, #8]	; (8001518 <USART1_IRQHandler+0x14>)
 8001510:	f000 f8ea 	bl	80016e8 <USER_UART_IRQHandler>
  /* USER CODE END USART1_IRQn 1 */
}
 8001514:	bf00      	nop
 8001516:	bd80      	pop	{r7, pc}
 8001518:	20004f04 	.word	0x20004f04

0800151c <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001520:	4802      	ldr	r0, [pc, #8]	; (800152c <DMA2_Stream5_IRQHandler+0x10>)
 8001522:	f000 fc43 	bl	8001dac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	20004ea4 	.word	0x20004ea4

08001530 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
	return 1;
 8001534:	2301      	movs	r3, #1
}
 8001536:	4618      	mov	r0, r3
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <_kill>:

int _kill(int pid, int sig)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800154a:	f006 fa3f 	bl	80079cc <__errno>
 800154e:	4603      	mov	r3, r0
 8001550:	2216      	movs	r2, #22
 8001552:	601a      	str	r2, [r3, #0]
	return -1;
 8001554:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001558:	4618      	mov	r0, r3
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}

08001560 <_exit>:

void _exit (int status)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001568:	f04f 31ff 	mov.w	r1, #4294967295
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f7ff ffe7 	bl	8001540 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001572:	e7fe      	b.n	8001572 <_exit+0x12>

08001574 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b086      	sub	sp, #24
 8001578:	af00      	add	r7, sp, #0
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	60b9      	str	r1, [r7, #8]
 800157e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001580:	2300      	movs	r3, #0
 8001582:	617b      	str	r3, [r7, #20]
 8001584:	e00a      	b.n	800159c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001586:	f3af 8000 	nop.w
 800158a:	4601      	mov	r1, r0
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	1c5a      	adds	r2, r3, #1
 8001590:	60ba      	str	r2, [r7, #8]
 8001592:	b2ca      	uxtb	r2, r1
 8001594:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	3301      	adds	r3, #1
 800159a:	617b      	str	r3, [r7, #20]
 800159c:	697a      	ldr	r2, [r7, #20]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	dbf0      	blt.n	8001586 <_read+0x12>
	}

return len;
 80015a4:	687b      	ldr	r3, [r7, #4]
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3718      	adds	r7, #24
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b086      	sub	sp, #24
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	60f8      	str	r0, [r7, #12]
 80015b6:	60b9      	str	r1, [r7, #8]
 80015b8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ba:	2300      	movs	r3, #0
 80015bc:	617b      	str	r3, [r7, #20]
 80015be:	e009      	b.n	80015d4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	1c5a      	adds	r2, r3, #1
 80015c4:	60ba      	str	r2, [r7, #8]
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff fc98 	bl	8000efe <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	3301      	adds	r3, #1
 80015d2:	617b      	str	r3, [r7, #20]
 80015d4:	697a      	ldr	r2, [r7, #20]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	429a      	cmp	r2, r3
 80015da:	dbf1      	blt.n	80015c0 <_write+0x12>

	}
	return len;
 80015dc:	687b      	ldr	r3, [r7, #4]
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3718      	adds	r7, #24
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <_close>:

int _close(int file)
{
 80015e6:	b480      	push	{r7}
 80015e8:	b083      	sub	sp, #12
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
	return -1;
 80015ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr

080015fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015fe:	b480      	push	{r7}
 8001600:	b083      	sub	sp, #12
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
 8001606:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800160e:	605a      	str	r2, [r3, #4]
	return 0;
 8001610:	2300      	movs	r3, #0
}
 8001612:	4618      	mov	r0, r3
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr

0800161e <_isatty>:

int _isatty(int file)
{
 800161e:	b480      	push	{r7}
 8001620:	b083      	sub	sp, #12
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
	return 1;
 8001626:	2301      	movs	r3, #1
}
 8001628:	4618      	mov	r0, r3
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001634:	b480      	push	{r7}
 8001636:	b085      	sub	sp, #20
 8001638:	af00      	add	r7, sp, #0
 800163a:	60f8      	str	r0, [r7, #12]
 800163c:	60b9      	str	r1, [r7, #8]
 800163e:	607a      	str	r2, [r7, #4]
	return 0;
 8001640:	2300      	movs	r3, #0
}
 8001642:	4618      	mov	r0, r3
 8001644:	3714      	adds	r7, #20
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
	...

08001650 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b086      	sub	sp, #24
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001658:	4a14      	ldr	r2, [pc, #80]	; (80016ac <_sbrk+0x5c>)
 800165a:	4b15      	ldr	r3, [pc, #84]	; (80016b0 <_sbrk+0x60>)
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001664:	4b13      	ldr	r3, [pc, #76]	; (80016b4 <_sbrk+0x64>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d102      	bne.n	8001672 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800166c:	4b11      	ldr	r3, [pc, #68]	; (80016b4 <_sbrk+0x64>)
 800166e:	4a12      	ldr	r2, [pc, #72]	; (80016b8 <_sbrk+0x68>)
 8001670:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001672:	4b10      	ldr	r3, [pc, #64]	; (80016b4 <_sbrk+0x64>)
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4413      	add	r3, r2
 800167a:	693a      	ldr	r2, [r7, #16]
 800167c:	429a      	cmp	r2, r3
 800167e:	d207      	bcs.n	8001690 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001680:	f006 f9a4 	bl	80079cc <__errno>
 8001684:	4603      	mov	r3, r0
 8001686:	220c      	movs	r2, #12
 8001688:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800168a:	f04f 33ff 	mov.w	r3, #4294967295
 800168e:	e009      	b.n	80016a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001690:	4b08      	ldr	r3, [pc, #32]	; (80016b4 <_sbrk+0x64>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001696:	4b07      	ldr	r3, [pc, #28]	; (80016b4 <_sbrk+0x64>)
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4413      	add	r3, r2
 800169e:	4a05      	ldr	r2, [pc, #20]	; (80016b4 <_sbrk+0x64>)
 80016a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016a2:	68fb      	ldr	r3, [r7, #12]
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3718      	adds	r7, #24
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	20010000 	.word	0x20010000
 80016b0:	00000400 	.word	0x00000400
 80016b4:	200001fc 	.word	0x200001fc
 80016b8:	20004fe8 	.word	0x20004fe8

080016bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016c0:	4b08      	ldr	r3, [pc, #32]	; (80016e4 <SystemInit+0x28>)
 80016c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016c6:	4a07      	ldr	r2, [pc, #28]	; (80016e4 <SystemInit+0x28>)
 80016c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80016d0:	4b04      	ldr	r3, [pc, #16]	; (80016e4 <SystemInit+0x28>)
 80016d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016d6:	609a      	str	r2, [r3, #8]
#endif
}
 80016d8:	bf00      	nop
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	e000ed00 	.word	0xe000ed00

080016e8 <USER_UART_IRQHandler>:
extern uint8_t receive_buff[BUFFER_SIZE];
extern DMA_HandleTypeDef hdma_usart1_rx;
extern UART_HandleTypeDef huart1;

void USER_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
    if(USART1 == huart1.Instance)                                   //Determine whether it is serial port 1
 80016f0:	4b10      	ldr	r3, [pc, #64]	; (8001734 <USER_UART_IRQHandler+0x4c>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a10      	ldr	r2, [pc, #64]	; (8001738 <USER_UART_IRQHandler+0x50>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d117      	bne.n	800172a <USER_UART_IRQHandler+0x42>
    {
        if(RESET != __HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE))   //Judging whether it is idle interruption
 80016fa:	4b0e      	ldr	r3, [pc, #56]	; (8001734 <USER_UART_IRQHandler+0x4c>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0310 	and.w	r3, r3, #16
 8001704:	2b10      	cmp	r3, #16
 8001706:	d110      	bne.n	800172a <USER_UART_IRQHandler+0x42>
        {
            __HAL_UART_CLEAR_IDLEFLAG(&huart1);                     //Clear idle interrupt sign (otherwise it will continue to enter interrupt)
 8001708:	2300      	movs	r3, #0
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	4b09      	ldr	r3, [pc, #36]	; (8001734 <USER_UART_IRQHandler+0x4c>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	60fb      	str	r3, [r7, #12]
 8001714:	4b07      	ldr	r3, [pc, #28]	; (8001734 <USER_UART_IRQHandler+0x4c>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	68fb      	ldr	r3, [r7, #12]
            printf("\r\nUART1 Idle IQR Detected\r\n");
 800171e:	4807      	ldr	r0, [pc, #28]	; (800173c <USER_UART_IRQHandler+0x54>)
 8001720:	f006 fe84 	bl	800842c <puts>
            USAR_UART_IDLECallback(huart);                          //Call interrupt handler
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f000 f80b 	bl	8001740 <USAR_UART_IDLECallback>
        }
    }
}
 800172a:	bf00      	nop
 800172c:	3710      	adds	r7, #16
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	20004f04 	.word	0x20004f04
 8001738:	40011000 	.word	0x40011000
 800173c:	0800a548 	.word	0x0800a548

08001740 <USAR_UART_IDLECallback>:


void USAR_UART_IDLECallback(UART_HandleTypeDef *huart)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
	//Stop this DMA transmission
    HAL_UART_DMAStop(&huart1);
 8001748:	481f      	ldr	r0, [pc, #124]	; (80017c8 <USAR_UART_IDLECallback+0x88>)
 800174a:	f001 ff58 	bl	80035fe <HAL_UART_DMAStop>

    //Calculate the length of the received data
    uint8_t data_length  = BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart1_rx);
 800174e:	4b1f      	ldr	r3, [pc, #124]	; (80017cc <USAR_UART_IDLECallback+0x8c>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	b2db      	uxtb	r3, r3
 8001756:	43db      	mvns	r3, r3
 8001758:	72fb      	strb	r3, [r7, #11]

	//Test function: Print out the received data
    printf("Receive Data(length = %d): ",data_length);
 800175a:	7afb      	ldrb	r3, [r7, #11]
 800175c:	4619      	mov	r1, r3
 800175e:	481c      	ldr	r0, [pc, #112]	; (80017d0 <USAR_UART_IDLECallback+0x90>)
 8001760:	f006 fdde 	bl	8008320 <iprintf>
    HAL_UART_Transmit(&huart1,receive_buff,data_length,0x200);
 8001764:	7afb      	ldrb	r3, [r7, #11]
 8001766:	b29a      	uxth	r2, r3
 8001768:	f44f 7300 	mov.w	r3, #512	; 0x200
 800176c:	4919      	ldr	r1, [pc, #100]	; (80017d4 <USAR_UART_IDLECallback+0x94>)
 800176e:	4816      	ldr	r0, [pc, #88]	; (80017c8 <USAR_UART_IDLECallback+0x88>)
 8001770:	f001 fe83 	bl	800347a <HAL_UART_Transmit>
    printf("\r\n");
 8001774:	4818      	ldr	r0, [pc, #96]	; (80017d8 <USAR_UART_IDLECallback+0x98>)
 8001776:	f006 fe59 	bl	800842c <puts>
    for(int i = 0; i < data_length; ++i)
 800177a:	2300      	movs	r3, #0
 800177c:	60fb      	str	r3, [r7, #12]
 800177e:	e00a      	b.n	8001796 <USAR_UART_IDLECallback+0x56>
    {
    	printf("%2X ", receive_buff[i]);
 8001780:	4a14      	ldr	r2, [pc, #80]	; (80017d4 <USAR_UART_IDLECallback+0x94>)
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	4413      	add	r3, r2
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	4619      	mov	r1, r3
 800178a:	4814      	ldr	r0, [pc, #80]	; (80017dc <USAR_UART_IDLECallback+0x9c>)
 800178c:	f006 fdc8 	bl	8008320 <iprintf>
    for(int i = 0; i < data_length; ++i)
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	3301      	adds	r3, #1
 8001794:	60fb      	str	r3, [r7, #12]
 8001796:	7afb      	ldrb	r3, [r7, #11]
 8001798:	68fa      	ldr	r2, [r7, #12]
 800179a:	429a      	cmp	r2, r3
 800179c:	dbf0      	blt.n	8001780 <USAR_UART_IDLECallback+0x40>
    }

    printf("\r\n");
 800179e:	480e      	ldr	r0, [pc, #56]	; (80017d8 <USAR_UART_IDLECallback+0x98>)
 80017a0:	f006 fe44 	bl	800842c <puts>
	//Zero Receiving Buffer
    memset(receive_buff,0,data_length);
 80017a4:	7afb      	ldrb	r3, [r7, #11]
 80017a6:	461a      	mov	r2, r3
 80017a8:	2100      	movs	r1, #0
 80017aa:	480a      	ldr	r0, [pc, #40]	; (80017d4 <USAR_UART_IDLECallback+0x94>)
 80017ac:	f006 f946 	bl	8007a3c <memset>
    data_length = 0;
 80017b0:	2300      	movs	r3, #0
 80017b2:	72fb      	strb	r3, [r7, #11]

    //Restart to start DMA transmission of 255 bytes of data at a time
    HAL_UART_Receive_DMA(&huart1, (uint8_t*)receive_buff, 255);
 80017b4:	22ff      	movs	r2, #255	; 0xff
 80017b6:	4907      	ldr	r1, [pc, #28]	; (80017d4 <USAR_UART_IDLECallback+0x94>)
 80017b8:	4803      	ldr	r0, [pc, #12]	; (80017c8 <USAR_UART_IDLECallback+0x88>)
 80017ba:	f001 fef0 	bl	800359e <HAL_UART_Receive_DMA>
}
 80017be:	bf00      	nop
 80017c0:	3710      	adds	r7, #16
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	20004f04 	.word	0x20004f04
 80017cc:	20004ea4 	.word	0x20004ea4
 80017d0:	0800a564 	.word	0x0800a564
 80017d4:	20004da4 	.word	0x20004da4
 80017d8:	0800a580 	.word	0x0800a580
 80017dc:	0800a584 	.word	0x0800a584

080017e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80017e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001818 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80017e4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80017e6:	e003      	b.n	80017f0 <LoopCopyDataInit>

080017e8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80017e8:	4b0c      	ldr	r3, [pc, #48]	; (800181c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80017ea:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80017ec:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80017ee:	3104      	adds	r1, #4

080017f0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80017f0:	480b      	ldr	r0, [pc, #44]	; (8001820 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80017f2:	4b0c      	ldr	r3, [pc, #48]	; (8001824 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80017f4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80017f6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80017f8:	d3f6      	bcc.n	80017e8 <CopyDataInit>
  ldr  r2, =_sbss
 80017fa:	4a0b      	ldr	r2, [pc, #44]	; (8001828 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80017fc:	e002      	b.n	8001804 <LoopFillZerobss>

080017fe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80017fe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001800:	f842 3b04 	str.w	r3, [r2], #4

08001804 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001804:	4b09      	ldr	r3, [pc, #36]	; (800182c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001806:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001808:	d3f9      	bcc.n	80017fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800180a:	f7ff ff57 	bl	80016bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800180e:	f006 f8e3 	bl	80079d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001812:	f7ff fb81 	bl	8000f18 <main>
  bx  lr    
 8001816:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001818:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 800181c:	0800a9fc 	.word	0x0800a9fc
  ldr  r0, =_sdata
 8001820:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001824:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 8001828:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 800182c:	20004fe4 	.word	0x20004fe4

08001830 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001830:	e7fe      	b.n	8001830 <ADC_IRQHandler>
	...

08001834 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001838:	4b0e      	ldr	r3, [pc, #56]	; (8001874 <HAL_Init+0x40>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a0d      	ldr	r2, [pc, #52]	; (8001874 <HAL_Init+0x40>)
 800183e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001842:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001844:	4b0b      	ldr	r3, [pc, #44]	; (8001874 <HAL_Init+0x40>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a0a      	ldr	r2, [pc, #40]	; (8001874 <HAL_Init+0x40>)
 800184a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800184e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001850:	4b08      	ldr	r3, [pc, #32]	; (8001874 <HAL_Init+0x40>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a07      	ldr	r2, [pc, #28]	; (8001874 <HAL_Init+0x40>)
 8001856:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800185a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800185c:	2003      	movs	r0, #3
 800185e:	f000 f8d8 	bl	8001a12 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001862:	2000      	movs	r0, #0
 8001864:	f7ff fdd6 	bl	8001414 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001868:	f7ff fd26 	bl	80012b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	40023c00 	.word	0x40023c00

08001878 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800187c:	4b06      	ldr	r3, [pc, #24]	; (8001898 <HAL_IncTick+0x20>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	461a      	mov	r2, r3
 8001882:	4b06      	ldr	r3, [pc, #24]	; (800189c <HAL_IncTick+0x24>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4413      	add	r3, r2
 8001888:	4a04      	ldr	r2, [pc, #16]	; (800189c <HAL_IncTick+0x24>)
 800188a:	6013      	str	r3, [r2, #0]
}
 800188c:	bf00      	nop
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	20000008 	.word	0x20000008
 800189c:	20004f90 	.word	0x20004f90

080018a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  return uwTick;
 80018a4:	4b03      	ldr	r3, [pc, #12]	; (80018b4 <HAL_GetTick+0x14>)
 80018a6:	681b      	ldr	r3, [r3, #0]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	20004f90 	.word	0x20004f90

080018b8 <__NVIC_SetPriorityGrouping>:
{
 80018b8:	b480      	push	{r7}
 80018ba:	b085      	sub	sp, #20
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f003 0307 	and.w	r3, r3, #7
 80018c6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018c8:	4b0c      	ldr	r3, [pc, #48]	; (80018fc <__NVIC_SetPriorityGrouping+0x44>)
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018ce:	68ba      	ldr	r2, [r7, #8]
 80018d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018d4:	4013      	ands	r3, r2
 80018d6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018ea:	4a04      	ldr	r2, [pc, #16]	; (80018fc <__NVIC_SetPriorityGrouping+0x44>)
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	60d3      	str	r3, [r2, #12]
}
 80018f0:	bf00      	nop
 80018f2:	3714      	adds	r7, #20
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr
 80018fc:	e000ed00 	.word	0xe000ed00

08001900 <__NVIC_GetPriorityGrouping>:
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001904:	4b04      	ldr	r3, [pc, #16]	; (8001918 <__NVIC_GetPriorityGrouping+0x18>)
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	0a1b      	lsrs	r3, r3, #8
 800190a:	f003 0307 	and.w	r3, r3, #7
}
 800190e:	4618      	mov	r0, r3
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr
 8001918:	e000ed00 	.word	0xe000ed00

0800191c <__NVIC_EnableIRQ>:
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	4603      	mov	r3, r0
 8001924:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192a:	2b00      	cmp	r3, #0
 800192c:	db0b      	blt.n	8001946 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800192e:	79fb      	ldrb	r3, [r7, #7]
 8001930:	f003 021f 	and.w	r2, r3, #31
 8001934:	4907      	ldr	r1, [pc, #28]	; (8001954 <__NVIC_EnableIRQ+0x38>)
 8001936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193a:	095b      	lsrs	r3, r3, #5
 800193c:	2001      	movs	r0, #1
 800193e:	fa00 f202 	lsl.w	r2, r0, r2
 8001942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001946:	bf00      	nop
 8001948:	370c      	adds	r7, #12
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	e000e100 	.word	0xe000e100

08001958 <__NVIC_SetPriority>:
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	6039      	str	r1, [r7, #0]
 8001962:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001964:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001968:	2b00      	cmp	r3, #0
 800196a:	db0a      	blt.n	8001982 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	b2da      	uxtb	r2, r3
 8001970:	490c      	ldr	r1, [pc, #48]	; (80019a4 <__NVIC_SetPriority+0x4c>)
 8001972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001976:	0112      	lsls	r2, r2, #4
 8001978:	b2d2      	uxtb	r2, r2
 800197a:	440b      	add	r3, r1
 800197c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001980:	e00a      	b.n	8001998 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	b2da      	uxtb	r2, r3
 8001986:	4908      	ldr	r1, [pc, #32]	; (80019a8 <__NVIC_SetPriority+0x50>)
 8001988:	79fb      	ldrb	r3, [r7, #7]
 800198a:	f003 030f 	and.w	r3, r3, #15
 800198e:	3b04      	subs	r3, #4
 8001990:	0112      	lsls	r2, r2, #4
 8001992:	b2d2      	uxtb	r2, r2
 8001994:	440b      	add	r3, r1
 8001996:	761a      	strb	r2, [r3, #24]
}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	e000e100 	.word	0xe000e100
 80019a8:	e000ed00 	.word	0xe000ed00

080019ac <NVIC_EncodePriority>:
{
 80019ac:	b480      	push	{r7}
 80019ae:	b089      	sub	sp, #36	; 0x24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	60f8      	str	r0, [r7, #12]
 80019b4:	60b9      	str	r1, [r7, #8]
 80019b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f003 0307 	and.w	r3, r3, #7
 80019be:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	f1c3 0307 	rsb	r3, r3, #7
 80019c6:	2b04      	cmp	r3, #4
 80019c8:	bf28      	it	cs
 80019ca:	2304      	movcs	r3, #4
 80019cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	3304      	adds	r3, #4
 80019d2:	2b06      	cmp	r3, #6
 80019d4:	d902      	bls.n	80019dc <NVIC_EncodePriority+0x30>
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	3b03      	subs	r3, #3
 80019da:	e000      	b.n	80019de <NVIC_EncodePriority+0x32>
 80019dc:	2300      	movs	r3, #0
 80019de:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e0:	f04f 32ff 	mov.w	r2, #4294967295
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ea:	43da      	mvns	r2, r3
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	401a      	ands	r2, r3
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019f4:	f04f 31ff 	mov.w	r1, #4294967295
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	fa01 f303 	lsl.w	r3, r1, r3
 80019fe:	43d9      	mvns	r1, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a04:	4313      	orrs	r3, r2
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3724      	adds	r7, #36	; 0x24
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr

08001a12 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b082      	sub	sp, #8
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f7ff ff4c 	bl	80018b8 <__NVIC_SetPriorityGrouping>
}
 8001a20:	bf00      	nop
 8001a22:	3708      	adds	r7, #8
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	607a      	str	r2, [r7, #4]
 8001a34:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a36:	2300      	movs	r3, #0
 8001a38:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a3a:	f7ff ff61 	bl	8001900 <__NVIC_GetPriorityGrouping>
 8001a3e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	68b9      	ldr	r1, [r7, #8]
 8001a44:	6978      	ldr	r0, [r7, #20]
 8001a46:	f7ff ffb1 	bl	80019ac <NVIC_EncodePriority>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a50:	4611      	mov	r1, r2
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7ff ff80 	bl	8001958 <__NVIC_SetPriority>
}
 8001a58:	bf00      	nop
 8001a5a:	3718      	adds	r7, #24
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	4603      	mov	r3, r0
 8001a68:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7ff ff54 	bl	800191c <__NVIC_EnableIRQ>
}
 8001a74:	bf00      	nop
 8001a76:	3708      	adds	r7, #8
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b086      	sub	sp, #24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a84:	2300      	movs	r3, #0
 8001a86:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001a88:	f7ff ff0a 	bl	80018a0 <HAL_GetTick>
 8001a8c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d101      	bne.n	8001a98 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e099      	b.n	8001bcc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2202      	movs	r2, #2
 8001aa4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f022 0201 	bic.w	r2, r2, #1
 8001ab6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ab8:	e00f      	b.n	8001ada <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001aba:	f7ff fef1 	bl	80018a0 <HAL_GetTick>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	2b05      	cmp	r3, #5
 8001ac6:	d908      	bls.n	8001ada <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2220      	movs	r2, #32
 8001acc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2203      	movs	r2, #3
 8001ad2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e078      	b.n	8001bcc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0301 	and.w	r3, r3, #1
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d1e8      	bne.n	8001aba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001af0:	697a      	ldr	r2, [r7, #20]
 8001af2:	4b38      	ldr	r3, [pc, #224]	; (8001bd4 <HAL_DMA_Init+0x158>)
 8001af4:	4013      	ands	r3, r2
 8001af6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685a      	ldr	r2, [r3, #4]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b06:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	691b      	ldr	r3, [r3, #16]
 8001b0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b12:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b1e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6a1b      	ldr	r3, [r3, #32]
 8001b24:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b26:	697a      	ldr	r2, [r7, #20]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b30:	2b04      	cmp	r3, #4
 8001b32:	d107      	bne.n	8001b44 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	697a      	ldr	r2, [r7, #20]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	697a      	ldr	r2, [r7, #20]
 8001b4a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	695b      	ldr	r3, [r3, #20]
 8001b52:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	f023 0307 	bic.w	r3, r3, #7
 8001b5a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b60:	697a      	ldr	r2, [r7, #20]
 8001b62:	4313      	orrs	r3, r2
 8001b64:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6a:	2b04      	cmp	r3, #4
 8001b6c:	d117      	bne.n	8001b9e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b72:	697a      	ldr	r2, [r7, #20]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d00e      	beq.n	8001b9e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f000 fb01 	bl	8002188 <DMA_CheckFifoParam>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d008      	beq.n	8001b9e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2240      	movs	r2, #64	; 0x40
 8001b90:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2201      	movs	r2, #1
 8001b96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e016      	b.n	8001bcc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	697a      	ldr	r2, [r7, #20]
 8001ba4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f000 fab8 	bl	800211c <DMA_CalcBaseAndBitshift>
 8001bac:	4603      	mov	r3, r0
 8001bae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bb4:	223f      	movs	r2, #63	; 0x3f
 8001bb6:	409a      	lsls	r2, r3
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001bca:	2300      	movs	r3, #0
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3718      	adds	r7, #24
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	f010803f 	.word	0xf010803f

08001bd8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b086      	sub	sp, #24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	60b9      	str	r1, [r7, #8]
 8001be2:	607a      	str	r2, [r7, #4]
 8001be4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001be6:	2300      	movs	r3, #0
 8001be8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bee:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d101      	bne.n	8001bfe <HAL_DMA_Start_IT+0x26>
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	e040      	b.n	8001c80 <HAL_DMA_Start_IT+0xa8>
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2201      	movs	r2, #1
 8001c02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d12f      	bne.n	8001c72 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2202      	movs	r2, #2
 8001c16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	687a      	ldr	r2, [r7, #4]
 8001c24:	68b9      	ldr	r1, [r7, #8]
 8001c26:	68f8      	ldr	r0, [r7, #12]
 8001c28:	f000 fa4a 	bl	80020c0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c30:	223f      	movs	r2, #63	; 0x3f
 8001c32:	409a      	lsls	r2, r3
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f042 0216 	orr.w	r2, r2, #22
 8001c46:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d007      	beq.n	8001c60 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f042 0208 	orr.w	r2, r2, #8
 8001c5e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f042 0201 	orr.w	r2, r2, #1
 8001c6e:	601a      	str	r2, [r3, #0]
 8001c70:	e005      	b.n	8001c7e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2200      	movs	r2, #0
 8001c76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001c7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3718      	adds	r7, #24
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c94:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001c96:	f7ff fe03 	bl	80018a0 <HAL_GetTick>
 8001c9a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d008      	beq.n	8001cba <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2280      	movs	r2, #128	; 0x80
 8001cac:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e052      	b.n	8001d60 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f022 0216 	bic.w	r2, r2, #22
 8001cc8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	695a      	ldr	r2, [r3, #20]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001cd8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d103      	bne.n	8001cea <HAL_DMA_Abort+0x62>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d007      	beq.n	8001cfa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f022 0208 	bic.w	r2, r2, #8
 8001cf8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f022 0201 	bic.w	r2, r2, #1
 8001d08:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d0a:	e013      	b.n	8001d34 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d0c:	f7ff fdc8 	bl	80018a0 <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	2b05      	cmp	r3, #5
 8001d18:	d90c      	bls.n	8001d34 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2220      	movs	r2, #32
 8001d1e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2200      	movs	r2, #0
 8001d24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2203      	movs	r2, #3
 8001d2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001d30:	2303      	movs	r3, #3
 8001d32:	e015      	b.n	8001d60 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d1e4      	bne.n	8001d0c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d46:	223f      	movs	r2, #63	; 0x3f
 8001d48:	409a      	lsls	r2, r3
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2200      	movs	r2, #0
 8001d52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2201      	movs	r2, #1
 8001d5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8001d5e:	2300      	movs	r3, #0
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3710      	adds	r7, #16
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d004      	beq.n	8001d86 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2280      	movs	r2, #128	; 0x80
 8001d80:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e00c      	b.n	8001da0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2205      	movs	r2, #5
 8001d8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f022 0201 	bic.w	r2, r2, #1
 8001d9c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d9e:	2300      	movs	r3, #0
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b086      	sub	sp, #24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001db4:	2300      	movs	r3, #0
 8001db6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001db8:	4b92      	ldr	r3, [pc, #584]	; (8002004 <HAL_DMA_IRQHandler+0x258>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a92      	ldr	r2, [pc, #584]	; (8002008 <HAL_DMA_IRQHandler+0x25c>)
 8001dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc2:	0a9b      	lsrs	r3, r3, #10
 8001dc4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dd6:	2208      	movs	r2, #8
 8001dd8:	409a      	lsls	r2, r3
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d01a      	beq.n	8001e18 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0304 	and.w	r3, r3, #4
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d013      	beq.n	8001e18 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f022 0204 	bic.w	r2, r2, #4
 8001dfe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e04:	2208      	movs	r2, #8
 8001e06:	409a      	lsls	r2, r3
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e10:	f043 0201 	orr.w	r2, r3, #1
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	409a      	lsls	r2, r3
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	4013      	ands	r3, r2
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d012      	beq.n	8001e4e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	695b      	ldr	r3, [r3, #20]
 8001e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d00b      	beq.n	8001e4e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	409a      	lsls	r2, r3
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e46:	f043 0202 	orr.w	r2, r3, #2
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e52:	2204      	movs	r2, #4
 8001e54:	409a      	lsls	r2, r3
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	4013      	ands	r3, r2
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d012      	beq.n	8001e84 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0302 	and.w	r3, r3, #2
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d00b      	beq.n	8001e84 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e70:	2204      	movs	r2, #4
 8001e72:	409a      	lsls	r2, r3
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e7c:	f043 0204 	orr.w	r2, r3, #4
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e88:	2210      	movs	r2, #16
 8001e8a:	409a      	lsls	r2, r3
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	4013      	ands	r3, r2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d043      	beq.n	8001f1c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0308 	and.w	r3, r3, #8
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d03c      	beq.n	8001f1c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ea6:	2210      	movs	r2, #16
 8001ea8:	409a      	lsls	r2, r3
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d018      	beq.n	8001eee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d108      	bne.n	8001edc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d024      	beq.n	8001f1c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	4798      	blx	r3
 8001eda:	e01f      	b.n	8001f1c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d01b      	beq.n	8001f1c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	4798      	blx	r3
 8001eec:	e016      	b.n	8001f1c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d107      	bne.n	8001f0c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f022 0208 	bic.w	r2, r2, #8
 8001f0a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d003      	beq.n	8001f1c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f20:	2220      	movs	r2, #32
 8001f22:	409a      	lsls	r2, r3
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	4013      	ands	r3, r2
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	f000 808e 	beq.w	800204a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0310 	and.w	r3, r3, #16
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	f000 8086 	beq.w	800204a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f42:	2220      	movs	r2, #32
 8001f44:	409a      	lsls	r2, r3
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	2b05      	cmp	r3, #5
 8001f54:	d136      	bne.n	8001fc4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f022 0216 	bic.w	r2, r2, #22
 8001f64:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	695a      	ldr	r2, [r3, #20]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f74:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d103      	bne.n	8001f86 <HAL_DMA_IRQHandler+0x1da>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d007      	beq.n	8001f96 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f022 0208 	bic.w	r2, r2, #8
 8001f94:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f9a:	223f      	movs	r2, #63	; 0x3f
 8001f9c:	409a      	lsls	r2, r3
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2201      	movs	r2, #1
 8001fae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d07d      	beq.n	80020b6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	4798      	blx	r3
        }
        return;
 8001fc2:	e078      	b.n	80020b6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d01c      	beq.n	800200c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d108      	bne.n	8001ff2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d030      	beq.n	800204a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	4798      	blx	r3
 8001ff0:	e02b      	b.n	800204a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d027      	beq.n	800204a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	4798      	blx	r3
 8002002:	e022      	b.n	800204a <HAL_DMA_IRQHandler+0x29e>
 8002004:	20000000 	.word	0x20000000
 8002008:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002016:	2b00      	cmp	r3, #0
 8002018:	d10f      	bne.n	800203a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f022 0210 	bic.w	r2, r2, #16
 8002028:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2201      	movs	r2, #1
 8002036:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800203e:	2b00      	cmp	r3, #0
 8002040:	d003      	beq.n	800204a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800204e:	2b00      	cmp	r3, #0
 8002050:	d032      	beq.n	80020b8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002056:	f003 0301 	and.w	r3, r3, #1
 800205a:	2b00      	cmp	r3, #0
 800205c:	d022      	beq.n	80020a4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2205      	movs	r2, #5
 8002062:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f022 0201 	bic.w	r2, r2, #1
 8002074:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	3301      	adds	r3, #1
 800207a:	60bb      	str	r3, [r7, #8]
 800207c:	697a      	ldr	r2, [r7, #20]
 800207e:	429a      	cmp	r2, r3
 8002080:	d307      	bcc.n	8002092 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0301 	and.w	r3, r3, #1
 800208c:	2b00      	cmp	r3, #0
 800208e:	d1f2      	bne.n	8002076 <HAL_DMA_IRQHandler+0x2ca>
 8002090:	e000      	b.n	8002094 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002092:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2200      	movs	r2, #0
 8002098:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2201      	movs	r2, #1
 80020a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d005      	beq.n	80020b8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	4798      	blx	r3
 80020b4:	e000      	b.n	80020b8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80020b6:	bf00      	nop
    }
  }
}
 80020b8:	3718      	adds	r7, #24
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop

080020c0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b085      	sub	sp, #20
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	60b9      	str	r1, [r7, #8]
 80020ca:	607a      	str	r2, [r7, #4]
 80020cc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80020dc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	683a      	ldr	r2, [r7, #0]
 80020e4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	2b40      	cmp	r3, #64	; 0x40
 80020ec:	d108      	bne.n	8002100 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	68ba      	ldr	r2, [r7, #8]
 80020fc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80020fe:	e007      	b.n	8002110 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	68ba      	ldr	r2, [r7, #8]
 8002106:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	60da      	str	r2, [r3, #12]
}
 8002110:	bf00      	nop
 8002112:	3714      	adds	r7, #20
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800211c:	b480      	push	{r7}
 800211e:	b085      	sub	sp, #20
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	b2db      	uxtb	r3, r3
 800212a:	3b10      	subs	r3, #16
 800212c:	4a14      	ldr	r2, [pc, #80]	; (8002180 <DMA_CalcBaseAndBitshift+0x64>)
 800212e:	fba2 2303 	umull	r2, r3, r2, r3
 8002132:	091b      	lsrs	r3, r3, #4
 8002134:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002136:	4a13      	ldr	r2, [pc, #76]	; (8002184 <DMA_CalcBaseAndBitshift+0x68>)
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	4413      	add	r3, r2
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	461a      	mov	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2b03      	cmp	r3, #3
 8002148:	d909      	bls.n	800215e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002152:	f023 0303 	bic.w	r3, r3, #3
 8002156:	1d1a      	adds	r2, r3, #4
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	659a      	str	r2, [r3, #88]	; 0x58
 800215c:	e007      	b.n	800216e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002166:	f023 0303 	bic.w	r3, r3, #3
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002172:	4618      	mov	r0, r3
 8002174:	3714      	adds	r7, #20
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	aaaaaaab 	.word	0xaaaaaaab
 8002184:	0800a604 	.word	0x0800a604

08002188 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002188:	b480      	push	{r7}
 800218a:	b085      	sub	sp, #20
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002190:	2300      	movs	r3, #0
 8002192:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002198:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	699b      	ldr	r3, [r3, #24]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d11f      	bne.n	80021e2 <DMA_CheckFifoParam+0x5a>
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	2b03      	cmp	r3, #3
 80021a6:	d856      	bhi.n	8002256 <DMA_CheckFifoParam+0xce>
 80021a8:	a201      	add	r2, pc, #4	; (adr r2, 80021b0 <DMA_CheckFifoParam+0x28>)
 80021aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021ae:	bf00      	nop
 80021b0:	080021c1 	.word	0x080021c1
 80021b4:	080021d3 	.word	0x080021d3
 80021b8:	080021c1 	.word	0x080021c1
 80021bc:	08002257 	.word	0x08002257
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d046      	beq.n	800225a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021d0:	e043      	b.n	800225a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80021da:	d140      	bne.n	800225e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021e0:	e03d      	b.n	800225e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	699b      	ldr	r3, [r3, #24]
 80021e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021ea:	d121      	bne.n	8002230 <DMA_CheckFifoParam+0xa8>
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	2b03      	cmp	r3, #3
 80021f0:	d837      	bhi.n	8002262 <DMA_CheckFifoParam+0xda>
 80021f2:	a201      	add	r2, pc, #4	; (adr r2, 80021f8 <DMA_CheckFifoParam+0x70>)
 80021f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021f8:	08002209 	.word	0x08002209
 80021fc:	0800220f 	.word	0x0800220f
 8002200:	08002209 	.word	0x08002209
 8002204:	08002221 	.word	0x08002221
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	73fb      	strb	r3, [r7, #15]
      break;
 800220c:	e030      	b.n	8002270 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002212:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d025      	beq.n	8002266 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800221e:	e022      	b.n	8002266 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002224:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002228:	d11f      	bne.n	800226a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800222e:	e01c      	b.n	800226a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	2b02      	cmp	r3, #2
 8002234:	d903      	bls.n	800223e <DMA_CheckFifoParam+0xb6>
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	2b03      	cmp	r3, #3
 800223a:	d003      	beq.n	8002244 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800223c:	e018      	b.n	8002270 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	73fb      	strb	r3, [r7, #15]
      break;
 8002242:	e015      	b.n	8002270 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002248:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d00e      	beq.n	800226e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	73fb      	strb	r3, [r7, #15]
      break;
 8002254:	e00b      	b.n	800226e <DMA_CheckFifoParam+0xe6>
      break;
 8002256:	bf00      	nop
 8002258:	e00a      	b.n	8002270 <DMA_CheckFifoParam+0xe8>
      break;
 800225a:	bf00      	nop
 800225c:	e008      	b.n	8002270 <DMA_CheckFifoParam+0xe8>
      break;
 800225e:	bf00      	nop
 8002260:	e006      	b.n	8002270 <DMA_CheckFifoParam+0xe8>
      break;
 8002262:	bf00      	nop
 8002264:	e004      	b.n	8002270 <DMA_CheckFifoParam+0xe8>
      break;
 8002266:	bf00      	nop
 8002268:	e002      	b.n	8002270 <DMA_CheckFifoParam+0xe8>
      break;   
 800226a:	bf00      	nop
 800226c:	e000      	b.n	8002270 <DMA_CheckFifoParam+0xe8>
      break;
 800226e:	bf00      	nop
    }
  } 
  
  return status; 
 8002270:	7bfb      	ldrb	r3, [r7, #15]
}
 8002272:	4618      	mov	r0, r3
 8002274:	3714      	adds	r7, #20
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop

08002280 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002280:	b480      	push	{r7}
 8002282:	b089      	sub	sp, #36	; 0x24
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800228a:	2300      	movs	r3, #0
 800228c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800228e:	2300      	movs	r3, #0
 8002290:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002292:	2300      	movs	r3, #0
 8002294:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002296:	2300      	movs	r3, #0
 8002298:	61fb      	str	r3, [r7, #28]
 800229a:	e159      	b.n	8002550 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800229c:	2201      	movs	r2, #1
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	697a      	ldr	r2, [r7, #20]
 80022ac:	4013      	ands	r3, r2
 80022ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022b0:	693a      	ldr	r2, [r7, #16]
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	f040 8148 	bne.w	800254a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f003 0303 	and.w	r3, r3, #3
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d005      	beq.n	80022d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d130      	bne.n	8002334 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	005b      	lsls	r3, r3, #1
 80022dc:	2203      	movs	r2, #3
 80022de:	fa02 f303 	lsl.w	r3, r2, r3
 80022e2:	43db      	mvns	r3, r3
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	4013      	ands	r3, r2
 80022e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	68da      	ldr	r2, [r3, #12]
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	fa02 f303 	lsl.w	r3, r2, r3
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	69ba      	ldr	r2, [r7, #24]
 8002300:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002308:	2201      	movs	r2, #1
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	fa02 f303 	lsl.w	r3, r2, r3
 8002310:	43db      	mvns	r3, r3
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	4013      	ands	r3, r2
 8002316:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	091b      	lsrs	r3, r3, #4
 800231e:	f003 0201 	and.w	r2, r3, #1
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	4313      	orrs	r3, r2
 800232c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f003 0303 	and.w	r3, r3, #3
 800233c:	2b03      	cmp	r3, #3
 800233e:	d017      	beq.n	8002370 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	2203      	movs	r2, #3
 800234c:	fa02 f303 	lsl.w	r3, r2, r3
 8002350:	43db      	mvns	r3, r3
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	4013      	ands	r3, r2
 8002356:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	689a      	ldr	r2, [r3, #8]
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	005b      	lsls	r3, r3, #1
 8002360:	fa02 f303 	lsl.w	r3, r2, r3
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	4313      	orrs	r3, r2
 8002368:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f003 0303 	and.w	r3, r3, #3
 8002378:	2b02      	cmp	r3, #2
 800237a:	d123      	bne.n	80023c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	08da      	lsrs	r2, r3, #3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	3208      	adds	r2, #8
 8002384:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002388:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	f003 0307 	and.w	r3, r3, #7
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	220f      	movs	r2, #15
 8002394:	fa02 f303 	lsl.w	r3, r2, r3
 8002398:	43db      	mvns	r3, r3
 800239a:	69ba      	ldr	r2, [r7, #24]
 800239c:	4013      	ands	r3, r2
 800239e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	691a      	ldr	r2, [r3, #16]
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	f003 0307 	and.w	r3, r3, #7
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	fa02 f303 	lsl.w	r3, r2, r3
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	08da      	lsrs	r2, r3, #3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	3208      	adds	r2, #8
 80023be:	69b9      	ldr	r1, [r7, #24]
 80023c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	2203      	movs	r2, #3
 80023d0:	fa02 f303 	lsl.w	r3, r2, r3
 80023d4:	43db      	mvns	r3, r3
 80023d6:	69ba      	ldr	r2, [r7, #24]
 80023d8:	4013      	ands	r3, r2
 80023da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f003 0203 	and.w	r2, r3, #3
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	005b      	lsls	r3, r3, #1
 80023e8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002400:	2b00      	cmp	r3, #0
 8002402:	f000 80a2 	beq.w	800254a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002406:	2300      	movs	r3, #0
 8002408:	60fb      	str	r3, [r7, #12]
 800240a:	4b57      	ldr	r3, [pc, #348]	; (8002568 <HAL_GPIO_Init+0x2e8>)
 800240c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800240e:	4a56      	ldr	r2, [pc, #344]	; (8002568 <HAL_GPIO_Init+0x2e8>)
 8002410:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002414:	6453      	str	r3, [r2, #68]	; 0x44
 8002416:	4b54      	ldr	r3, [pc, #336]	; (8002568 <HAL_GPIO_Init+0x2e8>)
 8002418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800241a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800241e:	60fb      	str	r3, [r7, #12]
 8002420:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002422:	4a52      	ldr	r2, [pc, #328]	; (800256c <HAL_GPIO_Init+0x2ec>)
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	089b      	lsrs	r3, r3, #2
 8002428:	3302      	adds	r3, #2
 800242a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800242e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	f003 0303 	and.w	r3, r3, #3
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	220f      	movs	r2, #15
 800243a:	fa02 f303 	lsl.w	r3, r2, r3
 800243e:	43db      	mvns	r3, r3
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	4013      	ands	r3, r2
 8002444:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a49      	ldr	r2, [pc, #292]	; (8002570 <HAL_GPIO_Init+0x2f0>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d019      	beq.n	8002482 <HAL_GPIO_Init+0x202>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a48      	ldr	r2, [pc, #288]	; (8002574 <HAL_GPIO_Init+0x2f4>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d013      	beq.n	800247e <HAL_GPIO_Init+0x1fe>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a47      	ldr	r2, [pc, #284]	; (8002578 <HAL_GPIO_Init+0x2f8>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d00d      	beq.n	800247a <HAL_GPIO_Init+0x1fa>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a46      	ldr	r2, [pc, #280]	; (800257c <HAL_GPIO_Init+0x2fc>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d007      	beq.n	8002476 <HAL_GPIO_Init+0x1f6>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a45      	ldr	r2, [pc, #276]	; (8002580 <HAL_GPIO_Init+0x300>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d101      	bne.n	8002472 <HAL_GPIO_Init+0x1f2>
 800246e:	2304      	movs	r3, #4
 8002470:	e008      	b.n	8002484 <HAL_GPIO_Init+0x204>
 8002472:	2307      	movs	r3, #7
 8002474:	e006      	b.n	8002484 <HAL_GPIO_Init+0x204>
 8002476:	2303      	movs	r3, #3
 8002478:	e004      	b.n	8002484 <HAL_GPIO_Init+0x204>
 800247a:	2302      	movs	r3, #2
 800247c:	e002      	b.n	8002484 <HAL_GPIO_Init+0x204>
 800247e:	2301      	movs	r3, #1
 8002480:	e000      	b.n	8002484 <HAL_GPIO_Init+0x204>
 8002482:	2300      	movs	r3, #0
 8002484:	69fa      	ldr	r2, [r7, #28]
 8002486:	f002 0203 	and.w	r2, r2, #3
 800248a:	0092      	lsls	r2, r2, #2
 800248c:	4093      	lsls	r3, r2
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	4313      	orrs	r3, r2
 8002492:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002494:	4935      	ldr	r1, [pc, #212]	; (800256c <HAL_GPIO_Init+0x2ec>)
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	089b      	lsrs	r3, r3, #2
 800249a:	3302      	adds	r3, #2
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024a2:	4b38      	ldr	r3, [pc, #224]	; (8002584 <HAL_GPIO_Init+0x304>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	43db      	mvns	r3, r3
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	4013      	ands	r3, r2
 80024b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d003      	beq.n	80024c6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024c6:	4a2f      	ldr	r2, [pc, #188]	; (8002584 <HAL_GPIO_Init+0x304>)
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80024cc:	4b2d      	ldr	r3, [pc, #180]	; (8002584 <HAL_GPIO_Init+0x304>)
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	43db      	mvns	r3, r3
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	4013      	ands	r3, r2
 80024da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d003      	beq.n	80024f0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024f0:	4a24      	ldr	r2, [pc, #144]	; (8002584 <HAL_GPIO_Init+0x304>)
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024f6:	4b23      	ldr	r3, [pc, #140]	; (8002584 <HAL_GPIO_Init+0x304>)
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	43db      	mvns	r3, r3
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	4013      	ands	r3, r2
 8002504:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d003      	beq.n	800251a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002512:	69ba      	ldr	r2, [r7, #24]
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	4313      	orrs	r3, r2
 8002518:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800251a:	4a1a      	ldr	r2, [pc, #104]	; (8002584 <HAL_GPIO_Init+0x304>)
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002520:	4b18      	ldr	r3, [pc, #96]	; (8002584 <HAL_GPIO_Init+0x304>)
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	43db      	mvns	r3, r3
 800252a:	69ba      	ldr	r2, [r7, #24]
 800252c:	4013      	ands	r3, r2
 800252e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d003      	beq.n	8002544 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	4313      	orrs	r3, r2
 8002542:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002544:	4a0f      	ldr	r2, [pc, #60]	; (8002584 <HAL_GPIO_Init+0x304>)
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	3301      	adds	r3, #1
 800254e:	61fb      	str	r3, [r7, #28]
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	2b0f      	cmp	r3, #15
 8002554:	f67f aea2 	bls.w	800229c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002558:	bf00      	nop
 800255a:	bf00      	nop
 800255c:	3724      	adds	r7, #36	; 0x24
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	40023800 	.word	0x40023800
 800256c:	40013800 	.word	0x40013800
 8002570:	40020000 	.word	0x40020000
 8002574:	40020400 	.word	0x40020400
 8002578:	40020800 	.word	0x40020800
 800257c:	40020c00 	.word	0x40020c00
 8002580:	40021000 	.word	0x40021000
 8002584:	40013c00 	.word	0x40013c00

08002588 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002588:	b480      	push	{r7}
 800258a:	b085      	sub	sp, #20
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	460b      	mov	r3, r1
 8002592:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	691a      	ldr	r2, [r3, #16]
 8002598:	887b      	ldrh	r3, [r7, #2]
 800259a:	4013      	ands	r3, r2
 800259c:	2b00      	cmp	r3, #0
 800259e:	d002      	beq.n	80025a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80025a0:	2301      	movs	r3, #1
 80025a2:	73fb      	strb	r3, [r7, #15]
 80025a4:	e001      	b.n	80025aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80025a6:	2300      	movs	r3, #0
 80025a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80025aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3714      	adds	r7, #20
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr

080025b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	460b      	mov	r3, r1
 80025c2:	807b      	strh	r3, [r7, #2]
 80025c4:	4613      	mov	r3, r2
 80025c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025c8:	787b      	ldrb	r3, [r7, #1]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d003      	beq.n	80025d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025ce:	887a      	ldrh	r2, [r7, #2]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025d4:	e003      	b.n	80025de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025d6:	887b      	ldrh	r3, [r7, #2]
 80025d8:	041a      	lsls	r2, r3, #16
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	619a      	str	r2, [r3, #24]
}
 80025de:	bf00      	nop
 80025e0:	370c      	adds	r7, #12
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
	...

080025ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b086      	sub	sp, #24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d101      	bne.n	80025fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e264      	b.n	8002ac8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0301 	and.w	r3, r3, #1
 8002606:	2b00      	cmp	r3, #0
 8002608:	d075      	beq.n	80026f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800260a:	4ba3      	ldr	r3, [pc, #652]	; (8002898 <HAL_RCC_OscConfig+0x2ac>)
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	f003 030c 	and.w	r3, r3, #12
 8002612:	2b04      	cmp	r3, #4
 8002614:	d00c      	beq.n	8002630 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002616:	4ba0      	ldr	r3, [pc, #640]	; (8002898 <HAL_RCC_OscConfig+0x2ac>)
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800261e:	2b08      	cmp	r3, #8
 8002620:	d112      	bne.n	8002648 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002622:	4b9d      	ldr	r3, [pc, #628]	; (8002898 <HAL_RCC_OscConfig+0x2ac>)
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800262a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800262e:	d10b      	bne.n	8002648 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002630:	4b99      	ldr	r3, [pc, #612]	; (8002898 <HAL_RCC_OscConfig+0x2ac>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d05b      	beq.n	80026f4 <HAL_RCC_OscConfig+0x108>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d157      	bne.n	80026f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e23f      	b.n	8002ac8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002650:	d106      	bne.n	8002660 <HAL_RCC_OscConfig+0x74>
 8002652:	4b91      	ldr	r3, [pc, #580]	; (8002898 <HAL_RCC_OscConfig+0x2ac>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a90      	ldr	r2, [pc, #576]	; (8002898 <HAL_RCC_OscConfig+0x2ac>)
 8002658:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800265c:	6013      	str	r3, [r2, #0]
 800265e:	e01d      	b.n	800269c <HAL_RCC_OscConfig+0xb0>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002668:	d10c      	bne.n	8002684 <HAL_RCC_OscConfig+0x98>
 800266a:	4b8b      	ldr	r3, [pc, #556]	; (8002898 <HAL_RCC_OscConfig+0x2ac>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a8a      	ldr	r2, [pc, #552]	; (8002898 <HAL_RCC_OscConfig+0x2ac>)
 8002670:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002674:	6013      	str	r3, [r2, #0]
 8002676:	4b88      	ldr	r3, [pc, #544]	; (8002898 <HAL_RCC_OscConfig+0x2ac>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a87      	ldr	r2, [pc, #540]	; (8002898 <HAL_RCC_OscConfig+0x2ac>)
 800267c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002680:	6013      	str	r3, [r2, #0]
 8002682:	e00b      	b.n	800269c <HAL_RCC_OscConfig+0xb0>
 8002684:	4b84      	ldr	r3, [pc, #528]	; (8002898 <HAL_RCC_OscConfig+0x2ac>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a83      	ldr	r2, [pc, #524]	; (8002898 <HAL_RCC_OscConfig+0x2ac>)
 800268a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800268e:	6013      	str	r3, [r2, #0]
 8002690:	4b81      	ldr	r3, [pc, #516]	; (8002898 <HAL_RCC_OscConfig+0x2ac>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a80      	ldr	r2, [pc, #512]	; (8002898 <HAL_RCC_OscConfig+0x2ac>)
 8002696:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800269a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d013      	beq.n	80026cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a4:	f7ff f8fc 	bl	80018a0 <HAL_GetTick>
 80026a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026aa:	e008      	b.n	80026be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026ac:	f7ff f8f8 	bl	80018a0 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b64      	cmp	r3, #100	; 0x64
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e204      	b.n	8002ac8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026be:	4b76      	ldr	r3, [pc, #472]	; (8002898 <HAL_RCC_OscConfig+0x2ac>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d0f0      	beq.n	80026ac <HAL_RCC_OscConfig+0xc0>
 80026ca:	e014      	b.n	80026f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026cc:	f7ff f8e8 	bl	80018a0 <HAL_GetTick>
 80026d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026d2:	e008      	b.n	80026e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026d4:	f7ff f8e4 	bl	80018a0 <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	2b64      	cmp	r3, #100	; 0x64
 80026e0:	d901      	bls.n	80026e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e1f0      	b.n	8002ac8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026e6:	4b6c      	ldr	r3, [pc, #432]	; (8002898 <HAL_RCC_OscConfig+0x2ac>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d1f0      	bne.n	80026d4 <HAL_RCC_OscConfig+0xe8>
 80026f2:	e000      	b.n	80026f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0302 	and.w	r3, r3, #2
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d063      	beq.n	80027ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002702:	4b65      	ldr	r3, [pc, #404]	; (8002898 <HAL_RCC_OscConfig+0x2ac>)
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	f003 030c 	and.w	r3, r3, #12
 800270a:	2b00      	cmp	r3, #0
 800270c:	d00b      	beq.n	8002726 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800270e:	4b62      	ldr	r3, [pc, #392]	; (8002898 <HAL_RCC_OscConfig+0x2ac>)
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002716:	2b08      	cmp	r3, #8
 8002718:	d11c      	bne.n	8002754 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800271a:	4b5f      	ldr	r3, [pc, #380]	; (8002898 <HAL_RCC_OscConfig+0x2ac>)
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d116      	bne.n	8002754 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002726:	4b5c      	ldr	r3, [pc, #368]	; (8002898 <HAL_RCC_OscConfig+0x2ac>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0302 	and.w	r3, r3, #2
 800272e:	2b00      	cmp	r3, #0
 8002730:	d005      	beq.n	800273e <HAL_RCC_OscConfig+0x152>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	2b01      	cmp	r3, #1
 8002738:	d001      	beq.n	800273e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e1c4      	b.n	8002ac8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800273e:	4b56      	ldr	r3, [pc, #344]	; (8002898 <HAL_RCC_OscConfig+0x2ac>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	691b      	ldr	r3, [r3, #16]
 800274a:	00db      	lsls	r3, r3, #3
 800274c:	4952      	ldr	r1, [pc, #328]	; (8002898 <HAL_RCC_OscConfig+0x2ac>)
 800274e:	4313      	orrs	r3, r2
 8002750:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002752:	e03a      	b.n	80027ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d020      	beq.n	800279e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800275c:	4b4f      	ldr	r3, [pc, #316]	; (800289c <HAL_RCC_OscConfig+0x2b0>)
 800275e:	2201      	movs	r2, #1
 8002760:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002762:	f7ff f89d 	bl	80018a0 <HAL_GetTick>
 8002766:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002768:	e008      	b.n	800277c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800276a:	f7ff f899 	bl	80018a0 <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	2b02      	cmp	r3, #2
 8002776:	d901      	bls.n	800277c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e1a5      	b.n	8002ac8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800277c:	4b46      	ldr	r3, [pc, #280]	; (8002898 <HAL_RCC_OscConfig+0x2ac>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0302 	and.w	r3, r3, #2
 8002784:	2b00      	cmp	r3, #0
 8002786:	d0f0      	beq.n	800276a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002788:	4b43      	ldr	r3, [pc, #268]	; (8002898 <HAL_RCC_OscConfig+0x2ac>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	691b      	ldr	r3, [r3, #16]
 8002794:	00db      	lsls	r3, r3, #3
 8002796:	4940      	ldr	r1, [pc, #256]	; (8002898 <HAL_RCC_OscConfig+0x2ac>)
 8002798:	4313      	orrs	r3, r2
 800279a:	600b      	str	r3, [r1, #0]
 800279c:	e015      	b.n	80027ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800279e:	4b3f      	ldr	r3, [pc, #252]	; (800289c <HAL_RCC_OscConfig+0x2b0>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a4:	f7ff f87c 	bl	80018a0 <HAL_GetTick>
 80027a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027aa:	e008      	b.n	80027be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027ac:	f7ff f878 	bl	80018a0 <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d901      	bls.n	80027be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e184      	b.n	8002ac8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027be:	4b36      	ldr	r3, [pc, #216]	; (8002898 <HAL_RCC_OscConfig+0x2ac>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d1f0      	bne.n	80027ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0308 	and.w	r3, r3, #8
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d030      	beq.n	8002838 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	695b      	ldr	r3, [r3, #20]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d016      	beq.n	800280c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027de:	4b30      	ldr	r3, [pc, #192]	; (80028a0 <HAL_RCC_OscConfig+0x2b4>)
 80027e0:	2201      	movs	r2, #1
 80027e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027e4:	f7ff f85c 	bl	80018a0 <HAL_GetTick>
 80027e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027ea:	e008      	b.n	80027fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027ec:	f7ff f858 	bl	80018a0 <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e164      	b.n	8002ac8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027fe:	4b26      	ldr	r3, [pc, #152]	; (8002898 <HAL_RCC_OscConfig+0x2ac>)
 8002800:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002802:	f003 0302 	and.w	r3, r3, #2
 8002806:	2b00      	cmp	r3, #0
 8002808:	d0f0      	beq.n	80027ec <HAL_RCC_OscConfig+0x200>
 800280a:	e015      	b.n	8002838 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800280c:	4b24      	ldr	r3, [pc, #144]	; (80028a0 <HAL_RCC_OscConfig+0x2b4>)
 800280e:	2200      	movs	r2, #0
 8002810:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002812:	f7ff f845 	bl	80018a0 <HAL_GetTick>
 8002816:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002818:	e008      	b.n	800282c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800281a:	f7ff f841 	bl	80018a0 <HAL_GetTick>
 800281e:	4602      	mov	r2, r0
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	2b02      	cmp	r3, #2
 8002826:	d901      	bls.n	800282c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002828:	2303      	movs	r3, #3
 800282a:	e14d      	b.n	8002ac8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800282c:	4b1a      	ldr	r3, [pc, #104]	; (8002898 <HAL_RCC_OscConfig+0x2ac>)
 800282e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002830:	f003 0302 	and.w	r3, r3, #2
 8002834:	2b00      	cmp	r3, #0
 8002836:	d1f0      	bne.n	800281a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0304 	and.w	r3, r3, #4
 8002840:	2b00      	cmp	r3, #0
 8002842:	f000 80a0 	beq.w	8002986 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002846:	2300      	movs	r3, #0
 8002848:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800284a:	4b13      	ldr	r3, [pc, #76]	; (8002898 <HAL_RCC_OscConfig+0x2ac>)
 800284c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d10f      	bne.n	8002876 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002856:	2300      	movs	r3, #0
 8002858:	60bb      	str	r3, [r7, #8]
 800285a:	4b0f      	ldr	r3, [pc, #60]	; (8002898 <HAL_RCC_OscConfig+0x2ac>)
 800285c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285e:	4a0e      	ldr	r2, [pc, #56]	; (8002898 <HAL_RCC_OscConfig+0x2ac>)
 8002860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002864:	6413      	str	r3, [r2, #64]	; 0x40
 8002866:	4b0c      	ldr	r3, [pc, #48]	; (8002898 <HAL_RCC_OscConfig+0x2ac>)
 8002868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800286e:	60bb      	str	r3, [r7, #8]
 8002870:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002872:	2301      	movs	r3, #1
 8002874:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002876:	4b0b      	ldr	r3, [pc, #44]	; (80028a4 <HAL_RCC_OscConfig+0x2b8>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800287e:	2b00      	cmp	r3, #0
 8002880:	d121      	bne.n	80028c6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002882:	4b08      	ldr	r3, [pc, #32]	; (80028a4 <HAL_RCC_OscConfig+0x2b8>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a07      	ldr	r2, [pc, #28]	; (80028a4 <HAL_RCC_OscConfig+0x2b8>)
 8002888:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800288c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800288e:	f7ff f807 	bl	80018a0 <HAL_GetTick>
 8002892:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002894:	e011      	b.n	80028ba <HAL_RCC_OscConfig+0x2ce>
 8002896:	bf00      	nop
 8002898:	40023800 	.word	0x40023800
 800289c:	42470000 	.word	0x42470000
 80028a0:	42470e80 	.word	0x42470e80
 80028a4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028a8:	f7fe fffa 	bl	80018a0 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e106      	b.n	8002ac8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ba:	4b85      	ldr	r3, [pc, #532]	; (8002ad0 <HAL_RCC_OscConfig+0x4e4>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d0f0      	beq.n	80028a8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d106      	bne.n	80028dc <HAL_RCC_OscConfig+0x2f0>
 80028ce:	4b81      	ldr	r3, [pc, #516]	; (8002ad4 <HAL_RCC_OscConfig+0x4e8>)
 80028d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d2:	4a80      	ldr	r2, [pc, #512]	; (8002ad4 <HAL_RCC_OscConfig+0x4e8>)
 80028d4:	f043 0301 	orr.w	r3, r3, #1
 80028d8:	6713      	str	r3, [r2, #112]	; 0x70
 80028da:	e01c      	b.n	8002916 <HAL_RCC_OscConfig+0x32a>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	2b05      	cmp	r3, #5
 80028e2:	d10c      	bne.n	80028fe <HAL_RCC_OscConfig+0x312>
 80028e4:	4b7b      	ldr	r3, [pc, #492]	; (8002ad4 <HAL_RCC_OscConfig+0x4e8>)
 80028e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e8:	4a7a      	ldr	r2, [pc, #488]	; (8002ad4 <HAL_RCC_OscConfig+0x4e8>)
 80028ea:	f043 0304 	orr.w	r3, r3, #4
 80028ee:	6713      	str	r3, [r2, #112]	; 0x70
 80028f0:	4b78      	ldr	r3, [pc, #480]	; (8002ad4 <HAL_RCC_OscConfig+0x4e8>)
 80028f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028f4:	4a77      	ldr	r2, [pc, #476]	; (8002ad4 <HAL_RCC_OscConfig+0x4e8>)
 80028f6:	f043 0301 	orr.w	r3, r3, #1
 80028fa:	6713      	str	r3, [r2, #112]	; 0x70
 80028fc:	e00b      	b.n	8002916 <HAL_RCC_OscConfig+0x32a>
 80028fe:	4b75      	ldr	r3, [pc, #468]	; (8002ad4 <HAL_RCC_OscConfig+0x4e8>)
 8002900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002902:	4a74      	ldr	r2, [pc, #464]	; (8002ad4 <HAL_RCC_OscConfig+0x4e8>)
 8002904:	f023 0301 	bic.w	r3, r3, #1
 8002908:	6713      	str	r3, [r2, #112]	; 0x70
 800290a:	4b72      	ldr	r3, [pc, #456]	; (8002ad4 <HAL_RCC_OscConfig+0x4e8>)
 800290c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800290e:	4a71      	ldr	r2, [pc, #452]	; (8002ad4 <HAL_RCC_OscConfig+0x4e8>)
 8002910:	f023 0304 	bic.w	r3, r3, #4
 8002914:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d015      	beq.n	800294a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800291e:	f7fe ffbf 	bl	80018a0 <HAL_GetTick>
 8002922:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002924:	e00a      	b.n	800293c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002926:	f7fe ffbb 	bl	80018a0 <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	f241 3288 	movw	r2, #5000	; 0x1388
 8002934:	4293      	cmp	r3, r2
 8002936:	d901      	bls.n	800293c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002938:	2303      	movs	r3, #3
 800293a:	e0c5      	b.n	8002ac8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800293c:	4b65      	ldr	r3, [pc, #404]	; (8002ad4 <HAL_RCC_OscConfig+0x4e8>)
 800293e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002940:	f003 0302 	and.w	r3, r3, #2
 8002944:	2b00      	cmp	r3, #0
 8002946:	d0ee      	beq.n	8002926 <HAL_RCC_OscConfig+0x33a>
 8002948:	e014      	b.n	8002974 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800294a:	f7fe ffa9 	bl	80018a0 <HAL_GetTick>
 800294e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002950:	e00a      	b.n	8002968 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002952:	f7fe ffa5 	bl	80018a0 <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002960:	4293      	cmp	r3, r2
 8002962:	d901      	bls.n	8002968 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	e0af      	b.n	8002ac8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002968:	4b5a      	ldr	r3, [pc, #360]	; (8002ad4 <HAL_RCC_OscConfig+0x4e8>)
 800296a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800296c:	f003 0302 	and.w	r3, r3, #2
 8002970:	2b00      	cmp	r3, #0
 8002972:	d1ee      	bne.n	8002952 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002974:	7dfb      	ldrb	r3, [r7, #23]
 8002976:	2b01      	cmp	r3, #1
 8002978:	d105      	bne.n	8002986 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800297a:	4b56      	ldr	r3, [pc, #344]	; (8002ad4 <HAL_RCC_OscConfig+0x4e8>)
 800297c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297e:	4a55      	ldr	r2, [pc, #340]	; (8002ad4 <HAL_RCC_OscConfig+0x4e8>)
 8002980:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002984:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	699b      	ldr	r3, [r3, #24]
 800298a:	2b00      	cmp	r3, #0
 800298c:	f000 809b 	beq.w	8002ac6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002990:	4b50      	ldr	r3, [pc, #320]	; (8002ad4 <HAL_RCC_OscConfig+0x4e8>)
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f003 030c 	and.w	r3, r3, #12
 8002998:	2b08      	cmp	r3, #8
 800299a:	d05c      	beq.n	8002a56 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	699b      	ldr	r3, [r3, #24]
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d141      	bne.n	8002a28 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029a4:	4b4c      	ldr	r3, [pc, #304]	; (8002ad8 <HAL_RCC_OscConfig+0x4ec>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029aa:	f7fe ff79 	bl	80018a0 <HAL_GetTick>
 80029ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029b0:	e008      	b.n	80029c4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029b2:	f7fe ff75 	bl	80018a0 <HAL_GetTick>
 80029b6:	4602      	mov	r2, r0
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d901      	bls.n	80029c4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	e081      	b.n	8002ac8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029c4:	4b43      	ldr	r3, [pc, #268]	; (8002ad4 <HAL_RCC_OscConfig+0x4e8>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d1f0      	bne.n	80029b2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	69da      	ldr	r2, [r3, #28]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6a1b      	ldr	r3, [r3, #32]
 80029d8:	431a      	orrs	r2, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029de:	019b      	lsls	r3, r3, #6
 80029e0:	431a      	orrs	r2, r3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e6:	085b      	lsrs	r3, r3, #1
 80029e8:	3b01      	subs	r3, #1
 80029ea:	041b      	lsls	r3, r3, #16
 80029ec:	431a      	orrs	r2, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f2:	061b      	lsls	r3, r3, #24
 80029f4:	4937      	ldr	r1, [pc, #220]	; (8002ad4 <HAL_RCC_OscConfig+0x4e8>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029fa:	4b37      	ldr	r3, [pc, #220]	; (8002ad8 <HAL_RCC_OscConfig+0x4ec>)
 80029fc:	2201      	movs	r2, #1
 80029fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a00:	f7fe ff4e 	bl	80018a0 <HAL_GetTick>
 8002a04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a06:	e008      	b.n	8002a1a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a08:	f7fe ff4a 	bl	80018a0 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e056      	b.n	8002ac8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a1a:	4b2e      	ldr	r3, [pc, #184]	; (8002ad4 <HAL_RCC_OscConfig+0x4e8>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d0f0      	beq.n	8002a08 <HAL_RCC_OscConfig+0x41c>
 8002a26:	e04e      	b.n	8002ac6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a28:	4b2b      	ldr	r3, [pc, #172]	; (8002ad8 <HAL_RCC_OscConfig+0x4ec>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a2e:	f7fe ff37 	bl	80018a0 <HAL_GetTick>
 8002a32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a34:	e008      	b.n	8002a48 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a36:	f7fe ff33 	bl	80018a0 <HAL_GetTick>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d901      	bls.n	8002a48 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002a44:	2303      	movs	r3, #3
 8002a46:	e03f      	b.n	8002ac8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a48:	4b22      	ldr	r3, [pc, #136]	; (8002ad4 <HAL_RCC_OscConfig+0x4e8>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d1f0      	bne.n	8002a36 <HAL_RCC_OscConfig+0x44a>
 8002a54:	e037      	b.n	8002ac6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	699b      	ldr	r3, [r3, #24]
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d101      	bne.n	8002a62 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e032      	b.n	8002ac8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a62:	4b1c      	ldr	r3, [pc, #112]	; (8002ad4 <HAL_RCC_OscConfig+0x4e8>)
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	699b      	ldr	r3, [r3, #24]
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d028      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d121      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d11a      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a8c:	68fa      	ldr	r2, [r7, #12]
 8002a8e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a92:	4013      	ands	r3, r2
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a98:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d111      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa8:	085b      	lsrs	r3, r3, #1
 8002aaa:	3b01      	subs	r3, #1
 8002aac:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d107      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002abc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d001      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e000      	b.n	8002ac8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002ac6:	2300      	movs	r3, #0
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3718      	adds	r7, #24
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	40007000 	.word	0x40007000
 8002ad4:	40023800 	.word	0x40023800
 8002ad8:	42470060 	.word	0x42470060

08002adc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d101      	bne.n	8002af0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e0cc      	b.n	8002c8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002af0:	4b68      	ldr	r3, [pc, #416]	; (8002c94 <HAL_RCC_ClockConfig+0x1b8>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0307 	and.w	r3, r3, #7
 8002af8:	683a      	ldr	r2, [r7, #0]
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d90c      	bls.n	8002b18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002afe:	4b65      	ldr	r3, [pc, #404]	; (8002c94 <HAL_RCC_ClockConfig+0x1b8>)
 8002b00:	683a      	ldr	r2, [r7, #0]
 8002b02:	b2d2      	uxtb	r2, r2
 8002b04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b06:	4b63      	ldr	r3, [pc, #396]	; (8002c94 <HAL_RCC_ClockConfig+0x1b8>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0307 	and.w	r3, r3, #7
 8002b0e:	683a      	ldr	r2, [r7, #0]
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d001      	beq.n	8002b18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e0b8      	b.n	8002c8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0302 	and.w	r3, r3, #2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d020      	beq.n	8002b66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0304 	and.w	r3, r3, #4
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d005      	beq.n	8002b3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b30:	4b59      	ldr	r3, [pc, #356]	; (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	4a58      	ldr	r2, [pc, #352]	; (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002b36:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b3a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0308 	and.w	r3, r3, #8
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d005      	beq.n	8002b54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b48:	4b53      	ldr	r3, [pc, #332]	; (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	4a52      	ldr	r2, [pc, #328]	; (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002b4e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b54:	4b50      	ldr	r3, [pc, #320]	; (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	494d      	ldr	r1, [pc, #308]	; (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0301 	and.w	r3, r3, #1
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d044      	beq.n	8002bfc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d107      	bne.n	8002b8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b7a:	4b47      	ldr	r3, [pc, #284]	; (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d119      	bne.n	8002bba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e07f      	b.n	8002c8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d003      	beq.n	8002b9a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b96:	2b03      	cmp	r3, #3
 8002b98:	d107      	bne.n	8002baa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b9a:	4b3f      	ldr	r3, [pc, #252]	; (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d109      	bne.n	8002bba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e06f      	b.n	8002c8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002baa:	4b3b      	ldr	r3, [pc, #236]	; (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0302 	and.w	r3, r3, #2
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d101      	bne.n	8002bba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e067      	b.n	8002c8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bba:	4b37      	ldr	r3, [pc, #220]	; (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	f023 0203 	bic.w	r2, r3, #3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	4934      	ldr	r1, [pc, #208]	; (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bcc:	f7fe fe68 	bl	80018a0 <HAL_GetTick>
 8002bd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bd2:	e00a      	b.n	8002bea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bd4:	f7fe fe64 	bl	80018a0 <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	f241 3288 	movw	r2, #5000	; 0x1388
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d901      	bls.n	8002bea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e04f      	b.n	8002c8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bea:	4b2b      	ldr	r3, [pc, #172]	; (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	f003 020c 	and.w	r2, r3, #12
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d1eb      	bne.n	8002bd4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bfc:	4b25      	ldr	r3, [pc, #148]	; (8002c94 <HAL_RCC_ClockConfig+0x1b8>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0307 	and.w	r3, r3, #7
 8002c04:	683a      	ldr	r2, [r7, #0]
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d20c      	bcs.n	8002c24 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c0a:	4b22      	ldr	r3, [pc, #136]	; (8002c94 <HAL_RCC_ClockConfig+0x1b8>)
 8002c0c:	683a      	ldr	r2, [r7, #0]
 8002c0e:	b2d2      	uxtb	r2, r2
 8002c10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c12:	4b20      	ldr	r3, [pc, #128]	; (8002c94 <HAL_RCC_ClockConfig+0x1b8>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0307 	and.w	r3, r3, #7
 8002c1a:	683a      	ldr	r2, [r7, #0]
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d001      	beq.n	8002c24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e032      	b.n	8002c8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0304 	and.w	r3, r3, #4
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d008      	beq.n	8002c42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c30:	4b19      	ldr	r3, [pc, #100]	; (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	4916      	ldr	r1, [pc, #88]	; (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0308 	and.w	r3, r3, #8
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d009      	beq.n	8002c62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c4e:	4b12      	ldr	r3, [pc, #72]	; (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	691b      	ldr	r3, [r3, #16]
 8002c5a:	00db      	lsls	r3, r3, #3
 8002c5c:	490e      	ldr	r1, [pc, #56]	; (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c62:	f000 f821 	bl	8002ca8 <HAL_RCC_GetSysClockFreq>
 8002c66:	4602      	mov	r2, r0
 8002c68:	4b0b      	ldr	r3, [pc, #44]	; (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	091b      	lsrs	r3, r3, #4
 8002c6e:	f003 030f 	and.w	r3, r3, #15
 8002c72:	490a      	ldr	r1, [pc, #40]	; (8002c9c <HAL_RCC_ClockConfig+0x1c0>)
 8002c74:	5ccb      	ldrb	r3, [r1, r3]
 8002c76:	fa22 f303 	lsr.w	r3, r2, r3
 8002c7a:	4a09      	ldr	r2, [pc, #36]	; (8002ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c7e:	4b09      	ldr	r3, [pc, #36]	; (8002ca4 <HAL_RCC_ClockConfig+0x1c8>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4618      	mov	r0, r3
 8002c84:	f7fe fbc6 	bl	8001414 <HAL_InitTick>

  return HAL_OK;
 8002c88:	2300      	movs	r3, #0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3710      	adds	r7, #16
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	40023c00 	.word	0x40023c00
 8002c98:	40023800 	.word	0x40023800
 8002c9c:	0800a5ec 	.word	0x0800a5ec
 8002ca0:	20000000 	.word	0x20000000
 8002ca4:	20000004 	.word	0x20000004

08002ca8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ca8:	b5b0      	push	{r4, r5, r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002cae:	2100      	movs	r1, #0
 8002cb0:	6079      	str	r1, [r7, #4]
 8002cb2:	2100      	movs	r1, #0
 8002cb4:	60f9      	str	r1, [r7, #12]
 8002cb6:	2100      	movs	r1, #0
 8002cb8:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002cba:	2100      	movs	r1, #0
 8002cbc:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cbe:	4952      	ldr	r1, [pc, #328]	; (8002e08 <HAL_RCC_GetSysClockFreq+0x160>)
 8002cc0:	6889      	ldr	r1, [r1, #8]
 8002cc2:	f001 010c 	and.w	r1, r1, #12
 8002cc6:	2908      	cmp	r1, #8
 8002cc8:	d00d      	beq.n	8002ce6 <HAL_RCC_GetSysClockFreq+0x3e>
 8002cca:	2908      	cmp	r1, #8
 8002ccc:	f200 8094 	bhi.w	8002df8 <HAL_RCC_GetSysClockFreq+0x150>
 8002cd0:	2900      	cmp	r1, #0
 8002cd2:	d002      	beq.n	8002cda <HAL_RCC_GetSysClockFreq+0x32>
 8002cd4:	2904      	cmp	r1, #4
 8002cd6:	d003      	beq.n	8002ce0 <HAL_RCC_GetSysClockFreq+0x38>
 8002cd8:	e08e      	b.n	8002df8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cda:	4b4c      	ldr	r3, [pc, #304]	; (8002e0c <HAL_RCC_GetSysClockFreq+0x164>)
 8002cdc:	60bb      	str	r3, [r7, #8]
       break;
 8002cde:	e08e      	b.n	8002dfe <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ce0:	4b4b      	ldr	r3, [pc, #300]	; (8002e10 <HAL_RCC_GetSysClockFreq+0x168>)
 8002ce2:	60bb      	str	r3, [r7, #8]
      break;
 8002ce4:	e08b      	b.n	8002dfe <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ce6:	4948      	ldr	r1, [pc, #288]	; (8002e08 <HAL_RCC_GetSysClockFreq+0x160>)
 8002ce8:	6849      	ldr	r1, [r1, #4]
 8002cea:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002cee:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cf0:	4945      	ldr	r1, [pc, #276]	; (8002e08 <HAL_RCC_GetSysClockFreq+0x160>)
 8002cf2:	6849      	ldr	r1, [r1, #4]
 8002cf4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002cf8:	2900      	cmp	r1, #0
 8002cfa:	d024      	beq.n	8002d46 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cfc:	4942      	ldr	r1, [pc, #264]	; (8002e08 <HAL_RCC_GetSysClockFreq+0x160>)
 8002cfe:	6849      	ldr	r1, [r1, #4]
 8002d00:	0989      	lsrs	r1, r1, #6
 8002d02:	4608      	mov	r0, r1
 8002d04:	f04f 0100 	mov.w	r1, #0
 8002d08:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002d0c:	f04f 0500 	mov.w	r5, #0
 8002d10:	ea00 0204 	and.w	r2, r0, r4
 8002d14:	ea01 0305 	and.w	r3, r1, r5
 8002d18:	493d      	ldr	r1, [pc, #244]	; (8002e10 <HAL_RCC_GetSysClockFreq+0x168>)
 8002d1a:	fb01 f003 	mul.w	r0, r1, r3
 8002d1e:	2100      	movs	r1, #0
 8002d20:	fb01 f102 	mul.w	r1, r1, r2
 8002d24:	1844      	adds	r4, r0, r1
 8002d26:	493a      	ldr	r1, [pc, #232]	; (8002e10 <HAL_RCC_GetSysClockFreq+0x168>)
 8002d28:	fba2 0101 	umull	r0, r1, r2, r1
 8002d2c:	1863      	adds	r3, r4, r1
 8002d2e:	4619      	mov	r1, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	461a      	mov	r2, r3
 8002d34:	f04f 0300 	mov.w	r3, #0
 8002d38:	f7fd ff3e 	bl	8000bb8 <__aeabi_uldivmod>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	460b      	mov	r3, r1
 8002d40:	4613      	mov	r3, r2
 8002d42:	60fb      	str	r3, [r7, #12]
 8002d44:	e04a      	b.n	8002ddc <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d46:	4b30      	ldr	r3, [pc, #192]	; (8002e08 <HAL_RCC_GetSysClockFreq+0x160>)
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	099b      	lsrs	r3, r3, #6
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	f04f 0300 	mov.w	r3, #0
 8002d52:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002d56:	f04f 0100 	mov.w	r1, #0
 8002d5a:	ea02 0400 	and.w	r4, r2, r0
 8002d5e:	ea03 0501 	and.w	r5, r3, r1
 8002d62:	4620      	mov	r0, r4
 8002d64:	4629      	mov	r1, r5
 8002d66:	f04f 0200 	mov.w	r2, #0
 8002d6a:	f04f 0300 	mov.w	r3, #0
 8002d6e:	014b      	lsls	r3, r1, #5
 8002d70:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002d74:	0142      	lsls	r2, r0, #5
 8002d76:	4610      	mov	r0, r2
 8002d78:	4619      	mov	r1, r3
 8002d7a:	1b00      	subs	r0, r0, r4
 8002d7c:	eb61 0105 	sbc.w	r1, r1, r5
 8002d80:	f04f 0200 	mov.w	r2, #0
 8002d84:	f04f 0300 	mov.w	r3, #0
 8002d88:	018b      	lsls	r3, r1, #6
 8002d8a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002d8e:	0182      	lsls	r2, r0, #6
 8002d90:	1a12      	subs	r2, r2, r0
 8002d92:	eb63 0301 	sbc.w	r3, r3, r1
 8002d96:	f04f 0000 	mov.w	r0, #0
 8002d9a:	f04f 0100 	mov.w	r1, #0
 8002d9e:	00d9      	lsls	r1, r3, #3
 8002da0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002da4:	00d0      	lsls	r0, r2, #3
 8002da6:	4602      	mov	r2, r0
 8002da8:	460b      	mov	r3, r1
 8002daa:	1912      	adds	r2, r2, r4
 8002dac:	eb45 0303 	adc.w	r3, r5, r3
 8002db0:	f04f 0000 	mov.w	r0, #0
 8002db4:	f04f 0100 	mov.w	r1, #0
 8002db8:	0299      	lsls	r1, r3, #10
 8002dba:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002dbe:	0290      	lsls	r0, r2, #10
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	460b      	mov	r3, r1
 8002dc4:	4610      	mov	r0, r2
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	461a      	mov	r2, r3
 8002dcc:	f04f 0300 	mov.w	r3, #0
 8002dd0:	f7fd fef2 	bl	8000bb8 <__aeabi_uldivmod>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	460b      	mov	r3, r1
 8002dd8:	4613      	mov	r3, r2
 8002dda:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ddc:	4b0a      	ldr	r3, [pc, #40]	; (8002e08 <HAL_RCC_GetSysClockFreq+0x160>)
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	0c1b      	lsrs	r3, r3, #16
 8002de2:	f003 0303 	and.w	r3, r3, #3
 8002de6:	3301      	adds	r3, #1
 8002de8:	005b      	lsls	r3, r3, #1
 8002dea:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002dec:	68fa      	ldr	r2, [r7, #12]
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002df4:	60bb      	str	r3, [r7, #8]
      break;
 8002df6:	e002      	b.n	8002dfe <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002df8:	4b04      	ldr	r3, [pc, #16]	; (8002e0c <HAL_RCC_GetSysClockFreq+0x164>)
 8002dfa:	60bb      	str	r3, [r7, #8]
      break;
 8002dfc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dfe:	68bb      	ldr	r3, [r7, #8]
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3710      	adds	r7, #16
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bdb0      	pop	{r4, r5, r7, pc}
 8002e08:	40023800 	.word	0x40023800
 8002e0c:	00f42400 	.word	0x00f42400
 8002e10:	017d7840 	.word	0x017d7840

08002e14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e14:	b480      	push	{r7}
 8002e16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e18:	4b03      	ldr	r3, [pc, #12]	; (8002e28 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop
 8002e28:	20000000 	.word	0x20000000

08002e2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e30:	f7ff fff0 	bl	8002e14 <HAL_RCC_GetHCLKFreq>
 8002e34:	4602      	mov	r2, r0
 8002e36:	4b05      	ldr	r3, [pc, #20]	; (8002e4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	0a9b      	lsrs	r3, r3, #10
 8002e3c:	f003 0307 	and.w	r3, r3, #7
 8002e40:	4903      	ldr	r1, [pc, #12]	; (8002e50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e42:	5ccb      	ldrb	r3, [r1, r3]
 8002e44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	40023800 	.word	0x40023800
 8002e50:	0800a5fc 	.word	0x0800a5fc

08002e54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002e58:	f7ff ffdc 	bl	8002e14 <HAL_RCC_GetHCLKFreq>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	4b05      	ldr	r3, [pc, #20]	; (8002e74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	0b5b      	lsrs	r3, r3, #13
 8002e64:	f003 0307 	and.w	r3, r3, #7
 8002e68:	4903      	ldr	r1, [pc, #12]	; (8002e78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e6a:	5ccb      	ldrb	r3, [r1, r3]
 8002e6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	40023800 	.word	0x40023800
 8002e78:	0800a5fc 	.word	0x0800a5fc

08002e7c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	220f      	movs	r2, #15
 8002e8a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002e8c:	4b12      	ldr	r3, [pc, #72]	; (8002ed8 <HAL_RCC_GetClockConfig+0x5c>)
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	f003 0203 	and.w	r2, r3, #3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002e98:	4b0f      	ldr	r3, [pc, #60]	; (8002ed8 <HAL_RCC_GetClockConfig+0x5c>)
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002ea4:	4b0c      	ldr	r3, [pc, #48]	; (8002ed8 <HAL_RCC_GetClockConfig+0x5c>)
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002eb0:	4b09      	ldr	r3, [pc, #36]	; (8002ed8 <HAL_RCC_GetClockConfig+0x5c>)
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	08db      	lsrs	r3, r3, #3
 8002eb6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002ebe:	4b07      	ldr	r3, [pc, #28]	; (8002edc <HAL_RCC_GetClockConfig+0x60>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0207 	and.w	r2, r3, #7
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	601a      	str	r2, [r3, #0]
}
 8002eca:	bf00      	nop
 8002ecc:	370c      	adds	r7, #12
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr
 8002ed6:	bf00      	nop
 8002ed8:	40023800 	.word	0x40023800
 8002edc:	40023c00 	.word	0x40023c00

08002ee0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d101      	bne.n	8002ef2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e041      	b.n	8002f76 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d106      	bne.n	8002f0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f000 f839 	bl	8002f7e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2202      	movs	r2, #2
 8002f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	3304      	adds	r3, #4
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	4610      	mov	r0, r2
 8002f20:	f000 f9ca 	bl	80032b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3708      	adds	r7, #8
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}

08002f7e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002f7e:	b480      	push	{r7}
 8002f80:	b083      	sub	sp, #12
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002f86:	bf00      	nop
 8002f88:	370c      	adds	r7, #12
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
	...

08002f94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b085      	sub	sp, #20
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d001      	beq.n	8002fac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e044      	b.n	8003036 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2202      	movs	r2, #2
 8002fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	68da      	ldr	r2, [r3, #12]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f042 0201 	orr.w	r2, r2, #1
 8002fc2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a1e      	ldr	r2, [pc, #120]	; (8003044 <HAL_TIM_Base_Start_IT+0xb0>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d018      	beq.n	8003000 <HAL_TIM_Base_Start_IT+0x6c>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fd6:	d013      	beq.n	8003000 <HAL_TIM_Base_Start_IT+0x6c>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a1a      	ldr	r2, [pc, #104]	; (8003048 <HAL_TIM_Base_Start_IT+0xb4>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d00e      	beq.n	8003000 <HAL_TIM_Base_Start_IT+0x6c>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a19      	ldr	r2, [pc, #100]	; (800304c <HAL_TIM_Base_Start_IT+0xb8>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d009      	beq.n	8003000 <HAL_TIM_Base_Start_IT+0x6c>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a17      	ldr	r2, [pc, #92]	; (8003050 <HAL_TIM_Base_Start_IT+0xbc>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d004      	beq.n	8003000 <HAL_TIM_Base_Start_IT+0x6c>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a16      	ldr	r2, [pc, #88]	; (8003054 <HAL_TIM_Base_Start_IT+0xc0>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d111      	bne.n	8003024 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f003 0307 	and.w	r3, r3, #7
 800300a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2b06      	cmp	r3, #6
 8003010:	d010      	beq.n	8003034 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f042 0201 	orr.w	r2, r2, #1
 8003020:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003022:	e007      	b.n	8003034 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f042 0201 	orr.w	r2, r2, #1
 8003032:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	3714      	adds	r7, #20
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr
 8003042:	bf00      	nop
 8003044:	40010000 	.word	0x40010000
 8003048:	40000400 	.word	0x40000400
 800304c:	40000800 	.word	0x40000800
 8003050:	40000c00 	.word	0x40000c00
 8003054:	40014000 	.word	0x40014000

08003058 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b082      	sub	sp, #8
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	691b      	ldr	r3, [r3, #16]
 8003066:	f003 0302 	and.w	r3, r3, #2
 800306a:	2b02      	cmp	r3, #2
 800306c:	d122      	bne.n	80030b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	f003 0302 	and.w	r3, r3, #2
 8003078:	2b02      	cmp	r3, #2
 800307a:	d11b      	bne.n	80030b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f06f 0202 	mvn.w	r2, #2
 8003084:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2201      	movs	r2, #1
 800308a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	699b      	ldr	r3, [r3, #24]
 8003092:	f003 0303 	and.w	r3, r3, #3
 8003096:	2b00      	cmp	r3, #0
 8003098:	d003      	beq.n	80030a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f000 f8ee 	bl	800327c <HAL_TIM_IC_CaptureCallback>
 80030a0:	e005      	b.n	80030ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f000 f8e0 	bl	8003268 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f000 f8f1 	bl	8003290 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	691b      	ldr	r3, [r3, #16]
 80030ba:	f003 0304 	and.w	r3, r3, #4
 80030be:	2b04      	cmp	r3, #4
 80030c0:	d122      	bne.n	8003108 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	f003 0304 	and.w	r3, r3, #4
 80030cc:	2b04      	cmp	r3, #4
 80030ce:	d11b      	bne.n	8003108 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f06f 0204 	mvn.w	r2, #4
 80030d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2202      	movs	r2, #2
 80030de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d003      	beq.n	80030f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 f8c4 	bl	800327c <HAL_TIM_IC_CaptureCallback>
 80030f4:	e005      	b.n	8003102 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f000 f8b6 	bl	8003268 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f000 f8c7 	bl	8003290 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	691b      	ldr	r3, [r3, #16]
 800310e:	f003 0308 	and.w	r3, r3, #8
 8003112:	2b08      	cmp	r3, #8
 8003114:	d122      	bne.n	800315c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	f003 0308 	and.w	r3, r3, #8
 8003120:	2b08      	cmp	r3, #8
 8003122:	d11b      	bne.n	800315c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f06f 0208 	mvn.w	r2, #8
 800312c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2204      	movs	r2, #4
 8003132:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	69db      	ldr	r3, [r3, #28]
 800313a:	f003 0303 	and.w	r3, r3, #3
 800313e:	2b00      	cmp	r3, #0
 8003140:	d003      	beq.n	800314a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f000 f89a 	bl	800327c <HAL_TIM_IC_CaptureCallback>
 8003148:	e005      	b.n	8003156 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f000 f88c 	bl	8003268 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f000 f89d 	bl	8003290 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	691b      	ldr	r3, [r3, #16]
 8003162:	f003 0310 	and.w	r3, r3, #16
 8003166:	2b10      	cmp	r3, #16
 8003168:	d122      	bne.n	80031b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	f003 0310 	and.w	r3, r3, #16
 8003174:	2b10      	cmp	r3, #16
 8003176:	d11b      	bne.n	80031b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f06f 0210 	mvn.w	r2, #16
 8003180:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2208      	movs	r2, #8
 8003186:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	69db      	ldr	r3, [r3, #28]
 800318e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003192:	2b00      	cmp	r3, #0
 8003194:	d003      	beq.n	800319e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f000 f870 	bl	800327c <HAL_TIM_IC_CaptureCallback>
 800319c:	e005      	b.n	80031aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f000 f862 	bl	8003268 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f000 f873 	bl	8003290 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	691b      	ldr	r3, [r3, #16]
 80031b6:	f003 0301 	and.w	r3, r3, #1
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d10e      	bne.n	80031dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	f003 0301 	and.w	r3, r3, #1
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d107      	bne.n	80031dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f06f 0201 	mvn.w	r2, #1
 80031d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f7fe f856 	bl	8001288 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	691b      	ldr	r3, [r3, #16]
 80031e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031e6:	2b80      	cmp	r3, #128	; 0x80
 80031e8:	d10e      	bne.n	8003208 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031f4:	2b80      	cmp	r3, #128	; 0x80
 80031f6:	d107      	bne.n	8003208 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003200:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f000 f8e2 	bl	80033cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003212:	2b40      	cmp	r3, #64	; 0x40
 8003214:	d10e      	bne.n	8003234 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003220:	2b40      	cmp	r3, #64	; 0x40
 8003222:	d107      	bne.n	8003234 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800322c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f000 f838 	bl	80032a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	691b      	ldr	r3, [r3, #16]
 800323a:	f003 0320 	and.w	r3, r3, #32
 800323e:	2b20      	cmp	r3, #32
 8003240:	d10e      	bne.n	8003260 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	f003 0320 	and.w	r3, r3, #32
 800324c:	2b20      	cmp	r3, #32
 800324e:	d107      	bne.n	8003260 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f06f 0220 	mvn.w	r2, #32
 8003258:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f000 f8ac 	bl	80033b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003260:	bf00      	nop
 8003262:	3708      	adds	r7, #8
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}

08003268 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003270:	bf00      	nop
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003284:	bf00      	nop
 8003286:	370c      	adds	r7, #12
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003298:	bf00      	nop
 800329a:	370c      	adds	r7, #12
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr

080032a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80032ac:	bf00      	nop
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr

080032b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b085      	sub	sp, #20
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	4a34      	ldr	r2, [pc, #208]	; (800339c <TIM_Base_SetConfig+0xe4>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d00f      	beq.n	80032f0 <TIM_Base_SetConfig+0x38>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032d6:	d00b      	beq.n	80032f0 <TIM_Base_SetConfig+0x38>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	4a31      	ldr	r2, [pc, #196]	; (80033a0 <TIM_Base_SetConfig+0xe8>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d007      	beq.n	80032f0 <TIM_Base_SetConfig+0x38>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4a30      	ldr	r2, [pc, #192]	; (80033a4 <TIM_Base_SetConfig+0xec>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d003      	beq.n	80032f0 <TIM_Base_SetConfig+0x38>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	4a2f      	ldr	r2, [pc, #188]	; (80033a8 <TIM_Base_SetConfig+0xf0>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d108      	bne.n	8003302 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	68fa      	ldr	r2, [r7, #12]
 80032fe:	4313      	orrs	r3, r2
 8003300:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a25      	ldr	r2, [pc, #148]	; (800339c <TIM_Base_SetConfig+0xe4>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d01b      	beq.n	8003342 <TIM_Base_SetConfig+0x8a>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003310:	d017      	beq.n	8003342 <TIM_Base_SetConfig+0x8a>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a22      	ldr	r2, [pc, #136]	; (80033a0 <TIM_Base_SetConfig+0xe8>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d013      	beq.n	8003342 <TIM_Base_SetConfig+0x8a>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a21      	ldr	r2, [pc, #132]	; (80033a4 <TIM_Base_SetConfig+0xec>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d00f      	beq.n	8003342 <TIM_Base_SetConfig+0x8a>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a20      	ldr	r2, [pc, #128]	; (80033a8 <TIM_Base_SetConfig+0xf0>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d00b      	beq.n	8003342 <TIM_Base_SetConfig+0x8a>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a1f      	ldr	r2, [pc, #124]	; (80033ac <TIM_Base_SetConfig+0xf4>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d007      	beq.n	8003342 <TIM_Base_SetConfig+0x8a>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a1e      	ldr	r2, [pc, #120]	; (80033b0 <TIM_Base_SetConfig+0xf8>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d003      	beq.n	8003342 <TIM_Base_SetConfig+0x8a>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a1d      	ldr	r2, [pc, #116]	; (80033b4 <TIM_Base_SetConfig+0xfc>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d108      	bne.n	8003354 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003348:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	68fa      	ldr	r2, [r7, #12]
 8003350:	4313      	orrs	r3, r2
 8003352:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	695b      	ldr	r3, [r3, #20]
 800335e:	4313      	orrs	r3, r2
 8003360:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	68fa      	ldr	r2, [r7, #12]
 8003366:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	689a      	ldr	r2, [r3, #8]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4a08      	ldr	r2, [pc, #32]	; (800339c <TIM_Base_SetConfig+0xe4>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d103      	bne.n	8003388 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	691a      	ldr	r2, [r3, #16]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	615a      	str	r2, [r3, #20]
}
 800338e:	bf00      	nop
 8003390:	3714      	adds	r7, #20
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	40010000 	.word	0x40010000
 80033a0:	40000400 	.word	0x40000400
 80033a4:	40000800 	.word	0x40000800
 80033a8:	40000c00 	.word	0x40000c00
 80033ac:	40014000 	.word	0x40014000
 80033b0:	40014400 	.word	0x40014400
 80033b4:	40014800 	.word	0x40014800

080033b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80033c0:	bf00      	nop
 80033c2:	370c      	adds	r7, #12
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr

080033cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80033d4:	bf00      	nop
 80033d6:	370c      	adds	r7, #12
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr

080033e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d101      	bne.n	80033f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e03f      	b.n	8003472 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d106      	bne.n	800340c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f7fd ff82 	bl	8001310 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2224      	movs	r2, #36	; 0x24
 8003410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	68da      	ldr	r2, [r3, #12]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003422:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f000 fdd9 	bl	8003fdc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	691a      	ldr	r2, [r3, #16]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003438:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	695a      	ldr	r2, [r3, #20]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003448:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	68da      	ldr	r2, [r3, #12]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003458:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2220      	movs	r2, #32
 8003464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2220      	movs	r2, #32
 800346c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003470:	2300      	movs	r3, #0
}
 8003472:	4618      	mov	r0, r3
 8003474:	3708      	adds	r7, #8
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}

0800347a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800347a:	b580      	push	{r7, lr}
 800347c:	b08a      	sub	sp, #40	; 0x28
 800347e:	af02      	add	r7, sp, #8
 8003480:	60f8      	str	r0, [r7, #12]
 8003482:	60b9      	str	r1, [r7, #8]
 8003484:	603b      	str	r3, [r7, #0]
 8003486:	4613      	mov	r3, r2
 8003488:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800348a:	2300      	movs	r3, #0
 800348c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003494:	b2db      	uxtb	r3, r3
 8003496:	2b20      	cmp	r3, #32
 8003498:	d17c      	bne.n	8003594 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d002      	beq.n	80034a6 <HAL_UART_Transmit+0x2c>
 80034a0:	88fb      	ldrh	r3, [r7, #6]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d101      	bne.n	80034aa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e075      	b.n	8003596 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d101      	bne.n	80034b8 <HAL_UART_Transmit+0x3e>
 80034b4:	2302      	movs	r3, #2
 80034b6:	e06e      	b.n	8003596 <HAL_UART_Transmit+0x11c>
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2200      	movs	r2, #0
 80034c4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2221      	movs	r2, #33	; 0x21
 80034ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034ce:	f7fe f9e7 	bl	80018a0 <HAL_GetTick>
 80034d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	88fa      	ldrh	r2, [r7, #6]
 80034d8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	88fa      	ldrh	r2, [r7, #6]
 80034de:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034e8:	d108      	bne.n	80034fc <HAL_UART_Transmit+0x82>
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d104      	bne.n	80034fc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80034f2:	2300      	movs	r3, #0
 80034f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	61bb      	str	r3, [r7, #24]
 80034fa:	e003      	b.n	8003504 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003500:	2300      	movs	r3, #0
 8003502:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2200      	movs	r2, #0
 8003508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800350c:	e02a      	b.n	8003564 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	9300      	str	r3, [sp, #0]
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	2200      	movs	r2, #0
 8003516:	2180      	movs	r1, #128	; 0x80
 8003518:	68f8      	ldr	r0, [r7, #12]
 800351a:	f000 fb5b 	bl	8003bd4 <UART_WaitOnFlagUntilTimeout>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d001      	beq.n	8003528 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e036      	b.n	8003596 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d10b      	bne.n	8003546 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800352e:	69bb      	ldr	r3, [r7, #24]
 8003530:	881b      	ldrh	r3, [r3, #0]
 8003532:	461a      	mov	r2, r3
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800353c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	3302      	adds	r3, #2
 8003542:	61bb      	str	r3, [r7, #24]
 8003544:	e007      	b.n	8003556 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	781a      	ldrb	r2, [r3, #0]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	3301      	adds	r3, #1
 8003554:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800355a:	b29b      	uxth	r3, r3
 800355c:	3b01      	subs	r3, #1
 800355e:	b29a      	uxth	r2, r3
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003568:	b29b      	uxth	r3, r3
 800356a:	2b00      	cmp	r3, #0
 800356c:	d1cf      	bne.n	800350e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	9300      	str	r3, [sp, #0]
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	2200      	movs	r2, #0
 8003576:	2140      	movs	r1, #64	; 0x40
 8003578:	68f8      	ldr	r0, [r7, #12]
 800357a:	f000 fb2b 	bl	8003bd4 <UART_WaitOnFlagUntilTimeout>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d001      	beq.n	8003588 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	e006      	b.n	8003596 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2220      	movs	r2, #32
 800358c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003590:	2300      	movs	r3, #0
 8003592:	e000      	b.n	8003596 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003594:	2302      	movs	r3, #2
  }
}
 8003596:	4618      	mov	r0, r3
 8003598:	3720      	adds	r7, #32
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}

0800359e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800359e:	b580      	push	{r7, lr}
 80035a0:	b084      	sub	sp, #16
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	60f8      	str	r0, [r7, #12]
 80035a6:	60b9      	str	r1, [r7, #8]
 80035a8:	4613      	mov	r3, r2
 80035aa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	2b20      	cmp	r3, #32
 80035b6:	d11d      	bne.n	80035f4 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d002      	beq.n	80035c4 <HAL_UART_Receive_DMA+0x26>
 80035be:	88fb      	ldrh	r3, [r7, #6]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d101      	bne.n	80035c8 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e016      	b.n	80035f6 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d101      	bne.n	80035d6 <HAL_UART_Receive_DMA+0x38>
 80035d2:	2302      	movs	r3, #2
 80035d4:	e00f      	b.n	80035f6 <HAL_UART_Receive_DMA+0x58>
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2201      	movs	r2, #1
 80035da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2200      	movs	r2, #0
 80035e2:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 80035e4:	88fb      	ldrh	r3, [r7, #6]
 80035e6:	461a      	mov	r2, r3
 80035e8:	68b9      	ldr	r1, [r7, #8]
 80035ea:	68f8      	ldr	r0, [r7, #12]
 80035ec:	f000 fb3c 	bl	8003c68 <UART_Start_Receive_DMA>
 80035f0:	4603      	mov	r3, r0
 80035f2:	e000      	b.n	80035f6 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80035f4:	2302      	movs	r3, #2
  }
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3710      	adds	r7, #16
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}

080035fe <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80035fe:	b580      	push	{r7, lr}
 8003600:	b084      	sub	sp, #16
 8003602:	af00      	add	r7, sp, #0
 8003604:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003606:	2300      	movs	r3, #0
 8003608:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	695b      	ldr	r3, [r3, #20]
 8003610:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003614:	2b80      	cmp	r3, #128	; 0x80
 8003616:	bf0c      	ite	eq
 8003618:	2301      	moveq	r3, #1
 800361a:	2300      	movne	r3, #0
 800361c:	b2db      	uxtb	r3, r3
 800361e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003626:	b2db      	uxtb	r3, r3
 8003628:	2b21      	cmp	r3, #33	; 0x21
 800362a:	d116      	bne.n	800365a <HAL_UART_DMAStop+0x5c>
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d013      	beq.n	800365a <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	695a      	ldr	r2, [r3, #20]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003640:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003646:	2b00      	cmp	r3, #0
 8003648:	d004      	beq.n	8003654 <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800364e:	4618      	mov	r0, r3
 8003650:	f7fe fb1a 	bl	8001c88 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f000 fb6b 	bl	8003d30 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	695b      	ldr	r3, [r3, #20]
 8003660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003664:	2b40      	cmp	r3, #64	; 0x40
 8003666:	bf0c      	ite	eq
 8003668:	2301      	moveq	r3, #1
 800366a:	2300      	movne	r3, #0
 800366c:	b2db      	uxtb	r3, r3
 800366e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003676:	b2db      	uxtb	r3, r3
 8003678:	2b22      	cmp	r3, #34	; 0x22
 800367a:	d116      	bne.n	80036aa <HAL_UART_DMAStop+0xac>
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d013      	beq.n	80036aa <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	695a      	ldr	r2, [r3, #20]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003690:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003696:	2b00      	cmp	r3, #0
 8003698:	d004      	beq.n	80036a4 <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800369e:	4618      	mov	r0, r3
 80036a0:	f7fe faf2 	bl	8001c88 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f000 fb59 	bl	8003d5c <UART_EndRxTransfer>
  }

  return HAL_OK;
 80036aa:	2300      	movs	r3, #0
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3710      	adds	r7, #16
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b08a      	sub	sp, #40	; 0x28
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	695b      	ldr	r3, [r3, #20]
 80036d2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80036d4:	2300      	movs	r3, #0
 80036d6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80036d8:	2300      	movs	r3, #0
 80036da:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80036dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036de:	f003 030f 	and.w	r3, r3, #15
 80036e2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80036e4:	69bb      	ldr	r3, [r7, #24]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d10d      	bne.n	8003706 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80036ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ec:	f003 0320 	and.w	r3, r3, #32
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d008      	beq.n	8003706 <HAL_UART_IRQHandler+0x52>
 80036f4:	6a3b      	ldr	r3, [r7, #32]
 80036f6:	f003 0320 	and.w	r3, r3, #32
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d003      	beq.n	8003706 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f000 fbd5 	bl	8003eae <UART_Receive_IT>
      return;
 8003704:	e17c      	b.n	8003a00 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003706:	69bb      	ldr	r3, [r7, #24]
 8003708:	2b00      	cmp	r3, #0
 800370a:	f000 80b1 	beq.w	8003870 <HAL_UART_IRQHandler+0x1bc>
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	f003 0301 	and.w	r3, r3, #1
 8003714:	2b00      	cmp	r3, #0
 8003716:	d105      	bne.n	8003724 <HAL_UART_IRQHandler+0x70>
 8003718:	6a3b      	ldr	r3, [r7, #32]
 800371a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800371e:	2b00      	cmp	r3, #0
 8003720:	f000 80a6 	beq.w	8003870 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003726:	f003 0301 	and.w	r3, r3, #1
 800372a:	2b00      	cmp	r3, #0
 800372c:	d00a      	beq.n	8003744 <HAL_UART_IRQHandler+0x90>
 800372e:	6a3b      	ldr	r3, [r7, #32]
 8003730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003734:	2b00      	cmp	r3, #0
 8003736:	d005      	beq.n	8003744 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373c:	f043 0201 	orr.w	r2, r3, #1
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003746:	f003 0304 	and.w	r3, r3, #4
 800374a:	2b00      	cmp	r3, #0
 800374c:	d00a      	beq.n	8003764 <HAL_UART_IRQHandler+0xb0>
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	f003 0301 	and.w	r3, r3, #1
 8003754:	2b00      	cmp	r3, #0
 8003756:	d005      	beq.n	8003764 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375c:	f043 0202 	orr.w	r2, r3, #2
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003766:	f003 0302 	and.w	r3, r3, #2
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00a      	beq.n	8003784 <HAL_UART_IRQHandler+0xd0>
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	f003 0301 	and.w	r3, r3, #1
 8003774:	2b00      	cmp	r3, #0
 8003776:	d005      	beq.n	8003784 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377c:	f043 0204 	orr.w	r2, r3, #4
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003786:	f003 0308 	and.w	r3, r3, #8
 800378a:	2b00      	cmp	r3, #0
 800378c:	d00f      	beq.n	80037ae <HAL_UART_IRQHandler+0xfa>
 800378e:	6a3b      	ldr	r3, [r7, #32]
 8003790:	f003 0320 	and.w	r3, r3, #32
 8003794:	2b00      	cmp	r3, #0
 8003796:	d104      	bne.n	80037a2 <HAL_UART_IRQHandler+0xee>
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	f003 0301 	and.w	r3, r3, #1
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d005      	beq.n	80037ae <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a6:	f043 0208 	orr.w	r2, r3, #8
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	f000 811f 	beq.w	80039f6 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80037b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ba:	f003 0320 	and.w	r3, r3, #32
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d007      	beq.n	80037d2 <HAL_UART_IRQHandler+0x11e>
 80037c2:	6a3b      	ldr	r3, [r7, #32]
 80037c4:	f003 0320 	and.w	r3, r3, #32
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d002      	beq.n	80037d2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f000 fb6e 	bl	8003eae <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	695b      	ldr	r3, [r3, #20]
 80037d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037dc:	2b40      	cmp	r3, #64	; 0x40
 80037de:	bf0c      	ite	eq
 80037e0:	2301      	moveq	r3, #1
 80037e2:	2300      	movne	r3, #0
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ec:	f003 0308 	and.w	r3, r3, #8
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d102      	bne.n	80037fa <HAL_UART_IRQHandler+0x146>
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d031      	beq.n	800385e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 faae 	bl	8003d5c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	695b      	ldr	r3, [r3, #20]
 8003806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800380a:	2b40      	cmp	r3, #64	; 0x40
 800380c:	d123      	bne.n	8003856 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	695a      	ldr	r2, [r3, #20]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800381c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003822:	2b00      	cmp	r3, #0
 8003824:	d013      	beq.n	800384e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800382a:	4a77      	ldr	r2, [pc, #476]	; (8003a08 <HAL_UART_IRQHandler+0x354>)
 800382c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003832:	4618      	mov	r0, r3
 8003834:	f7fe fa98 	bl	8001d68 <HAL_DMA_Abort_IT>
 8003838:	4603      	mov	r3, r0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d016      	beq.n	800386c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003842:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003848:	4610      	mov	r0, r2
 800384a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800384c:	e00e      	b.n	800386c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f000 f8fa 	bl	8003a48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003854:	e00a      	b.n	800386c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f000 f8f6 	bl	8003a48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800385c:	e006      	b.n	800386c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 f8f2 	bl	8003a48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800386a:	e0c4      	b.n	80039f6 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800386c:	bf00      	nop
    return;
 800386e:	e0c2      	b.n	80039f6 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003874:	2b01      	cmp	r3, #1
 8003876:	f040 80a2 	bne.w	80039be <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800387a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387c:	f003 0310 	and.w	r3, r3, #16
 8003880:	2b00      	cmp	r3, #0
 8003882:	f000 809c 	beq.w	80039be <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003886:	6a3b      	ldr	r3, [r7, #32]
 8003888:	f003 0310 	and.w	r3, r3, #16
 800388c:	2b00      	cmp	r3, #0
 800388e:	f000 8096 	beq.w	80039be <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003892:	2300      	movs	r3, #0
 8003894:	60fb      	str	r3, [r7, #12]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	60fb      	str	r3, [r7, #12]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	60fb      	str	r3, [r7, #12]
 80038a6:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	695b      	ldr	r3, [r3, #20]
 80038ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038b2:	2b40      	cmp	r3, #64	; 0x40
 80038b4:	d14f      	bne.n	8003956 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80038c0:	8a3b      	ldrh	r3, [r7, #16]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	f000 8099 	beq.w	80039fa <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80038cc:	8a3a      	ldrh	r2, [r7, #16]
 80038ce:	429a      	cmp	r2, r3
 80038d0:	f080 8093 	bcs.w	80039fa <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	8a3a      	ldrh	r2, [r7, #16]
 80038d8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038de:	69db      	ldr	r3, [r3, #28]
 80038e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038e4:	d02b      	beq.n	800393e <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68da      	ldr	r2, [r3, #12]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038f4:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	695a      	ldr	r2, [r3, #20]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f022 0201 	bic.w	r2, r2, #1
 8003904:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	695a      	ldr	r2, [r3, #20]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003914:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2220      	movs	r2, #32
 800391a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	68da      	ldr	r2, [r3, #12]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f022 0210 	bic.w	r2, r2, #16
 8003932:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003938:	4618      	mov	r0, r3
 800393a:	f7fe f9a5 	bl	8001c88 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003946:	b29b      	uxth	r3, r3
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	b29b      	uxth	r3, r3
 800394c:	4619      	mov	r1, r3
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f000 f884 	bl	8003a5c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003954:	e051      	b.n	80039fa <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800395e:	b29b      	uxth	r3, r3
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003968:	b29b      	uxth	r3, r3
 800396a:	2b00      	cmp	r3, #0
 800396c:	d047      	beq.n	80039fe <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 800396e:	8a7b      	ldrh	r3, [r7, #18]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d044      	beq.n	80039fe <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	68da      	ldr	r2, [r3, #12]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003982:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	695a      	ldr	r2, [r3, #20]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f022 0201 	bic.w	r2, r2, #1
 8003992:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2220      	movs	r2, #32
 8003998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	68da      	ldr	r2, [r3, #12]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f022 0210 	bic.w	r2, r2, #16
 80039b0:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80039b2:	8a7b      	ldrh	r3, [r7, #18]
 80039b4:	4619      	mov	r1, r3
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f000 f850 	bl	8003a5c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80039bc:	e01f      	b.n	80039fe <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80039be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d008      	beq.n	80039da <HAL_UART_IRQHandler+0x326>
 80039c8:	6a3b      	ldr	r3, [r7, #32]
 80039ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d003      	beq.n	80039da <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 fa03 	bl	8003dde <UART_Transmit_IT>
    return;
 80039d8:	e012      	b.n	8003a00 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80039da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d00d      	beq.n	8003a00 <HAL_UART_IRQHandler+0x34c>
 80039e4:	6a3b      	ldr	r3, [r7, #32]
 80039e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d008      	beq.n	8003a00 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f000 fa45 	bl	8003e7e <UART_EndTransmit_IT>
    return;
 80039f4:	e004      	b.n	8003a00 <HAL_UART_IRQHandler+0x34c>
    return;
 80039f6:	bf00      	nop
 80039f8:	e002      	b.n	8003a00 <HAL_UART_IRQHandler+0x34c>
      return;
 80039fa:	bf00      	nop
 80039fc:	e000      	b.n	8003a00 <HAL_UART_IRQHandler+0x34c>
      return;
 80039fe:	bf00      	nop
  }
}
 8003a00:	3728      	adds	r7, #40	; 0x28
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	08003db7 	.word	0x08003db7

08003a0c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003a14:	bf00      	nop
 8003a16:	370c      	adds	r7, #12
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr

08003a20 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003a28:	bf00      	nop
 8003a2a:	370c      	adds	r7, #12
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr

08003a34 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003a3c:	bf00      	nop
 8003a3e:	370c      	adds	r7, #12
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr

08003a48 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003a50:	bf00      	nop
 8003a52:	370c      	adds	r7, #12
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	460b      	mov	r3, r1
 8003a66:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003a68:	bf00      	nop
 8003a6a:	370c      	adds	r7, #12
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr

08003a74 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a80:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d12a      	bne.n	8003ae6 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2200      	movs	r2, #0
 8003a94:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	68da      	ldr	r2, [r3, #12]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003aa4:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	695a      	ldr	r2, [r3, #20]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f022 0201 	bic.w	r2, r2, #1
 8003ab4:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	695a      	ldr	r2, [r3, #20]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ac4:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2220      	movs	r2, #32
 8003aca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d107      	bne.n	8003ae6 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	68da      	ldr	r2, [r3, #12]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f022 0210 	bic.w	r2, r2, #16
 8003ae4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d106      	bne.n	8003afc <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003af2:	4619      	mov	r1, r3
 8003af4:	68f8      	ldr	r0, [r7, #12]
 8003af6:	f7ff ffb1 	bl	8003a5c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003afa:	e002      	b.n	8003b02 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8003afc:	68f8      	ldr	r0, [r7, #12]
 8003afe:	f7ff ff8f 	bl	8003a20 <HAL_UART_RxCpltCallback>
}
 8003b02:	bf00      	nop
 8003b04:	3710      	adds	r7, #16
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}

08003b0a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003b0a:	b580      	push	{r7, lr}
 8003b0c:	b084      	sub	sp, #16
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b16:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d108      	bne.n	8003b32 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003b24:	085b      	lsrs	r3, r3, #1
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	4619      	mov	r1, r3
 8003b2a:	68f8      	ldr	r0, [r7, #12]
 8003b2c:	f7ff ff96 	bl	8003a5c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003b30:	e002      	b.n	8003b38 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8003b32:	68f8      	ldr	r0, [r7, #12]
 8003b34:	f7ff ff7e 	bl	8003a34 <HAL_UART_RxHalfCpltCallback>
}
 8003b38:	bf00      	nop
 8003b3a:	3710      	adds	r7, #16
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b084      	sub	sp, #16
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b50:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	695b      	ldr	r3, [r3, #20]
 8003b58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b5c:	2b80      	cmp	r3, #128	; 0x80
 8003b5e:	bf0c      	ite	eq
 8003b60:	2301      	moveq	r3, #1
 8003b62:	2300      	movne	r3, #0
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	2b21      	cmp	r3, #33	; 0x21
 8003b72:	d108      	bne.n	8003b86 <UART_DMAError+0x46>
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d005      	beq.n	8003b86 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003b80:	68b8      	ldr	r0, [r7, #8]
 8003b82:	f000 f8d5 	bl	8003d30 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	695b      	ldr	r3, [r3, #20]
 8003b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b90:	2b40      	cmp	r3, #64	; 0x40
 8003b92:	bf0c      	ite	eq
 8003b94:	2301      	moveq	r3, #1
 8003b96:	2300      	movne	r3, #0
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	2b22      	cmp	r3, #34	; 0x22
 8003ba6:	d108      	bne.n	8003bba <UART_DMAError+0x7a>
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d005      	beq.n	8003bba <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003bb4:	68b8      	ldr	r0, [r7, #8]
 8003bb6:	f000 f8d1 	bl	8003d5c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bbe:	f043 0210 	orr.w	r2, r3, #16
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003bc6:	68b8      	ldr	r0, [r7, #8]
 8003bc8:	f7ff ff3e 	bl	8003a48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003bcc:	bf00      	nop
 8003bce:	3710      	adds	r7, #16
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	60f8      	str	r0, [r7, #12]
 8003bdc:	60b9      	str	r1, [r7, #8]
 8003bde:	603b      	str	r3, [r7, #0]
 8003be0:	4613      	mov	r3, r2
 8003be2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003be4:	e02c      	b.n	8003c40 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003be6:	69bb      	ldr	r3, [r7, #24]
 8003be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bec:	d028      	beq.n	8003c40 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003bee:	69bb      	ldr	r3, [r7, #24]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d007      	beq.n	8003c04 <UART_WaitOnFlagUntilTimeout+0x30>
 8003bf4:	f7fd fe54 	bl	80018a0 <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	69ba      	ldr	r2, [r7, #24]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d21d      	bcs.n	8003c40 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	68da      	ldr	r2, [r3, #12]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003c12:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	695a      	ldr	r2, [r3, #20]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f022 0201 	bic.w	r2, r2, #1
 8003c22:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2220      	movs	r2, #32
 8003c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2220      	movs	r2, #32
 8003c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2200      	movs	r2, #0
 8003c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	e00f      	b.n	8003c60 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	4013      	ands	r3, r2
 8003c4a:	68ba      	ldr	r2, [r7, #8]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	bf0c      	ite	eq
 8003c50:	2301      	moveq	r3, #1
 8003c52:	2300      	movne	r3, #0
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	461a      	mov	r2, r3
 8003c58:	79fb      	ldrb	r3, [r7, #7]
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d0c3      	beq.n	8003be6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c5e:	2300      	movs	r3, #0
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3710      	adds	r7, #16
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b086      	sub	sp, #24
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	60b9      	str	r1, [r7, #8]
 8003c72:	4613      	mov	r3, r2
 8003c74:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003c76:	68ba      	ldr	r2, [r7, #8]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	88fa      	ldrh	r2, [r7, #6]
 8003c80:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2200      	movs	r2, #0
 8003c86:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2222      	movs	r2, #34	; 0x22
 8003c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c94:	4a23      	ldr	r2, [pc, #140]	; (8003d24 <UART_Start_Receive_DMA+0xbc>)
 8003c96:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c9c:	4a22      	ldr	r2, [pc, #136]	; (8003d28 <UART_Start_Receive_DMA+0xc0>)
 8003c9e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca4:	4a21      	ldr	r2, [pc, #132]	; (8003d2c <UART_Start_Receive_DMA+0xc4>)
 8003ca6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cac:	2200      	movs	r2, #0
 8003cae:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003cb0:	f107 0308 	add.w	r3, r7, #8
 8003cb4:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	3304      	adds	r3, #4
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	88fb      	ldrh	r3, [r7, #6]
 8003cc8:	f7fd ff86 	bl	8001bd8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003ccc:	2300      	movs	r3, #0
 8003cce:	613b      	str	r3, [r7, #16]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	613b      	str	r3, [r7, #16]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	613b      	str	r3, [r7, #16]
 8003ce0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	68da      	ldr	r2, [r3, #12]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cf8:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	695a      	ldr	r2, [r3, #20]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f042 0201 	orr.w	r2, r2, #1
 8003d08:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	695a      	ldr	r2, [r3, #20]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d18:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8003d1a:	2300      	movs	r3, #0
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3718      	adds	r7, #24
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	08003a75 	.word	0x08003a75
 8003d28:	08003b0b 	.word	0x08003b0b
 8003d2c:	08003b41 	.word	0x08003b41

08003d30 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	68da      	ldr	r2, [r3, #12]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003d46:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2220      	movs	r2, #32
 8003d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8003d50:	bf00      	nop
 8003d52:	370c      	adds	r7, #12
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr

08003d5c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	68da      	ldr	r2, [r3, #12]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003d72:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	695a      	ldr	r2, [r3, #20]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f022 0201 	bic.w	r2, r2, #1
 8003d82:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d107      	bne.n	8003d9c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	68da      	ldr	r2, [r3, #12]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f022 0210 	bic.w	r2, r2, #16
 8003d9a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2220      	movs	r2, #32
 8003da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003daa:	bf00      	nop
 8003dac:	370c      	adds	r7, #12
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr

08003db6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003db6:	b580      	push	{r7, lr}
 8003db8:	b084      	sub	sp, #16
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003dd0:	68f8      	ldr	r0, [r7, #12]
 8003dd2:	f7ff fe39 	bl	8003a48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003dd6:	bf00      	nop
 8003dd8:	3710      	adds	r7, #16
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}

08003dde <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003dde:	b480      	push	{r7}
 8003de0:	b085      	sub	sp, #20
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	2b21      	cmp	r3, #33	; 0x21
 8003df0:	d13e      	bne.n	8003e70 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dfa:	d114      	bne.n	8003e26 <UART_Transmit_IT+0x48>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	691b      	ldr	r3, [r3, #16]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d110      	bne.n	8003e26 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a1b      	ldr	r3, [r3, #32]
 8003e08:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	881b      	ldrh	r3, [r3, #0]
 8003e0e:	461a      	mov	r2, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e18:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6a1b      	ldr	r3, [r3, #32]
 8003e1e:	1c9a      	adds	r2, r3, #2
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	621a      	str	r2, [r3, #32]
 8003e24:	e008      	b.n	8003e38 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a1b      	ldr	r3, [r3, #32]
 8003e2a:	1c59      	adds	r1, r3, #1
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	6211      	str	r1, [r2, #32]
 8003e30:	781a      	ldrb	r2, [r3, #0]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	3b01      	subs	r3, #1
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	4619      	mov	r1, r3
 8003e46:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d10f      	bne.n	8003e6c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68da      	ldr	r2, [r3, #12]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e5a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	68da      	ldr	r2, [r3, #12]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e6a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	e000      	b.n	8003e72 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003e70:	2302      	movs	r3, #2
  }
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3714      	adds	r7, #20
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr

08003e7e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e7e:	b580      	push	{r7, lr}
 8003e80:	b082      	sub	sp, #8
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	68da      	ldr	r2, [r3, #12]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e94:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2220      	movs	r2, #32
 8003e9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f7ff fdb4 	bl	8003a0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003ea4:	2300      	movs	r3, #0
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3708      	adds	r7, #8
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}

08003eae <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003eae:	b580      	push	{r7, lr}
 8003eb0:	b084      	sub	sp, #16
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	2b22      	cmp	r3, #34	; 0x22
 8003ec0:	f040 8087 	bne.w	8003fd2 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ecc:	d117      	bne.n	8003efe <UART_Receive_IT+0x50>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d113      	bne.n	8003efe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ede:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003eec:	b29a      	uxth	r2, r3
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef6:	1c9a      	adds	r2, r3, #2
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	629a      	str	r2, [r3, #40]	; 0x28
 8003efc:	e026      	b.n	8003f4c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f02:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8003f04:	2300      	movs	r3, #0
 8003f06:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f10:	d007      	beq.n	8003f22 <UART_Receive_IT+0x74>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d10a      	bne.n	8003f30 <UART_Receive_IT+0x82>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d106      	bne.n	8003f30 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	b2da      	uxtb	r2, r3
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	701a      	strb	r2, [r3, #0]
 8003f2e:	e008      	b.n	8003f42 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f3c:	b2da      	uxtb	r2, r3
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f46:	1c5a      	adds	r2, r3, #1
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	3b01      	subs	r3, #1
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	4619      	mov	r1, r3
 8003f5a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d136      	bne.n	8003fce <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	68da      	ldr	r2, [r3, #12]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f022 0220 	bic.w	r2, r2, #32
 8003f6e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	68da      	ldr	r2, [r3, #12]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f7e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	695a      	ldr	r2, [r3, #20]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f022 0201 	bic.w	r2, r2, #1
 8003f8e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2220      	movs	r2, #32
 8003f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d10e      	bne.n	8003fbe <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	68da      	ldr	r2, [r3, #12]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f022 0210 	bic.w	r2, r2, #16
 8003fae:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003fb4:	4619      	mov	r1, r3
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f7ff fd50 	bl	8003a5c <HAL_UARTEx_RxEventCallback>
 8003fbc:	e002      	b.n	8003fc4 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f7ff fd2e 	bl	8003a20 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	e002      	b.n	8003fd4 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	e000      	b.n	8003fd4 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003fd2:	2302      	movs	r3, #2
  }
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3710      	adds	r7, #16
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fe0:	b09f      	sub	sp, #124	; 0x7c
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fe6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	691b      	ldr	r3, [r3, #16]
 8003fec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003ff0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ff2:	68d9      	ldr	r1, [r3, #12]
 8003ff4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	ea40 0301 	orr.w	r3, r0, r1
 8003ffc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003ffe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004000:	689a      	ldr	r2, [r3, #8]
 8004002:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	431a      	orrs	r2, r3
 8004008:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800400a:	695b      	ldr	r3, [r3, #20]
 800400c:	431a      	orrs	r2, r3
 800400e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004010:	69db      	ldr	r3, [r3, #28]
 8004012:	4313      	orrs	r3, r2
 8004014:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004016:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004020:	f021 010c 	bic.w	r1, r1, #12
 8004024:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800402a:	430b      	orrs	r3, r1
 800402c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800402e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	695b      	ldr	r3, [r3, #20]
 8004034:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004038:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800403a:	6999      	ldr	r1, [r3, #24]
 800403c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	ea40 0301 	orr.w	r3, r0, r1
 8004044:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004046:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	4bc5      	ldr	r3, [pc, #788]	; (8004360 <UART_SetConfig+0x384>)
 800404c:	429a      	cmp	r2, r3
 800404e:	d004      	beq.n	800405a <UART_SetConfig+0x7e>
 8004050:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	4bc3      	ldr	r3, [pc, #780]	; (8004364 <UART_SetConfig+0x388>)
 8004056:	429a      	cmp	r2, r3
 8004058:	d103      	bne.n	8004062 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800405a:	f7fe fefb 	bl	8002e54 <HAL_RCC_GetPCLK2Freq>
 800405e:	6778      	str	r0, [r7, #116]	; 0x74
 8004060:	e002      	b.n	8004068 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004062:	f7fe fee3 	bl	8002e2c <HAL_RCC_GetPCLK1Freq>
 8004066:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004068:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800406a:	69db      	ldr	r3, [r3, #28]
 800406c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004070:	f040 80b6 	bne.w	80041e0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004074:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004076:	461c      	mov	r4, r3
 8004078:	f04f 0500 	mov.w	r5, #0
 800407c:	4622      	mov	r2, r4
 800407e:	462b      	mov	r3, r5
 8004080:	1891      	adds	r1, r2, r2
 8004082:	6439      	str	r1, [r7, #64]	; 0x40
 8004084:	415b      	adcs	r3, r3
 8004086:	647b      	str	r3, [r7, #68]	; 0x44
 8004088:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800408c:	1912      	adds	r2, r2, r4
 800408e:	eb45 0303 	adc.w	r3, r5, r3
 8004092:	f04f 0000 	mov.w	r0, #0
 8004096:	f04f 0100 	mov.w	r1, #0
 800409a:	00d9      	lsls	r1, r3, #3
 800409c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80040a0:	00d0      	lsls	r0, r2, #3
 80040a2:	4602      	mov	r2, r0
 80040a4:	460b      	mov	r3, r1
 80040a6:	1911      	adds	r1, r2, r4
 80040a8:	6639      	str	r1, [r7, #96]	; 0x60
 80040aa:	416b      	adcs	r3, r5
 80040ac:	667b      	str	r3, [r7, #100]	; 0x64
 80040ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	461a      	mov	r2, r3
 80040b4:	f04f 0300 	mov.w	r3, #0
 80040b8:	1891      	adds	r1, r2, r2
 80040ba:	63b9      	str	r1, [r7, #56]	; 0x38
 80040bc:	415b      	adcs	r3, r3
 80040be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80040c4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80040c8:	f7fc fd76 	bl	8000bb8 <__aeabi_uldivmod>
 80040cc:	4602      	mov	r2, r0
 80040ce:	460b      	mov	r3, r1
 80040d0:	4ba5      	ldr	r3, [pc, #660]	; (8004368 <UART_SetConfig+0x38c>)
 80040d2:	fba3 2302 	umull	r2, r3, r3, r2
 80040d6:	095b      	lsrs	r3, r3, #5
 80040d8:	011e      	lsls	r6, r3, #4
 80040da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040dc:	461c      	mov	r4, r3
 80040de:	f04f 0500 	mov.w	r5, #0
 80040e2:	4622      	mov	r2, r4
 80040e4:	462b      	mov	r3, r5
 80040e6:	1891      	adds	r1, r2, r2
 80040e8:	6339      	str	r1, [r7, #48]	; 0x30
 80040ea:	415b      	adcs	r3, r3
 80040ec:	637b      	str	r3, [r7, #52]	; 0x34
 80040ee:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80040f2:	1912      	adds	r2, r2, r4
 80040f4:	eb45 0303 	adc.w	r3, r5, r3
 80040f8:	f04f 0000 	mov.w	r0, #0
 80040fc:	f04f 0100 	mov.w	r1, #0
 8004100:	00d9      	lsls	r1, r3, #3
 8004102:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004106:	00d0      	lsls	r0, r2, #3
 8004108:	4602      	mov	r2, r0
 800410a:	460b      	mov	r3, r1
 800410c:	1911      	adds	r1, r2, r4
 800410e:	65b9      	str	r1, [r7, #88]	; 0x58
 8004110:	416b      	adcs	r3, r5
 8004112:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004114:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	461a      	mov	r2, r3
 800411a:	f04f 0300 	mov.w	r3, #0
 800411e:	1891      	adds	r1, r2, r2
 8004120:	62b9      	str	r1, [r7, #40]	; 0x28
 8004122:	415b      	adcs	r3, r3
 8004124:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004126:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800412a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800412e:	f7fc fd43 	bl	8000bb8 <__aeabi_uldivmod>
 8004132:	4602      	mov	r2, r0
 8004134:	460b      	mov	r3, r1
 8004136:	4b8c      	ldr	r3, [pc, #560]	; (8004368 <UART_SetConfig+0x38c>)
 8004138:	fba3 1302 	umull	r1, r3, r3, r2
 800413c:	095b      	lsrs	r3, r3, #5
 800413e:	2164      	movs	r1, #100	; 0x64
 8004140:	fb01 f303 	mul.w	r3, r1, r3
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	00db      	lsls	r3, r3, #3
 8004148:	3332      	adds	r3, #50	; 0x32
 800414a:	4a87      	ldr	r2, [pc, #540]	; (8004368 <UART_SetConfig+0x38c>)
 800414c:	fba2 2303 	umull	r2, r3, r2, r3
 8004150:	095b      	lsrs	r3, r3, #5
 8004152:	005b      	lsls	r3, r3, #1
 8004154:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004158:	441e      	add	r6, r3
 800415a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800415c:	4618      	mov	r0, r3
 800415e:	f04f 0100 	mov.w	r1, #0
 8004162:	4602      	mov	r2, r0
 8004164:	460b      	mov	r3, r1
 8004166:	1894      	adds	r4, r2, r2
 8004168:	623c      	str	r4, [r7, #32]
 800416a:	415b      	adcs	r3, r3
 800416c:	627b      	str	r3, [r7, #36]	; 0x24
 800416e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004172:	1812      	adds	r2, r2, r0
 8004174:	eb41 0303 	adc.w	r3, r1, r3
 8004178:	f04f 0400 	mov.w	r4, #0
 800417c:	f04f 0500 	mov.w	r5, #0
 8004180:	00dd      	lsls	r5, r3, #3
 8004182:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004186:	00d4      	lsls	r4, r2, #3
 8004188:	4622      	mov	r2, r4
 800418a:	462b      	mov	r3, r5
 800418c:	1814      	adds	r4, r2, r0
 800418e:	653c      	str	r4, [r7, #80]	; 0x50
 8004190:	414b      	adcs	r3, r1
 8004192:	657b      	str	r3, [r7, #84]	; 0x54
 8004194:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	461a      	mov	r2, r3
 800419a:	f04f 0300 	mov.w	r3, #0
 800419e:	1891      	adds	r1, r2, r2
 80041a0:	61b9      	str	r1, [r7, #24]
 80041a2:	415b      	adcs	r3, r3
 80041a4:	61fb      	str	r3, [r7, #28]
 80041a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041aa:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80041ae:	f7fc fd03 	bl	8000bb8 <__aeabi_uldivmod>
 80041b2:	4602      	mov	r2, r0
 80041b4:	460b      	mov	r3, r1
 80041b6:	4b6c      	ldr	r3, [pc, #432]	; (8004368 <UART_SetConfig+0x38c>)
 80041b8:	fba3 1302 	umull	r1, r3, r3, r2
 80041bc:	095b      	lsrs	r3, r3, #5
 80041be:	2164      	movs	r1, #100	; 0x64
 80041c0:	fb01 f303 	mul.w	r3, r1, r3
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	00db      	lsls	r3, r3, #3
 80041c8:	3332      	adds	r3, #50	; 0x32
 80041ca:	4a67      	ldr	r2, [pc, #412]	; (8004368 <UART_SetConfig+0x38c>)
 80041cc:	fba2 2303 	umull	r2, r3, r2, r3
 80041d0:	095b      	lsrs	r3, r3, #5
 80041d2:	f003 0207 	and.w	r2, r3, #7
 80041d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4432      	add	r2, r6
 80041dc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80041de:	e0b9      	b.n	8004354 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80041e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041e2:	461c      	mov	r4, r3
 80041e4:	f04f 0500 	mov.w	r5, #0
 80041e8:	4622      	mov	r2, r4
 80041ea:	462b      	mov	r3, r5
 80041ec:	1891      	adds	r1, r2, r2
 80041ee:	6139      	str	r1, [r7, #16]
 80041f0:	415b      	adcs	r3, r3
 80041f2:	617b      	str	r3, [r7, #20]
 80041f4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80041f8:	1912      	adds	r2, r2, r4
 80041fa:	eb45 0303 	adc.w	r3, r5, r3
 80041fe:	f04f 0000 	mov.w	r0, #0
 8004202:	f04f 0100 	mov.w	r1, #0
 8004206:	00d9      	lsls	r1, r3, #3
 8004208:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800420c:	00d0      	lsls	r0, r2, #3
 800420e:	4602      	mov	r2, r0
 8004210:	460b      	mov	r3, r1
 8004212:	eb12 0804 	adds.w	r8, r2, r4
 8004216:	eb43 0905 	adc.w	r9, r3, r5
 800421a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	4618      	mov	r0, r3
 8004220:	f04f 0100 	mov.w	r1, #0
 8004224:	f04f 0200 	mov.w	r2, #0
 8004228:	f04f 0300 	mov.w	r3, #0
 800422c:	008b      	lsls	r3, r1, #2
 800422e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004232:	0082      	lsls	r2, r0, #2
 8004234:	4640      	mov	r0, r8
 8004236:	4649      	mov	r1, r9
 8004238:	f7fc fcbe 	bl	8000bb8 <__aeabi_uldivmod>
 800423c:	4602      	mov	r2, r0
 800423e:	460b      	mov	r3, r1
 8004240:	4b49      	ldr	r3, [pc, #292]	; (8004368 <UART_SetConfig+0x38c>)
 8004242:	fba3 2302 	umull	r2, r3, r3, r2
 8004246:	095b      	lsrs	r3, r3, #5
 8004248:	011e      	lsls	r6, r3, #4
 800424a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800424c:	4618      	mov	r0, r3
 800424e:	f04f 0100 	mov.w	r1, #0
 8004252:	4602      	mov	r2, r0
 8004254:	460b      	mov	r3, r1
 8004256:	1894      	adds	r4, r2, r2
 8004258:	60bc      	str	r4, [r7, #8]
 800425a:	415b      	adcs	r3, r3
 800425c:	60fb      	str	r3, [r7, #12]
 800425e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004262:	1812      	adds	r2, r2, r0
 8004264:	eb41 0303 	adc.w	r3, r1, r3
 8004268:	f04f 0400 	mov.w	r4, #0
 800426c:	f04f 0500 	mov.w	r5, #0
 8004270:	00dd      	lsls	r5, r3, #3
 8004272:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004276:	00d4      	lsls	r4, r2, #3
 8004278:	4622      	mov	r2, r4
 800427a:	462b      	mov	r3, r5
 800427c:	1814      	adds	r4, r2, r0
 800427e:	64bc      	str	r4, [r7, #72]	; 0x48
 8004280:	414b      	adcs	r3, r1
 8004282:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004284:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	4618      	mov	r0, r3
 800428a:	f04f 0100 	mov.w	r1, #0
 800428e:	f04f 0200 	mov.w	r2, #0
 8004292:	f04f 0300 	mov.w	r3, #0
 8004296:	008b      	lsls	r3, r1, #2
 8004298:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800429c:	0082      	lsls	r2, r0, #2
 800429e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80042a2:	f7fc fc89 	bl	8000bb8 <__aeabi_uldivmod>
 80042a6:	4602      	mov	r2, r0
 80042a8:	460b      	mov	r3, r1
 80042aa:	4b2f      	ldr	r3, [pc, #188]	; (8004368 <UART_SetConfig+0x38c>)
 80042ac:	fba3 1302 	umull	r1, r3, r3, r2
 80042b0:	095b      	lsrs	r3, r3, #5
 80042b2:	2164      	movs	r1, #100	; 0x64
 80042b4:	fb01 f303 	mul.w	r3, r1, r3
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	011b      	lsls	r3, r3, #4
 80042bc:	3332      	adds	r3, #50	; 0x32
 80042be:	4a2a      	ldr	r2, [pc, #168]	; (8004368 <UART_SetConfig+0x38c>)
 80042c0:	fba2 2303 	umull	r2, r3, r2, r3
 80042c4:	095b      	lsrs	r3, r3, #5
 80042c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042ca:	441e      	add	r6, r3
 80042cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042ce:	4618      	mov	r0, r3
 80042d0:	f04f 0100 	mov.w	r1, #0
 80042d4:	4602      	mov	r2, r0
 80042d6:	460b      	mov	r3, r1
 80042d8:	1894      	adds	r4, r2, r2
 80042da:	603c      	str	r4, [r7, #0]
 80042dc:	415b      	adcs	r3, r3
 80042de:	607b      	str	r3, [r7, #4]
 80042e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042e4:	1812      	adds	r2, r2, r0
 80042e6:	eb41 0303 	adc.w	r3, r1, r3
 80042ea:	f04f 0400 	mov.w	r4, #0
 80042ee:	f04f 0500 	mov.w	r5, #0
 80042f2:	00dd      	lsls	r5, r3, #3
 80042f4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80042f8:	00d4      	lsls	r4, r2, #3
 80042fa:	4622      	mov	r2, r4
 80042fc:	462b      	mov	r3, r5
 80042fe:	eb12 0a00 	adds.w	sl, r2, r0
 8004302:	eb43 0b01 	adc.w	fp, r3, r1
 8004306:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	4618      	mov	r0, r3
 800430c:	f04f 0100 	mov.w	r1, #0
 8004310:	f04f 0200 	mov.w	r2, #0
 8004314:	f04f 0300 	mov.w	r3, #0
 8004318:	008b      	lsls	r3, r1, #2
 800431a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800431e:	0082      	lsls	r2, r0, #2
 8004320:	4650      	mov	r0, sl
 8004322:	4659      	mov	r1, fp
 8004324:	f7fc fc48 	bl	8000bb8 <__aeabi_uldivmod>
 8004328:	4602      	mov	r2, r0
 800432a:	460b      	mov	r3, r1
 800432c:	4b0e      	ldr	r3, [pc, #56]	; (8004368 <UART_SetConfig+0x38c>)
 800432e:	fba3 1302 	umull	r1, r3, r3, r2
 8004332:	095b      	lsrs	r3, r3, #5
 8004334:	2164      	movs	r1, #100	; 0x64
 8004336:	fb01 f303 	mul.w	r3, r1, r3
 800433a:	1ad3      	subs	r3, r2, r3
 800433c:	011b      	lsls	r3, r3, #4
 800433e:	3332      	adds	r3, #50	; 0x32
 8004340:	4a09      	ldr	r2, [pc, #36]	; (8004368 <UART_SetConfig+0x38c>)
 8004342:	fba2 2303 	umull	r2, r3, r2, r3
 8004346:	095b      	lsrs	r3, r3, #5
 8004348:	f003 020f 	and.w	r2, r3, #15
 800434c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4432      	add	r2, r6
 8004352:	609a      	str	r2, [r3, #8]
}
 8004354:	bf00      	nop
 8004356:	377c      	adds	r7, #124	; 0x7c
 8004358:	46bd      	mov	sp, r7
 800435a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800435e:	bf00      	nop
 8004360:	40011000 	.word	0x40011000
 8004364:	40011400 	.word	0x40011400
 8004368:	51eb851f 	.word	0x51eb851f

0800436c <__NVIC_SetPriority>:
{
 800436c:	b480      	push	{r7}
 800436e:	b083      	sub	sp, #12
 8004370:	af00      	add	r7, sp, #0
 8004372:	4603      	mov	r3, r0
 8004374:	6039      	str	r1, [r7, #0]
 8004376:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004378:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800437c:	2b00      	cmp	r3, #0
 800437e:	db0a      	blt.n	8004396 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	b2da      	uxtb	r2, r3
 8004384:	490c      	ldr	r1, [pc, #48]	; (80043b8 <__NVIC_SetPriority+0x4c>)
 8004386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800438a:	0112      	lsls	r2, r2, #4
 800438c:	b2d2      	uxtb	r2, r2
 800438e:	440b      	add	r3, r1
 8004390:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004394:	e00a      	b.n	80043ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	b2da      	uxtb	r2, r3
 800439a:	4908      	ldr	r1, [pc, #32]	; (80043bc <__NVIC_SetPriority+0x50>)
 800439c:	79fb      	ldrb	r3, [r7, #7]
 800439e:	f003 030f 	and.w	r3, r3, #15
 80043a2:	3b04      	subs	r3, #4
 80043a4:	0112      	lsls	r2, r2, #4
 80043a6:	b2d2      	uxtb	r2, r2
 80043a8:	440b      	add	r3, r1
 80043aa:	761a      	strb	r2, [r3, #24]
}
 80043ac:	bf00      	nop
 80043ae:	370c      	adds	r7, #12
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr
 80043b8:	e000e100 	.word	0xe000e100
 80043bc:	e000ed00 	.word	0xe000ed00

080043c0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80043c0:	b580      	push	{r7, lr}
 80043c2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80043c4:	4b05      	ldr	r3, [pc, #20]	; (80043dc <SysTick_Handler+0x1c>)
 80043c6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80043c8:	f002 f99a 	bl	8006700 <xTaskGetSchedulerState>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d001      	beq.n	80043d6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80043d2:	f003 f881 	bl	80074d8 <xPortSysTickHandler>
  }
}
 80043d6:	bf00      	nop
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	e000e010 	.word	0xe000e010

080043e0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80043e0:	b580      	push	{r7, lr}
 80043e2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80043e4:	2100      	movs	r1, #0
 80043e6:	f06f 0004 	mvn.w	r0, #4
 80043ea:	f7ff ffbf 	bl	800436c <__NVIC_SetPriority>
#endif
}
 80043ee:	bf00      	nop
 80043f0:	bd80      	pop	{r7, pc}
	...

080043f4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80043fa:	f3ef 8305 	mrs	r3, IPSR
 80043fe:	603b      	str	r3, [r7, #0]
  return(result);
 8004400:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004402:	2b00      	cmp	r3, #0
 8004404:	d003      	beq.n	800440e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004406:	f06f 0305 	mvn.w	r3, #5
 800440a:	607b      	str	r3, [r7, #4]
 800440c:	e00c      	b.n	8004428 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800440e:	4b0a      	ldr	r3, [pc, #40]	; (8004438 <osKernelInitialize+0x44>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d105      	bne.n	8004422 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004416:	4b08      	ldr	r3, [pc, #32]	; (8004438 <osKernelInitialize+0x44>)
 8004418:	2201      	movs	r2, #1
 800441a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800441c:	2300      	movs	r3, #0
 800441e:	607b      	str	r3, [r7, #4]
 8004420:	e002      	b.n	8004428 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004422:	f04f 33ff 	mov.w	r3, #4294967295
 8004426:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004428:	687b      	ldr	r3, [r7, #4]
}
 800442a:	4618      	mov	r0, r3
 800442c:	370c      	adds	r7, #12
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr
 8004436:	bf00      	nop
 8004438:	20000200 	.word	0x20000200

0800443c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800443c:	b580      	push	{r7, lr}
 800443e:	b082      	sub	sp, #8
 8004440:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004442:	f3ef 8305 	mrs	r3, IPSR
 8004446:	603b      	str	r3, [r7, #0]
  return(result);
 8004448:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800444a:	2b00      	cmp	r3, #0
 800444c:	d003      	beq.n	8004456 <osKernelStart+0x1a>
    stat = osErrorISR;
 800444e:	f06f 0305 	mvn.w	r3, #5
 8004452:	607b      	str	r3, [r7, #4]
 8004454:	e010      	b.n	8004478 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004456:	4b0b      	ldr	r3, [pc, #44]	; (8004484 <osKernelStart+0x48>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	2b01      	cmp	r3, #1
 800445c:	d109      	bne.n	8004472 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800445e:	f7ff ffbf 	bl	80043e0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004462:	4b08      	ldr	r3, [pc, #32]	; (8004484 <osKernelStart+0x48>)
 8004464:	2202      	movs	r2, #2
 8004466:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004468:	f001 fd02 	bl	8005e70 <vTaskStartScheduler>
      stat = osOK;
 800446c:	2300      	movs	r3, #0
 800446e:	607b      	str	r3, [r7, #4]
 8004470:	e002      	b.n	8004478 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004472:	f04f 33ff 	mov.w	r3, #4294967295
 8004476:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004478:	687b      	ldr	r3, [r7, #4]
}
 800447a:	4618      	mov	r0, r3
 800447c:	3708      	adds	r7, #8
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	20000200 	.word	0x20000200

08004488 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004488:	b580      	push	{r7, lr}
 800448a:	b08e      	sub	sp, #56	; 0x38
 800448c:	af04      	add	r7, sp, #16
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004494:	2300      	movs	r3, #0
 8004496:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004498:	f3ef 8305 	mrs	r3, IPSR
 800449c:	617b      	str	r3, [r7, #20]
  return(result);
 800449e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d17e      	bne.n	80045a2 <osThreadNew+0x11a>
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d07b      	beq.n	80045a2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80044aa:	2380      	movs	r3, #128	; 0x80
 80044ac:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80044ae:	2318      	movs	r3, #24
 80044b0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80044b2:	2300      	movs	r3, #0
 80044b4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80044b6:	f04f 33ff 	mov.w	r3, #4294967295
 80044ba:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d045      	beq.n	800454e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d002      	beq.n	80044d0 <osThreadNew+0x48>
        name = attr->name;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	699b      	ldr	r3, [r3, #24]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d002      	beq.n	80044de <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	699b      	ldr	r3, [r3, #24]
 80044dc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d008      	beq.n	80044f6 <osThreadNew+0x6e>
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	2b38      	cmp	r3, #56	; 0x38
 80044e8:	d805      	bhi.n	80044f6 <osThreadNew+0x6e>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	f003 0301 	and.w	r3, r3, #1
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d001      	beq.n	80044fa <osThreadNew+0x72>
        return (NULL);
 80044f6:	2300      	movs	r3, #0
 80044f8:	e054      	b.n	80045a4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	695b      	ldr	r3, [r3, #20]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d003      	beq.n	800450a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	695b      	ldr	r3, [r3, #20]
 8004506:	089b      	lsrs	r3, r3, #2
 8004508:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00e      	beq.n	8004530 <osThreadNew+0xa8>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	2b5b      	cmp	r3, #91	; 0x5b
 8004518:	d90a      	bls.n	8004530 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800451e:	2b00      	cmp	r3, #0
 8004520:	d006      	beq.n	8004530 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	695b      	ldr	r3, [r3, #20]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d002      	beq.n	8004530 <osThreadNew+0xa8>
        mem = 1;
 800452a:	2301      	movs	r3, #1
 800452c:	61bb      	str	r3, [r7, #24]
 800452e:	e010      	b.n	8004552 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d10c      	bne.n	8004552 <osThreadNew+0xca>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d108      	bne.n	8004552 <osThreadNew+0xca>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	691b      	ldr	r3, [r3, #16]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d104      	bne.n	8004552 <osThreadNew+0xca>
          mem = 0;
 8004548:	2300      	movs	r3, #0
 800454a:	61bb      	str	r3, [r7, #24]
 800454c:	e001      	b.n	8004552 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800454e:	2300      	movs	r3, #0
 8004550:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	2b01      	cmp	r3, #1
 8004556:	d110      	bne.n	800457a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800455c:	687a      	ldr	r2, [r7, #4]
 800455e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004560:	9202      	str	r2, [sp, #8]
 8004562:	9301      	str	r3, [sp, #4]
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	9300      	str	r3, [sp, #0]
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	6a3a      	ldr	r2, [r7, #32]
 800456c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800456e:	68f8      	ldr	r0, [r7, #12]
 8004570:	f001 faa8 	bl	8005ac4 <xTaskCreateStatic>
 8004574:	4603      	mov	r3, r0
 8004576:	613b      	str	r3, [r7, #16]
 8004578:	e013      	b.n	80045a2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800457a:	69bb      	ldr	r3, [r7, #24]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d110      	bne.n	80045a2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004580:	6a3b      	ldr	r3, [r7, #32]
 8004582:	b29a      	uxth	r2, r3
 8004584:	f107 0310 	add.w	r3, r7, #16
 8004588:	9301      	str	r3, [sp, #4]
 800458a:	69fb      	ldr	r3, [r7, #28]
 800458c:	9300      	str	r3, [sp, #0]
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004592:	68f8      	ldr	r0, [r7, #12]
 8004594:	f001 faf3 	bl	8005b7e <xTaskCreate>
 8004598:	4603      	mov	r3, r0
 800459a:	2b01      	cmp	r3, #1
 800459c:	d001      	beq.n	80045a2 <osThreadNew+0x11a>
            hTask = NULL;
 800459e:	2300      	movs	r3, #0
 80045a0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80045a2:	693b      	ldr	r3, [r7, #16]
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3728      	adds	r7, #40	; 0x28
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}

080045ac <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b084      	sub	sp, #16
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045b4:	f3ef 8305 	mrs	r3, IPSR
 80045b8:	60bb      	str	r3, [r7, #8]
  return(result);
 80045ba:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d003      	beq.n	80045c8 <osDelay+0x1c>
    stat = osErrorISR;
 80045c0:	f06f 0305 	mvn.w	r3, #5
 80045c4:	60fb      	str	r3, [r7, #12]
 80045c6:	e007      	b.n	80045d8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80045c8:	2300      	movs	r3, #0
 80045ca:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d002      	beq.n	80045d8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f001 fc18 	bl	8005e08 <vTaskDelay>
    }
  }

  return (stat);
 80045d8:	68fb      	ldr	r3, [r7, #12]
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3710      	adds	r7, #16
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}

080045e2 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80045e2:	b580      	push	{r7, lr}
 80045e4:	b08a      	sub	sp, #40	; 0x28
 80045e6:	af02      	add	r7, sp, #8
 80045e8:	60f8      	str	r0, [r7, #12]
 80045ea:	60b9      	str	r1, [r7, #8]
 80045ec:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80045ee:	2300      	movs	r3, #0
 80045f0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045f2:	f3ef 8305 	mrs	r3, IPSR
 80045f6:	613b      	str	r3, [r7, #16]
  return(result);
 80045f8:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d175      	bne.n	80046ea <osSemaphoreNew+0x108>
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d072      	beq.n	80046ea <osSemaphoreNew+0x108>
 8004604:	68ba      	ldr	r2, [r7, #8]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	429a      	cmp	r2, r3
 800460a:	d86e      	bhi.n	80046ea <osSemaphoreNew+0x108>
    mem = -1;
 800460c:	f04f 33ff 	mov.w	r3, #4294967295
 8004610:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d015      	beq.n	8004644 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d006      	beq.n	800462e <osSemaphoreNew+0x4c>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	2b4f      	cmp	r3, #79	; 0x4f
 8004626:	d902      	bls.n	800462e <osSemaphoreNew+0x4c>
        mem = 1;
 8004628:	2301      	movs	r3, #1
 800462a:	61bb      	str	r3, [r7, #24]
 800462c:	e00c      	b.n	8004648 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d108      	bne.n	8004648 <osSemaphoreNew+0x66>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d104      	bne.n	8004648 <osSemaphoreNew+0x66>
          mem = 0;
 800463e:	2300      	movs	r3, #0
 8004640:	61bb      	str	r3, [r7, #24]
 8004642:	e001      	b.n	8004648 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8004644:	2300      	movs	r3, #0
 8004646:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8004648:	69bb      	ldr	r3, [r7, #24]
 800464a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800464e:	d04c      	beq.n	80046ea <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2b01      	cmp	r3, #1
 8004654:	d128      	bne.n	80046a8 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8004656:	69bb      	ldr	r3, [r7, #24]
 8004658:	2b01      	cmp	r3, #1
 800465a:	d10a      	bne.n	8004672 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	2203      	movs	r2, #3
 8004662:	9200      	str	r2, [sp, #0]
 8004664:	2200      	movs	r2, #0
 8004666:	2100      	movs	r1, #0
 8004668:	2001      	movs	r0, #1
 800466a:	f000 fa49 	bl	8004b00 <xQueueGenericCreateStatic>
 800466e:	61f8      	str	r0, [r7, #28]
 8004670:	e005      	b.n	800467e <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8004672:	2203      	movs	r2, #3
 8004674:	2100      	movs	r1, #0
 8004676:	2001      	movs	r0, #1
 8004678:	f000 faba 	bl	8004bf0 <xQueueGenericCreate>
 800467c:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d022      	beq.n	80046ca <osSemaphoreNew+0xe8>
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d01f      	beq.n	80046ca <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800468a:	2300      	movs	r3, #0
 800468c:	2200      	movs	r2, #0
 800468e:	2100      	movs	r1, #0
 8004690:	69f8      	ldr	r0, [r7, #28]
 8004692:	f000 fb75 	bl	8004d80 <xQueueGenericSend>
 8004696:	4603      	mov	r3, r0
 8004698:	2b01      	cmp	r3, #1
 800469a:	d016      	beq.n	80046ca <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800469c:	69f8      	ldr	r0, [r7, #28]
 800469e:	f001 f83d 	bl	800571c <vQueueDelete>
            hSemaphore = NULL;
 80046a2:	2300      	movs	r3, #0
 80046a4:	61fb      	str	r3, [r7, #28]
 80046a6:	e010      	b.n	80046ca <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80046a8:	69bb      	ldr	r3, [r7, #24]
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d108      	bne.n	80046c0 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	461a      	mov	r2, r3
 80046b4:	68b9      	ldr	r1, [r7, #8]
 80046b6:	68f8      	ldr	r0, [r7, #12]
 80046b8:	f000 faf7 	bl	8004caa <xQueueCreateCountingSemaphoreStatic>
 80046bc:	61f8      	str	r0, [r7, #28]
 80046be:	e004      	b.n	80046ca <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80046c0:	68b9      	ldr	r1, [r7, #8]
 80046c2:	68f8      	ldr	r0, [r7, #12]
 80046c4:	f000 fb28 	bl	8004d18 <xQueueCreateCountingSemaphore>
 80046c8:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d00c      	beq.n	80046ea <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d003      	beq.n	80046de <osSemaphoreNew+0xfc>
          name = attr->name;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	617b      	str	r3, [r7, #20]
 80046dc:	e001      	b.n	80046e2 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80046de:	2300      	movs	r3, #0
 80046e0:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80046e2:	6979      	ldr	r1, [r7, #20]
 80046e4:	69f8      	ldr	r0, [r7, #28]
 80046e6:	f001 f965 	bl	80059b4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80046ea:	69fb      	ldr	r3, [r7, #28]
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3720      	adds	r7, #32
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b086      	sub	sp, #24
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004702:	2300      	movs	r3, #0
 8004704:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d103      	bne.n	8004714 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800470c:	f06f 0303 	mvn.w	r3, #3
 8004710:	617b      	str	r3, [r7, #20]
 8004712:	e039      	b.n	8004788 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004714:	f3ef 8305 	mrs	r3, IPSR
 8004718:	60fb      	str	r3, [r7, #12]
  return(result);
 800471a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800471c:	2b00      	cmp	r3, #0
 800471e:	d022      	beq.n	8004766 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d003      	beq.n	800472e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8004726:	f06f 0303 	mvn.w	r3, #3
 800472a:	617b      	str	r3, [r7, #20]
 800472c:	e02c      	b.n	8004788 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800472e:	2300      	movs	r3, #0
 8004730:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8004732:	f107 0308 	add.w	r3, r7, #8
 8004736:	461a      	mov	r2, r3
 8004738:	2100      	movs	r1, #0
 800473a:	6938      	ldr	r0, [r7, #16]
 800473c:	f000 ff32 	bl	80055a4 <xQueueReceiveFromISR>
 8004740:	4603      	mov	r3, r0
 8004742:	2b01      	cmp	r3, #1
 8004744:	d003      	beq.n	800474e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8004746:	f06f 0302 	mvn.w	r3, #2
 800474a:	617b      	str	r3, [r7, #20]
 800474c:	e01c      	b.n	8004788 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d019      	beq.n	8004788 <osSemaphoreAcquire+0x94>
 8004754:	4b0f      	ldr	r3, [pc, #60]	; (8004794 <osSemaphoreAcquire+0xa0>)
 8004756:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800475a:	601a      	str	r2, [r3, #0]
 800475c:	f3bf 8f4f 	dsb	sy
 8004760:	f3bf 8f6f 	isb	sy
 8004764:	e010      	b.n	8004788 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8004766:	6839      	ldr	r1, [r7, #0]
 8004768:	6938      	ldr	r0, [r7, #16]
 800476a:	f000 fe0f 	bl	800538c <xQueueSemaphoreTake>
 800476e:	4603      	mov	r3, r0
 8004770:	2b01      	cmp	r3, #1
 8004772:	d009      	beq.n	8004788 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d003      	beq.n	8004782 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800477a:	f06f 0301 	mvn.w	r3, #1
 800477e:	617b      	str	r3, [r7, #20]
 8004780:	e002      	b.n	8004788 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8004782:	f06f 0302 	mvn.w	r3, #2
 8004786:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8004788:	697b      	ldr	r3, [r7, #20]
}
 800478a:	4618      	mov	r0, r3
 800478c:	3718      	adds	r7, #24
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	e000ed04 	.word	0xe000ed04

08004798 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8004798:	b580      	push	{r7, lr}
 800479a:	b086      	sub	sp, #24
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80047a4:	2300      	movs	r3, #0
 80047a6:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d103      	bne.n	80047b6 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80047ae:	f06f 0303 	mvn.w	r3, #3
 80047b2:	617b      	str	r3, [r7, #20]
 80047b4:	e02c      	b.n	8004810 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80047b6:	f3ef 8305 	mrs	r3, IPSR
 80047ba:	60fb      	str	r3, [r7, #12]
  return(result);
 80047bc:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d01a      	beq.n	80047f8 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80047c2:	2300      	movs	r3, #0
 80047c4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80047c6:	f107 0308 	add.w	r3, r7, #8
 80047ca:	4619      	mov	r1, r3
 80047cc:	6938      	ldr	r0, [r7, #16]
 80047ce:	f000 fc70 	bl	80050b2 <xQueueGiveFromISR>
 80047d2:	4603      	mov	r3, r0
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d003      	beq.n	80047e0 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80047d8:	f06f 0302 	mvn.w	r3, #2
 80047dc:	617b      	str	r3, [r7, #20]
 80047de:	e017      	b.n	8004810 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d014      	beq.n	8004810 <osSemaphoreRelease+0x78>
 80047e6:	4b0d      	ldr	r3, [pc, #52]	; (800481c <osSemaphoreRelease+0x84>)
 80047e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047ec:	601a      	str	r2, [r3, #0]
 80047ee:	f3bf 8f4f 	dsb	sy
 80047f2:	f3bf 8f6f 	isb	sy
 80047f6:	e00b      	b.n	8004810 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80047f8:	2300      	movs	r3, #0
 80047fa:	2200      	movs	r2, #0
 80047fc:	2100      	movs	r1, #0
 80047fe:	6938      	ldr	r0, [r7, #16]
 8004800:	f000 fabe 	bl	8004d80 <xQueueGenericSend>
 8004804:	4603      	mov	r3, r0
 8004806:	2b01      	cmp	r3, #1
 8004808:	d002      	beq.n	8004810 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800480a:	f06f 0302 	mvn.w	r3, #2
 800480e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8004810:	697b      	ldr	r3, [r7, #20]
}
 8004812:	4618      	mov	r0, r3
 8004814:	3718      	adds	r7, #24
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
 800481a:	bf00      	nop
 800481c:	e000ed04 	.word	0xe000ed04

08004820 <osSemaphoreGetCount>:

uint32_t osSemaphoreGetCount (osSemaphoreId_t semaphore_id) {
 8004820:	b580      	push	{r7, lr}
 8004822:	b086      	sub	sp, #24
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	613b      	str	r3, [r7, #16]
  uint32_t count;

  if (hSemaphore == NULL) {
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d102      	bne.n	8004838 <osSemaphoreGetCount+0x18>
    count = 0U;
 8004832:	2300      	movs	r3, #0
 8004834:	617b      	str	r3, [r7, #20]
 8004836:	e00e      	b.n	8004856 <osSemaphoreGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004838:	f3ef 8305 	mrs	r3, IPSR
 800483c:	60fb      	str	r3, [r7, #12]
  return(result);
 800483e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004840:	2b00      	cmp	r3, #0
 8004842:	d004      	beq.n	800484e <osSemaphoreGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hSemaphore);
 8004844:	6938      	ldr	r0, [r7, #16]
 8004846:	f000 ff4b 	bl	80056e0 <uxQueueMessagesWaitingFromISR>
 800484a:	6178      	str	r0, [r7, #20]
 800484c:	e003      	b.n	8004856 <osSemaphoreGetCount+0x36>
  } else {
    count = (uint32_t)uxSemaphoreGetCount (hSemaphore);
 800484e:	6938      	ldr	r0, [r7, #16]
 8004850:	f000 ff28 	bl	80056a4 <uxQueueMessagesWaiting>
 8004854:	6178      	str	r0, [r7, #20]
  }

  return (count);
 8004856:	697b      	ldr	r3, [r7, #20]
}
 8004858:	4618      	mov	r0, r3
 800485a:	3718      	adds	r7, #24
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}

08004860 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004860:	b480      	push	{r7}
 8004862:	b085      	sub	sp, #20
 8004864:	af00      	add	r7, sp, #0
 8004866:	60f8      	str	r0, [r7, #12]
 8004868:	60b9      	str	r1, [r7, #8]
 800486a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	4a07      	ldr	r2, [pc, #28]	; (800488c <vApplicationGetIdleTaskMemory+0x2c>)
 8004870:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	4a06      	ldr	r2, [pc, #24]	; (8004890 <vApplicationGetIdleTaskMemory+0x30>)
 8004876:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2280      	movs	r2, #128	; 0x80
 800487c:	601a      	str	r2, [r3, #0]
}
 800487e:	bf00      	nop
 8004880:	3714      	adds	r7, #20
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr
 800488a:	bf00      	nop
 800488c:	20000204 	.word	0x20000204
 8004890:	20000260 	.word	0x20000260

08004894 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004894:	b480      	push	{r7}
 8004896:	b085      	sub	sp, #20
 8004898:	af00      	add	r7, sp, #0
 800489a:	60f8      	str	r0, [r7, #12]
 800489c:	60b9      	str	r1, [r7, #8]
 800489e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	4a07      	ldr	r2, [pc, #28]	; (80048c0 <vApplicationGetTimerTaskMemory+0x2c>)
 80048a4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	4a06      	ldr	r2, [pc, #24]	; (80048c4 <vApplicationGetTimerTaskMemory+0x30>)
 80048aa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80048b2:	601a      	str	r2, [r3, #0]
}
 80048b4:	bf00      	nop
 80048b6:	3714      	adds	r7, #20
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr
 80048c0:	20000460 	.word	0x20000460
 80048c4:	200004bc 	.word	0x200004bc

080048c8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f103 0208 	add.w	r2, r3, #8
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f04f 32ff 	mov.w	r2, #4294967295
 80048e0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f103 0208 	add.w	r2, r3, #8
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f103 0208 	add.w	r2, r3, #8
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80048fc:	bf00      	nop
 80048fe:	370c      	adds	r7, #12
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr

08004908 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004916:	bf00      	nop
 8004918:	370c      	adds	r7, #12
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr

08004922 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004922:	b480      	push	{r7}
 8004924:	b085      	sub	sp, #20
 8004926:	af00      	add	r7, sp, #0
 8004928:	6078      	str	r0, [r7, #4]
 800492a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	68fa      	ldr	r2, [r7, #12]
 8004936:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	689a      	ldr	r2, [r3, #8]
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	683a      	ldr	r2, [r7, #0]
 8004946:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	683a      	ldr	r2, [r7, #0]
 800494c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	687a      	ldr	r2, [r7, #4]
 8004952:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	1c5a      	adds	r2, r3, #1
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	601a      	str	r2, [r3, #0]
}
 800495e:	bf00      	nop
 8004960:	3714      	adds	r7, #20
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr

0800496a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800496a:	b480      	push	{r7}
 800496c:	b085      	sub	sp, #20
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
 8004972:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004980:	d103      	bne.n	800498a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	691b      	ldr	r3, [r3, #16]
 8004986:	60fb      	str	r3, [r7, #12]
 8004988:	e00c      	b.n	80049a4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	3308      	adds	r3, #8
 800498e:	60fb      	str	r3, [r7, #12]
 8004990:	e002      	b.n	8004998 <vListInsert+0x2e>
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	60fb      	str	r3, [r7, #12]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	68ba      	ldr	r2, [r7, #8]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d2f6      	bcs.n	8004992 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	685a      	ldr	r2, [r3, #4]
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	683a      	ldr	r2, [r7, #0]
 80049b2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	68fa      	ldr	r2, [r7, #12]
 80049b8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	683a      	ldr	r2, [r7, #0]
 80049be:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	1c5a      	adds	r2, r3, #1
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	601a      	str	r2, [r3, #0]
}
 80049d0:	bf00      	nop
 80049d2:	3714      	adds	r7, #20
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr

080049dc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80049dc:	b480      	push	{r7}
 80049de:	b085      	sub	sp, #20
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	691b      	ldr	r3, [r3, #16]
 80049e8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	6892      	ldr	r2, [r2, #8]
 80049f2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	6852      	ldr	r2, [r2, #4]
 80049fc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d103      	bne.n	8004a10 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	689a      	ldr	r2, [r3, #8]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	1e5a      	subs	r2, r3, #1
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3714      	adds	r7, #20
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr

08004a30 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b084      	sub	sp, #16
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d10a      	bne.n	8004a5a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a48:	f383 8811 	msr	BASEPRI, r3
 8004a4c:	f3bf 8f6f 	isb	sy
 8004a50:	f3bf 8f4f 	dsb	sy
 8004a54:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004a56:	bf00      	nop
 8004a58:	e7fe      	b.n	8004a58 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004a5a:	f002 fcab 	bl	80073b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a66:	68f9      	ldr	r1, [r7, #12]
 8004a68:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004a6a:	fb01 f303 	mul.w	r3, r1, r3
 8004a6e:	441a      	add	r2, r3
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2200      	movs	r2, #0
 8004a78:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a8a:	3b01      	subs	r3, #1
 8004a8c:	68f9      	ldr	r1, [r7, #12]
 8004a8e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004a90:	fb01 f303 	mul.w	r3, r1, r3
 8004a94:	441a      	add	r2, r3
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	22ff      	movs	r2, #255	; 0xff
 8004a9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	22ff      	movs	r2, #255	; 0xff
 8004aa6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d114      	bne.n	8004ada <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	691b      	ldr	r3, [r3, #16]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d01a      	beq.n	8004aee <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	3310      	adds	r3, #16
 8004abc:	4618      	mov	r0, r3
 8004abe:	f001 fc61 	bl	8006384 <xTaskRemoveFromEventList>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d012      	beq.n	8004aee <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004ac8:	4b0c      	ldr	r3, [pc, #48]	; (8004afc <xQueueGenericReset+0xcc>)
 8004aca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ace:	601a      	str	r2, [r3, #0]
 8004ad0:	f3bf 8f4f 	dsb	sy
 8004ad4:	f3bf 8f6f 	isb	sy
 8004ad8:	e009      	b.n	8004aee <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	3310      	adds	r3, #16
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f7ff fef2 	bl	80048c8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	3324      	adds	r3, #36	; 0x24
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f7ff feed 	bl	80048c8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004aee:	f002 fc91 	bl	8007414 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004af2:	2301      	movs	r3, #1
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3710      	adds	r7, #16
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}
 8004afc:	e000ed04 	.word	0xe000ed04

08004b00 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b08e      	sub	sp, #56	; 0x38
 8004b04:	af02      	add	r7, sp, #8
 8004b06:	60f8      	str	r0, [r7, #12]
 8004b08:	60b9      	str	r1, [r7, #8]
 8004b0a:	607a      	str	r2, [r7, #4]
 8004b0c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d10a      	bne.n	8004b2a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b18:	f383 8811 	msr	BASEPRI, r3
 8004b1c:	f3bf 8f6f 	isb	sy
 8004b20:	f3bf 8f4f 	dsb	sy
 8004b24:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004b26:	bf00      	nop
 8004b28:	e7fe      	b.n	8004b28 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d10a      	bne.n	8004b46 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b34:	f383 8811 	msr	BASEPRI, r3
 8004b38:	f3bf 8f6f 	isb	sy
 8004b3c:	f3bf 8f4f 	dsb	sy
 8004b40:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004b42:	bf00      	nop
 8004b44:	e7fe      	b.n	8004b44 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d002      	beq.n	8004b52 <xQueueGenericCreateStatic+0x52>
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d001      	beq.n	8004b56 <xQueueGenericCreateStatic+0x56>
 8004b52:	2301      	movs	r3, #1
 8004b54:	e000      	b.n	8004b58 <xQueueGenericCreateStatic+0x58>
 8004b56:	2300      	movs	r3, #0
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d10a      	bne.n	8004b72 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b60:	f383 8811 	msr	BASEPRI, r3
 8004b64:	f3bf 8f6f 	isb	sy
 8004b68:	f3bf 8f4f 	dsb	sy
 8004b6c:	623b      	str	r3, [r7, #32]
}
 8004b6e:	bf00      	nop
 8004b70:	e7fe      	b.n	8004b70 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d102      	bne.n	8004b7e <xQueueGenericCreateStatic+0x7e>
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d101      	bne.n	8004b82 <xQueueGenericCreateStatic+0x82>
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e000      	b.n	8004b84 <xQueueGenericCreateStatic+0x84>
 8004b82:	2300      	movs	r3, #0
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d10a      	bne.n	8004b9e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b8c:	f383 8811 	msr	BASEPRI, r3
 8004b90:	f3bf 8f6f 	isb	sy
 8004b94:	f3bf 8f4f 	dsb	sy
 8004b98:	61fb      	str	r3, [r7, #28]
}
 8004b9a:	bf00      	nop
 8004b9c:	e7fe      	b.n	8004b9c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004b9e:	2350      	movs	r3, #80	; 0x50
 8004ba0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	2b50      	cmp	r3, #80	; 0x50
 8004ba6:	d00a      	beq.n	8004bbe <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bac:	f383 8811 	msr	BASEPRI, r3
 8004bb0:	f3bf 8f6f 	isb	sy
 8004bb4:	f3bf 8f4f 	dsb	sy
 8004bb8:	61bb      	str	r3, [r7, #24]
}
 8004bba:	bf00      	nop
 8004bbc:	e7fe      	b.n	8004bbc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004bbe:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d00d      	beq.n	8004be6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bcc:	2201      	movs	r2, #1
 8004bce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004bd2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bd8:	9300      	str	r3, [sp, #0]
 8004bda:	4613      	mov	r3, r2
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	68b9      	ldr	r1, [r7, #8]
 8004be0:	68f8      	ldr	r0, [r7, #12]
 8004be2:	f000 f83f 	bl	8004c64 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3730      	adds	r7, #48	; 0x30
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b08a      	sub	sp, #40	; 0x28
 8004bf4:	af02      	add	r7, sp, #8
 8004bf6:	60f8      	str	r0, [r7, #12]
 8004bf8:	60b9      	str	r1, [r7, #8]
 8004bfa:	4613      	mov	r3, r2
 8004bfc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d10a      	bne.n	8004c1a <xQueueGenericCreate+0x2a>
	__asm volatile
 8004c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c08:	f383 8811 	msr	BASEPRI, r3
 8004c0c:	f3bf 8f6f 	isb	sy
 8004c10:	f3bf 8f4f 	dsb	sy
 8004c14:	613b      	str	r3, [r7, #16]
}
 8004c16:	bf00      	nop
 8004c18:	e7fe      	b.n	8004c18 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	68ba      	ldr	r2, [r7, #8]
 8004c1e:	fb02 f303 	mul.w	r3, r2, r3
 8004c22:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004c24:	69fb      	ldr	r3, [r7, #28]
 8004c26:	3350      	adds	r3, #80	; 0x50
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f002 fce5 	bl	80075f8 <pvPortMalloc>
 8004c2e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004c30:	69bb      	ldr	r3, [r7, #24]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d011      	beq.n	8004c5a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004c36:	69bb      	ldr	r3, [r7, #24]
 8004c38:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	3350      	adds	r3, #80	; 0x50
 8004c3e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004c40:	69bb      	ldr	r3, [r7, #24]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004c48:	79fa      	ldrb	r2, [r7, #7]
 8004c4a:	69bb      	ldr	r3, [r7, #24]
 8004c4c:	9300      	str	r3, [sp, #0]
 8004c4e:	4613      	mov	r3, r2
 8004c50:	697a      	ldr	r2, [r7, #20]
 8004c52:	68b9      	ldr	r1, [r7, #8]
 8004c54:	68f8      	ldr	r0, [r7, #12]
 8004c56:	f000 f805 	bl	8004c64 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004c5a:	69bb      	ldr	r3, [r7, #24]
	}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3720      	adds	r7, #32
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}

08004c64 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b084      	sub	sp, #16
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	60b9      	str	r1, [r7, #8]
 8004c6e:	607a      	str	r2, [r7, #4]
 8004c70:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d103      	bne.n	8004c80 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004c78:	69bb      	ldr	r3, [r7, #24]
 8004c7a:	69ba      	ldr	r2, [r7, #24]
 8004c7c:	601a      	str	r2, [r3, #0]
 8004c7e:	e002      	b.n	8004c86 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004c80:	69bb      	ldr	r3, [r7, #24]
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004c86:	69bb      	ldr	r3, [r7, #24]
 8004c88:	68fa      	ldr	r2, [r7, #12]
 8004c8a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004c8c:	69bb      	ldr	r3, [r7, #24]
 8004c8e:	68ba      	ldr	r2, [r7, #8]
 8004c90:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004c92:	2101      	movs	r1, #1
 8004c94:	69b8      	ldr	r0, [r7, #24]
 8004c96:	f7ff fecb 	bl	8004a30 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004c9a:	69bb      	ldr	r3, [r7, #24]
 8004c9c:	78fa      	ldrb	r2, [r7, #3]
 8004c9e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004ca2:	bf00      	nop
 8004ca4:	3710      	adds	r7, #16
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}

08004caa <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8004caa:	b580      	push	{r7, lr}
 8004cac:	b08a      	sub	sp, #40	; 0x28
 8004cae:	af02      	add	r7, sp, #8
 8004cb0:	60f8      	str	r0, [r7, #12]
 8004cb2:	60b9      	str	r1, [r7, #8]
 8004cb4:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d10a      	bne.n	8004cd2 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8004cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc0:	f383 8811 	msr	BASEPRI, r3
 8004cc4:	f3bf 8f6f 	isb	sy
 8004cc8:	f3bf 8f4f 	dsb	sy
 8004ccc:	61bb      	str	r3, [r7, #24]
}
 8004cce:	bf00      	nop
 8004cd0:	e7fe      	b.n	8004cd0 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004cd2:	68ba      	ldr	r2, [r7, #8]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d90a      	bls.n	8004cf0 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8004cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cde:	f383 8811 	msr	BASEPRI, r3
 8004ce2:	f3bf 8f6f 	isb	sy
 8004ce6:	f3bf 8f4f 	dsb	sy
 8004cea:	617b      	str	r3, [r7, #20]
}
 8004cec:	bf00      	nop
 8004cee:	e7fe      	b.n	8004cee <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004cf0:	2302      	movs	r3, #2
 8004cf2:	9300      	str	r3, [sp, #0]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	2100      	movs	r1, #0
 8004cfa:	68f8      	ldr	r0, [r7, #12]
 8004cfc:	f7ff ff00 	bl	8004b00 <xQueueGenericCreateStatic>
 8004d00:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d002      	beq.n	8004d0e <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	68ba      	ldr	r2, [r7, #8]
 8004d0c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004d0e:	69fb      	ldr	r3, [r7, #28]
	}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3720      	adds	r7, #32
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}

08004d18 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b086      	sub	sp, #24
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
 8004d20:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d10a      	bne.n	8004d3e <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8004d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d2c:	f383 8811 	msr	BASEPRI, r3
 8004d30:	f3bf 8f6f 	isb	sy
 8004d34:	f3bf 8f4f 	dsb	sy
 8004d38:	613b      	str	r3, [r7, #16]
}
 8004d3a:	bf00      	nop
 8004d3c:	e7fe      	b.n	8004d3c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004d3e:	683a      	ldr	r2, [r7, #0]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d90a      	bls.n	8004d5c <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8004d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d4a:	f383 8811 	msr	BASEPRI, r3
 8004d4e:	f3bf 8f6f 	isb	sy
 8004d52:	f3bf 8f4f 	dsb	sy
 8004d56:	60fb      	str	r3, [r7, #12]
}
 8004d58:	bf00      	nop
 8004d5a:	e7fe      	b.n	8004d5a <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004d5c:	2202      	movs	r2, #2
 8004d5e:	2100      	movs	r1, #0
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f7ff ff45 	bl	8004bf0 <xQueueGenericCreate>
 8004d66:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d002      	beq.n	8004d74 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	683a      	ldr	r2, [r7, #0]
 8004d72:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004d74:	697b      	ldr	r3, [r7, #20]
	}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3718      	adds	r7, #24
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}
	...

08004d80 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b08e      	sub	sp, #56	; 0x38
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	60f8      	str	r0, [r7, #12]
 8004d88:	60b9      	str	r1, [r7, #8]
 8004d8a:	607a      	str	r2, [r7, #4]
 8004d8c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d10a      	bne.n	8004db2 <xQueueGenericSend+0x32>
	__asm volatile
 8004d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da0:	f383 8811 	msr	BASEPRI, r3
 8004da4:	f3bf 8f6f 	isb	sy
 8004da8:	f3bf 8f4f 	dsb	sy
 8004dac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004dae:	bf00      	nop
 8004db0:	e7fe      	b.n	8004db0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d103      	bne.n	8004dc0 <xQueueGenericSend+0x40>
 8004db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d101      	bne.n	8004dc4 <xQueueGenericSend+0x44>
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e000      	b.n	8004dc6 <xQueueGenericSend+0x46>
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d10a      	bne.n	8004de0 <xQueueGenericSend+0x60>
	__asm volatile
 8004dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dce:	f383 8811 	msr	BASEPRI, r3
 8004dd2:	f3bf 8f6f 	isb	sy
 8004dd6:	f3bf 8f4f 	dsb	sy
 8004dda:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004ddc:	bf00      	nop
 8004dde:	e7fe      	b.n	8004dde <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	2b02      	cmp	r3, #2
 8004de4:	d103      	bne.n	8004dee <xQueueGenericSend+0x6e>
 8004de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004de8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d101      	bne.n	8004df2 <xQueueGenericSend+0x72>
 8004dee:	2301      	movs	r3, #1
 8004df0:	e000      	b.n	8004df4 <xQueueGenericSend+0x74>
 8004df2:	2300      	movs	r3, #0
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d10a      	bne.n	8004e0e <xQueueGenericSend+0x8e>
	__asm volatile
 8004df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dfc:	f383 8811 	msr	BASEPRI, r3
 8004e00:	f3bf 8f6f 	isb	sy
 8004e04:	f3bf 8f4f 	dsb	sy
 8004e08:	623b      	str	r3, [r7, #32]
}
 8004e0a:	bf00      	nop
 8004e0c:	e7fe      	b.n	8004e0c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004e0e:	f001 fc77 	bl	8006700 <xTaskGetSchedulerState>
 8004e12:	4603      	mov	r3, r0
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d102      	bne.n	8004e1e <xQueueGenericSend+0x9e>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d101      	bne.n	8004e22 <xQueueGenericSend+0xa2>
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e000      	b.n	8004e24 <xQueueGenericSend+0xa4>
 8004e22:	2300      	movs	r3, #0
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d10a      	bne.n	8004e3e <xQueueGenericSend+0xbe>
	__asm volatile
 8004e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e2c:	f383 8811 	msr	BASEPRI, r3
 8004e30:	f3bf 8f6f 	isb	sy
 8004e34:	f3bf 8f4f 	dsb	sy
 8004e38:	61fb      	str	r3, [r7, #28]
}
 8004e3a:	bf00      	nop
 8004e3c:	e7fe      	b.n	8004e3c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004e3e:	f002 fab9 	bl	80073b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d302      	bcc.n	8004e54 <xQueueGenericSend+0xd4>
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	2b02      	cmp	r3, #2
 8004e52:	d129      	bne.n	8004ea8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004e54:	683a      	ldr	r2, [r7, #0]
 8004e56:	68b9      	ldr	r1, [r7, #8]
 8004e58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e5a:	f000 fc9a 	bl	8005792 <prvCopyDataToQueue>
 8004e5e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d010      	beq.n	8004e8a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e6a:	3324      	adds	r3, #36	; 0x24
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f001 fa89 	bl	8006384 <xTaskRemoveFromEventList>
 8004e72:	4603      	mov	r3, r0
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d013      	beq.n	8004ea0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004e78:	4b3f      	ldr	r3, [pc, #252]	; (8004f78 <xQueueGenericSend+0x1f8>)
 8004e7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e7e:	601a      	str	r2, [r3, #0]
 8004e80:	f3bf 8f4f 	dsb	sy
 8004e84:	f3bf 8f6f 	isb	sy
 8004e88:	e00a      	b.n	8004ea0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d007      	beq.n	8004ea0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004e90:	4b39      	ldr	r3, [pc, #228]	; (8004f78 <xQueueGenericSend+0x1f8>)
 8004e92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e96:	601a      	str	r2, [r3, #0]
 8004e98:	f3bf 8f4f 	dsb	sy
 8004e9c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004ea0:	f002 fab8 	bl	8007414 <vPortExitCritical>
				return pdPASS;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e063      	b.n	8004f70 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d103      	bne.n	8004eb6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004eae:	f002 fab1 	bl	8007414 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	e05c      	b.n	8004f70 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004eb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d106      	bne.n	8004eca <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004ebc:	f107 0314 	add.w	r3, r7, #20
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f001 fac3 	bl	800644c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004eca:	f002 faa3 	bl	8007414 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004ece:	f001 f835 	bl	8005f3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004ed2:	f002 fa6f 	bl	80073b4 <vPortEnterCritical>
 8004ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004edc:	b25b      	sxtb	r3, r3
 8004ede:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ee2:	d103      	bne.n	8004eec <xQueueGenericSend+0x16c>
 8004ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ef2:	b25b      	sxtb	r3, r3
 8004ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ef8:	d103      	bne.n	8004f02 <xQueueGenericSend+0x182>
 8004efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004efc:	2200      	movs	r2, #0
 8004efe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f02:	f002 fa87 	bl	8007414 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004f06:	1d3a      	adds	r2, r7, #4
 8004f08:	f107 0314 	add.w	r3, r7, #20
 8004f0c:	4611      	mov	r1, r2
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f001 fab2 	bl	8006478 <xTaskCheckForTimeOut>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d124      	bne.n	8004f64 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004f1a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f1c:	f000 fd31 	bl	8005982 <prvIsQueueFull>
 8004f20:	4603      	mov	r3, r0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d018      	beq.n	8004f58 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f28:	3310      	adds	r3, #16
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	4611      	mov	r1, r2
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f001 f9d8 	bl	80062e4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004f34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f36:	f000 fcbc 	bl	80058b2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004f3a:	f001 f80d 	bl	8005f58 <xTaskResumeAll>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	f47f af7c 	bne.w	8004e3e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004f46:	4b0c      	ldr	r3, [pc, #48]	; (8004f78 <xQueueGenericSend+0x1f8>)
 8004f48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f4c:	601a      	str	r2, [r3, #0]
 8004f4e:	f3bf 8f4f 	dsb	sy
 8004f52:	f3bf 8f6f 	isb	sy
 8004f56:	e772      	b.n	8004e3e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004f58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f5a:	f000 fcaa 	bl	80058b2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004f5e:	f000 fffb 	bl	8005f58 <xTaskResumeAll>
 8004f62:	e76c      	b.n	8004e3e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004f64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f66:	f000 fca4 	bl	80058b2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004f6a:	f000 fff5 	bl	8005f58 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004f6e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3738      	adds	r7, #56	; 0x38
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}
 8004f78:	e000ed04 	.word	0xe000ed04

08004f7c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b090      	sub	sp, #64	; 0x40
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	60f8      	str	r0, [r7, #12]
 8004f84:	60b9      	str	r1, [r7, #8]
 8004f86:	607a      	str	r2, [r7, #4]
 8004f88:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d10a      	bne.n	8004faa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f98:	f383 8811 	msr	BASEPRI, r3
 8004f9c:	f3bf 8f6f 	isb	sy
 8004fa0:	f3bf 8f4f 	dsb	sy
 8004fa4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004fa6:	bf00      	nop
 8004fa8:	e7fe      	b.n	8004fa8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d103      	bne.n	8004fb8 <xQueueGenericSendFromISR+0x3c>
 8004fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d101      	bne.n	8004fbc <xQueueGenericSendFromISR+0x40>
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e000      	b.n	8004fbe <xQueueGenericSendFromISR+0x42>
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d10a      	bne.n	8004fd8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc6:	f383 8811 	msr	BASEPRI, r3
 8004fca:	f3bf 8f6f 	isb	sy
 8004fce:	f3bf 8f4f 	dsb	sy
 8004fd2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004fd4:	bf00      	nop
 8004fd6:	e7fe      	b.n	8004fd6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	2b02      	cmp	r3, #2
 8004fdc:	d103      	bne.n	8004fe6 <xQueueGenericSendFromISR+0x6a>
 8004fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d101      	bne.n	8004fea <xQueueGenericSendFromISR+0x6e>
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e000      	b.n	8004fec <xQueueGenericSendFromISR+0x70>
 8004fea:	2300      	movs	r3, #0
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d10a      	bne.n	8005006 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff4:	f383 8811 	msr	BASEPRI, r3
 8004ff8:	f3bf 8f6f 	isb	sy
 8004ffc:	f3bf 8f4f 	dsb	sy
 8005000:	623b      	str	r3, [r7, #32]
}
 8005002:	bf00      	nop
 8005004:	e7fe      	b.n	8005004 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005006:	f002 fab7 	bl	8007578 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800500a:	f3ef 8211 	mrs	r2, BASEPRI
 800500e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005012:	f383 8811 	msr	BASEPRI, r3
 8005016:	f3bf 8f6f 	isb	sy
 800501a:	f3bf 8f4f 	dsb	sy
 800501e:	61fa      	str	r2, [r7, #28]
 8005020:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005022:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005024:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005028:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800502a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800502c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800502e:	429a      	cmp	r2, r3
 8005030:	d302      	bcc.n	8005038 <xQueueGenericSendFromISR+0xbc>
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	2b02      	cmp	r3, #2
 8005036:	d12f      	bne.n	8005098 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800503a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800503e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005046:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005048:	683a      	ldr	r2, [r7, #0]
 800504a:	68b9      	ldr	r1, [r7, #8]
 800504c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800504e:	f000 fba0 	bl	8005792 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005052:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800505a:	d112      	bne.n	8005082 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800505c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800505e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005060:	2b00      	cmp	r3, #0
 8005062:	d016      	beq.n	8005092 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005066:	3324      	adds	r3, #36	; 0x24
 8005068:	4618      	mov	r0, r3
 800506a:	f001 f98b 	bl	8006384 <xTaskRemoveFromEventList>
 800506e:	4603      	mov	r3, r0
 8005070:	2b00      	cmp	r3, #0
 8005072:	d00e      	beq.n	8005092 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d00b      	beq.n	8005092 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2201      	movs	r2, #1
 800507e:	601a      	str	r2, [r3, #0]
 8005080:	e007      	b.n	8005092 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005082:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005086:	3301      	adds	r3, #1
 8005088:	b2db      	uxtb	r3, r3
 800508a:	b25a      	sxtb	r2, r3
 800508c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800508e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005092:	2301      	movs	r3, #1
 8005094:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005096:	e001      	b.n	800509c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005098:	2300      	movs	r3, #0
 800509a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800509c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800509e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80050a6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80050a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3740      	adds	r7, #64	; 0x40
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}

080050b2 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80050b2:	b580      	push	{r7, lr}
 80050b4:	b08e      	sub	sp, #56	; 0x38
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	6078      	str	r0, [r7, #4]
 80050ba:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80050c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d10a      	bne.n	80050dc <xQueueGiveFromISR+0x2a>
	__asm volatile
 80050c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ca:	f383 8811 	msr	BASEPRI, r3
 80050ce:	f3bf 8f6f 	isb	sy
 80050d2:	f3bf 8f4f 	dsb	sy
 80050d6:	623b      	str	r3, [r7, #32]
}
 80050d8:	bf00      	nop
 80050da:	e7fe      	b.n	80050da <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80050dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d00a      	beq.n	80050fa <xQueueGiveFromISR+0x48>
	__asm volatile
 80050e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e8:	f383 8811 	msr	BASEPRI, r3
 80050ec:	f3bf 8f6f 	isb	sy
 80050f0:	f3bf 8f4f 	dsb	sy
 80050f4:	61fb      	str	r3, [r7, #28]
}
 80050f6:	bf00      	nop
 80050f8:	e7fe      	b.n	80050f8 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80050fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d103      	bne.n	800510a <xQueueGiveFromISR+0x58>
 8005102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d101      	bne.n	800510e <xQueueGiveFromISR+0x5c>
 800510a:	2301      	movs	r3, #1
 800510c:	e000      	b.n	8005110 <xQueueGiveFromISR+0x5e>
 800510e:	2300      	movs	r3, #0
 8005110:	2b00      	cmp	r3, #0
 8005112:	d10a      	bne.n	800512a <xQueueGiveFromISR+0x78>
	__asm volatile
 8005114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005118:	f383 8811 	msr	BASEPRI, r3
 800511c:	f3bf 8f6f 	isb	sy
 8005120:	f3bf 8f4f 	dsb	sy
 8005124:	61bb      	str	r3, [r7, #24]
}
 8005126:	bf00      	nop
 8005128:	e7fe      	b.n	8005128 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800512a:	f002 fa25 	bl	8007578 <vPortValidateInterruptPriority>
	__asm volatile
 800512e:	f3ef 8211 	mrs	r2, BASEPRI
 8005132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005136:	f383 8811 	msr	BASEPRI, r3
 800513a:	f3bf 8f6f 	isb	sy
 800513e:	f3bf 8f4f 	dsb	sy
 8005142:	617a      	str	r2, [r7, #20]
 8005144:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005146:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005148:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800514a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800514c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800514e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005152:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005154:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005156:	429a      	cmp	r2, r3
 8005158:	d22b      	bcs.n	80051b2 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800515a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800515c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005160:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005166:	1c5a      	adds	r2, r3, #1
 8005168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800516a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800516c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005174:	d112      	bne.n	800519c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517a:	2b00      	cmp	r3, #0
 800517c:	d016      	beq.n	80051ac <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800517e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005180:	3324      	adds	r3, #36	; 0x24
 8005182:	4618      	mov	r0, r3
 8005184:	f001 f8fe 	bl	8006384 <xTaskRemoveFromEventList>
 8005188:	4603      	mov	r3, r0
 800518a:	2b00      	cmp	r3, #0
 800518c:	d00e      	beq.n	80051ac <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d00b      	beq.n	80051ac <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	2201      	movs	r2, #1
 8005198:	601a      	str	r2, [r3, #0]
 800519a:	e007      	b.n	80051ac <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800519c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80051a0:	3301      	adds	r3, #1
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	b25a      	sxtb	r2, r3
 80051a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80051ac:	2301      	movs	r3, #1
 80051ae:	637b      	str	r3, [r7, #52]	; 0x34
 80051b0:	e001      	b.n	80051b6 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80051b2:	2300      	movs	r3, #0
 80051b4:	637b      	str	r3, [r7, #52]	; 0x34
 80051b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051b8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	f383 8811 	msr	BASEPRI, r3
}
 80051c0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80051c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3738      	adds	r7, #56	; 0x38
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}

080051cc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b08c      	sub	sp, #48	; 0x30
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	60f8      	str	r0, [r7, #12]
 80051d4:	60b9      	str	r1, [r7, #8]
 80051d6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80051d8:	2300      	movs	r3, #0
 80051da:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80051e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d10a      	bne.n	80051fc <xQueueReceive+0x30>
	__asm volatile
 80051e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ea:	f383 8811 	msr	BASEPRI, r3
 80051ee:	f3bf 8f6f 	isb	sy
 80051f2:	f3bf 8f4f 	dsb	sy
 80051f6:	623b      	str	r3, [r7, #32]
}
 80051f8:	bf00      	nop
 80051fa:	e7fe      	b.n	80051fa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d103      	bne.n	800520a <xQueueReceive+0x3e>
 8005202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005206:	2b00      	cmp	r3, #0
 8005208:	d101      	bne.n	800520e <xQueueReceive+0x42>
 800520a:	2301      	movs	r3, #1
 800520c:	e000      	b.n	8005210 <xQueueReceive+0x44>
 800520e:	2300      	movs	r3, #0
 8005210:	2b00      	cmp	r3, #0
 8005212:	d10a      	bne.n	800522a <xQueueReceive+0x5e>
	__asm volatile
 8005214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005218:	f383 8811 	msr	BASEPRI, r3
 800521c:	f3bf 8f6f 	isb	sy
 8005220:	f3bf 8f4f 	dsb	sy
 8005224:	61fb      	str	r3, [r7, #28]
}
 8005226:	bf00      	nop
 8005228:	e7fe      	b.n	8005228 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800522a:	f001 fa69 	bl	8006700 <xTaskGetSchedulerState>
 800522e:	4603      	mov	r3, r0
 8005230:	2b00      	cmp	r3, #0
 8005232:	d102      	bne.n	800523a <xQueueReceive+0x6e>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d101      	bne.n	800523e <xQueueReceive+0x72>
 800523a:	2301      	movs	r3, #1
 800523c:	e000      	b.n	8005240 <xQueueReceive+0x74>
 800523e:	2300      	movs	r3, #0
 8005240:	2b00      	cmp	r3, #0
 8005242:	d10a      	bne.n	800525a <xQueueReceive+0x8e>
	__asm volatile
 8005244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005248:	f383 8811 	msr	BASEPRI, r3
 800524c:	f3bf 8f6f 	isb	sy
 8005250:	f3bf 8f4f 	dsb	sy
 8005254:	61bb      	str	r3, [r7, #24]
}
 8005256:	bf00      	nop
 8005258:	e7fe      	b.n	8005258 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800525a:	f002 f8ab 	bl	80073b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800525e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005262:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005266:	2b00      	cmp	r3, #0
 8005268:	d01f      	beq.n	80052aa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800526a:	68b9      	ldr	r1, [r7, #8]
 800526c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800526e:	f000 fafa 	bl	8005866 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005274:	1e5a      	subs	r2, r3, #1
 8005276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005278:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800527a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800527c:	691b      	ldr	r3, [r3, #16]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d00f      	beq.n	80052a2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005284:	3310      	adds	r3, #16
 8005286:	4618      	mov	r0, r3
 8005288:	f001 f87c 	bl	8006384 <xTaskRemoveFromEventList>
 800528c:	4603      	mov	r3, r0
 800528e:	2b00      	cmp	r3, #0
 8005290:	d007      	beq.n	80052a2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005292:	4b3d      	ldr	r3, [pc, #244]	; (8005388 <xQueueReceive+0x1bc>)
 8005294:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005298:	601a      	str	r2, [r3, #0]
 800529a:	f3bf 8f4f 	dsb	sy
 800529e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80052a2:	f002 f8b7 	bl	8007414 <vPortExitCritical>
				return pdPASS;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e069      	b.n	800537e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d103      	bne.n	80052b8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80052b0:	f002 f8b0 	bl	8007414 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80052b4:	2300      	movs	r3, #0
 80052b6:	e062      	b.n	800537e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80052b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d106      	bne.n	80052cc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80052be:	f107 0310 	add.w	r3, r7, #16
 80052c2:	4618      	mov	r0, r3
 80052c4:	f001 f8c2 	bl	800644c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80052c8:	2301      	movs	r3, #1
 80052ca:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80052cc:	f002 f8a2 	bl	8007414 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80052d0:	f000 fe34 	bl	8005f3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80052d4:	f002 f86e 	bl	80073b4 <vPortEnterCritical>
 80052d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80052de:	b25b      	sxtb	r3, r3
 80052e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052e4:	d103      	bne.n	80052ee <xQueueReceive+0x122>
 80052e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e8:	2200      	movs	r2, #0
 80052ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80052f4:	b25b      	sxtb	r3, r3
 80052f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052fa:	d103      	bne.n	8005304 <xQueueReceive+0x138>
 80052fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052fe:	2200      	movs	r2, #0
 8005300:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005304:	f002 f886 	bl	8007414 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005308:	1d3a      	adds	r2, r7, #4
 800530a:	f107 0310 	add.w	r3, r7, #16
 800530e:	4611      	mov	r1, r2
 8005310:	4618      	mov	r0, r3
 8005312:	f001 f8b1 	bl	8006478 <xTaskCheckForTimeOut>
 8005316:	4603      	mov	r3, r0
 8005318:	2b00      	cmp	r3, #0
 800531a:	d123      	bne.n	8005364 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800531c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800531e:	f000 fb1a 	bl	8005956 <prvIsQueueEmpty>
 8005322:	4603      	mov	r3, r0
 8005324:	2b00      	cmp	r3, #0
 8005326:	d017      	beq.n	8005358 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800532a:	3324      	adds	r3, #36	; 0x24
 800532c:	687a      	ldr	r2, [r7, #4]
 800532e:	4611      	mov	r1, r2
 8005330:	4618      	mov	r0, r3
 8005332:	f000 ffd7 	bl	80062e4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005336:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005338:	f000 fabb 	bl	80058b2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800533c:	f000 fe0c 	bl	8005f58 <xTaskResumeAll>
 8005340:	4603      	mov	r3, r0
 8005342:	2b00      	cmp	r3, #0
 8005344:	d189      	bne.n	800525a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005346:	4b10      	ldr	r3, [pc, #64]	; (8005388 <xQueueReceive+0x1bc>)
 8005348:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800534c:	601a      	str	r2, [r3, #0]
 800534e:	f3bf 8f4f 	dsb	sy
 8005352:	f3bf 8f6f 	isb	sy
 8005356:	e780      	b.n	800525a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005358:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800535a:	f000 faaa 	bl	80058b2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800535e:	f000 fdfb 	bl	8005f58 <xTaskResumeAll>
 8005362:	e77a      	b.n	800525a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005364:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005366:	f000 faa4 	bl	80058b2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800536a:	f000 fdf5 	bl	8005f58 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800536e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005370:	f000 faf1 	bl	8005956 <prvIsQueueEmpty>
 8005374:	4603      	mov	r3, r0
 8005376:	2b00      	cmp	r3, #0
 8005378:	f43f af6f 	beq.w	800525a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800537c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800537e:	4618      	mov	r0, r3
 8005380:	3730      	adds	r7, #48	; 0x30
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}
 8005386:	bf00      	nop
 8005388:	e000ed04 	.word	0xe000ed04

0800538c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b08e      	sub	sp, #56	; 0x38
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005396:	2300      	movs	r3, #0
 8005398:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800539e:	2300      	movs	r3, #0
 80053a0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80053a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d10a      	bne.n	80053be <xQueueSemaphoreTake+0x32>
	__asm volatile
 80053a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ac:	f383 8811 	msr	BASEPRI, r3
 80053b0:	f3bf 8f6f 	isb	sy
 80053b4:	f3bf 8f4f 	dsb	sy
 80053b8:	623b      	str	r3, [r7, #32]
}
 80053ba:	bf00      	nop
 80053bc:	e7fe      	b.n	80053bc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80053be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d00a      	beq.n	80053dc <xQueueSemaphoreTake+0x50>
	__asm volatile
 80053c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ca:	f383 8811 	msr	BASEPRI, r3
 80053ce:	f3bf 8f6f 	isb	sy
 80053d2:	f3bf 8f4f 	dsb	sy
 80053d6:	61fb      	str	r3, [r7, #28]
}
 80053d8:	bf00      	nop
 80053da:	e7fe      	b.n	80053da <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80053dc:	f001 f990 	bl	8006700 <xTaskGetSchedulerState>
 80053e0:	4603      	mov	r3, r0
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d102      	bne.n	80053ec <xQueueSemaphoreTake+0x60>
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d101      	bne.n	80053f0 <xQueueSemaphoreTake+0x64>
 80053ec:	2301      	movs	r3, #1
 80053ee:	e000      	b.n	80053f2 <xQueueSemaphoreTake+0x66>
 80053f0:	2300      	movs	r3, #0
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d10a      	bne.n	800540c <xQueueSemaphoreTake+0x80>
	__asm volatile
 80053f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053fa:	f383 8811 	msr	BASEPRI, r3
 80053fe:	f3bf 8f6f 	isb	sy
 8005402:	f3bf 8f4f 	dsb	sy
 8005406:	61bb      	str	r3, [r7, #24]
}
 8005408:	bf00      	nop
 800540a:	e7fe      	b.n	800540a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800540c:	f001 ffd2 	bl	80073b4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005414:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005418:	2b00      	cmp	r3, #0
 800541a:	d024      	beq.n	8005466 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800541c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800541e:	1e5a      	subs	r2, r3, #1
 8005420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005422:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d104      	bne.n	8005436 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800542c:	f001 fade 	bl	80069ec <pvTaskIncrementMutexHeldCount>
 8005430:	4602      	mov	r2, r0
 8005432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005434:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005438:	691b      	ldr	r3, [r3, #16]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d00f      	beq.n	800545e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800543e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005440:	3310      	adds	r3, #16
 8005442:	4618      	mov	r0, r3
 8005444:	f000 ff9e 	bl	8006384 <xTaskRemoveFromEventList>
 8005448:	4603      	mov	r3, r0
 800544a:	2b00      	cmp	r3, #0
 800544c:	d007      	beq.n	800545e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800544e:	4b54      	ldr	r3, [pc, #336]	; (80055a0 <xQueueSemaphoreTake+0x214>)
 8005450:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005454:	601a      	str	r2, [r3, #0]
 8005456:	f3bf 8f4f 	dsb	sy
 800545a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800545e:	f001 ffd9 	bl	8007414 <vPortExitCritical>
				return pdPASS;
 8005462:	2301      	movs	r3, #1
 8005464:	e097      	b.n	8005596 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d111      	bne.n	8005490 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800546c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800546e:	2b00      	cmp	r3, #0
 8005470:	d00a      	beq.n	8005488 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8005472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005476:	f383 8811 	msr	BASEPRI, r3
 800547a:	f3bf 8f6f 	isb	sy
 800547e:	f3bf 8f4f 	dsb	sy
 8005482:	617b      	str	r3, [r7, #20]
}
 8005484:	bf00      	nop
 8005486:	e7fe      	b.n	8005486 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005488:	f001 ffc4 	bl	8007414 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800548c:	2300      	movs	r3, #0
 800548e:	e082      	b.n	8005596 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005492:	2b00      	cmp	r3, #0
 8005494:	d106      	bne.n	80054a4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005496:	f107 030c 	add.w	r3, r7, #12
 800549a:	4618      	mov	r0, r3
 800549c:	f000 ffd6 	bl	800644c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80054a0:	2301      	movs	r3, #1
 80054a2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80054a4:	f001 ffb6 	bl	8007414 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80054a8:	f000 fd48 	bl	8005f3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80054ac:	f001 ff82 	bl	80073b4 <vPortEnterCritical>
 80054b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80054b6:	b25b      	sxtb	r3, r3
 80054b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054bc:	d103      	bne.n	80054c6 <xQueueSemaphoreTake+0x13a>
 80054be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054c0:	2200      	movs	r2, #0
 80054c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054cc:	b25b      	sxtb	r3, r3
 80054ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054d2:	d103      	bne.n	80054dc <xQueueSemaphoreTake+0x150>
 80054d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054d6:	2200      	movs	r2, #0
 80054d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054dc:	f001 ff9a 	bl	8007414 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80054e0:	463a      	mov	r2, r7
 80054e2:	f107 030c 	add.w	r3, r7, #12
 80054e6:	4611      	mov	r1, r2
 80054e8:	4618      	mov	r0, r3
 80054ea:	f000 ffc5 	bl	8006478 <xTaskCheckForTimeOut>
 80054ee:	4603      	mov	r3, r0
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d132      	bne.n	800555a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80054f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80054f6:	f000 fa2e 	bl	8005956 <prvIsQueueEmpty>
 80054fa:	4603      	mov	r3, r0
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d026      	beq.n	800554e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d109      	bne.n	800551c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8005508:	f001 ff54 	bl	80073b4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800550c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	4618      	mov	r0, r3
 8005512:	f001 f913 	bl	800673c <xTaskPriorityInherit>
 8005516:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005518:	f001 ff7c 	bl	8007414 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800551c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800551e:	3324      	adds	r3, #36	; 0x24
 8005520:	683a      	ldr	r2, [r7, #0]
 8005522:	4611      	mov	r1, r2
 8005524:	4618      	mov	r0, r3
 8005526:	f000 fedd 	bl	80062e4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800552a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800552c:	f000 f9c1 	bl	80058b2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005530:	f000 fd12 	bl	8005f58 <xTaskResumeAll>
 8005534:	4603      	mov	r3, r0
 8005536:	2b00      	cmp	r3, #0
 8005538:	f47f af68 	bne.w	800540c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800553c:	4b18      	ldr	r3, [pc, #96]	; (80055a0 <xQueueSemaphoreTake+0x214>)
 800553e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005542:	601a      	str	r2, [r3, #0]
 8005544:	f3bf 8f4f 	dsb	sy
 8005548:	f3bf 8f6f 	isb	sy
 800554c:	e75e      	b.n	800540c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800554e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005550:	f000 f9af 	bl	80058b2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005554:	f000 fd00 	bl	8005f58 <xTaskResumeAll>
 8005558:	e758      	b.n	800540c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800555a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800555c:	f000 f9a9 	bl	80058b2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005560:	f000 fcfa 	bl	8005f58 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005564:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005566:	f000 f9f6 	bl	8005956 <prvIsQueueEmpty>
 800556a:	4603      	mov	r3, r0
 800556c:	2b00      	cmp	r3, #0
 800556e:	f43f af4d 	beq.w	800540c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005574:	2b00      	cmp	r3, #0
 8005576:	d00d      	beq.n	8005594 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8005578:	f001 ff1c 	bl	80073b4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800557c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800557e:	f000 f8f0 	bl	8005762 <prvGetDisinheritPriorityAfterTimeout>
 8005582:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800558a:	4618      	mov	r0, r3
 800558c:	f001 f9ac 	bl	80068e8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005590:	f001 ff40 	bl	8007414 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005594:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005596:	4618      	mov	r0, r3
 8005598:	3738      	adds	r7, #56	; 0x38
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}
 800559e:	bf00      	nop
 80055a0:	e000ed04 	.word	0xe000ed04

080055a4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b08e      	sub	sp, #56	; 0x38
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	60f8      	str	r0, [r7, #12]
 80055ac:	60b9      	str	r1, [r7, #8]
 80055ae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80055b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d10a      	bne.n	80055d0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80055ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055be:	f383 8811 	msr	BASEPRI, r3
 80055c2:	f3bf 8f6f 	isb	sy
 80055c6:	f3bf 8f4f 	dsb	sy
 80055ca:	623b      	str	r3, [r7, #32]
}
 80055cc:	bf00      	nop
 80055ce:	e7fe      	b.n	80055ce <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d103      	bne.n	80055de <xQueueReceiveFromISR+0x3a>
 80055d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d101      	bne.n	80055e2 <xQueueReceiveFromISR+0x3e>
 80055de:	2301      	movs	r3, #1
 80055e0:	e000      	b.n	80055e4 <xQueueReceiveFromISR+0x40>
 80055e2:	2300      	movs	r3, #0
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d10a      	bne.n	80055fe <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80055e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ec:	f383 8811 	msr	BASEPRI, r3
 80055f0:	f3bf 8f6f 	isb	sy
 80055f4:	f3bf 8f4f 	dsb	sy
 80055f8:	61fb      	str	r3, [r7, #28]
}
 80055fa:	bf00      	nop
 80055fc:	e7fe      	b.n	80055fc <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80055fe:	f001 ffbb 	bl	8007578 <vPortValidateInterruptPriority>
	__asm volatile
 8005602:	f3ef 8211 	mrs	r2, BASEPRI
 8005606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800560a:	f383 8811 	msr	BASEPRI, r3
 800560e:	f3bf 8f6f 	isb	sy
 8005612:	f3bf 8f4f 	dsb	sy
 8005616:	61ba      	str	r2, [r7, #24]
 8005618:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800561a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800561c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800561e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005622:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005626:	2b00      	cmp	r3, #0
 8005628:	d02f      	beq.n	800568a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800562a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800562c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005630:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005634:	68b9      	ldr	r1, [r7, #8]
 8005636:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005638:	f000 f915 	bl	8005866 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800563c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800563e:	1e5a      	subs	r2, r3, #1
 8005640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005642:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005644:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800564c:	d112      	bne.n	8005674 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800564e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005650:	691b      	ldr	r3, [r3, #16]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d016      	beq.n	8005684 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005658:	3310      	adds	r3, #16
 800565a:	4618      	mov	r0, r3
 800565c:	f000 fe92 	bl	8006384 <xTaskRemoveFromEventList>
 8005660:	4603      	mov	r3, r0
 8005662:	2b00      	cmp	r3, #0
 8005664:	d00e      	beq.n	8005684 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d00b      	beq.n	8005684 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	601a      	str	r2, [r3, #0]
 8005672:	e007      	b.n	8005684 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005674:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005678:	3301      	adds	r3, #1
 800567a:	b2db      	uxtb	r3, r3
 800567c:	b25a      	sxtb	r2, r3
 800567e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005680:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005684:	2301      	movs	r3, #1
 8005686:	637b      	str	r3, [r7, #52]	; 0x34
 8005688:	e001      	b.n	800568e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800568a:	2300      	movs	r3, #0
 800568c:	637b      	str	r3, [r7, #52]	; 0x34
 800568e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005690:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	f383 8811 	msr	BASEPRI, r3
}
 8005698:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800569a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800569c:	4618      	mov	r0, r3
 800569e:	3738      	adds	r7, #56	; 0x38
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}

080056a4 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b084      	sub	sp, #16
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d10a      	bne.n	80056c8 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 80056b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b6:	f383 8811 	msr	BASEPRI, r3
 80056ba:	f3bf 8f6f 	isb	sy
 80056be:	f3bf 8f4f 	dsb	sy
 80056c2:	60bb      	str	r3, [r7, #8]
}
 80056c4:	bf00      	nop
 80056c6:	e7fe      	b.n	80056c6 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 80056c8:	f001 fe74 	bl	80073b4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d0:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80056d2:	f001 fe9f 	bl	8007414 <vPortExitCritical>

	return uxReturn;
 80056d6:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80056d8:	4618      	mov	r0, r3
 80056da:	3710      	adds	r7, #16
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}

080056e0 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80056e0:	b480      	push	{r7}
 80056e2:	b087      	sub	sp, #28
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d10a      	bne.n	8005708 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 80056f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f6:	f383 8811 	msr	BASEPRI, r3
 80056fa:	f3bf 8f6f 	isb	sy
 80056fe:	f3bf 8f4f 	dsb	sy
 8005702:	60fb      	str	r3, [r7, #12]
}
 8005704:	bf00      	nop
 8005706:	e7fe      	b.n	8005706 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800570c:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800570e:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005710:	4618      	mov	r0, r3
 8005712:	371c      	adds	r7, #28
 8005714:	46bd      	mov	sp, r7
 8005716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571a:	4770      	bx	lr

0800571c <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b084      	sub	sp, #16
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d10a      	bne.n	8005744 <vQueueDelete+0x28>
	__asm volatile
 800572e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005732:	f383 8811 	msr	BASEPRI, r3
 8005736:	f3bf 8f6f 	isb	sy
 800573a:	f3bf 8f4f 	dsb	sy
 800573e:	60bb      	str	r3, [r7, #8]
}
 8005740:	bf00      	nop
 8005742:	e7fe      	b.n	8005742 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8005744:	68f8      	ldr	r0, [r7, #12]
 8005746:	f000 f95f 	bl	8005a08 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005750:	2b00      	cmp	r3, #0
 8005752:	d102      	bne.n	800575a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8005754:	68f8      	ldr	r0, [r7, #12]
 8005756:	f002 f81b 	bl	8007790 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800575a:	bf00      	nop
 800575c:	3710      	adds	r7, #16
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}

08005762 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005762:	b480      	push	{r7}
 8005764:	b085      	sub	sp, #20
 8005766:	af00      	add	r7, sp, #0
 8005768:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576e:	2b00      	cmp	r3, #0
 8005770:	d006      	beq.n	8005780 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800577c:	60fb      	str	r3, [r7, #12]
 800577e:	e001      	b.n	8005784 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005780:	2300      	movs	r3, #0
 8005782:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005784:	68fb      	ldr	r3, [r7, #12]
	}
 8005786:	4618      	mov	r0, r3
 8005788:	3714      	adds	r7, #20
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr

08005792 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005792:	b580      	push	{r7, lr}
 8005794:	b086      	sub	sp, #24
 8005796:	af00      	add	r7, sp, #0
 8005798:	60f8      	str	r0, [r7, #12]
 800579a:	60b9      	str	r1, [r7, #8]
 800579c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800579e:	2300      	movs	r3, #0
 80057a0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d10d      	bne.n	80057cc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d14d      	bne.n	8005854 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	4618      	mov	r0, r3
 80057be:	f001 f825 	bl	800680c <xTaskPriorityDisinherit>
 80057c2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2200      	movs	r2, #0
 80057c8:	609a      	str	r2, [r3, #8]
 80057ca:	e043      	b.n	8005854 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d119      	bne.n	8005806 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	6858      	ldr	r0, [r3, #4]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057da:	461a      	mov	r2, r3
 80057dc:	68b9      	ldr	r1, [r7, #8]
 80057de:	f002 f91f 	bl	8007a20 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	685a      	ldr	r2, [r3, #4]
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ea:	441a      	add	r2, r3
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	685a      	ldr	r2, [r3, #4]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d32b      	bcc.n	8005854 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	605a      	str	r2, [r3, #4]
 8005804:	e026      	b.n	8005854 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	68d8      	ldr	r0, [r3, #12]
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800580e:	461a      	mov	r2, r3
 8005810:	68b9      	ldr	r1, [r7, #8]
 8005812:	f002 f905 	bl	8007a20 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	68da      	ldr	r2, [r3, #12]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800581e:	425b      	negs	r3, r3
 8005820:	441a      	add	r2, r3
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	68da      	ldr	r2, [r3, #12]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	429a      	cmp	r2, r3
 8005830:	d207      	bcs.n	8005842 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	689a      	ldr	r2, [r3, #8]
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800583a:	425b      	negs	r3, r3
 800583c:	441a      	add	r2, r3
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2b02      	cmp	r3, #2
 8005846:	d105      	bne.n	8005854 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d002      	beq.n	8005854 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	3b01      	subs	r3, #1
 8005852:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	1c5a      	adds	r2, r3, #1
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800585c:	697b      	ldr	r3, [r7, #20]
}
 800585e:	4618      	mov	r0, r3
 8005860:	3718      	adds	r7, #24
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}

08005866 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005866:	b580      	push	{r7, lr}
 8005868:	b082      	sub	sp, #8
 800586a:	af00      	add	r7, sp, #0
 800586c:	6078      	str	r0, [r7, #4]
 800586e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005874:	2b00      	cmp	r3, #0
 8005876:	d018      	beq.n	80058aa <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	68da      	ldr	r2, [r3, #12]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005880:	441a      	add	r2, r3
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	68da      	ldr	r2, [r3, #12]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	429a      	cmp	r2, r3
 8005890:	d303      	bcc.n	800589a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	68d9      	ldr	r1, [r3, #12]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a2:	461a      	mov	r2, r3
 80058a4:	6838      	ldr	r0, [r7, #0]
 80058a6:	f002 f8bb 	bl	8007a20 <memcpy>
	}
}
 80058aa:	bf00      	nop
 80058ac:	3708      	adds	r7, #8
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}

080058b2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80058b2:	b580      	push	{r7, lr}
 80058b4:	b084      	sub	sp, #16
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80058ba:	f001 fd7b 	bl	80073b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058c4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80058c6:	e011      	b.n	80058ec <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d012      	beq.n	80058f6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	3324      	adds	r3, #36	; 0x24
 80058d4:	4618      	mov	r0, r3
 80058d6:	f000 fd55 	bl	8006384 <xTaskRemoveFromEventList>
 80058da:	4603      	mov	r3, r0
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d001      	beq.n	80058e4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80058e0:	f000 fe2c 	bl	800653c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80058e4:	7bfb      	ldrb	r3, [r7, #15]
 80058e6:	3b01      	subs	r3, #1
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80058ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	dce9      	bgt.n	80058c8 <prvUnlockQueue+0x16>
 80058f4:	e000      	b.n	80058f8 <prvUnlockQueue+0x46>
					break;
 80058f6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	22ff      	movs	r2, #255	; 0xff
 80058fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005900:	f001 fd88 	bl	8007414 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005904:	f001 fd56 	bl	80073b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800590e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005910:	e011      	b.n	8005936 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	691b      	ldr	r3, [r3, #16]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d012      	beq.n	8005940 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	3310      	adds	r3, #16
 800591e:	4618      	mov	r0, r3
 8005920:	f000 fd30 	bl	8006384 <xTaskRemoveFromEventList>
 8005924:	4603      	mov	r3, r0
 8005926:	2b00      	cmp	r3, #0
 8005928:	d001      	beq.n	800592e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800592a:	f000 fe07 	bl	800653c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800592e:	7bbb      	ldrb	r3, [r7, #14]
 8005930:	3b01      	subs	r3, #1
 8005932:	b2db      	uxtb	r3, r3
 8005934:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005936:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800593a:	2b00      	cmp	r3, #0
 800593c:	dce9      	bgt.n	8005912 <prvUnlockQueue+0x60>
 800593e:	e000      	b.n	8005942 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005940:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	22ff      	movs	r2, #255	; 0xff
 8005946:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800594a:	f001 fd63 	bl	8007414 <vPortExitCritical>
}
 800594e:	bf00      	nop
 8005950:	3710      	adds	r7, #16
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}

08005956 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005956:	b580      	push	{r7, lr}
 8005958:	b084      	sub	sp, #16
 800595a:	af00      	add	r7, sp, #0
 800595c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800595e:	f001 fd29 	bl	80073b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005966:	2b00      	cmp	r3, #0
 8005968:	d102      	bne.n	8005970 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800596a:	2301      	movs	r3, #1
 800596c:	60fb      	str	r3, [r7, #12]
 800596e:	e001      	b.n	8005974 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005970:	2300      	movs	r3, #0
 8005972:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005974:	f001 fd4e 	bl	8007414 <vPortExitCritical>

	return xReturn;
 8005978:	68fb      	ldr	r3, [r7, #12]
}
 800597a:	4618      	mov	r0, r3
 800597c:	3710      	adds	r7, #16
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}

08005982 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005982:	b580      	push	{r7, lr}
 8005984:	b084      	sub	sp, #16
 8005986:	af00      	add	r7, sp, #0
 8005988:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800598a:	f001 fd13 	bl	80073b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005996:	429a      	cmp	r2, r3
 8005998:	d102      	bne.n	80059a0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800599a:	2301      	movs	r3, #1
 800599c:	60fb      	str	r3, [r7, #12]
 800599e:	e001      	b.n	80059a4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80059a0:	2300      	movs	r3, #0
 80059a2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80059a4:	f001 fd36 	bl	8007414 <vPortExitCritical>

	return xReturn;
 80059a8:	68fb      	ldr	r3, [r7, #12]
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3710      	adds	r7, #16
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}
	...

080059b4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80059b4:	b480      	push	{r7}
 80059b6:	b085      	sub	sp, #20
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
 80059bc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80059be:	2300      	movs	r3, #0
 80059c0:	60fb      	str	r3, [r7, #12]
 80059c2:	e014      	b.n	80059ee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80059c4:	4a0f      	ldr	r2, [pc, #60]	; (8005a04 <vQueueAddToRegistry+0x50>)
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d10b      	bne.n	80059e8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80059d0:	490c      	ldr	r1, [pc, #48]	; (8005a04 <vQueueAddToRegistry+0x50>)
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	683a      	ldr	r2, [r7, #0]
 80059d6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80059da:	4a0a      	ldr	r2, [pc, #40]	; (8005a04 <vQueueAddToRegistry+0x50>)
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	00db      	lsls	r3, r3, #3
 80059e0:	4413      	add	r3, r2
 80059e2:	687a      	ldr	r2, [r7, #4]
 80059e4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80059e6:	e006      	b.n	80059f6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	3301      	adds	r3, #1
 80059ec:	60fb      	str	r3, [r7, #12]
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2b07      	cmp	r3, #7
 80059f2:	d9e7      	bls.n	80059c4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80059f4:	bf00      	nop
 80059f6:	bf00      	nop
 80059f8:	3714      	adds	r7, #20
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr
 8005a02:	bf00      	nop
 8005a04:	20004f94 	.word	0x20004f94

08005a08 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8005a08:	b480      	push	{r7}
 8005a0a:	b085      	sub	sp, #20
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005a10:	2300      	movs	r3, #0
 8005a12:	60fb      	str	r3, [r7, #12]
 8005a14:	e016      	b.n	8005a44 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8005a16:	4a10      	ldr	r2, [pc, #64]	; (8005a58 <vQueueUnregisterQueue+0x50>)
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	00db      	lsls	r3, r3, #3
 8005a1c:	4413      	add	r3, r2
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	687a      	ldr	r2, [r7, #4]
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d10b      	bne.n	8005a3e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8005a26:	4a0c      	ldr	r2, [pc, #48]	; (8005a58 <vQueueUnregisterQueue+0x50>)
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2100      	movs	r1, #0
 8005a2c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8005a30:	4a09      	ldr	r2, [pc, #36]	; (8005a58 <vQueueUnregisterQueue+0x50>)
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	00db      	lsls	r3, r3, #3
 8005a36:	4413      	add	r3, r2
 8005a38:	2200      	movs	r2, #0
 8005a3a:	605a      	str	r2, [r3, #4]
				break;
 8005a3c:	e006      	b.n	8005a4c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	3301      	adds	r3, #1
 8005a42:	60fb      	str	r3, [r7, #12]
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2b07      	cmp	r3, #7
 8005a48:	d9e5      	bls.n	8005a16 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005a4a:	bf00      	nop
 8005a4c:	bf00      	nop
 8005a4e:	3714      	adds	r7, #20
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr
 8005a58:	20004f94 	.word	0x20004f94

08005a5c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b086      	sub	sp, #24
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	60f8      	str	r0, [r7, #12]
 8005a64:	60b9      	str	r1, [r7, #8]
 8005a66:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005a6c:	f001 fca2 	bl	80073b4 <vPortEnterCritical>
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a76:	b25b      	sxtb	r3, r3
 8005a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a7c:	d103      	bne.n	8005a86 <vQueueWaitForMessageRestricted+0x2a>
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	2200      	movs	r2, #0
 8005a82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a8c:	b25b      	sxtb	r3, r3
 8005a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a92:	d103      	bne.n	8005a9c <vQueueWaitForMessageRestricted+0x40>
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	2200      	movs	r2, #0
 8005a98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a9c:	f001 fcba 	bl	8007414 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d106      	bne.n	8005ab6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	3324      	adds	r3, #36	; 0x24
 8005aac:	687a      	ldr	r2, [r7, #4]
 8005aae:	68b9      	ldr	r1, [r7, #8]
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f000 fc3b 	bl	800632c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005ab6:	6978      	ldr	r0, [r7, #20]
 8005ab8:	f7ff fefb 	bl	80058b2 <prvUnlockQueue>
	}
 8005abc:	bf00      	nop
 8005abe:	3718      	adds	r7, #24
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}

08005ac4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b08e      	sub	sp, #56	; 0x38
 8005ac8:	af04      	add	r7, sp, #16
 8005aca:	60f8      	str	r0, [r7, #12]
 8005acc:	60b9      	str	r1, [r7, #8]
 8005ace:	607a      	str	r2, [r7, #4]
 8005ad0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005ad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d10a      	bne.n	8005aee <xTaskCreateStatic+0x2a>
	__asm volatile
 8005ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005adc:	f383 8811 	msr	BASEPRI, r3
 8005ae0:	f3bf 8f6f 	isb	sy
 8005ae4:	f3bf 8f4f 	dsb	sy
 8005ae8:	623b      	str	r3, [r7, #32]
}
 8005aea:	bf00      	nop
 8005aec:	e7fe      	b.n	8005aec <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d10a      	bne.n	8005b0a <xTaskCreateStatic+0x46>
	__asm volatile
 8005af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005af8:	f383 8811 	msr	BASEPRI, r3
 8005afc:	f3bf 8f6f 	isb	sy
 8005b00:	f3bf 8f4f 	dsb	sy
 8005b04:	61fb      	str	r3, [r7, #28]
}
 8005b06:	bf00      	nop
 8005b08:	e7fe      	b.n	8005b08 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005b0a:	235c      	movs	r3, #92	; 0x5c
 8005b0c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	2b5c      	cmp	r3, #92	; 0x5c
 8005b12:	d00a      	beq.n	8005b2a <xTaskCreateStatic+0x66>
	__asm volatile
 8005b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b18:	f383 8811 	msr	BASEPRI, r3
 8005b1c:	f3bf 8f6f 	isb	sy
 8005b20:	f3bf 8f4f 	dsb	sy
 8005b24:	61bb      	str	r3, [r7, #24]
}
 8005b26:	bf00      	nop
 8005b28:	e7fe      	b.n	8005b28 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005b2a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d01e      	beq.n	8005b70 <xTaskCreateStatic+0xac>
 8005b32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d01b      	beq.n	8005b70 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b3a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b40:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b44:	2202      	movs	r2, #2
 8005b46:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	9303      	str	r3, [sp, #12]
 8005b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b50:	9302      	str	r3, [sp, #8]
 8005b52:	f107 0314 	add.w	r3, r7, #20
 8005b56:	9301      	str	r3, [sp, #4]
 8005b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b5a:	9300      	str	r3, [sp, #0]
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	68b9      	ldr	r1, [r7, #8]
 8005b62:	68f8      	ldr	r0, [r7, #12]
 8005b64:	f000 f850 	bl	8005c08 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005b68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005b6a:	f000 f8dd 	bl	8005d28 <prvAddNewTaskToReadyList>
 8005b6e:	e001      	b.n	8005b74 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005b70:	2300      	movs	r3, #0
 8005b72:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005b74:	697b      	ldr	r3, [r7, #20]
	}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3728      	adds	r7, #40	; 0x28
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}

08005b7e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005b7e:	b580      	push	{r7, lr}
 8005b80:	b08c      	sub	sp, #48	; 0x30
 8005b82:	af04      	add	r7, sp, #16
 8005b84:	60f8      	str	r0, [r7, #12]
 8005b86:	60b9      	str	r1, [r7, #8]
 8005b88:	603b      	str	r3, [r7, #0]
 8005b8a:	4613      	mov	r3, r2
 8005b8c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005b8e:	88fb      	ldrh	r3, [r7, #6]
 8005b90:	009b      	lsls	r3, r3, #2
 8005b92:	4618      	mov	r0, r3
 8005b94:	f001 fd30 	bl	80075f8 <pvPortMalloc>
 8005b98:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d00e      	beq.n	8005bbe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005ba0:	205c      	movs	r0, #92	; 0x5c
 8005ba2:	f001 fd29 	bl	80075f8 <pvPortMalloc>
 8005ba6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005ba8:	69fb      	ldr	r3, [r7, #28]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d003      	beq.n	8005bb6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005bae:	69fb      	ldr	r3, [r7, #28]
 8005bb0:	697a      	ldr	r2, [r7, #20]
 8005bb2:	631a      	str	r2, [r3, #48]	; 0x30
 8005bb4:	e005      	b.n	8005bc2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005bb6:	6978      	ldr	r0, [r7, #20]
 8005bb8:	f001 fdea 	bl	8007790 <vPortFree>
 8005bbc:	e001      	b.n	8005bc2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005bc2:	69fb      	ldr	r3, [r7, #28]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d017      	beq.n	8005bf8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005bc8:	69fb      	ldr	r3, [r7, #28]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005bd0:	88fa      	ldrh	r2, [r7, #6]
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	9303      	str	r3, [sp, #12]
 8005bd6:	69fb      	ldr	r3, [r7, #28]
 8005bd8:	9302      	str	r3, [sp, #8]
 8005bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bdc:	9301      	str	r3, [sp, #4]
 8005bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be0:	9300      	str	r3, [sp, #0]
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	68b9      	ldr	r1, [r7, #8]
 8005be6:	68f8      	ldr	r0, [r7, #12]
 8005be8:	f000 f80e 	bl	8005c08 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005bec:	69f8      	ldr	r0, [r7, #28]
 8005bee:	f000 f89b 	bl	8005d28 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	61bb      	str	r3, [r7, #24]
 8005bf6:	e002      	b.n	8005bfe <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005bf8:	f04f 33ff 	mov.w	r3, #4294967295
 8005bfc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005bfe:	69bb      	ldr	r3, [r7, #24]
	}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3720      	adds	r7, #32
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}

08005c08 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b088      	sub	sp, #32
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	60f8      	str	r0, [r7, #12]
 8005c10:	60b9      	str	r1, [r7, #8]
 8005c12:	607a      	str	r2, [r7, #4]
 8005c14:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c18:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	009b      	lsls	r3, r3, #2
 8005c1e:	461a      	mov	r2, r3
 8005c20:	21a5      	movs	r1, #165	; 0xa5
 8005c22:	f001 ff0b 	bl	8007a3c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005c30:	3b01      	subs	r3, #1
 8005c32:	009b      	lsls	r3, r3, #2
 8005c34:	4413      	add	r3, r2
 8005c36:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005c38:	69bb      	ldr	r3, [r7, #24]
 8005c3a:	f023 0307 	bic.w	r3, r3, #7
 8005c3e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005c40:	69bb      	ldr	r3, [r7, #24]
 8005c42:	f003 0307 	and.w	r3, r3, #7
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d00a      	beq.n	8005c60 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c4e:	f383 8811 	msr	BASEPRI, r3
 8005c52:	f3bf 8f6f 	isb	sy
 8005c56:	f3bf 8f4f 	dsb	sy
 8005c5a:	617b      	str	r3, [r7, #20]
}
 8005c5c:	bf00      	nop
 8005c5e:	e7fe      	b.n	8005c5e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d01f      	beq.n	8005ca6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005c66:	2300      	movs	r3, #0
 8005c68:	61fb      	str	r3, [r7, #28]
 8005c6a:	e012      	b.n	8005c92 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005c6c:	68ba      	ldr	r2, [r7, #8]
 8005c6e:	69fb      	ldr	r3, [r7, #28]
 8005c70:	4413      	add	r3, r2
 8005c72:	7819      	ldrb	r1, [r3, #0]
 8005c74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c76:	69fb      	ldr	r3, [r7, #28]
 8005c78:	4413      	add	r3, r2
 8005c7a:	3334      	adds	r3, #52	; 0x34
 8005c7c:	460a      	mov	r2, r1
 8005c7e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005c80:	68ba      	ldr	r2, [r7, #8]
 8005c82:	69fb      	ldr	r3, [r7, #28]
 8005c84:	4413      	add	r3, r2
 8005c86:	781b      	ldrb	r3, [r3, #0]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d006      	beq.n	8005c9a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005c8c:	69fb      	ldr	r3, [r7, #28]
 8005c8e:	3301      	adds	r3, #1
 8005c90:	61fb      	str	r3, [r7, #28]
 8005c92:	69fb      	ldr	r3, [r7, #28]
 8005c94:	2b0f      	cmp	r3, #15
 8005c96:	d9e9      	bls.n	8005c6c <prvInitialiseNewTask+0x64>
 8005c98:	e000      	b.n	8005c9c <prvInitialiseNewTask+0x94>
			{
				break;
 8005c9a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ca4:	e003      	b.n	8005cae <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca8:	2200      	movs	r2, #0
 8005caa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb0:	2b37      	cmp	r3, #55	; 0x37
 8005cb2:	d901      	bls.n	8005cb8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005cb4:	2337      	movs	r3, #55	; 0x37
 8005cb6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cbc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cc2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ccc:	3304      	adds	r3, #4
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f7fe fe1a 	bl	8004908 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cd6:	3318      	adds	r3, #24
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f7fe fe15 	bl	8004908 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ce2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cf2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005d02:	683a      	ldr	r2, [r7, #0]
 8005d04:	68f9      	ldr	r1, [r7, #12]
 8005d06:	69b8      	ldr	r0, [r7, #24]
 8005d08:	f001 fa26 	bl	8007158 <pxPortInitialiseStack>
 8005d0c:	4602      	mov	r2, r0
 8005d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d10:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d002      	beq.n	8005d1e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d1c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005d1e:	bf00      	nop
 8005d20:	3720      	adds	r7, #32
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}
	...

08005d28 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b082      	sub	sp, #8
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005d30:	f001 fb40 	bl	80073b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005d34:	4b2d      	ldr	r3, [pc, #180]	; (8005dec <prvAddNewTaskToReadyList+0xc4>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	3301      	adds	r3, #1
 8005d3a:	4a2c      	ldr	r2, [pc, #176]	; (8005dec <prvAddNewTaskToReadyList+0xc4>)
 8005d3c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005d3e:	4b2c      	ldr	r3, [pc, #176]	; (8005df0 <prvAddNewTaskToReadyList+0xc8>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d109      	bne.n	8005d5a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005d46:	4a2a      	ldr	r2, [pc, #168]	; (8005df0 <prvAddNewTaskToReadyList+0xc8>)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005d4c:	4b27      	ldr	r3, [pc, #156]	; (8005dec <prvAddNewTaskToReadyList+0xc4>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d110      	bne.n	8005d76 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005d54:	f000 fc16 	bl	8006584 <prvInitialiseTaskLists>
 8005d58:	e00d      	b.n	8005d76 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005d5a:	4b26      	ldr	r3, [pc, #152]	; (8005df4 <prvAddNewTaskToReadyList+0xcc>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d109      	bne.n	8005d76 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005d62:	4b23      	ldr	r3, [pc, #140]	; (8005df0 <prvAddNewTaskToReadyList+0xc8>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	d802      	bhi.n	8005d76 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005d70:	4a1f      	ldr	r2, [pc, #124]	; (8005df0 <prvAddNewTaskToReadyList+0xc8>)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005d76:	4b20      	ldr	r3, [pc, #128]	; (8005df8 <prvAddNewTaskToReadyList+0xd0>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	3301      	adds	r3, #1
 8005d7c:	4a1e      	ldr	r2, [pc, #120]	; (8005df8 <prvAddNewTaskToReadyList+0xd0>)
 8005d7e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005d80:	4b1d      	ldr	r3, [pc, #116]	; (8005df8 <prvAddNewTaskToReadyList+0xd0>)
 8005d82:	681a      	ldr	r2, [r3, #0]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d8c:	4b1b      	ldr	r3, [pc, #108]	; (8005dfc <prvAddNewTaskToReadyList+0xd4>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d903      	bls.n	8005d9c <prvAddNewTaskToReadyList+0x74>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d98:	4a18      	ldr	r2, [pc, #96]	; (8005dfc <prvAddNewTaskToReadyList+0xd4>)
 8005d9a:	6013      	str	r3, [r2, #0]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005da0:	4613      	mov	r3, r2
 8005da2:	009b      	lsls	r3, r3, #2
 8005da4:	4413      	add	r3, r2
 8005da6:	009b      	lsls	r3, r3, #2
 8005da8:	4a15      	ldr	r2, [pc, #84]	; (8005e00 <prvAddNewTaskToReadyList+0xd8>)
 8005daa:	441a      	add	r2, r3
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	3304      	adds	r3, #4
 8005db0:	4619      	mov	r1, r3
 8005db2:	4610      	mov	r0, r2
 8005db4:	f7fe fdb5 	bl	8004922 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005db8:	f001 fb2c 	bl	8007414 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005dbc:	4b0d      	ldr	r3, [pc, #52]	; (8005df4 <prvAddNewTaskToReadyList+0xcc>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d00e      	beq.n	8005de2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005dc4:	4b0a      	ldr	r3, [pc, #40]	; (8005df0 <prvAddNewTaskToReadyList+0xc8>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d207      	bcs.n	8005de2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005dd2:	4b0c      	ldr	r3, [pc, #48]	; (8005e04 <prvAddNewTaskToReadyList+0xdc>)
 8005dd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dd8:	601a      	str	r2, [r3, #0]
 8005dda:	f3bf 8f4f 	dsb	sy
 8005dde:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005de2:	bf00      	nop
 8005de4:	3708      	adds	r7, #8
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}
 8005dea:	bf00      	nop
 8005dec:	20000d90 	.word	0x20000d90
 8005df0:	200008bc 	.word	0x200008bc
 8005df4:	20000d9c 	.word	0x20000d9c
 8005df8:	20000dac 	.word	0x20000dac
 8005dfc:	20000d98 	.word	0x20000d98
 8005e00:	200008c0 	.word	0x200008c0
 8005e04:	e000ed04 	.word	0xe000ed04

08005e08 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b084      	sub	sp, #16
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005e10:	2300      	movs	r3, #0
 8005e12:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d017      	beq.n	8005e4a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005e1a:	4b13      	ldr	r3, [pc, #76]	; (8005e68 <vTaskDelay+0x60>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d00a      	beq.n	8005e38 <vTaskDelay+0x30>
	__asm volatile
 8005e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e26:	f383 8811 	msr	BASEPRI, r3
 8005e2a:	f3bf 8f6f 	isb	sy
 8005e2e:	f3bf 8f4f 	dsb	sy
 8005e32:	60bb      	str	r3, [r7, #8]
}
 8005e34:	bf00      	nop
 8005e36:	e7fe      	b.n	8005e36 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005e38:	f000 f880 	bl	8005f3c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005e3c:	2100      	movs	r1, #0
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f000 fde8 	bl	8006a14 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005e44:	f000 f888 	bl	8005f58 <xTaskResumeAll>
 8005e48:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d107      	bne.n	8005e60 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005e50:	4b06      	ldr	r3, [pc, #24]	; (8005e6c <vTaskDelay+0x64>)
 8005e52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e56:	601a      	str	r2, [r3, #0]
 8005e58:	f3bf 8f4f 	dsb	sy
 8005e5c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005e60:	bf00      	nop
 8005e62:	3710      	adds	r7, #16
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}
 8005e68:	20000db8 	.word	0x20000db8
 8005e6c:	e000ed04 	.word	0xe000ed04

08005e70 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b08a      	sub	sp, #40	; 0x28
 8005e74:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005e76:	2300      	movs	r3, #0
 8005e78:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005e7e:	463a      	mov	r2, r7
 8005e80:	1d39      	adds	r1, r7, #4
 8005e82:	f107 0308 	add.w	r3, r7, #8
 8005e86:	4618      	mov	r0, r3
 8005e88:	f7fe fcea 	bl	8004860 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005e8c:	6839      	ldr	r1, [r7, #0]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	68ba      	ldr	r2, [r7, #8]
 8005e92:	9202      	str	r2, [sp, #8]
 8005e94:	9301      	str	r3, [sp, #4]
 8005e96:	2300      	movs	r3, #0
 8005e98:	9300      	str	r3, [sp, #0]
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	460a      	mov	r2, r1
 8005e9e:	4921      	ldr	r1, [pc, #132]	; (8005f24 <vTaskStartScheduler+0xb4>)
 8005ea0:	4821      	ldr	r0, [pc, #132]	; (8005f28 <vTaskStartScheduler+0xb8>)
 8005ea2:	f7ff fe0f 	bl	8005ac4 <xTaskCreateStatic>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	4a20      	ldr	r2, [pc, #128]	; (8005f2c <vTaskStartScheduler+0xbc>)
 8005eaa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005eac:	4b1f      	ldr	r3, [pc, #124]	; (8005f2c <vTaskStartScheduler+0xbc>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d002      	beq.n	8005eba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	617b      	str	r3, [r7, #20]
 8005eb8:	e001      	b.n	8005ebe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d102      	bne.n	8005eca <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005ec4:	f000 fdfa 	bl	8006abc <xTimerCreateTimerTask>
 8005ec8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	d116      	bne.n	8005efe <vTaskStartScheduler+0x8e>
	__asm volatile
 8005ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed4:	f383 8811 	msr	BASEPRI, r3
 8005ed8:	f3bf 8f6f 	isb	sy
 8005edc:	f3bf 8f4f 	dsb	sy
 8005ee0:	613b      	str	r3, [r7, #16]
}
 8005ee2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005ee4:	4b12      	ldr	r3, [pc, #72]	; (8005f30 <vTaskStartScheduler+0xc0>)
 8005ee6:	f04f 32ff 	mov.w	r2, #4294967295
 8005eea:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005eec:	4b11      	ldr	r3, [pc, #68]	; (8005f34 <vTaskStartScheduler+0xc4>)
 8005eee:	2201      	movs	r2, #1
 8005ef0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005ef2:	4b11      	ldr	r3, [pc, #68]	; (8005f38 <vTaskStartScheduler+0xc8>)
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005ef8:	f001 f9ba 	bl	8007270 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005efc:	e00e      	b.n	8005f1c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f04:	d10a      	bne.n	8005f1c <vTaskStartScheduler+0xac>
	__asm volatile
 8005f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f0a:	f383 8811 	msr	BASEPRI, r3
 8005f0e:	f3bf 8f6f 	isb	sy
 8005f12:	f3bf 8f4f 	dsb	sy
 8005f16:	60fb      	str	r3, [r7, #12]
}
 8005f18:	bf00      	nop
 8005f1a:	e7fe      	b.n	8005f1a <vTaskStartScheduler+0xaa>
}
 8005f1c:	bf00      	nop
 8005f1e:	3718      	adds	r7, #24
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}
 8005f24:	0800a58c 	.word	0x0800a58c
 8005f28:	08006555 	.word	0x08006555
 8005f2c:	20000db4 	.word	0x20000db4
 8005f30:	20000db0 	.word	0x20000db0
 8005f34:	20000d9c 	.word	0x20000d9c
 8005f38:	20000d94 	.word	0x20000d94

08005f3c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005f40:	4b04      	ldr	r3, [pc, #16]	; (8005f54 <vTaskSuspendAll+0x18>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	3301      	adds	r3, #1
 8005f46:	4a03      	ldr	r2, [pc, #12]	; (8005f54 <vTaskSuspendAll+0x18>)
 8005f48:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005f4a:	bf00      	nop
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr
 8005f54:	20000db8 	.word	0x20000db8

08005f58 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b084      	sub	sp, #16
 8005f5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005f62:	2300      	movs	r3, #0
 8005f64:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005f66:	4b42      	ldr	r3, [pc, #264]	; (8006070 <xTaskResumeAll+0x118>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d10a      	bne.n	8005f84 <xTaskResumeAll+0x2c>
	__asm volatile
 8005f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f72:	f383 8811 	msr	BASEPRI, r3
 8005f76:	f3bf 8f6f 	isb	sy
 8005f7a:	f3bf 8f4f 	dsb	sy
 8005f7e:	603b      	str	r3, [r7, #0]
}
 8005f80:	bf00      	nop
 8005f82:	e7fe      	b.n	8005f82 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005f84:	f001 fa16 	bl	80073b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005f88:	4b39      	ldr	r3, [pc, #228]	; (8006070 <xTaskResumeAll+0x118>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	3b01      	subs	r3, #1
 8005f8e:	4a38      	ldr	r2, [pc, #224]	; (8006070 <xTaskResumeAll+0x118>)
 8005f90:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f92:	4b37      	ldr	r3, [pc, #220]	; (8006070 <xTaskResumeAll+0x118>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d162      	bne.n	8006060 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005f9a:	4b36      	ldr	r3, [pc, #216]	; (8006074 <xTaskResumeAll+0x11c>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d05e      	beq.n	8006060 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005fa2:	e02f      	b.n	8006004 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fa4:	4b34      	ldr	r3, [pc, #208]	; (8006078 <xTaskResumeAll+0x120>)
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	68db      	ldr	r3, [r3, #12]
 8005faa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	3318      	adds	r3, #24
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f7fe fd13 	bl	80049dc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	3304      	adds	r3, #4
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f7fe fd0e 	bl	80049dc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fc4:	4b2d      	ldr	r3, [pc, #180]	; (800607c <xTaskResumeAll+0x124>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d903      	bls.n	8005fd4 <xTaskResumeAll+0x7c>
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd0:	4a2a      	ldr	r2, [pc, #168]	; (800607c <xTaskResumeAll+0x124>)
 8005fd2:	6013      	str	r3, [r2, #0]
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fd8:	4613      	mov	r3, r2
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	4413      	add	r3, r2
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	4a27      	ldr	r2, [pc, #156]	; (8006080 <xTaskResumeAll+0x128>)
 8005fe2:	441a      	add	r2, r3
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	3304      	adds	r3, #4
 8005fe8:	4619      	mov	r1, r3
 8005fea:	4610      	mov	r0, r2
 8005fec:	f7fe fc99 	bl	8004922 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ff4:	4b23      	ldr	r3, [pc, #140]	; (8006084 <xTaskResumeAll+0x12c>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d302      	bcc.n	8006004 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005ffe:	4b22      	ldr	r3, [pc, #136]	; (8006088 <xTaskResumeAll+0x130>)
 8006000:	2201      	movs	r2, #1
 8006002:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006004:	4b1c      	ldr	r3, [pc, #112]	; (8006078 <xTaskResumeAll+0x120>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d1cb      	bne.n	8005fa4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d001      	beq.n	8006016 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006012:	f000 fb55 	bl	80066c0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006016:	4b1d      	ldr	r3, [pc, #116]	; (800608c <xTaskResumeAll+0x134>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d010      	beq.n	8006044 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006022:	f000 f847 	bl	80060b4 <xTaskIncrementTick>
 8006026:	4603      	mov	r3, r0
 8006028:	2b00      	cmp	r3, #0
 800602a:	d002      	beq.n	8006032 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800602c:	4b16      	ldr	r3, [pc, #88]	; (8006088 <xTaskResumeAll+0x130>)
 800602e:	2201      	movs	r2, #1
 8006030:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	3b01      	subs	r3, #1
 8006036:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d1f1      	bne.n	8006022 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800603e:	4b13      	ldr	r3, [pc, #76]	; (800608c <xTaskResumeAll+0x134>)
 8006040:	2200      	movs	r2, #0
 8006042:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006044:	4b10      	ldr	r3, [pc, #64]	; (8006088 <xTaskResumeAll+0x130>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d009      	beq.n	8006060 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800604c:	2301      	movs	r3, #1
 800604e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006050:	4b0f      	ldr	r3, [pc, #60]	; (8006090 <xTaskResumeAll+0x138>)
 8006052:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006056:	601a      	str	r2, [r3, #0]
 8006058:	f3bf 8f4f 	dsb	sy
 800605c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006060:	f001 f9d8 	bl	8007414 <vPortExitCritical>

	return xAlreadyYielded;
 8006064:	68bb      	ldr	r3, [r7, #8]
}
 8006066:	4618      	mov	r0, r3
 8006068:	3710      	adds	r7, #16
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}
 800606e:	bf00      	nop
 8006070:	20000db8 	.word	0x20000db8
 8006074:	20000d90 	.word	0x20000d90
 8006078:	20000d50 	.word	0x20000d50
 800607c:	20000d98 	.word	0x20000d98
 8006080:	200008c0 	.word	0x200008c0
 8006084:	200008bc 	.word	0x200008bc
 8006088:	20000da4 	.word	0x20000da4
 800608c:	20000da0 	.word	0x20000da0
 8006090:	e000ed04 	.word	0xe000ed04

08006094 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006094:	b480      	push	{r7}
 8006096:	b083      	sub	sp, #12
 8006098:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800609a:	4b05      	ldr	r3, [pc, #20]	; (80060b0 <xTaskGetTickCount+0x1c>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80060a0:	687b      	ldr	r3, [r7, #4]
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	370c      	adds	r7, #12
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr
 80060ae:	bf00      	nop
 80060b0:	20000d94 	.word	0x20000d94

080060b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b086      	sub	sp, #24
 80060b8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80060ba:	2300      	movs	r3, #0
 80060bc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060be:	4b4f      	ldr	r3, [pc, #316]	; (80061fc <xTaskIncrementTick+0x148>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	f040 808f 	bne.w	80061e6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80060c8:	4b4d      	ldr	r3, [pc, #308]	; (8006200 <xTaskIncrementTick+0x14c>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	3301      	adds	r3, #1
 80060ce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80060d0:	4a4b      	ldr	r2, [pc, #300]	; (8006200 <xTaskIncrementTick+0x14c>)
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d120      	bne.n	800611e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80060dc:	4b49      	ldr	r3, [pc, #292]	; (8006204 <xTaskIncrementTick+0x150>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d00a      	beq.n	80060fc <xTaskIncrementTick+0x48>
	__asm volatile
 80060e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ea:	f383 8811 	msr	BASEPRI, r3
 80060ee:	f3bf 8f6f 	isb	sy
 80060f2:	f3bf 8f4f 	dsb	sy
 80060f6:	603b      	str	r3, [r7, #0]
}
 80060f8:	bf00      	nop
 80060fa:	e7fe      	b.n	80060fa <xTaskIncrementTick+0x46>
 80060fc:	4b41      	ldr	r3, [pc, #260]	; (8006204 <xTaskIncrementTick+0x150>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	60fb      	str	r3, [r7, #12]
 8006102:	4b41      	ldr	r3, [pc, #260]	; (8006208 <xTaskIncrementTick+0x154>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a3f      	ldr	r2, [pc, #252]	; (8006204 <xTaskIncrementTick+0x150>)
 8006108:	6013      	str	r3, [r2, #0]
 800610a:	4a3f      	ldr	r2, [pc, #252]	; (8006208 <xTaskIncrementTick+0x154>)
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	6013      	str	r3, [r2, #0]
 8006110:	4b3e      	ldr	r3, [pc, #248]	; (800620c <xTaskIncrementTick+0x158>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	3301      	adds	r3, #1
 8006116:	4a3d      	ldr	r2, [pc, #244]	; (800620c <xTaskIncrementTick+0x158>)
 8006118:	6013      	str	r3, [r2, #0]
 800611a:	f000 fad1 	bl	80066c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800611e:	4b3c      	ldr	r3, [pc, #240]	; (8006210 <xTaskIncrementTick+0x15c>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	693a      	ldr	r2, [r7, #16]
 8006124:	429a      	cmp	r2, r3
 8006126:	d349      	bcc.n	80061bc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006128:	4b36      	ldr	r3, [pc, #216]	; (8006204 <xTaskIncrementTick+0x150>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d104      	bne.n	800613c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006132:	4b37      	ldr	r3, [pc, #220]	; (8006210 <xTaskIncrementTick+0x15c>)
 8006134:	f04f 32ff 	mov.w	r2, #4294967295
 8006138:	601a      	str	r2, [r3, #0]
					break;
 800613a:	e03f      	b.n	80061bc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800613c:	4b31      	ldr	r3, [pc, #196]	; (8006204 <xTaskIncrementTick+0x150>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	68db      	ldr	r3, [r3, #12]
 8006142:	68db      	ldr	r3, [r3, #12]
 8006144:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800614c:	693a      	ldr	r2, [r7, #16]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	429a      	cmp	r2, r3
 8006152:	d203      	bcs.n	800615c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006154:	4a2e      	ldr	r2, [pc, #184]	; (8006210 <xTaskIncrementTick+0x15c>)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800615a:	e02f      	b.n	80061bc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	3304      	adds	r3, #4
 8006160:	4618      	mov	r0, r3
 8006162:	f7fe fc3b 	bl	80049dc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800616a:	2b00      	cmp	r3, #0
 800616c:	d004      	beq.n	8006178 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	3318      	adds	r3, #24
 8006172:	4618      	mov	r0, r3
 8006174:	f7fe fc32 	bl	80049dc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800617c:	4b25      	ldr	r3, [pc, #148]	; (8006214 <xTaskIncrementTick+0x160>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	429a      	cmp	r2, r3
 8006182:	d903      	bls.n	800618c <xTaskIncrementTick+0xd8>
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006188:	4a22      	ldr	r2, [pc, #136]	; (8006214 <xTaskIncrementTick+0x160>)
 800618a:	6013      	str	r3, [r2, #0]
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006190:	4613      	mov	r3, r2
 8006192:	009b      	lsls	r3, r3, #2
 8006194:	4413      	add	r3, r2
 8006196:	009b      	lsls	r3, r3, #2
 8006198:	4a1f      	ldr	r2, [pc, #124]	; (8006218 <xTaskIncrementTick+0x164>)
 800619a:	441a      	add	r2, r3
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	3304      	adds	r3, #4
 80061a0:	4619      	mov	r1, r3
 80061a2:	4610      	mov	r0, r2
 80061a4:	f7fe fbbd 	bl	8004922 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061ac:	4b1b      	ldr	r3, [pc, #108]	; (800621c <xTaskIncrementTick+0x168>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d3b8      	bcc.n	8006128 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80061b6:	2301      	movs	r3, #1
 80061b8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80061ba:	e7b5      	b.n	8006128 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80061bc:	4b17      	ldr	r3, [pc, #92]	; (800621c <xTaskIncrementTick+0x168>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061c2:	4915      	ldr	r1, [pc, #84]	; (8006218 <xTaskIncrementTick+0x164>)
 80061c4:	4613      	mov	r3, r2
 80061c6:	009b      	lsls	r3, r3, #2
 80061c8:	4413      	add	r3, r2
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	440b      	add	r3, r1
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	d901      	bls.n	80061d8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80061d4:	2301      	movs	r3, #1
 80061d6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80061d8:	4b11      	ldr	r3, [pc, #68]	; (8006220 <xTaskIncrementTick+0x16c>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d007      	beq.n	80061f0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80061e0:	2301      	movs	r3, #1
 80061e2:	617b      	str	r3, [r7, #20]
 80061e4:	e004      	b.n	80061f0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80061e6:	4b0f      	ldr	r3, [pc, #60]	; (8006224 <xTaskIncrementTick+0x170>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	3301      	adds	r3, #1
 80061ec:	4a0d      	ldr	r2, [pc, #52]	; (8006224 <xTaskIncrementTick+0x170>)
 80061ee:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80061f0:	697b      	ldr	r3, [r7, #20]
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3718      	adds	r7, #24
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}
 80061fa:	bf00      	nop
 80061fc:	20000db8 	.word	0x20000db8
 8006200:	20000d94 	.word	0x20000d94
 8006204:	20000d48 	.word	0x20000d48
 8006208:	20000d4c 	.word	0x20000d4c
 800620c:	20000da8 	.word	0x20000da8
 8006210:	20000db0 	.word	0x20000db0
 8006214:	20000d98 	.word	0x20000d98
 8006218:	200008c0 	.word	0x200008c0
 800621c:	200008bc 	.word	0x200008bc
 8006220:	20000da4 	.word	0x20000da4
 8006224:	20000da0 	.word	0x20000da0

08006228 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006228:	b480      	push	{r7}
 800622a:	b085      	sub	sp, #20
 800622c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800622e:	4b28      	ldr	r3, [pc, #160]	; (80062d0 <vTaskSwitchContext+0xa8>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d003      	beq.n	800623e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006236:	4b27      	ldr	r3, [pc, #156]	; (80062d4 <vTaskSwitchContext+0xac>)
 8006238:	2201      	movs	r2, #1
 800623a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800623c:	e041      	b.n	80062c2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800623e:	4b25      	ldr	r3, [pc, #148]	; (80062d4 <vTaskSwitchContext+0xac>)
 8006240:	2200      	movs	r2, #0
 8006242:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006244:	4b24      	ldr	r3, [pc, #144]	; (80062d8 <vTaskSwitchContext+0xb0>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	60fb      	str	r3, [r7, #12]
 800624a:	e010      	b.n	800626e <vTaskSwitchContext+0x46>
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d10a      	bne.n	8006268 <vTaskSwitchContext+0x40>
	__asm volatile
 8006252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006256:	f383 8811 	msr	BASEPRI, r3
 800625a:	f3bf 8f6f 	isb	sy
 800625e:	f3bf 8f4f 	dsb	sy
 8006262:	607b      	str	r3, [r7, #4]
}
 8006264:	bf00      	nop
 8006266:	e7fe      	b.n	8006266 <vTaskSwitchContext+0x3e>
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	3b01      	subs	r3, #1
 800626c:	60fb      	str	r3, [r7, #12]
 800626e:	491b      	ldr	r1, [pc, #108]	; (80062dc <vTaskSwitchContext+0xb4>)
 8006270:	68fa      	ldr	r2, [r7, #12]
 8006272:	4613      	mov	r3, r2
 8006274:	009b      	lsls	r3, r3, #2
 8006276:	4413      	add	r3, r2
 8006278:	009b      	lsls	r3, r3, #2
 800627a:	440b      	add	r3, r1
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d0e4      	beq.n	800624c <vTaskSwitchContext+0x24>
 8006282:	68fa      	ldr	r2, [r7, #12]
 8006284:	4613      	mov	r3, r2
 8006286:	009b      	lsls	r3, r3, #2
 8006288:	4413      	add	r3, r2
 800628a:	009b      	lsls	r3, r3, #2
 800628c:	4a13      	ldr	r2, [pc, #76]	; (80062dc <vTaskSwitchContext+0xb4>)
 800628e:	4413      	add	r3, r2
 8006290:	60bb      	str	r3, [r7, #8]
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	685a      	ldr	r2, [r3, #4]
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	605a      	str	r2, [r3, #4]
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	685a      	ldr	r2, [r3, #4]
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	3308      	adds	r3, #8
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d104      	bne.n	80062b2 <vTaskSwitchContext+0x8a>
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	685a      	ldr	r2, [r3, #4]
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	605a      	str	r2, [r3, #4]
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	68db      	ldr	r3, [r3, #12]
 80062b8:	4a09      	ldr	r2, [pc, #36]	; (80062e0 <vTaskSwitchContext+0xb8>)
 80062ba:	6013      	str	r3, [r2, #0]
 80062bc:	4a06      	ldr	r2, [pc, #24]	; (80062d8 <vTaskSwitchContext+0xb0>)
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	6013      	str	r3, [r2, #0]
}
 80062c2:	bf00      	nop
 80062c4:	3714      	adds	r7, #20
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr
 80062ce:	bf00      	nop
 80062d0:	20000db8 	.word	0x20000db8
 80062d4:	20000da4 	.word	0x20000da4
 80062d8:	20000d98 	.word	0x20000d98
 80062dc:	200008c0 	.word	0x200008c0
 80062e0:	200008bc 	.word	0x200008bc

080062e4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b084      	sub	sp, #16
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d10a      	bne.n	800630a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80062f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f8:	f383 8811 	msr	BASEPRI, r3
 80062fc:	f3bf 8f6f 	isb	sy
 8006300:	f3bf 8f4f 	dsb	sy
 8006304:	60fb      	str	r3, [r7, #12]
}
 8006306:	bf00      	nop
 8006308:	e7fe      	b.n	8006308 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800630a:	4b07      	ldr	r3, [pc, #28]	; (8006328 <vTaskPlaceOnEventList+0x44>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	3318      	adds	r3, #24
 8006310:	4619      	mov	r1, r3
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f7fe fb29 	bl	800496a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006318:	2101      	movs	r1, #1
 800631a:	6838      	ldr	r0, [r7, #0]
 800631c:	f000 fb7a 	bl	8006a14 <prvAddCurrentTaskToDelayedList>
}
 8006320:	bf00      	nop
 8006322:	3710      	adds	r7, #16
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}
 8006328:	200008bc 	.word	0x200008bc

0800632c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800632c:	b580      	push	{r7, lr}
 800632e:	b086      	sub	sp, #24
 8006330:	af00      	add	r7, sp, #0
 8006332:	60f8      	str	r0, [r7, #12]
 8006334:	60b9      	str	r1, [r7, #8]
 8006336:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d10a      	bne.n	8006354 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800633e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006342:	f383 8811 	msr	BASEPRI, r3
 8006346:	f3bf 8f6f 	isb	sy
 800634a:	f3bf 8f4f 	dsb	sy
 800634e:	617b      	str	r3, [r7, #20]
}
 8006350:	bf00      	nop
 8006352:	e7fe      	b.n	8006352 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006354:	4b0a      	ldr	r3, [pc, #40]	; (8006380 <vTaskPlaceOnEventListRestricted+0x54>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	3318      	adds	r3, #24
 800635a:	4619      	mov	r1, r3
 800635c:	68f8      	ldr	r0, [r7, #12]
 800635e:	f7fe fae0 	bl	8004922 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d002      	beq.n	800636e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006368:	f04f 33ff 	mov.w	r3, #4294967295
 800636c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800636e:	6879      	ldr	r1, [r7, #4]
 8006370:	68b8      	ldr	r0, [r7, #8]
 8006372:	f000 fb4f 	bl	8006a14 <prvAddCurrentTaskToDelayedList>
	}
 8006376:	bf00      	nop
 8006378:	3718      	adds	r7, #24
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}
 800637e:	bf00      	nop
 8006380:	200008bc 	.word	0x200008bc

08006384 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b086      	sub	sp, #24
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	68db      	ldr	r3, [r3, #12]
 8006390:	68db      	ldr	r3, [r3, #12]
 8006392:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d10a      	bne.n	80063b0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800639a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800639e:	f383 8811 	msr	BASEPRI, r3
 80063a2:	f3bf 8f6f 	isb	sy
 80063a6:	f3bf 8f4f 	dsb	sy
 80063aa:	60fb      	str	r3, [r7, #12]
}
 80063ac:	bf00      	nop
 80063ae:	e7fe      	b.n	80063ae <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	3318      	adds	r3, #24
 80063b4:	4618      	mov	r0, r3
 80063b6:	f7fe fb11 	bl	80049dc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063ba:	4b1e      	ldr	r3, [pc, #120]	; (8006434 <xTaskRemoveFromEventList+0xb0>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d11d      	bne.n	80063fe <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	3304      	adds	r3, #4
 80063c6:	4618      	mov	r0, r3
 80063c8:	f7fe fb08 	bl	80049dc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063d0:	4b19      	ldr	r3, [pc, #100]	; (8006438 <xTaskRemoveFromEventList+0xb4>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	429a      	cmp	r2, r3
 80063d6:	d903      	bls.n	80063e0 <xTaskRemoveFromEventList+0x5c>
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063dc:	4a16      	ldr	r2, [pc, #88]	; (8006438 <xTaskRemoveFromEventList+0xb4>)
 80063de:	6013      	str	r3, [r2, #0]
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063e4:	4613      	mov	r3, r2
 80063e6:	009b      	lsls	r3, r3, #2
 80063e8:	4413      	add	r3, r2
 80063ea:	009b      	lsls	r3, r3, #2
 80063ec:	4a13      	ldr	r2, [pc, #76]	; (800643c <xTaskRemoveFromEventList+0xb8>)
 80063ee:	441a      	add	r2, r3
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	3304      	adds	r3, #4
 80063f4:	4619      	mov	r1, r3
 80063f6:	4610      	mov	r0, r2
 80063f8:	f7fe fa93 	bl	8004922 <vListInsertEnd>
 80063fc:	e005      	b.n	800640a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	3318      	adds	r3, #24
 8006402:	4619      	mov	r1, r3
 8006404:	480e      	ldr	r0, [pc, #56]	; (8006440 <xTaskRemoveFromEventList+0xbc>)
 8006406:	f7fe fa8c 	bl	8004922 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800640e:	4b0d      	ldr	r3, [pc, #52]	; (8006444 <xTaskRemoveFromEventList+0xc0>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006414:	429a      	cmp	r2, r3
 8006416:	d905      	bls.n	8006424 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006418:	2301      	movs	r3, #1
 800641a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800641c:	4b0a      	ldr	r3, [pc, #40]	; (8006448 <xTaskRemoveFromEventList+0xc4>)
 800641e:	2201      	movs	r2, #1
 8006420:	601a      	str	r2, [r3, #0]
 8006422:	e001      	b.n	8006428 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006424:	2300      	movs	r3, #0
 8006426:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006428:	697b      	ldr	r3, [r7, #20]
}
 800642a:	4618      	mov	r0, r3
 800642c:	3718      	adds	r7, #24
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}
 8006432:	bf00      	nop
 8006434:	20000db8 	.word	0x20000db8
 8006438:	20000d98 	.word	0x20000d98
 800643c:	200008c0 	.word	0x200008c0
 8006440:	20000d50 	.word	0x20000d50
 8006444:	200008bc 	.word	0x200008bc
 8006448:	20000da4 	.word	0x20000da4

0800644c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800644c:	b480      	push	{r7}
 800644e:	b083      	sub	sp, #12
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006454:	4b06      	ldr	r3, [pc, #24]	; (8006470 <vTaskInternalSetTimeOutState+0x24>)
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800645c:	4b05      	ldr	r3, [pc, #20]	; (8006474 <vTaskInternalSetTimeOutState+0x28>)
 800645e:	681a      	ldr	r2, [r3, #0]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	605a      	str	r2, [r3, #4]
}
 8006464:	bf00      	nop
 8006466:	370c      	adds	r7, #12
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr
 8006470:	20000da8 	.word	0x20000da8
 8006474:	20000d94 	.word	0x20000d94

08006478 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b088      	sub	sp, #32
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d10a      	bne.n	800649e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800648c:	f383 8811 	msr	BASEPRI, r3
 8006490:	f3bf 8f6f 	isb	sy
 8006494:	f3bf 8f4f 	dsb	sy
 8006498:	613b      	str	r3, [r7, #16]
}
 800649a:	bf00      	nop
 800649c:	e7fe      	b.n	800649c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d10a      	bne.n	80064ba <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80064a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a8:	f383 8811 	msr	BASEPRI, r3
 80064ac:	f3bf 8f6f 	isb	sy
 80064b0:	f3bf 8f4f 	dsb	sy
 80064b4:	60fb      	str	r3, [r7, #12]
}
 80064b6:	bf00      	nop
 80064b8:	e7fe      	b.n	80064b8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80064ba:	f000 ff7b 	bl	80073b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80064be:	4b1d      	ldr	r3, [pc, #116]	; (8006534 <xTaskCheckForTimeOut+0xbc>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	69ba      	ldr	r2, [r7, #24]
 80064ca:	1ad3      	subs	r3, r2, r3
 80064cc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064d6:	d102      	bne.n	80064de <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80064d8:	2300      	movs	r3, #0
 80064da:	61fb      	str	r3, [r7, #28]
 80064dc:	e023      	b.n	8006526 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681a      	ldr	r2, [r3, #0]
 80064e2:	4b15      	ldr	r3, [pc, #84]	; (8006538 <xTaskCheckForTimeOut+0xc0>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d007      	beq.n	80064fa <xTaskCheckForTimeOut+0x82>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	69ba      	ldr	r2, [r7, #24]
 80064f0:	429a      	cmp	r2, r3
 80064f2:	d302      	bcc.n	80064fa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80064f4:	2301      	movs	r3, #1
 80064f6:	61fb      	str	r3, [r7, #28]
 80064f8:	e015      	b.n	8006526 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	697a      	ldr	r2, [r7, #20]
 8006500:	429a      	cmp	r2, r3
 8006502:	d20b      	bcs.n	800651c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	1ad2      	subs	r2, r2, r3
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f7ff ff9b 	bl	800644c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006516:	2300      	movs	r3, #0
 8006518:	61fb      	str	r3, [r7, #28]
 800651a:	e004      	b.n	8006526 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	2200      	movs	r2, #0
 8006520:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006522:	2301      	movs	r3, #1
 8006524:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006526:	f000 ff75 	bl	8007414 <vPortExitCritical>

	return xReturn;
 800652a:	69fb      	ldr	r3, [r7, #28]
}
 800652c:	4618      	mov	r0, r3
 800652e:	3720      	adds	r7, #32
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}
 8006534:	20000d94 	.word	0x20000d94
 8006538:	20000da8 	.word	0x20000da8

0800653c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800653c:	b480      	push	{r7}
 800653e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006540:	4b03      	ldr	r3, [pc, #12]	; (8006550 <vTaskMissedYield+0x14>)
 8006542:	2201      	movs	r2, #1
 8006544:	601a      	str	r2, [r3, #0]
}
 8006546:	bf00      	nop
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr
 8006550:	20000da4 	.word	0x20000da4

08006554 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b082      	sub	sp, #8
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800655c:	f000 f852 	bl	8006604 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006560:	4b06      	ldr	r3, [pc, #24]	; (800657c <prvIdleTask+0x28>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	2b01      	cmp	r3, #1
 8006566:	d9f9      	bls.n	800655c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006568:	4b05      	ldr	r3, [pc, #20]	; (8006580 <prvIdleTask+0x2c>)
 800656a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800656e:	601a      	str	r2, [r3, #0]
 8006570:	f3bf 8f4f 	dsb	sy
 8006574:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006578:	e7f0      	b.n	800655c <prvIdleTask+0x8>
 800657a:	bf00      	nop
 800657c:	200008c0 	.word	0x200008c0
 8006580:	e000ed04 	.word	0xe000ed04

08006584 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b082      	sub	sp, #8
 8006588:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800658a:	2300      	movs	r3, #0
 800658c:	607b      	str	r3, [r7, #4]
 800658e:	e00c      	b.n	80065aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006590:	687a      	ldr	r2, [r7, #4]
 8006592:	4613      	mov	r3, r2
 8006594:	009b      	lsls	r3, r3, #2
 8006596:	4413      	add	r3, r2
 8006598:	009b      	lsls	r3, r3, #2
 800659a:	4a12      	ldr	r2, [pc, #72]	; (80065e4 <prvInitialiseTaskLists+0x60>)
 800659c:	4413      	add	r3, r2
 800659e:	4618      	mov	r0, r3
 80065a0:	f7fe f992 	bl	80048c8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	3301      	adds	r3, #1
 80065a8:	607b      	str	r3, [r7, #4]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2b37      	cmp	r3, #55	; 0x37
 80065ae:	d9ef      	bls.n	8006590 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80065b0:	480d      	ldr	r0, [pc, #52]	; (80065e8 <prvInitialiseTaskLists+0x64>)
 80065b2:	f7fe f989 	bl	80048c8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80065b6:	480d      	ldr	r0, [pc, #52]	; (80065ec <prvInitialiseTaskLists+0x68>)
 80065b8:	f7fe f986 	bl	80048c8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80065bc:	480c      	ldr	r0, [pc, #48]	; (80065f0 <prvInitialiseTaskLists+0x6c>)
 80065be:	f7fe f983 	bl	80048c8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80065c2:	480c      	ldr	r0, [pc, #48]	; (80065f4 <prvInitialiseTaskLists+0x70>)
 80065c4:	f7fe f980 	bl	80048c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80065c8:	480b      	ldr	r0, [pc, #44]	; (80065f8 <prvInitialiseTaskLists+0x74>)
 80065ca:	f7fe f97d 	bl	80048c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80065ce:	4b0b      	ldr	r3, [pc, #44]	; (80065fc <prvInitialiseTaskLists+0x78>)
 80065d0:	4a05      	ldr	r2, [pc, #20]	; (80065e8 <prvInitialiseTaskLists+0x64>)
 80065d2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80065d4:	4b0a      	ldr	r3, [pc, #40]	; (8006600 <prvInitialiseTaskLists+0x7c>)
 80065d6:	4a05      	ldr	r2, [pc, #20]	; (80065ec <prvInitialiseTaskLists+0x68>)
 80065d8:	601a      	str	r2, [r3, #0]
}
 80065da:	bf00      	nop
 80065dc:	3708      	adds	r7, #8
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}
 80065e2:	bf00      	nop
 80065e4:	200008c0 	.word	0x200008c0
 80065e8:	20000d20 	.word	0x20000d20
 80065ec:	20000d34 	.word	0x20000d34
 80065f0:	20000d50 	.word	0x20000d50
 80065f4:	20000d64 	.word	0x20000d64
 80065f8:	20000d7c 	.word	0x20000d7c
 80065fc:	20000d48 	.word	0x20000d48
 8006600:	20000d4c 	.word	0x20000d4c

08006604 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b082      	sub	sp, #8
 8006608:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800660a:	e019      	b.n	8006640 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800660c:	f000 fed2 	bl	80073b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006610:	4b10      	ldr	r3, [pc, #64]	; (8006654 <prvCheckTasksWaitingTermination+0x50>)
 8006612:	68db      	ldr	r3, [r3, #12]
 8006614:	68db      	ldr	r3, [r3, #12]
 8006616:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	3304      	adds	r3, #4
 800661c:	4618      	mov	r0, r3
 800661e:	f7fe f9dd 	bl	80049dc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006622:	4b0d      	ldr	r3, [pc, #52]	; (8006658 <prvCheckTasksWaitingTermination+0x54>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	3b01      	subs	r3, #1
 8006628:	4a0b      	ldr	r2, [pc, #44]	; (8006658 <prvCheckTasksWaitingTermination+0x54>)
 800662a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800662c:	4b0b      	ldr	r3, [pc, #44]	; (800665c <prvCheckTasksWaitingTermination+0x58>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	3b01      	subs	r3, #1
 8006632:	4a0a      	ldr	r2, [pc, #40]	; (800665c <prvCheckTasksWaitingTermination+0x58>)
 8006634:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006636:	f000 feed 	bl	8007414 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f000 f810 	bl	8006660 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006640:	4b06      	ldr	r3, [pc, #24]	; (800665c <prvCheckTasksWaitingTermination+0x58>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d1e1      	bne.n	800660c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006648:	bf00      	nop
 800664a:	bf00      	nop
 800664c:	3708      	adds	r7, #8
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}
 8006652:	bf00      	nop
 8006654:	20000d64 	.word	0x20000d64
 8006658:	20000d90 	.word	0x20000d90
 800665c:	20000d78 	.word	0x20000d78

08006660 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006660:	b580      	push	{r7, lr}
 8006662:	b084      	sub	sp, #16
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800666e:	2b00      	cmp	r3, #0
 8006670:	d108      	bne.n	8006684 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006676:	4618      	mov	r0, r3
 8006678:	f001 f88a 	bl	8007790 <vPortFree>
				vPortFree( pxTCB );
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f001 f887 	bl	8007790 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006682:	e018      	b.n	80066b6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800668a:	2b01      	cmp	r3, #1
 800668c:	d103      	bne.n	8006696 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f001 f87e 	bl	8007790 <vPortFree>
	}
 8006694:	e00f      	b.n	80066b6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800669c:	2b02      	cmp	r3, #2
 800669e:	d00a      	beq.n	80066b6 <prvDeleteTCB+0x56>
	__asm volatile
 80066a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a4:	f383 8811 	msr	BASEPRI, r3
 80066a8:	f3bf 8f6f 	isb	sy
 80066ac:	f3bf 8f4f 	dsb	sy
 80066b0:	60fb      	str	r3, [r7, #12]
}
 80066b2:	bf00      	nop
 80066b4:	e7fe      	b.n	80066b4 <prvDeleteTCB+0x54>
	}
 80066b6:	bf00      	nop
 80066b8:	3710      	adds	r7, #16
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}
	...

080066c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80066c0:	b480      	push	{r7}
 80066c2:	b083      	sub	sp, #12
 80066c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80066c6:	4b0c      	ldr	r3, [pc, #48]	; (80066f8 <prvResetNextTaskUnblockTime+0x38>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d104      	bne.n	80066da <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80066d0:	4b0a      	ldr	r3, [pc, #40]	; (80066fc <prvResetNextTaskUnblockTime+0x3c>)
 80066d2:	f04f 32ff 	mov.w	r2, #4294967295
 80066d6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80066d8:	e008      	b.n	80066ec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066da:	4b07      	ldr	r3, [pc, #28]	; (80066f8 <prvResetNextTaskUnblockTime+0x38>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	68db      	ldr	r3, [r3, #12]
 80066e0:	68db      	ldr	r3, [r3, #12]
 80066e2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	4a04      	ldr	r2, [pc, #16]	; (80066fc <prvResetNextTaskUnblockTime+0x3c>)
 80066ea:	6013      	str	r3, [r2, #0]
}
 80066ec:	bf00      	nop
 80066ee:	370c      	adds	r7, #12
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr
 80066f8:	20000d48 	.word	0x20000d48
 80066fc:	20000db0 	.word	0x20000db0

08006700 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006700:	b480      	push	{r7}
 8006702:	b083      	sub	sp, #12
 8006704:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006706:	4b0b      	ldr	r3, [pc, #44]	; (8006734 <xTaskGetSchedulerState+0x34>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d102      	bne.n	8006714 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800670e:	2301      	movs	r3, #1
 8006710:	607b      	str	r3, [r7, #4]
 8006712:	e008      	b.n	8006726 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006714:	4b08      	ldr	r3, [pc, #32]	; (8006738 <xTaskGetSchedulerState+0x38>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d102      	bne.n	8006722 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800671c:	2302      	movs	r3, #2
 800671e:	607b      	str	r3, [r7, #4]
 8006720:	e001      	b.n	8006726 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006722:	2300      	movs	r3, #0
 8006724:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006726:	687b      	ldr	r3, [r7, #4]
	}
 8006728:	4618      	mov	r0, r3
 800672a:	370c      	adds	r7, #12
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr
 8006734:	20000d9c 	.word	0x20000d9c
 8006738:	20000db8 	.word	0x20000db8

0800673c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800673c:	b580      	push	{r7, lr}
 800673e:	b084      	sub	sp, #16
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006748:	2300      	movs	r3, #0
 800674a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d051      	beq.n	80067f6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006756:	4b2a      	ldr	r3, [pc, #168]	; (8006800 <xTaskPriorityInherit+0xc4>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800675c:	429a      	cmp	r2, r3
 800675e:	d241      	bcs.n	80067e4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	699b      	ldr	r3, [r3, #24]
 8006764:	2b00      	cmp	r3, #0
 8006766:	db06      	blt.n	8006776 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006768:	4b25      	ldr	r3, [pc, #148]	; (8006800 <xTaskPriorityInherit+0xc4>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800676e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	6959      	ldr	r1, [r3, #20]
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800677e:	4613      	mov	r3, r2
 8006780:	009b      	lsls	r3, r3, #2
 8006782:	4413      	add	r3, r2
 8006784:	009b      	lsls	r3, r3, #2
 8006786:	4a1f      	ldr	r2, [pc, #124]	; (8006804 <xTaskPriorityInherit+0xc8>)
 8006788:	4413      	add	r3, r2
 800678a:	4299      	cmp	r1, r3
 800678c:	d122      	bne.n	80067d4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	3304      	adds	r3, #4
 8006792:	4618      	mov	r0, r3
 8006794:	f7fe f922 	bl	80049dc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006798:	4b19      	ldr	r3, [pc, #100]	; (8006800 <xTaskPriorityInherit+0xc4>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067a6:	4b18      	ldr	r3, [pc, #96]	; (8006808 <xTaskPriorityInherit+0xcc>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	429a      	cmp	r2, r3
 80067ac:	d903      	bls.n	80067b6 <xTaskPriorityInherit+0x7a>
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067b2:	4a15      	ldr	r2, [pc, #84]	; (8006808 <xTaskPriorityInherit+0xcc>)
 80067b4:	6013      	str	r3, [r2, #0]
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067ba:	4613      	mov	r3, r2
 80067bc:	009b      	lsls	r3, r3, #2
 80067be:	4413      	add	r3, r2
 80067c0:	009b      	lsls	r3, r3, #2
 80067c2:	4a10      	ldr	r2, [pc, #64]	; (8006804 <xTaskPriorityInherit+0xc8>)
 80067c4:	441a      	add	r2, r3
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	3304      	adds	r3, #4
 80067ca:	4619      	mov	r1, r3
 80067cc:	4610      	mov	r0, r2
 80067ce:	f7fe f8a8 	bl	8004922 <vListInsertEnd>
 80067d2:	e004      	b.n	80067de <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80067d4:	4b0a      	ldr	r3, [pc, #40]	; (8006800 <xTaskPriorityInherit+0xc4>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80067de:	2301      	movs	r3, #1
 80067e0:	60fb      	str	r3, [r7, #12]
 80067e2:	e008      	b.n	80067f6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80067e8:	4b05      	ldr	r3, [pc, #20]	; (8006800 <xTaskPriorityInherit+0xc4>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ee:	429a      	cmp	r2, r3
 80067f0:	d201      	bcs.n	80067f6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80067f2:	2301      	movs	r3, #1
 80067f4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80067f6:	68fb      	ldr	r3, [r7, #12]
	}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3710      	adds	r7, #16
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}
 8006800:	200008bc 	.word	0x200008bc
 8006804:	200008c0 	.word	0x200008c0
 8006808:	20000d98 	.word	0x20000d98

0800680c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800680c:	b580      	push	{r7, lr}
 800680e:	b086      	sub	sp, #24
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006818:	2300      	movs	r3, #0
 800681a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d056      	beq.n	80068d0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006822:	4b2e      	ldr	r3, [pc, #184]	; (80068dc <xTaskPriorityDisinherit+0xd0>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	693a      	ldr	r2, [r7, #16]
 8006828:	429a      	cmp	r2, r3
 800682a:	d00a      	beq.n	8006842 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800682c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006830:	f383 8811 	msr	BASEPRI, r3
 8006834:	f3bf 8f6f 	isb	sy
 8006838:	f3bf 8f4f 	dsb	sy
 800683c:	60fb      	str	r3, [r7, #12]
}
 800683e:	bf00      	nop
 8006840:	e7fe      	b.n	8006840 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006846:	2b00      	cmp	r3, #0
 8006848:	d10a      	bne.n	8006860 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800684a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800684e:	f383 8811 	msr	BASEPRI, r3
 8006852:	f3bf 8f6f 	isb	sy
 8006856:	f3bf 8f4f 	dsb	sy
 800685a:	60bb      	str	r3, [r7, #8]
}
 800685c:	bf00      	nop
 800685e:	e7fe      	b.n	800685e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006864:	1e5a      	subs	r2, r3, #1
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006872:	429a      	cmp	r2, r3
 8006874:	d02c      	beq.n	80068d0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800687a:	2b00      	cmp	r3, #0
 800687c:	d128      	bne.n	80068d0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	3304      	adds	r3, #4
 8006882:	4618      	mov	r0, r3
 8006884:	f7fe f8aa 	bl	80049dc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006894:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068a0:	4b0f      	ldr	r3, [pc, #60]	; (80068e0 <xTaskPriorityDisinherit+0xd4>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d903      	bls.n	80068b0 <xTaskPriorityDisinherit+0xa4>
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ac:	4a0c      	ldr	r2, [pc, #48]	; (80068e0 <xTaskPriorityDisinherit+0xd4>)
 80068ae:	6013      	str	r3, [r2, #0]
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068b4:	4613      	mov	r3, r2
 80068b6:	009b      	lsls	r3, r3, #2
 80068b8:	4413      	add	r3, r2
 80068ba:	009b      	lsls	r3, r3, #2
 80068bc:	4a09      	ldr	r2, [pc, #36]	; (80068e4 <xTaskPriorityDisinherit+0xd8>)
 80068be:	441a      	add	r2, r3
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	3304      	adds	r3, #4
 80068c4:	4619      	mov	r1, r3
 80068c6:	4610      	mov	r0, r2
 80068c8:	f7fe f82b 	bl	8004922 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80068cc:	2301      	movs	r3, #1
 80068ce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80068d0:	697b      	ldr	r3, [r7, #20]
	}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3718      	adds	r7, #24
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}
 80068da:	bf00      	nop
 80068dc:	200008bc 	.word	0x200008bc
 80068e0:	20000d98 	.word	0x20000d98
 80068e4:	200008c0 	.word	0x200008c0

080068e8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b088      	sub	sp, #32
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80068f6:	2301      	movs	r3, #1
 80068f8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d06a      	beq.n	80069d6 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006900:	69bb      	ldr	r3, [r7, #24]
 8006902:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006904:	2b00      	cmp	r3, #0
 8006906:	d10a      	bne.n	800691e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8006908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800690c:	f383 8811 	msr	BASEPRI, r3
 8006910:	f3bf 8f6f 	isb	sy
 8006914:	f3bf 8f4f 	dsb	sy
 8006918:	60fb      	str	r3, [r7, #12]
}
 800691a:	bf00      	nop
 800691c:	e7fe      	b.n	800691c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800691e:	69bb      	ldr	r3, [r7, #24]
 8006920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006922:	683a      	ldr	r2, [r7, #0]
 8006924:	429a      	cmp	r2, r3
 8006926:	d902      	bls.n	800692e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	61fb      	str	r3, [r7, #28]
 800692c:	e002      	b.n	8006934 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800692e:	69bb      	ldr	r3, [r7, #24]
 8006930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006932:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006934:	69bb      	ldr	r3, [r7, #24]
 8006936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006938:	69fa      	ldr	r2, [r7, #28]
 800693a:	429a      	cmp	r2, r3
 800693c:	d04b      	beq.n	80069d6 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800693e:	69bb      	ldr	r3, [r7, #24]
 8006940:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006942:	697a      	ldr	r2, [r7, #20]
 8006944:	429a      	cmp	r2, r3
 8006946:	d146      	bne.n	80069d6 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006948:	4b25      	ldr	r3, [pc, #148]	; (80069e0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	69ba      	ldr	r2, [r7, #24]
 800694e:	429a      	cmp	r2, r3
 8006950:	d10a      	bne.n	8006968 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8006952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006956:	f383 8811 	msr	BASEPRI, r3
 800695a:	f3bf 8f6f 	isb	sy
 800695e:	f3bf 8f4f 	dsb	sy
 8006962:	60bb      	str	r3, [r7, #8]
}
 8006964:	bf00      	nop
 8006966:	e7fe      	b.n	8006966 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006968:	69bb      	ldr	r3, [r7, #24]
 800696a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800696c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800696e:	69bb      	ldr	r3, [r7, #24]
 8006970:	69fa      	ldr	r2, [r7, #28]
 8006972:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006974:	69bb      	ldr	r3, [r7, #24]
 8006976:	699b      	ldr	r3, [r3, #24]
 8006978:	2b00      	cmp	r3, #0
 800697a:	db04      	blt.n	8006986 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800697c:	69fb      	ldr	r3, [r7, #28]
 800697e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006982:	69bb      	ldr	r3, [r7, #24]
 8006984:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006986:	69bb      	ldr	r3, [r7, #24]
 8006988:	6959      	ldr	r1, [r3, #20]
 800698a:	693a      	ldr	r2, [r7, #16]
 800698c:	4613      	mov	r3, r2
 800698e:	009b      	lsls	r3, r3, #2
 8006990:	4413      	add	r3, r2
 8006992:	009b      	lsls	r3, r3, #2
 8006994:	4a13      	ldr	r2, [pc, #76]	; (80069e4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006996:	4413      	add	r3, r2
 8006998:	4299      	cmp	r1, r3
 800699a:	d11c      	bne.n	80069d6 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800699c:	69bb      	ldr	r3, [r7, #24]
 800699e:	3304      	adds	r3, #4
 80069a0:	4618      	mov	r0, r3
 80069a2:	f7fe f81b 	bl	80049dc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80069a6:	69bb      	ldr	r3, [r7, #24]
 80069a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069aa:	4b0f      	ldr	r3, [pc, #60]	; (80069e8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	429a      	cmp	r2, r3
 80069b0:	d903      	bls.n	80069ba <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80069b2:	69bb      	ldr	r3, [r7, #24]
 80069b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069b6:	4a0c      	ldr	r2, [pc, #48]	; (80069e8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80069b8:	6013      	str	r3, [r2, #0]
 80069ba:	69bb      	ldr	r3, [r7, #24]
 80069bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069be:	4613      	mov	r3, r2
 80069c0:	009b      	lsls	r3, r3, #2
 80069c2:	4413      	add	r3, r2
 80069c4:	009b      	lsls	r3, r3, #2
 80069c6:	4a07      	ldr	r2, [pc, #28]	; (80069e4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80069c8:	441a      	add	r2, r3
 80069ca:	69bb      	ldr	r3, [r7, #24]
 80069cc:	3304      	adds	r3, #4
 80069ce:	4619      	mov	r1, r3
 80069d0:	4610      	mov	r0, r2
 80069d2:	f7fd ffa6 	bl	8004922 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80069d6:	bf00      	nop
 80069d8:	3720      	adds	r7, #32
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}
 80069de:	bf00      	nop
 80069e0:	200008bc 	.word	0x200008bc
 80069e4:	200008c0 	.word	0x200008c0
 80069e8:	20000d98 	.word	0x20000d98

080069ec <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80069ec:	b480      	push	{r7}
 80069ee:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80069f0:	4b07      	ldr	r3, [pc, #28]	; (8006a10 <pvTaskIncrementMutexHeldCount+0x24>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d004      	beq.n	8006a02 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80069f8:	4b05      	ldr	r3, [pc, #20]	; (8006a10 <pvTaskIncrementMutexHeldCount+0x24>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80069fe:	3201      	adds	r2, #1
 8006a00:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8006a02:	4b03      	ldr	r3, [pc, #12]	; (8006a10 <pvTaskIncrementMutexHeldCount+0x24>)
 8006a04:	681b      	ldr	r3, [r3, #0]
	}
 8006a06:	4618      	mov	r0, r3
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0e:	4770      	bx	lr
 8006a10:	200008bc 	.word	0x200008bc

08006a14 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b084      	sub	sp, #16
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006a1e:	4b21      	ldr	r3, [pc, #132]	; (8006aa4 <prvAddCurrentTaskToDelayedList+0x90>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a24:	4b20      	ldr	r3, [pc, #128]	; (8006aa8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	3304      	adds	r3, #4
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f7fd ffd6 	bl	80049dc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a36:	d10a      	bne.n	8006a4e <prvAddCurrentTaskToDelayedList+0x3a>
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d007      	beq.n	8006a4e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a3e:	4b1a      	ldr	r3, [pc, #104]	; (8006aa8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	3304      	adds	r3, #4
 8006a44:	4619      	mov	r1, r3
 8006a46:	4819      	ldr	r0, [pc, #100]	; (8006aac <prvAddCurrentTaskToDelayedList+0x98>)
 8006a48:	f7fd ff6b 	bl	8004922 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006a4c:	e026      	b.n	8006a9c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006a4e:	68fa      	ldr	r2, [r7, #12]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	4413      	add	r3, r2
 8006a54:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006a56:	4b14      	ldr	r3, [pc, #80]	; (8006aa8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	68ba      	ldr	r2, [r7, #8]
 8006a5c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006a5e:	68ba      	ldr	r2, [r7, #8]
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	429a      	cmp	r2, r3
 8006a64:	d209      	bcs.n	8006a7a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a66:	4b12      	ldr	r3, [pc, #72]	; (8006ab0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	4b0f      	ldr	r3, [pc, #60]	; (8006aa8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	3304      	adds	r3, #4
 8006a70:	4619      	mov	r1, r3
 8006a72:	4610      	mov	r0, r2
 8006a74:	f7fd ff79 	bl	800496a <vListInsert>
}
 8006a78:	e010      	b.n	8006a9c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a7a:	4b0e      	ldr	r3, [pc, #56]	; (8006ab4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006a7c:	681a      	ldr	r2, [r3, #0]
 8006a7e:	4b0a      	ldr	r3, [pc, #40]	; (8006aa8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	3304      	adds	r3, #4
 8006a84:	4619      	mov	r1, r3
 8006a86:	4610      	mov	r0, r2
 8006a88:	f7fd ff6f 	bl	800496a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006a8c:	4b0a      	ldr	r3, [pc, #40]	; (8006ab8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	68ba      	ldr	r2, [r7, #8]
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d202      	bcs.n	8006a9c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006a96:	4a08      	ldr	r2, [pc, #32]	; (8006ab8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	6013      	str	r3, [r2, #0]
}
 8006a9c:	bf00      	nop
 8006a9e:	3710      	adds	r7, #16
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}
 8006aa4:	20000d94 	.word	0x20000d94
 8006aa8:	200008bc 	.word	0x200008bc
 8006aac:	20000d7c 	.word	0x20000d7c
 8006ab0:	20000d4c 	.word	0x20000d4c
 8006ab4:	20000d48 	.word	0x20000d48
 8006ab8:	20000db0 	.word	0x20000db0

08006abc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b08a      	sub	sp, #40	; 0x28
 8006ac0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006ac6:	f000 fb07 	bl	80070d8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006aca:	4b1c      	ldr	r3, [pc, #112]	; (8006b3c <xTimerCreateTimerTask+0x80>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d021      	beq.n	8006b16 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006ada:	1d3a      	adds	r2, r7, #4
 8006adc:	f107 0108 	add.w	r1, r7, #8
 8006ae0:	f107 030c 	add.w	r3, r7, #12
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f7fd fed5 	bl	8004894 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006aea:	6879      	ldr	r1, [r7, #4]
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	68fa      	ldr	r2, [r7, #12]
 8006af0:	9202      	str	r2, [sp, #8]
 8006af2:	9301      	str	r3, [sp, #4]
 8006af4:	2302      	movs	r3, #2
 8006af6:	9300      	str	r3, [sp, #0]
 8006af8:	2300      	movs	r3, #0
 8006afa:	460a      	mov	r2, r1
 8006afc:	4910      	ldr	r1, [pc, #64]	; (8006b40 <xTimerCreateTimerTask+0x84>)
 8006afe:	4811      	ldr	r0, [pc, #68]	; (8006b44 <xTimerCreateTimerTask+0x88>)
 8006b00:	f7fe ffe0 	bl	8005ac4 <xTaskCreateStatic>
 8006b04:	4603      	mov	r3, r0
 8006b06:	4a10      	ldr	r2, [pc, #64]	; (8006b48 <xTimerCreateTimerTask+0x8c>)
 8006b08:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006b0a:	4b0f      	ldr	r3, [pc, #60]	; (8006b48 <xTimerCreateTimerTask+0x8c>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d001      	beq.n	8006b16 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006b12:	2301      	movs	r3, #1
 8006b14:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d10a      	bne.n	8006b32 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b20:	f383 8811 	msr	BASEPRI, r3
 8006b24:	f3bf 8f6f 	isb	sy
 8006b28:	f3bf 8f4f 	dsb	sy
 8006b2c:	613b      	str	r3, [r7, #16]
}
 8006b2e:	bf00      	nop
 8006b30:	e7fe      	b.n	8006b30 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006b32:	697b      	ldr	r3, [r7, #20]
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	3718      	adds	r7, #24
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bd80      	pop	{r7, pc}
 8006b3c:	20000dec 	.word	0x20000dec
 8006b40:	0800a594 	.word	0x0800a594
 8006b44:	08006c81 	.word	0x08006c81
 8006b48:	20000df0 	.word	0x20000df0

08006b4c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b08a      	sub	sp, #40	; 0x28
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	60f8      	str	r0, [r7, #12]
 8006b54:	60b9      	str	r1, [r7, #8]
 8006b56:	607a      	str	r2, [r7, #4]
 8006b58:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d10a      	bne.n	8006b7a <xTimerGenericCommand+0x2e>
	__asm volatile
 8006b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b68:	f383 8811 	msr	BASEPRI, r3
 8006b6c:	f3bf 8f6f 	isb	sy
 8006b70:	f3bf 8f4f 	dsb	sy
 8006b74:	623b      	str	r3, [r7, #32]
}
 8006b76:	bf00      	nop
 8006b78:	e7fe      	b.n	8006b78 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006b7a:	4b1a      	ldr	r3, [pc, #104]	; (8006be4 <xTimerGenericCommand+0x98>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d02a      	beq.n	8006bd8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	2b05      	cmp	r3, #5
 8006b92:	dc18      	bgt.n	8006bc6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006b94:	f7ff fdb4 	bl	8006700 <xTaskGetSchedulerState>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	2b02      	cmp	r3, #2
 8006b9c:	d109      	bne.n	8006bb2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006b9e:	4b11      	ldr	r3, [pc, #68]	; (8006be4 <xTimerGenericCommand+0x98>)
 8006ba0:	6818      	ldr	r0, [r3, #0]
 8006ba2:	f107 0110 	add.w	r1, r7, #16
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006baa:	f7fe f8e9 	bl	8004d80 <xQueueGenericSend>
 8006bae:	6278      	str	r0, [r7, #36]	; 0x24
 8006bb0:	e012      	b.n	8006bd8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006bb2:	4b0c      	ldr	r3, [pc, #48]	; (8006be4 <xTimerGenericCommand+0x98>)
 8006bb4:	6818      	ldr	r0, [r3, #0]
 8006bb6:	f107 0110 	add.w	r1, r7, #16
 8006bba:	2300      	movs	r3, #0
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	f7fe f8df 	bl	8004d80 <xQueueGenericSend>
 8006bc2:	6278      	str	r0, [r7, #36]	; 0x24
 8006bc4:	e008      	b.n	8006bd8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006bc6:	4b07      	ldr	r3, [pc, #28]	; (8006be4 <xTimerGenericCommand+0x98>)
 8006bc8:	6818      	ldr	r0, [r3, #0]
 8006bca:	f107 0110 	add.w	r1, r7, #16
 8006bce:	2300      	movs	r3, #0
 8006bd0:	683a      	ldr	r2, [r7, #0]
 8006bd2:	f7fe f9d3 	bl	8004f7c <xQueueGenericSendFromISR>
 8006bd6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3728      	adds	r7, #40	; 0x28
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}
 8006be2:	bf00      	nop
 8006be4:	20000dec 	.word	0x20000dec

08006be8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b088      	sub	sp, #32
 8006bec:	af02      	add	r7, sp, #8
 8006bee:	6078      	str	r0, [r7, #4]
 8006bf0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bf2:	4b22      	ldr	r3, [pc, #136]	; (8006c7c <prvProcessExpiredTimer+0x94>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	68db      	ldr	r3, [r3, #12]
 8006bf8:	68db      	ldr	r3, [r3, #12]
 8006bfa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	3304      	adds	r3, #4
 8006c00:	4618      	mov	r0, r3
 8006c02:	f7fd feeb 	bl	80049dc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c0c:	f003 0304 	and.w	r3, r3, #4
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d022      	beq.n	8006c5a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	699a      	ldr	r2, [r3, #24]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	18d1      	adds	r1, r2, r3
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	683a      	ldr	r2, [r7, #0]
 8006c20:	6978      	ldr	r0, [r7, #20]
 8006c22:	f000 f8d1 	bl	8006dc8 <prvInsertTimerInActiveList>
 8006c26:	4603      	mov	r3, r0
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d01f      	beq.n	8006c6c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	9300      	str	r3, [sp, #0]
 8006c30:	2300      	movs	r3, #0
 8006c32:	687a      	ldr	r2, [r7, #4]
 8006c34:	2100      	movs	r1, #0
 8006c36:	6978      	ldr	r0, [r7, #20]
 8006c38:	f7ff ff88 	bl	8006b4c <xTimerGenericCommand>
 8006c3c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d113      	bne.n	8006c6c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c48:	f383 8811 	msr	BASEPRI, r3
 8006c4c:	f3bf 8f6f 	isb	sy
 8006c50:	f3bf 8f4f 	dsb	sy
 8006c54:	60fb      	str	r3, [r7, #12]
}
 8006c56:	bf00      	nop
 8006c58:	e7fe      	b.n	8006c58 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c60:	f023 0301 	bic.w	r3, r3, #1
 8006c64:	b2da      	uxtb	r2, r3
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	6a1b      	ldr	r3, [r3, #32]
 8006c70:	6978      	ldr	r0, [r7, #20]
 8006c72:	4798      	blx	r3
}
 8006c74:	bf00      	nop
 8006c76:	3718      	adds	r7, #24
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}
 8006c7c:	20000de4 	.word	0x20000de4

08006c80 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b084      	sub	sp, #16
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006c88:	f107 0308 	add.w	r3, r7, #8
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	f000 f857 	bl	8006d40 <prvGetNextExpireTime>
 8006c92:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	4619      	mov	r1, r3
 8006c98:	68f8      	ldr	r0, [r7, #12]
 8006c9a:	f000 f803 	bl	8006ca4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006c9e:	f000 f8d5 	bl	8006e4c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006ca2:	e7f1      	b.n	8006c88 <prvTimerTask+0x8>

08006ca4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b084      	sub	sp, #16
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
 8006cac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006cae:	f7ff f945 	bl	8005f3c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006cb2:	f107 0308 	add.w	r3, r7, #8
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f000 f866 	bl	8006d88 <prvSampleTimeNow>
 8006cbc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d130      	bne.n	8006d26 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d10a      	bne.n	8006ce0 <prvProcessTimerOrBlockTask+0x3c>
 8006cca:	687a      	ldr	r2, [r7, #4]
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	429a      	cmp	r2, r3
 8006cd0:	d806      	bhi.n	8006ce0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006cd2:	f7ff f941 	bl	8005f58 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006cd6:	68f9      	ldr	r1, [r7, #12]
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f7ff ff85 	bl	8006be8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006cde:	e024      	b.n	8006d2a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d008      	beq.n	8006cf8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006ce6:	4b13      	ldr	r3, [pc, #76]	; (8006d34 <prvProcessTimerOrBlockTask+0x90>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d101      	bne.n	8006cf4 <prvProcessTimerOrBlockTask+0x50>
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	e000      	b.n	8006cf6 <prvProcessTimerOrBlockTask+0x52>
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006cf8:	4b0f      	ldr	r3, [pc, #60]	; (8006d38 <prvProcessTimerOrBlockTask+0x94>)
 8006cfa:	6818      	ldr	r0, [r3, #0]
 8006cfc:	687a      	ldr	r2, [r7, #4]
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	1ad3      	subs	r3, r2, r3
 8006d02:	683a      	ldr	r2, [r7, #0]
 8006d04:	4619      	mov	r1, r3
 8006d06:	f7fe fea9 	bl	8005a5c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006d0a:	f7ff f925 	bl	8005f58 <xTaskResumeAll>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d10a      	bne.n	8006d2a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006d14:	4b09      	ldr	r3, [pc, #36]	; (8006d3c <prvProcessTimerOrBlockTask+0x98>)
 8006d16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d1a:	601a      	str	r2, [r3, #0]
 8006d1c:	f3bf 8f4f 	dsb	sy
 8006d20:	f3bf 8f6f 	isb	sy
}
 8006d24:	e001      	b.n	8006d2a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006d26:	f7ff f917 	bl	8005f58 <xTaskResumeAll>
}
 8006d2a:	bf00      	nop
 8006d2c:	3710      	adds	r7, #16
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}
 8006d32:	bf00      	nop
 8006d34:	20000de8 	.word	0x20000de8
 8006d38:	20000dec 	.word	0x20000dec
 8006d3c:	e000ed04 	.word	0xe000ed04

08006d40 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006d40:	b480      	push	{r7}
 8006d42:	b085      	sub	sp, #20
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006d48:	4b0e      	ldr	r3, [pc, #56]	; (8006d84 <prvGetNextExpireTime+0x44>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d101      	bne.n	8006d56 <prvGetNextExpireTime+0x16>
 8006d52:	2201      	movs	r2, #1
 8006d54:	e000      	b.n	8006d58 <prvGetNextExpireTime+0x18>
 8006d56:	2200      	movs	r2, #0
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d105      	bne.n	8006d70 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006d64:	4b07      	ldr	r3, [pc, #28]	; (8006d84 <prvGetNextExpireTime+0x44>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	68db      	ldr	r3, [r3, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	60fb      	str	r3, [r7, #12]
 8006d6e:	e001      	b.n	8006d74 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006d70:	2300      	movs	r3, #0
 8006d72:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006d74:	68fb      	ldr	r3, [r7, #12]
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3714      	adds	r7, #20
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d80:	4770      	bx	lr
 8006d82:	bf00      	nop
 8006d84:	20000de4 	.word	0x20000de4

08006d88 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b084      	sub	sp, #16
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006d90:	f7ff f980 	bl	8006094 <xTaskGetTickCount>
 8006d94:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006d96:	4b0b      	ldr	r3, [pc, #44]	; (8006dc4 <prvSampleTimeNow+0x3c>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	68fa      	ldr	r2, [r7, #12]
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	d205      	bcs.n	8006dac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006da0:	f000 f936 	bl	8007010 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2201      	movs	r2, #1
 8006da8:	601a      	str	r2, [r3, #0]
 8006daa:	e002      	b.n	8006db2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2200      	movs	r2, #0
 8006db0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006db2:	4a04      	ldr	r2, [pc, #16]	; (8006dc4 <prvSampleTimeNow+0x3c>)
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006db8:	68fb      	ldr	r3, [r7, #12]
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3710      	adds	r7, #16
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}
 8006dc2:	bf00      	nop
 8006dc4:	20000df4 	.word	0x20000df4

08006dc8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b086      	sub	sp, #24
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	60f8      	str	r0, [r7, #12]
 8006dd0:	60b9      	str	r1, [r7, #8]
 8006dd2:	607a      	str	r2, [r7, #4]
 8006dd4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	68ba      	ldr	r2, [r7, #8]
 8006dde:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	68fa      	ldr	r2, [r7, #12]
 8006de4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006de6:	68ba      	ldr	r2, [r7, #8]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	429a      	cmp	r2, r3
 8006dec:	d812      	bhi.n	8006e14 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006dee:	687a      	ldr	r2, [r7, #4]
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	1ad2      	subs	r2, r2, r3
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	699b      	ldr	r3, [r3, #24]
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	d302      	bcc.n	8006e02 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	617b      	str	r3, [r7, #20]
 8006e00:	e01b      	b.n	8006e3a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006e02:	4b10      	ldr	r3, [pc, #64]	; (8006e44 <prvInsertTimerInActiveList+0x7c>)
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	3304      	adds	r3, #4
 8006e0a:	4619      	mov	r1, r3
 8006e0c:	4610      	mov	r0, r2
 8006e0e:	f7fd fdac 	bl	800496a <vListInsert>
 8006e12:	e012      	b.n	8006e3a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006e14:	687a      	ldr	r2, [r7, #4]
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d206      	bcs.n	8006e2a <prvInsertTimerInActiveList+0x62>
 8006e1c:	68ba      	ldr	r2, [r7, #8]
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	429a      	cmp	r2, r3
 8006e22:	d302      	bcc.n	8006e2a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006e24:	2301      	movs	r3, #1
 8006e26:	617b      	str	r3, [r7, #20]
 8006e28:	e007      	b.n	8006e3a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006e2a:	4b07      	ldr	r3, [pc, #28]	; (8006e48 <prvInsertTimerInActiveList+0x80>)
 8006e2c:	681a      	ldr	r2, [r3, #0]
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	3304      	adds	r3, #4
 8006e32:	4619      	mov	r1, r3
 8006e34:	4610      	mov	r0, r2
 8006e36:	f7fd fd98 	bl	800496a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006e3a:	697b      	ldr	r3, [r7, #20]
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3718      	adds	r7, #24
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}
 8006e44:	20000de8 	.word	0x20000de8
 8006e48:	20000de4 	.word	0x20000de4

08006e4c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b08e      	sub	sp, #56	; 0x38
 8006e50:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006e52:	e0ca      	b.n	8006fea <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	da18      	bge.n	8006e8c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006e5a:	1d3b      	adds	r3, r7, #4
 8006e5c:	3304      	adds	r3, #4
 8006e5e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d10a      	bne.n	8006e7c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e6a:	f383 8811 	msr	BASEPRI, r3
 8006e6e:	f3bf 8f6f 	isb	sy
 8006e72:	f3bf 8f4f 	dsb	sy
 8006e76:	61fb      	str	r3, [r7, #28]
}
 8006e78:	bf00      	nop
 8006e7a:	e7fe      	b.n	8006e7a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e82:	6850      	ldr	r0, [r2, #4]
 8006e84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e86:	6892      	ldr	r2, [r2, #8]
 8006e88:	4611      	mov	r1, r2
 8006e8a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	f2c0 80aa 	blt.w	8006fe8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e9a:	695b      	ldr	r3, [r3, #20]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d004      	beq.n	8006eaa <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ea2:	3304      	adds	r3, #4
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	f7fd fd99 	bl	80049dc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006eaa:	463b      	mov	r3, r7
 8006eac:	4618      	mov	r0, r3
 8006eae:	f7ff ff6b 	bl	8006d88 <prvSampleTimeNow>
 8006eb2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2b09      	cmp	r3, #9
 8006eb8:	f200 8097 	bhi.w	8006fea <prvProcessReceivedCommands+0x19e>
 8006ebc:	a201      	add	r2, pc, #4	; (adr r2, 8006ec4 <prvProcessReceivedCommands+0x78>)
 8006ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ec2:	bf00      	nop
 8006ec4:	08006eed 	.word	0x08006eed
 8006ec8:	08006eed 	.word	0x08006eed
 8006ecc:	08006eed 	.word	0x08006eed
 8006ed0:	08006f61 	.word	0x08006f61
 8006ed4:	08006f75 	.word	0x08006f75
 8006ed8:	08006fbf 	.word	0x08006fbf
 8006edc:	08006eed 	.word	0x08006eed
 8006ee0:	08006eed 	.word	0x08006eed
 8006ee4:	08006f61 	.word	0x08006f61
 8006ee8:	08006f75 	.word	0x08006f75
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ef2:	f043 0301 	orr.w	r3, r3, #1
 8006ef6:	b2da      	uxtb	r2, r3
 8006ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006efa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006efe:	68ba      	ldr	r2, [r7, #8]
 8006f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f02:	699b      	ldr	r3, [r3, #24]
 8006f04:	18d1      	adds	r1, r2, r3
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f0c:	f7ff ff5c 	bl	8006dc8 <prvInsertTimerInActiveList>
 8006f10:	4603      	mov	r3, r0
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d069      	beq.n	8006fea <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f18:	6a1b      	ldr	r3, [r3, #32]
 8006f1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f1c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f24:	f003 0304 	and.w	r3, r3, #4
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d05e      	beq.n	8006fea <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006f2c:	68ba      	ldr	r2, [r7, #8]
 8006f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f30:	699b      	ldr	r3, [r3, #24]
 8006f32:	441a      	add	r2, r3
 8006f34:	2300      	movs	r3, #0
 8006f36:	9300      	str	r3, [sp, #0]
 8006f38:	2300      	movs	r3, #0
 8006f3a:	2100      	movs	r1, #0
 8006f3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f3e:	f7ff fe05 	bl	8006b4c <xTimerGenericCommand>
 8006f42:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006f44:	6a3b      	ldr	r3, [r7, #32]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d14f      	bne.n	8006fea <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f4e:	f383 8811 	msr	BASEPRI, r3
 8006f52:	f3bf 8f6f 	isb	sy
 8006f56:	f3bf 8f4f 	dsb	sy
 8006f5a:	61bb      	str	r3, [r7, #24]
}
 8006f5c:	bf00      	nop
 8006f5e:	e7fe      	b.n	8006f5e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f66:	f023 0301 	bic.w	r3, r3, #1
 8006f6a:	b2da      	uxtb	r2, r3
 8006f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006f72:	e03a      	b.n	8006fea <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f7a:	f043 0301 	orr.w	r3, r3, #1
 8006f7e:	b2da      	uxtb	r2, r3
 8006f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006f86:	68ba      	ldr	r2, [r7, #8]
 8006f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f8a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f8e:	699b      	ldr	r3, [r3, #24]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d10a      	bne.n	8006faa <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f98:	f383 8811 	msr	BASEPRI, r3
 8006f9c:	f3bf 8f6f 	isb	sy
 8006fa0:	f3bf 8f4f 	dsb	sy
 8006fa4:	617b      	str	r3, [r7, #20]
}
 8006fa6:	bf00      	nop
 8006fa8:	e7fe      	b.n	8006fa8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fac:	699a      	ldr	r2, [r3, #24]
 8006fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb0:	18d1      	adds	r1, r2, r3
 8006fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006fb8:	f7ff ff06 	bl	8006dc8 <prvInsertTimerInActiveList>
					break;
 8006fbc:	e015      	b.n	8006fea <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fc0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006fc4:	f003 0302 	and.w	r3, r3, #2
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d103      	bne.n	8006fd4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006fcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006fce:	f000 fbdf 	bl	8007790 <vPortFree>
 8006fd2:	e00a      	b.n	8006fea <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fd6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006fda:	f023 0301 	bic.w	r3, r3, #1
 8006fde:	b2da      	uxtb	r2, r3
 8006fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fe2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006fe6:	e000      	b.n	8006fea <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006fe8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006fea:	4b08      	ldr	r3, [pc, #32]	; (800700c <prvProcessReceivedCommands+0x1c0>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	1d39      	adds	r1, r7, #4
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f7fe f8ea 	bl	80051cc <xQueueReceive>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	f47f af2a 	bne.w	8006e54 <prvProcessReceivedCommands+0x8>
	}
}
 8007000:	bf00      	nop
 8007002:	bf00      	nop
 8007004:	3730      	adds	r7, #48	; 0x30
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}
 800700a:	bf00      	nop
 800700c:	20000dec 	.word	0x20000dec

08007010 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b088      	sub	sp, #32
 8007014:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007016:	e048      	b.n	80070aa <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007018:	4b2d      	ldr	r3, [pc, #180]	; (80070d0 <prvSwitchTimerLists+0xc0>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	68db      	ldr	r3, [r3, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007022:	4b2b      	ldr	r3, [pc, #172]	; (80070d0 <prvSwitchTimerLists+0xc0>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	68db      	ldr	r3, [r3, #12]
 8007028:	68db      	ldr	r3, [r3, #12]
 800702a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	3304      	adds	r3, #4
 8007030:	4618      	mov	r0, r3
 8007032:	f7fd fcd3 	bl	80049dc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	6a1b      	ldr	r3, [r3, #32]
 800703a:	68f8      	ldr	r0, [r7, #12]
 800703c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007044:	f003 0304 	and.w	r3, r3, #4
 8007048:	2b00      	cmp	r3, #0
 800704a:	d02e      	beq.n	80070aa <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	699b      	ldr	r3, [r3, #24]
 8007050:	693a      	ldr	r2, [r7, #16]
 8007052:	4413      	add	r3, r2
 8007054:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007056:	68ba      	ldr	r2, [r7, #8]
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	429a      	cmp	r2, r3
 800705c:	d90e      	bls.n	800707c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	68ba      	ldr	r2, [r7, #8]
 8007062:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	68fa      	ldr	r2, [r7, #12]
 8007068:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800706a:	4b19      	ldr	r3, [pc, #100]	; (80070d0 <prvSwitchTimerLists+0xc0>)
 800706c:	681a      	ldr	r2, [r3, #0]
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	3304      	adds	r3, #4
 8007072:	4619      	mov	r1, r3
 8007074:	4610      	mov	r0, r2
 8007076:	f7fd fc78 	bl	800496a <vListInsert>
 800707a:	e016      	b.n	80070aa <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800707c:	2300      	movs	r3, #0
 800707e:	9300      	str	r3, [sp, #0]
 8007080:	2300      	movs	r3, #0
 8007082:	693a      	ldr	r2, [r7, #16]
 8007084:	2100      	movs	r1, #0
 8007086:	68f8      	ldr	r0, [r7, #12]
 8007088:	f7ff fd60 	bl	8006b4c <xTimerGenericCommand>
 800708c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d10a      	bne.n	80070aa <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007098:	f383 8811 	msr	BASEPRI, r3
 800709c:	f3bf 8f6f 	isb	sy
 80070a0:	f3bf 8f4f 	dsb	sy
 80070a4:	603b      	str	r3, [r7, #0]
}
 80070a6:	bf00      	nop
 80070a8:	e7fe      	b.n	80070a8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80070aa:	4b09      	ldr	r3, [pc, #36]	; (80070d0 <prvSwitchTimerLists+0xc0>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d1b1      	bne.n	8007018 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80070b4:	4b06      	ldr	r3, [pc, #24]	; (80070d0 <prvSwitchTimerLists+0xc0>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80070ba:	4b06      	ldr	r3, [pc, #24]	; (80070d4 <prvSwitchTimerLists+0xc4>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a04      	ldr	r2, [pc, #16]	; (80070d0 <prvSwitchTimerLists+0xc0>)
 80070c0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80070c2:	4a04      	ldr	r2, [pc, #16]	; (80070d4 <prvSwitchTimerLists+0xc4>)
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	6013      	str	r3, [r2, #0]
}
 80070c8:	bf00      	nop
 80070ca:	3718      	adds	r7, #24
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}
 80070d0:	20000de4 	.word	0x20000de4
 80070d4:	20000de8 	.word	0x20000de8

080070d8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b082      	sub	sp, #8
 80070dc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80070de:	f000 f969 	bl	80073b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80070e2:	4b15      	ldr	r3, [pc, #84]	; (8007138 <prvCheckForValidListAndQueue+0x60>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d120      	bne.n	800712c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80070ea:	4814      	ldr	r0, [pc, #80]	; (800713c <prvCheckForValidListAndQueue+0x64>)
 80070ec:	f7fd fbec 	bl	80048c8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80070f0:	4813      	ldr	r0, [pc, #76]	; (8007140 <prvCheckForValidListAndQueue+0x68>)
 80070f2:	f7fd fbe9 	bl	80048c8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80070f6:	4b13      	ldr	r3, [pc, #76]	; (8007144 <prvCheckForValidListAndQueue+0x6c>)
 80070f8:	4a10      	ldr	r2, [pc, #64]	; (800713c <prvCheckForValidListAndQueue+0x64>)
 80070fa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80070fc:	4b12      	ldr	r3, [pc, #72]	; (8007148 <prvCheckForValidListAndQueue+0x70>)
 80070fe:	4a10      	ldr	r2, [pc, #64]	; (8007140 <prvCheckForValidListAndQueue+0x68>)
 8007100:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007102:	2300      	movs	r3, #0
 8007104:	9300      	str	r3, [sp, #0]
 8007106:	4b11      	ldr	r3, [pc, #68]	; (800714c <prvCheckForValidListAndQueue+0x74>)
 8007108:	4a11      	ldr	r2, [pc, #68]	; (8007150 <prvCheckForValidListAndQueue+0x78>)
 800710a:	2110      	movs	r1, #16
 800710c:	200a      	movs	r0, #10
 800710e:	f7fd fcf7 	bl	8004b00 <xQueueGenericCreateStatic>
 8007112:	4603      	mov	r3, r0
 8007114:	4a08      	ldr	r2, [pc, #32]	; (8007138 <prvCheckForValidListAndQueue+0x60>)
 8007116:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007118:	4b07      	ldr	r3, [pc, #28]	; (8007138 <prvCheckForValidListAndQueue+0x60>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d005      	beq.n	800712c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007120:	4b05      	ldr	r3, [pc, #20]	; (8007138 <prvCheckForValidListAndQueue+0x60>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	490b      	ldr	r1, [pc, #44]	; (8007154 <prvCheckForValidListAndQueue+0x7c>)
 8007126:	4618      	mov	r0, r3
 8007128:	f7fe fc44 	bl	80059b4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800712c:	f000 f972 	bl	8007414 <vPortExitCritical>
}
 8007130:	bf00      	nop
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}
 8007136:	bf00      	nop
 8007138:	20000dec 	.word	0x20000dec
 800713c:	20000dbc 	.word	0x20000dbc
 8007140:	20000dd0 	.word	0x20000dd0
 8007144:	20000de4 	.word	0x20000de4
 8007148:	20000de8 	.word	0x20000de8
 800714c:	20000e98 	.word	0x20000e98
 8007150:	20000df8 	.word	0x20000df8
 8007154:	0800a59c 	.word	0x0800a59c

08007158 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007158:	b480      	push	{r7}
 800715a:	b085      	sub	sp, #20
 800715c:	af00      	add	r7, sp, #0
 800715e:	60f8      	str	r0, [r7, #12]
 8007160:	60b9      	str	r1, [r7, #8]
 8007162:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	3b04      	subs	r3, #4
 8007168:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007170:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	3b04      	subs	r3, #4
 8007176:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	f023 0201 	bic.w	r2, r3, #1
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	3b04      	subs	r3, #4
 8007186:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007188:	4a0c      	ldr	r2, [pc, #48]	; (80071bc <pxPortInitialiseStack+0x64>)
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	3b14      	subs	r3, #20
 8007192:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007194:	687a      	ldr	r2, [r7, #4]
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	3b04      	subs	r3, #4
 800719e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f06f 0202 	mvn.w	r2, #2
 80071a6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	3b20      	subs	r3, #32
 80071ac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80071ae:	68fb      	ldr	r3, [r7, #12]
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	3714      	adds	r7, #20
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr
 80071bc:	080071c1 	.word	0x080071c1

080071c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80071c0:	b480      	push	{r7}
 80071c2:	b085      	sub	sp, #20
 80071c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80071c6:	2300      	movs	r3, #0
 80071c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80071ca:	4b12      	ldr	r3, [pc, #72]	; (8007214 <prvTaskExitError+0x54>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071d2:	d00a      	beq.n	80071ea <prvTaskExitError+0x2a>
	__asm volatile
 80071d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d8:	f383 8811 	msr	BASEPRI, r3
 80071dc:	f3bf 8f6f 	isb	sy
 80071e0:	f3bf 8f4f 	dsb	sy
 80071e4:	60fb      	str	r3, [r7, #12]
}
 80071e6:	bf00      	nop
 80071e8:	e7fe      	b.n	80071e8 <prvTaskExitError+0x28>
	__asm volatile
 80071ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ee:	f383 8811 	msr	BASEPRI, r3
 80071f2:	f3bf 8f6f 	isb	sy
 80071f6:	f3bf 8f4f 	dsb	sy
 80071fa:	60bb      	str	r3, [r7, #8]
}
 80071fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80071fe:	bf00      	nop
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d0fc      	beq.n	8007200 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007206:	bf00      	nop
 8007208:	bf00      	nop
 800720a:	3714      	adds	r7, #20
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr
 8007214:	2000000c 	.word	0x2000000c
	...

08007220 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007220:	4b07      	ldr	r3, [pc, #28]	; (8007240 <pxCurrentTCBConst2>)
 8007222:	6819      	ldr	r1, [r3, #0]
 8007224:	6808      	ldr	r0, [r1, #0]
 8007226:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800722a:	f380 8809 	msr	PSP, r0
 800722e:	f3bf 8f6f 	isb	sy
 8007232:	f04f 0000 	mov.w	r0, #0
 8007236:	f380 8811 	msr	BASEPRI, r0
 800723a:	4770      	bx	lr
 800723c:	f3af 8000 	nop.w

08007240 <pxCurrentTCBConst2>:
 8007240:	200008bc 	.word	0x200008bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007244:	bf00      	nop
 8007246:	bf00      	nop

08007248 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007248:	4808      	ldr	r0, [pc, #32]	; (800726c <prvPortStartFirstTask+0x24>)
 800724a:	6800      	ldr	r0, [r0, #0]
 800724c:	6800      	ldr	r0, [r0, #0]
 800724e:	f380 8808 	msr	MSP, r0
 8007252:	f04f 0000 	mov.w	r0, #0
 8007256:	f380 8814 	msr	CONTROL, r0
 800725a:	b662      	cpsie	i
 800725c:	b661      	cpsie	f
 800725e:	f3bf 8f4f 	dsb	sy
 8007262:	f3bf 8f6f 	isb	sy
 8007266:	df00      	svc	0
 8007268:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800726a:	bf00      	nop
 800726c:	e000ed08 	.word	0xe000ed08

08007270 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b086      	sub	sp, #24
 8007274:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007276:	4b46      	ldr	r3, [pc, #280]	; (8007390 <xPortStartScheduler+0x120>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a46      	ldr	r2, [pc, #280]	; (8007394 <xPortStartScheduler+0x124>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d10a      	bne.n	8007296 <xPortStartScheduler+0x26>
	__asm volatile
 8007280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007284:	f383 8811 	msr	BASEPRI, r3
 8007288:	f3bf 8f6f 	isb	sy
 800728c:	f3bf 8f4f 	dsb	sy
 8007290:	613b      	str	r3, [r7, #16]
}
 8007292:	bf00      	nop
 8007294:	e7fe      	b.n	8007294 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007296:	4b3e      	ldr	r3, [pc, #248]	; (8007390 <xPortStartScheduler+0x120>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a3f      	ldr	r2, [pc, #252]	; (8007398 <xPortStartScheduler+0x128>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d10a      	bne.n	80072b6 <xPortStartScheduler+0x46>
	__asm volatile
 80072a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072a4:	f383 8811 	msr	BASEPRI, r3
 80072a8:	f3bf 8f6f 	isb	sy
 80072ac:	f3bf 8f4f 	dsb	sy
 80072b0:	60fb      	str	r3, [r7, #12]
}
 80072b2:	bf00      	nop
 80072b4:	e7fe      	b.n	80072b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80072b6:	4b39      	ldr	r3, [pc, #228]	; (800739c <xPortStartScheduler+0x12c>)
 80072b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	781b      	ldrb	r3, [r3, #0]
 80072be:	b2db      	uxtb	r3, r3
 80072c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	22ff      	movs	r2, #255	; 0xff
 80072c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	781b      	ldrb	r3, [r3, #0]
 80072cc:	b2db      	uxtb	r3, r3
 80072ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80072d0:	78fb      	ldrb	r3, [r7, #3]
 80072d2:	b2db      	uxtb	r3, r3
 80072d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80072d8:	b2da      	uxtb	r2, r3
 80072da:	4b31      	ldr	r3, [pc, #196]	; (80073a0 <xPortStartScheduler+0x130>)
 80072dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80072de:	4b31      	ldr	r3, [pc, #196]	; (80073a4 <xPortStartScheduler+0x134>)
 80072e0:	2207      	movs	r2, #7
 80072e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80072e4:	e009      	b.n	80072fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80072e6:	4b2f      	ldr	r3, [pc, #188]	; (80073a4 <xPortStartScheduler+0x134>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	3b01      	subs	r3, #1
 80072ec:	4a2d      	ldr	r2, [pc, #180]	; (80073a4 <xPortStartScheduler+0x134>)
 80072ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80072f0:	78fb      	ldrb	r3, [r7, #3]
 80072f2:	b2db      	uxtb	r3, r3
 80072f4:	005b      	lsls	r3, r3, #1
 80072f6:	b2db      	uxtb	r3, r3
 80072f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80072fa:	78fb      	ldrb	r3, [r7, #3]
 80072fc:	b2db      	uxtb	r3, r3
 80072fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007302:	2b80      	cmp	r3, #128	; 0x80
 8007304:	d0ef      	beq.n	80072e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007306:	4b27      	ldr	r3, [pc, #156]	; (80073a4 <xPortStartScheduler+0x134>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f1c3 0307 	rsb	r3, r3, #7
 800730e:	2b04      	cmp	r3, #4
 8007310:	d00a      	beq.n	8007328 <xPortStartScheduler+0xb8>
	__asm volatile
 8007312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007316:	f383 8811 	msr	BASEPRI, r3
 800731a:	f3bf 8f6f 	isb	sy
 800731e:	f3bf 8f4f 	dsb	sy
 8007322:	60bb      	str	r3, [r7, #8]
}
 8007324:	bf00      	nop
 8007326:	e7fe      	b.n	8007326 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007328:	4b1e      	ldr	r3, [pc, #120]	; (80073a4 <xPortStartScheduler+0x134>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	021b      	lsls	r3, r3, #8
 800732e:	4a1d      	ldr	r2, [pc, #116]	; (80073a4 <xPortStartScheduler+0x134>)
 8007330:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007332:	4b1c      	ldr	r3, [pc, #112]	; (80073a4 <xPortStartScheduler+0x134>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800733a:	4a1a      	ldr	r2, [pc, #104]	; (80073a4 <xPortStartScheduler+0x134>)
 800733c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	b2da      	uxtb	r2, r3
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007346:	4b18      	ldr	r3, [pc, #96]	; (80073a8 <xPortStartScheduler+0x138>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a17      	ldr	r2, [pc, #92]	; (80073a8 <xPortStartScheduler+0x138>)
 800734c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007350:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007352:	4b15      	ldr	r3, [pc, #84]	; (80073a8 <xPortStartScheduler+0x138>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a14      	ldr	r2, [pc, #80]	; (80073a8 <xPortStartScheduler+0x138>)
 8007358:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800735c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800735e:	f000 f8dd 	bl	800751c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007362:	4b12      	ldr	r3, [pc, #72]	; (80073ac <xPortStartScheduler+0x13c>)
 8007364:	2200      	movs	r2, #0
 8007366:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007368:	f000 f8fc 	bl	8007564 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800736c:	4b10      	ldr	r3, [pc, #64]	; (80073b0 <xPortStartScheduler+0x140>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a0f      	ldr	r2, [pc, #60]	; (80073b0 <xPortStartScheduler+0x140>)
 8007372:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007376:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007378:	f7ff ff66 	bl	8007248 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800737c:	f7fe ff54 	bl	8006228 <vTaskSwitchContext>
	prvTaskExitError();
 8007380:	f7ff ff1e 	bl	80071c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007384:	2300      	movs	r3, #0
}
 8007386:	4618      	mov	r0, r3
 8007388:	3718      	adds	r7, #24
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}
 800738e:	bf00      	nop
 8007390:	e000ed00 	.word	0xe000ed00
 8007394:	410fc271 	.word	0x410fc271
 8007398:	410fc270 	.word	0x410fc270
 800739c:	e000e400 	.word	0xe000e400
 80073a0:	20000ee8 	.word	0x20000ee8
 80073a4:	20000eec 	.word	0x20000eec
 80073a8:	e000ed20 	.word	0xe000ed20
 80073ac:	2000000c 	.word	0x2000000c
 80073b0:	e000ef34 	.word	0xe000ef34

080073b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80073b4:	b480      	push	{r7}
 80073b6:	b083      	sub	sp, #12
 80073b8:	af00      	add	r7, sp, #0
	__asm volatile
 80073ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073be:	f383 8811 	msr	BASEPRI, r3
 80073c2:	f3bf 8f6f 	isb	sy
 80073c6:	f3bf 8f4f 	dsb	sy
 80073ca:	607b      	str	r3, [r7, #4]
}
 80073cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80073ce:	4b0f      	ldr	r3, [pc, #60]	; (800740c <vPortEnterCritical+0x58>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	3301      	adds	r3, #1
 80073d4:	4a0d      	ldr	r2, [pc, #52]	; (800740c <vPortEnterCritical+0x58>)
 80073d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80073d8:	4b0c      	ldr	r3, [pc, #48]	; (800740c <vPortEnterCritical+0x58>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	2b01      	cmp	r3, #1
 80073de:	d10f      	bne.n	8007400 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80073e0:	4b0b      	ldr	r3, [pc, #44]	; (8007410 <vPortEnterCritical+0x5c>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	b2db      	uxtb	r3, r3
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d00a      	beq.n	8007400 <vPortEnterCritical+0x4c>
	__asm volatile
 80073ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ee:	f383 8811 	msr	BASEPRI, r3
 80073f2:	f3bf 8f6f 	isb	sy
 80073f6:	f3bf 8f4f 	dsb	sy
 80073fa:	603b      	str	r3, [r7, #0]
}
 80073fc:	bf00      	nop
 80073fe:	e7fe      	b.n	80073fe <vPortEnterCritical+0x4a>
	}
}
 8007400:	bf00      	nop
 8007402:	370c      	adds	r7, #12
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr
 800740c:	2000000c 	.word	0x2000000c
 8007410:	e000ed04 	.word	0xe000ed04

08007414 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007414:	b480      	push	{r7}
 8007416:	b083      	sub	sp, #12
 8007418:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800741a:	4b12      	ldr	r3, [pc, #72]	; (8007464 <vPortExitCritical+0x50>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d10a      	bne.n	8007438 <vPortExitCritical+0x24>
	__asm volatile
 8007422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007426:	f383 8811 	msr	BASEPRI, r3
 800742a:	f3bf 8f6f 	isb	sy
 800742e:	f3bf 8f4f 	dsb	sy
 8007432:	607b      	str	r3, [r7, #4]
}
 8007434:	bf00      	nop
 8007436:	e7fe      	b.n	8007436 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007438:	4b0a      	ldr	r3, [pc, #40]	; (8007464 <vPortExitCritical+0x50>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	3b01      	subs	r3, #1
 800743e:	4a09      	ldr	r2, [pc, #36]	; (8007464 <vPortExitCritical+0x50>)
 8007440:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007442:	4b08      	ldr	r3, [pc, #32]	; (8007464 <vPortExitCritical+0x50>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d105      	bne.n	8007456 <vPortExitCritical+0x42>
 800744a:	2300      	movs	r3, #0
 800744c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	f383 8811 	msr	BASEPRI, r3
}
 8007454:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007456:	bf00      	nop
 8007458:	370c      	adds	r7, #12
 800745a:	46bd      	mov	sp, r7
 800745c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007460:	4770      	bx	lr
 8007462:	bf00      	nop
 8007464:	2000000c 	.word	0x2000000c
	...

08007470 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007470:	f3ef 8009 	mrs	r0, PSP
 8007474:	f3bf 8f6f 	isb	sy
 8007478:	4b15      	ldr	r3, [pc, #84]	; (80074d0 <pxCurrentTCBConst>)
 800747a:	681a      	ldr	r2, [r3, #0]
 800747c:	f01e 0f10 	tst.w	lr, #16
 8007480:	bf08      	it	eq
 8007482:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007486:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800748a:	6010      	str	r0, [r2, #0]
 800748c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007490:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007494:	f380 8811 	msr	BASEPRI, r0
 8007498:	f3bf 8f4f 	dsb	sy
 800749c:	f3bf 8f6f 	isb	sy
 80074a0:	f7fe fec2 	bl	8006228 <vTaskSwitchContext>
 80074a4:	f04f 0000 	mov.w	r0, #0
 80074a8:	f380 8811 	msr	BASEPRI, r0
 80074ac:	bc09      	pop	{r0, r3}
 80074ae:	6819      	ldr	r1, [r3, #0]
 80074b0:	6808      	ldr	r0, [r1, #0]
 80074b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074b6:	f01e 0f10 	tst.w	lr, #16
 80074ba:	bf08      	it	eq
 80074bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80074c0:	f380 8809 	msr	PSP, r0
 80074c4:	f3bf 8f6f 	isb	sy
 80074c8:	4770      	bx	lr
 80074ca:	bf00      	nop
 80074cc:	f3af 8000 	nop.w

080074d0 <pxCurrentTCBConst>:
 80074d0:	200008bc 	.word	0x200008bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80074d4:	bf00      	nop
 80074d6:	bf00      	nop

080074d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b082      	sub	sp, #8
 80074dc:	af00      	add	r7, sp, #0
	__asm volatile
 80074de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074e2:	f383 8811 	msr	BASEPRI, r3
 80074e6:	f3bf 8f6f 	isb	sy
 80074ea:	f3bf 8f4f 	dsb	sy
 80074ee:	607b      	str	r3, [r7, #4]
}
 80074f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80074f2:	f7fe fddf 	bl	80060b4 <xTaskIncrementTick>
 80074f6:	4603      	mov	r3, r0
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d003      	beq.n	8007504 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80074fc:	4b06      	ldr	r3, [pc, #24]	; (8007518 <xPortSysTickHandler+0x40>)
 80074fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007502:	601a      	str	r2, [r3, #0]
 8007504:	2300      	movs	r3, #0
 8007506:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	f383 8811 	msr	BASEPRI, r3
}
 800750e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007510:	bf00      	nop
 8007512:	3708      	adds	r7, #8
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}
 8007518:	e000ed04 	.word	0xe000ed04

0800751c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800751c:	b480      	push	{r7}
 800751e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007520:	4b0b      	ldr	r3, [pc, #44]	; (8007550 <vPortSetupTimerInterrupt+0x34>)
 8007522:	2200      	movs	r2, #0
 8007524:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007526:	4b0b      	ldr	r3, [pc, #44]	; (8007554 <vPortSetupTimerInterrupt+0x38>)
 8007528:	2200      	movs	r2, #0
 800752a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800752c:	4b0a      	ldr	r3, [pc, #40]	; (8007558 <vPortSetupTimerInterrupt+0x3c>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a0a      	ldr	r2, [pc, #40]	; (800755c <vPortSetupTimerInterrupt+0x40>)
 8007532:	fba2 2303 	umull	r2, r3, r2, r3
 8007536:	099b      	lsrs	r3, r3, #6
 8007538:	4a09      	ldr	r2, [pc, #36]	; (8007560 <vPortSetupTimerInterrupt+0x44>)
 800753a:	3b01      	subs	r3, #1
 800753c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800753e:	4b04      	ldr	r3, [pc, #16]	; (8007550 <vPortSetupTimerInterrupt+0x34>)
 8007540:	2207      	movs	r2, #7
 8007542:	601a      	str	r2, [r3, #0]
}
 8007544:	bf00      	nop
 8007546:	46bd      	mov	sp, r7
 8007548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754c:	4770      	bx	lr
 800754e:	bf00      	nop
 8007550:	e000e010 	.word	0xe000e010
 8007554:	e000e018 	.word	0xe000e018
 8007558:	20000000 	.word	0x20000000
 800755c:	10624dd3 	.word	0x10624dd3
 8007560:	e000e014 	.word	0xe000e014

08007564 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007564:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007574 <vPortEnableVFP+0x10>
 8007568:	6801      	ldr	r1, [r0, #0]
 800756a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800756e:	6001      	str	r1, [r0, #0]
 8007570:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007572:	bf00      	nop
 8007574:	e000ed88 	.word	0xe000ed88

08007578 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007578:	b480      	push	{r7}
 800757a:	b085      	sub	sp, #20
 800757c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800757e:	f3ef 8305 	mrs	r3, IPSR
 8007582:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	2b0f      	cmp	r3, #15
 8007588:	d914      	bls.n	80075b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800758a:	4a17      	ldr	r2, [pc, #92]	; (80075e8 <vPortValidateInterruptPriority+0x70>)
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	4413      	add	r3, r2
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007594:	4b15      	ldr	r3, [pc, #84]	; (80075ec <vPortValidateInterruptPriority+0x74>)
 8007596:	781b      	ldrb	r3, [r3, #0]
 8007598:	7afa      	ldrb	r2, [r7, #11]
 800759a:	429a      	cmp	r2, r3
 800759c:	d20a      	bcs.n	80075b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800759e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075a2:	f383 8811 	msr	BASEPRI, r3
 80075a6:	f3bf 8f6f 	isb	sy
 80075aa:	f3bf 8f4f 	dsb	sy
 80075ae:	607b      	str	r3, [r7, #4]
}
 80075b0:	bf00      	nop
 80075b2:	e7fe      	b.n	80075b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80075b4:	4b0e      	ldr	r3, [pc, #56]	; (80075f0 <vPortValidateInterruptPriority+0x78>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80075bc:	4b0d      	ldr	r3, [pc, #52]	; (80075f4 <vPortValidateInterruptPriority+0x7c>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	429a      	cmp	r2, r3
 80075c2:	d90a      	bls.n	80075da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80075c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075c8:	f383 8811 	msr	BASEPRI, r3
 80075cc:	f3bf 8f6f 	isb	sy
 80075d0:	f3bf 8f4f 	dsb	sy
 80075d4:	603b      	str	r3, [r7, #0]
}
 80075d6:	bf00      	nop
 80075d8:	e7fe      	b.n	80075d8 <vPortValidateInterruptPriority+0x60>
	}
 80075da:	bf00      	nop
 80075dc:	3714      	adds	r7, #20
 80075de:	46bd      	mov	sp, r7
 80075e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e4:	4770      	bx	lr
 80075e6:	bf00      	nop
 80075e8:	e000e3f0 	.word	0xe000e3f0
 80075ec:	20000ee8 	.word	0x20000ee8
 80075f0:	e000ed0c 	.word	0xe000ed0c
 80075f4:	20000eec 	.word	0x20000eec

080075f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b08a      	sub	sp, #40	; 0x28
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007600:	2300      	movs	r3, #0
 8007602:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007604:	f7fe fc9a 	bl	8005f3c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007608:	4b5b      	ldr	r3, [pc, #364]	; (8007778 <pvPortMalloc+0x180>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d101      	bne.n	8007614 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007610:	f000 f920 	bl	8007854 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007614:	4b59      	ldr	r3, [pc, #356]	; (800777c <pvPortMalloc+0x184>)
 8007616:	681a      	ldr	r2, [r3, #0]
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	4013      	ands	r3, r2
 800761c:	2b00      	cmp	r3, #0
 800761e:	f040 8093 	bne.w	8007748 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d01d      	beq.n	8007664 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007628:	2208      	movs	r2, #8
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	4413      	add	r3, r2
 800762e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f003 0307 	and.w	r3, r3, #7
 8007636:	2b00      	cmp	r3, #0
 8007638:	d014      	beq.n	8007664 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f023 0307 	bic.w	r3, r3, #7
 8007640:	3308      	adds	r3, #8
 8007642:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f003 0307 	and.w	r3, r3, #7
 800764a:	2b00      	cmp	r3, #0
 800764c:	d00a      	beq.n	8007664 <pvPortMalloc+0x6c>
	__asm volatile
 800764e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007652:	f383 8811 	msr	BASEPRI, r3
 8007656:	f3bf 8f6f 	isb	sy
 800765a:	f3bf 8f4f 	dsb	sy
 800765e:	617b      	str	r3, [r7, #20]
}
 8007660:	bf00      	nop
 8007662:	e7fe      	b.n	8007662 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d06e      	beq.n	8007748 <pvPortMalloc+0x150>
 800766a:	4b45      	ldr	r3, [pc, #276]	; (8007780 <pvPortMalloc+0x188>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	687a      	ldr	r2, [r7, #4]
 8007670:	429a      	cmp	r2, r3
 8007672:	d869      	bhi.n	8007748 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007674:	4b43      	ldr	r3, [pc, #268]	; (8007784 <pvPortMalloc+0x18c>)
 8007676:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007678:	4b42      	ldr	r3, [pc, #264]	; (8007784 <pvPortMalloc+0x18c>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800767e:	e004      	b.n	800768a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007682:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800768a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	687a      	ldr	r2, [r7, #4]
 8007690:	429a      	cmp	r2, r3
 8007692:	d903      	bls.n	800769c <pvPortMalloc+0xa4>
 8007694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d1f1      	bne.n	8007680 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800769c:	4b36      	ldr	r3, [pc, #216]	; (8007778 <pvPortMalloc+0x180>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076a2:	429a      	cmp	r2, r3
 80076a4:	d050      	beq.n	8007748 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80076a6:	6a3b      	ldr	r3, [r7, #32]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	2208      	movs	r2, #8
 80076ac:	4413      	add	r3, r2
 80076ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80076b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b2:	681a      	ldr	r2, [r3, #0]
 80076b4:	6a3b      	ldr	r3, [r7, #32]
 80076b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80076b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ba:	685a      	ldr	r2, [r3, #4]
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	1ad2      	subs	r2, r2, r3
 80076c0:	2308      	movs	r3, #8
 80076c2:	005b      	lsls	r3, r3, #1
 80076c4:	429a      	cmp	r2, r3
 80076c6:	d91f      	bls.n	8007708 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80076c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	4413      	add	r3, r2
 80076ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80076d0:	69bb      	ldr	r3, [r7, #24]
 80076d2:	f003 0307 	and.w	r3, r3, #7
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d00a      	beq.n	80076f0 <pvPortMalloc+0xf8>
	__asm volatile
 80076da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076de:	f383 8811 	msr	BASEPRI, r3
 80076e2:	f3bf 8f6f 	isb	sy
 80076e6:	f3bf 8f4f 	dsb	sy
 80076ea:	613b      	str	r3, [r7, #16]
}
 80076ec:	bf00      	nop
 80076ee:	e7fe      	b.n	80076ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80076f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f2:	685a      	ldr	r2, [r3, #4]
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	1ad2      	subs	r2, r2, r3
 80076f8:	69bb      	ldr	r3, [r7, #24]
 80076fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80076fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076fe:	687a      	ldr	r2, [r7, #4]
 8007700:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007702:	69b8      	ldr	r0, [r7, #24]
 8007704:	f000 f908 	bl	8007918 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007708:	4b1d      	ldr	r3, [pc, #116]	; (8007780 <pvPortMalloc+0x188>)
 800770a:	681a      	ldr	r2, [r3, #0]
 800770c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800770e:	685b      	ldr	r3, [r3, #4]
 8007710:	1ad3      	subs	r3, r2, r3
 8007712:	4a1b      	ldr	r2, [pc, #108]	; (8007780 <pvPortMalloc+0x188>)
 8007714:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007716:	4b1a      	ldr	r3, [pc, #104]	; (8007780 <pvPortMalloc+0x188>)
 8007718:	681a      	ldr	r2, [r3, #0]
 800771a:	4b1b      	ldr	r3, [pc, #108]	; (8007788 <pvPortMalloc+0x190>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	429a      	cmp	r2, r3
 8007720:	d203      	bcs.n	800772a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007722:	4b17      	ldr	r3, [pc, #92]	; (8007780 <pvPortMalloc+0x188>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4a18      	ldr	r2, [pc, #96]	; (8007788 <pvPortMalloc+0x190>)
 8007728:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800772a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800772c:	685a      	ldr	r2, [r3, #4]
 800772e:	4b13      	ldr	r3, [pc, #76]	; (800777c <pvPortMalloc+0x184>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	431a      	orrs	r2, r3
 8007734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007736:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800773a:	2200      	movs	r2, #0
 800773c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800773e:	4b13      	ldr	r3, [pc, #76]	; (800778c <pvPortMalloc+0x194>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	3301      	adds	r3, #1
 8007744:	4a11      	ldr	r2, [pc, #68]	; (800778c <pvPortMalloc+0x194>)
 8007746:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007748:	f7fe fc06 	bl	8005f58 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800774c:	69fb      	ldr	r3, [r7, #28]
 800774e:	f003 0307 	and.w	r3, r3, #7
 8007752:	2b00      	cmp	r3, #0
 8007754:	d00a      	beq.n	800776c <pvPortMalloc+0x174>
	__asm volatile
 8007756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800775a:	f383 8811 	msr	BASEPRI, r3
 800775e:	f3bf 8f6f 	isb	sy
 8007762:	f3bf 8f4f 	dsb	sy
 8007766:	60fb      	str	r3, [r7, #12]
}
 8007768:	bf00      	nop
 800776a:	e7fe      	b.n	800776a <pvPortMalloc+0x172>
	return pvReturn;
 800776c:	69fb      	ldr	r3, [r7, #28]
}
 800776e:	4618      	mov	r0, r3
 8007770:	3728      	adds	r7, #40	; 0x28
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}
 8007776:	bf00      	nop
 8007778:	20004d78 	.word	0x20004d78
 800777c:	20004d8c 	.word	0x20004d8c
 8007780:	20004d7c 	.word	0x20004d7c
 8007784:	20004d70 	.word	0x20004d70
 8007788:	20004d80 	.word	0x20004d80
 800778c:	20004d84 	.word	0x20004d84

08007790 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b086      	sub	sp, #24
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d04d      	beq.n	800783e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80077a2:	2308      	movs	r3, #8
 80077a4:	425b      	negs	r3, r3
 80077a6:	697a      	ldr	r2, [r7, #20]
 80077a8:	4413      	add	r3, r2
 80077aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	685a      	ldr	r2, [r3, #4]
 80077b4:	4b24      	ldr	r3, [pc, #144]	; (8007848 <vPortFree+0xb8>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4013      	ands	r3, r2
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d10a      	bne.n	80077d4 <vPortFree+0x44>
	__asm volatile
 80077be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077c2:	f383 8811 	msr	BASEPRI, r3
 80077c6:	f3bf 8f6f 	isb	sy
 80077ca:	f3bf 8f4f 	dsb	sy
 80077ce:	60fb      	str	r3, [r7, #12]
}
 80077d0:	bf00      	nop
 80077d2:	e7fe      	b.n	80077d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80077d4:	693b      	ldr	r3, [r7, #16]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d00a      	beq.n	80077f2 <vPortFree+0x62>
	__asm volatile
 80077dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e0:	f383 8811 	msr	BASEPRI, r3
 80077e4:	f3bf 8f6f 	isb	sy
 80077e8:	f3bf 8f4f 	dsb	sy
 80077ec:	60bb      	str	r3, [r7, #8]
}
 80077ee:	bf00      	nop
 80077f0:	e7fe      	b.n	80077f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80077f2:	693b      	ldr	r3, [r7, #16]
 80077f4:	685a      	ldr	r2, [r3, #4]
 80077f6:	4b14      	ldr	r3, [pc, #80]	; (8007848 <vPortFree+0xb8>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4013      	ands	r3, r2
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d01e      	beq.n	800783e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d11a      	bne.n	800783e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	685a      	ldr	r2, [r3, #4]
 800780c:	4b0e      	ldr	r3, [pc, #56]	; (8007848 <vPortFree+0xb8>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	43db      	mvns	r3, r3
 8007812:	401a      	ands	r2, r3
 8007814:	693b      	ldr	r3, [r7, #16]
 8007816:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007818:	f7fe fb90 	bl	8005f3c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800781c:	693b      	ldr	r3, [r7, #16]
 800781e:	685a      	ldr	r2, [r3, #4]
 8007820:	4b0a      	ldr	r3, [pc, #40]	; (800784c <vPortFree+0xbc>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4413      	add	r3, r2
 8007826:	4a09      	ldr	r2, [pc, #36]	; (800784c <vPortFree+0xbc>)
 8007828:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800782a:	6938      	ldr	r0, [r7, #16]
 800782c:	f000 f874 	bl	8007918 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007830:	4b07      	ldr	r3, [pc, #28]	; (8007850 <vPortFree+0xc0>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	3301      	adds	r3, #1
 8007836:	4a06      	ldr	r2, [pc, #24]	; (8007850 <vPortFree+0xc0>)
 8007838:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800783a:	f7fe fb8d 	bl	8005f58 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800783e:	bf00      	nop
 8007840:	3718      	adds	r7, #24
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}
 8007846:	bf00      	nop
 8007848:	20004d8c 	.word	0x20004d8c
 800784c:	20004d7c 	.word	0x20004d7c
 8007850:	20004d88 	.word	0x20004d88

08007854 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007854:	b480      	push	{r7}
 8007856:	b085      	sub	sp, #20
 8007858:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800785a:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 800785e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007860:	4b27      	ldr	r3, [pc, #156]	; (8007900 <prvHeapInit+0xac>)
 8007862:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	f003 0307 	and.w	r3, r3, #7
 800786a:	2b00      	cmp	r3, #0
 800786c:	d00c      	beq.n	8007888 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	3307      	adds	r3, #7
 8007872:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	f023 0307 	bic.w	r3, r3, #7
 800787a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800787c:	68ba      	ldr	r2, [r7, #8]
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	1ad3      	subs	r3, r2, r3
 8007882:	4a1f      	ldr	r2, [pc, #124]	; (8007900 <prvHeapInit+0xac>)
 8007884:	4413      	add	r3, r2
 8007886:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800788c:	4a1d      	ldr	r2, [pc, #116]	; (8007904 <prvHeapInit+0xb0>)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007892:	4b1c      	ldr	r3, [pc, #112]	; (8007904 <prvHeapInit+0xb0>)
 8007894:	2200      	movs	r2, #0
 8007896:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	68ba      	ldr	r2, [r7, #8]
 800789c:	4413      	add	r3, r2
 800789e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80078a0:	2208      	movs	r2, #8
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	1a9b      	subs	r3, r3, r2
 80078a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	f023 0307 	bic.w	r3, r3, #7
 80078ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	4a15      	ldr	r2, [pc, #84]	; (8007908 <prvHeapInit+0xb4>)
 80078b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80078b6:	4b14      	ldr	r3, [pc, #80]	; (8007908 <prvHeapInit+0xb4>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	2200      	movs	r2, #0
 80078bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80078be:	4b12      	ldr	r3, [pc, #72]	; (8007908 <prvHeapInit+0xb4>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	2200      	movs	r2, #0
 80078c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	68fa      	ldr	r2, [r7, #12]
 80078ce:	1ad2      	subs	r2, r2, r3
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80078d4:	4b0c      	ldr	r3, [pc, #48]	; (8007908 <prvHeapInit+0xb4>)
 80078d6:	681a      	ldr	r2, [r3, #0]
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	685b      	ldr	r3, [r3, #4]
 80078e0:	4a0a      	ldr	r2, [pc, #40]	; (800790c <prvHeapInit+0xb8>)
 80078e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	685b      	ldr	r3, [r3, #4]
 80078e8:	4a09      	ldr	r2, [pc, #36]	; (8007910 <prvHeapInit+0xbc>)
 80078ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80078ec:	4b09      	ldr	r3, [pc, #36]	; (8007914 <prvHeapInit+0xc0>)
 80078ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80078f2:	601a      	str	r2, [r3, #0]
}
 80078f4:	bf00      	nop
 80078f6:	3714      	adds	r7, #20
 80078f8:	46bd      	mov	sp, r7
 80078fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fe:	4770      	bx	lr
 8007900:	20000ef0 	.word	0x20000ef0
 8007904:	20004d70 	.word	0x20004d70
 8007908:	20004d78 	.word	0x20004d78
 800790c:	20004d80 	.word	0x20004d80
 8007910:	20004d7c 	.word	0x20004d7c
 8007914:	20004d8c 	.word	0x20004d8c

08007918 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007918:	b480      	push	{r7}
 800791a:	b085      	sub	sp, #20
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007920:	4b28      	ldr	r3, [pc, #160]	; (80079c4 <prvInsertBlockIntoFreeList+0xac>)
 8007922:	60fb      	str	r3, [r7, #12]
 8007924:	e002      	b.n	800792c <prvInsertBlockIntoFreeList+0x14>
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	60fb      	str	r3, [r7, #12]
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	687a      	ldr	r2, [r7, #4]
 8007932:	429a      	cmp	r2, r3
 8007934:	d8f7      	bhi.n	8007926 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	685b      	ldr	r3, [r3, #4]
 800793e:	68ba      	ldr	r2, [r7, #8]
 8007940:	4413      	add	r3, r2
 8007942:	687a      	ldr	r2, [r7, #4]
 8007944:	429a      	cmp	r2, r3
 8007946:	d108      	bne.n	800795a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	685a      	ldr	r2, [r3, #4]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	685b      	ldr	r3, [r3, #4]
 8007950:	441a      	add	r2, r3
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	685b      	ldr	r3, [r3, #4]
 8007962:	68ba      	ldr	r2, [r7, #8]
 8007964:	441a      	add	r2, r3
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	429a      	cmp	r2, r3
 800796c:	d118      	bne.n	80079a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681a      	ldr	r2, [r3, #0]
 8007972:	4b15      	ldr	r3, [pc, #84]	; (80079c8 <prvInsertBlockIntoFreeList+0xb0>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	429a      	cmp	r2, r3
 8007978:	d00d      	beq.n	8007996 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	685a      	ldr	r2, [r3, #4]
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	685b      	ldr	r3, [r3, #4]
 8007984:	441a      	add	r2, r3
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	681a      	ldr	r2, [r3, #0]
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	601a      	str	r2, [r3, #0]
 8007994:	e008      	b.n	80079a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007996:	4b0c      	ldr	r3, [pc, #48]	; (80079c8 <prvInsertBlockIntoFreeList+0xb0>)
 8007998:	681a      	ldr	r2, [r3, #0]
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	601a      	str	r2, [r3, #0]
 800799e:	e003      	b.n	80079a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681a      	ldr	r2, [r3, #0]
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80079a8:	68fa      	ldr	r2, [r7, #12]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	429a      	cmp	r2, r3
 80079ae:	d002      	beq.n	80079b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	687a      	ldr	r2, [r7, #4]
 80079b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80079b6:	bf00      	nop
 80079b8:	3714      	adds	r7, #20
 80079ba:	46bd      	mov	sp, r7
 80079bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c0:	4770      	bx	lr
 80079c2:	bf00      	nop
 80079c4:	20004d70 	.word	0x20004d70
 80079c8:	20004d78 	.word	0x20004d78

080079cc <__errno>:
 80079cc:	4b01      	ldr	r3, [pc, #4]	; (80079d4 <__errno+0x8>)
 80079ce:	6818      	ldr	r0, [r3, #0]
 80079d0:	4770      	bx	lr
 80079d2:	bf00      	nop
 80079d4:	20000010 	.word	0x20000010

080079d8 <__libc_init_array>:
 80079d8:	b570      	push	{r4, r5, r6, lr}
 80079da:	4d0d      	ldr	r5, [pc, #52]	; (8007a10 <__libc_init_array+0x38>)
 80079dc:	4c0d      	ldr	r4, [pc, #52]	; (8007a14 <__libc_init_array+0x3c>)
 80079de:	1b64      	subs	r4, r4, r5
 80079e0:	10a4      	asrs	r4, r4, #2
 80079e2:	2600      	movs	r6, #0
 80079e4:	42a6      	cmp	r6, r4
 80079e6:	d109      	bne.n	80079fc <__libc_init_array+0x24>
 80079e8:	4d0b      	ldr	r5, [pc, #44]	; (8007a18 <__libc_init_array+0x40>)
 80079ea:	4c0c      	ldr	r4, [pc, #48]	; (8007a1c <__libc_init_array+0x44>)
 80079ec:	f002 fd80 	bl	800a4f0 <_init>
 80079f0:	1b64      	subs	r4, r4, r5
 80079f2:	10a4      	asrs	r4, r4, #2
 80079f4:	2600      	movs	r6, #0
 80079f6:	42a6      	cmp	r6, r4
 80079f8:	d105      	bne.n	8007a06 <__libc_init_array+0x2e>
 80079fa:	bd70      	pop	{r4, r5, r6, pc}
 80079fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a00:	4798      	blx	r3
 8007a02:	3601      	adds	r6, #1
 8007a04:	e7ee      	b.n	80079e4 <__libc_init_array+0xc>
 8007a06:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a0a:	4798      	blx	r3
 8007a0c:	3601      	adds	r6, #1
 8007a0e:	e7f2      	b.n	80079f6 <__libc_init_array+0x1e>
 8007a10:	0800a9f4 	.word	0x0800a9f4
 8007a14:	0800a9f4 	.word	0x0800a9f4
 8007a18:	0800a9f4 	.word	0x0800a9f4
 8007a1c:	0800a9f8 	.word	0x0800a9f8

08007a20 <memcpy>:
 8007a20:	440a      	add	r2, r1
 8007a22:	4291      	cmp	r1, r2
 8007a24:	f100 33ff 	add.w	r3, r0, #4294967295
 8007a28:	d100      	bne.n	8007a2c <memcpy+0xc>
 8007a2a:	4770      	bx	lr
 8007a2c:	b510      	push	{r4, lr}
 8007a2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a36:	4291      	cmp	r1, r2
 8007a38:	d1f9      	bne.n	8007a2e <memcpy+0xe>
 8007a3a:	bd10      	pop	{r4, pc}

08007a3c <memset>:
 8007a3c:	4402      	add	r2, r0
 8007a3e:	4603      	mov	r3, r0
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d100      	bne.n	8007a46 <memset+0xa>
 8007a44:	4770      	bx	lr
 8007a46:	f803 1b01 	strb.w	r1, [r3], #1
 8007a4a:	e7f9      	b.n	8007a40 <memset+0x4>

08007a4c <__cvt>:
 8007a4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a50:	ec55 4b10 	vmov	r4, r5, d0
 8007a54:	2d00      	cmp	r5, #0
 8007a56:	460e      	mov	r6, r1
 8007a58:	4619      	mov	r1, r3
 8007a5a:	462b      	mov	r3, r5
 8007a5c:	bfbb      	ittet	lt
 8007a5e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007a62:	461d      	movlt	r5, r3
 8007a64:	2300      	movge	r3, #0
 8007a66:	232d      	movlt	r3, #45	; 0x2d
 8007a68:	700b      	strb	r3, [r1, #0]
 8007a6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a6c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007a70:	4691      	mov	r9, r2
 8007a72:	f023 0820 	bic.w	r8, r3, #32
 8007a76:	bfbc      	itt	lt
 8007a78:	4622      	movlt	r2, r4
 8007a7a:	4614      	movlt	r4, r2
 8007a7c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007a80:	d005      	beq.n	8007a8e <__cvt+0x42>
 8007a82:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007a86:	d100      	bne.n	8007a8a <__cvt+0x3e>
 8007a88:	3601      	adds	r6, #1
 8007a8a:	2102      	movs	r1, #2
 8007a8c:	e000      	b.n	8007a90 <__cvt+0x44>
 8007a8e:	2103      	movs	r1, #3
 8007a90:	ab03      	add	r3, sp, #12
 8007a92:	9301      	str	r3, [sp, #4]
 8007a94:	ab02      	add	r3, sp, #8
 8007a96:	9300      	str	r3, [sp, #0]
 8007a98:	ec45 4b10 	vmov	d0, r4, r5
 8007a9c:	4653      	mov	r3, sl
 8007a9e:	4632      	mov	r2, r6
 8007aa0:	f000 fe1a 	bl	80086d8 <_dtoa_r>
 8007aa4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007aa8:	4607      	mov	r7, r0
 8007aaa:	d102      	bne.n	8007ab2 <__cvt+0x66>
 8007aac:	f019 0f01 	tst.w	r9, #1
 8007ab0:	d022      	beq.n	8007af8 <__cvt+0xac>
 8007ab2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007ab6:	eb07 0906 	add.w	r9, r7, r6
 8007aba:	d110      	bne.n	8007ade <__cvt+0x92>
 8007abc:	783b      	ldrb	r3, [r7, #0]
 8007abe:	2b30      	cmp	r3, #48	; 0x30
 8007ac0:	d10a      	bne.n	8007ad8 <__cvt+0x8c>
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	4620      	mov	r0, r4
 8007ac8:	4629      	mov	r1, r5
 8007aca:	f7f9 f805 	bl	8000ad8 <__aeabi_dcmpeq>
 8007ace:	b918      	cbnz	r0, 8007ad8 <__cvt+0x8c>
 8007ad0:	f1c6 0601 	rsb	r6, r6, #1
 8007ad4:	f8ca 6000 	str.w	r6, [sl]
 8007ad8:	f8da 3000 	ldr.w	r3, [sl]
 8007adc:	4499      	add	r9, r3
 8007ade:	2200      	movs	r2, #0
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	4620      	mov	r0, r4
 8007ae4:	4629      	mov	r1, r5
 8007ae6:	f7f8 fff7 	bl	8000ad8 <__aeabi_dcmpeq>
 8007aea:	b108      	cbz	r0, 8007af0 <__cvt+0xa4>
 8007aec:	f8cd 900c 	str.w	r9, [sp, #12]
 8007af0:	2230      	movs	r2, #48	; 0x30
 8007af2:	9b03      	ldr	r3, [sp, #12]
 8007af4:	454b      	cmp	r3, r9
 8007af6:	d307      	bcc.n	8007b08 <__cvt+0xbc>
 8007af8:	9b03      	ldr	r3, [sp, #12]
 8007afa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007afc:	1bdb      	subs	r3, r3, r7
 8007afe:	4638      	mov	r0, r7
 8007b00:	6013      	str	r3, [r2, #0]
 8007b02:	b004      	add	sp, #16
 8007b04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b08:	1c59      	adds	r1, r3, #1
 8007b0a:	9103      	str	r1, [sp, #12]
 8007b0c:	701a      	strb	r2, [r3, #0]
 8007b0e:	e7f0      	b.n	8007af2 <__cvt+0xa6>

08007b10 <__exponent>:
 8007b10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007b12:	4603      	mov	r3, r0
 8007b14:	2900      	cmp	r1, #0
 8007b16:	bfb8      	it	lt
 8007b18:	4249      	neglt	r1, r1
 8007b1a:	f803 2b02 	strb.w	r2, [r3], #2
 8007b1e:	bfb4      	ite	lt
 8007b20:	222d      	movlt	r2, #45	; 0x2d
 8007b22:	222b      	movge	r2, #43	; 0x2b
 8007b24:	2909      	cmp	r1, #9
 8007b26:	7042      	strb	r2, [r0, #1]
 8007b28:	dd2a      	ble.n	8007b80 <__exponent+0x70>
 8007b2a:	f10d 0407 	add.w	r4, sp, #7
 8007b2e:	46a4      	mov	ip, r4
 8007b30:	270a      	movs	r7, #10
 8007b32:	46a6      	mov	lr, r4
 8007b34:	460a      	mov	r2, r1
 8007b36:	fb91 f6f7 	sdiv	r6, r1, r7
 8007b3a:	fb07 1516 	mls	r5, r7, r6, r1
 8007b3e:	3530      	adds	r5, #48	; 0x30
 8007b40:	2a63      	cmp	r2, #99	; 0x63
 8007b42:	f104 34ff 	add.w	r4, r4, #4294967295
 8007b46:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007b4a:	4631      	mov	r1, r6
 8007b4c:	dcf1      	bgt.n	8007b32 <__exponent+0x22>
 8007b4e:	3130      	adds	r1, #48	; 0x30
 8007b50:	f1ae 0502 	sub.w	r5, lr, #2
 8007b54:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007b58:	1c44      	adds	r4, r0, #1
 8007b5a:	4629      	mov	r1, r5
 8007b5c:	4561      	cmp	r1, ip
 8007b5e:	d30a      	bcc.n	8007b76 <__exponent+0x66>
 8007b60:	f10d 0209 	add.w	r2, sp, #9
 8007b64:	eba2 020e 	sub.w	r2, r2, lr
 8007b68:	4565      	cmp	r5, ip
 8007b6a:	bf88      	it	hi
 8007b6c:	2200      	movhi	r2, #0
 8007b6e:	4413      	add	r3, r2
 8007b70:	1a18      	subs	r0, r3, r0
 8007b72:	b003      	add	sp, #12
 8007b74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007b7a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007b7e:	e7ed      	b.n	8007b5c <__exponent+0x4c>
 8007b80:	2330      	movs	r3, #48	; 0x30
 8007b82:	3130      	adds	r1, #48	; 0x30
 8007b84:	7083      	strb	r3, [r0, #2]
 8007b86:	70c1      	strb	r1, [r0, #3]
 8007b88:	1d03      	adds	r3, r0, #4
 8007b8a:	e7f1      	b.n	8007b70 <__exponent+0x60>

08007b8c <_printf_float>:
 8007b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b90:	ed2d 8b02 	vpush	{d8}
 8007b94:	b08d      	sub	sp, #52	; 0x34
 8007b96:	460c      	mov	r4, r1
 8007b98:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007b9c:	4616      	mov	r6, r2
 8007b9e:	461f      	mov	r7, r3
 8007ba0:	4605      	mov	r5, r0
 8007ba2:	f001 fd3d 	bl	8009620 <_localeconv_r>
 8007ba6:	f8d0 a000 	ldr.w	sl, [r0]
 8007baa:	4650      	mov	r0, sl
 8007bac:	f7f8 fb18 	bl	80001e0 <strlen>
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	930a      	str	r3, [sp, #40]	; 0x28
 8007bb4:	6823      	ldr	r3, [r4, #0]
 8007bb6:	9305      	str	r3, [sp, #20]
 8007bb8:	f8d8 3000 	ldr.w	r3, [r8]
 8007bbc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007bc0:	3307      	adds	r3, #7
 8007bc2:	f023 0307 	bic.w	r3, r3, #7
 8007bc6:	f103 0208 	add.w	r2, r3, #8
 8007bca:	f8c8 2000 	str.w	r2, [r8]
 8007bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bd2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007bd6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007bda:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007bde:	9307      	str	r3, [sp, #28]
 8007be0:	f8cd 8018 	str.w	r8, [sp, #24]
 8007be4:	ee08 0a10 	vmov	s16, r0
 8007be8:	4b9f      	ldr	r3, [pc, #636]	; (8007e68 <_printf_float+0x2dc>)
 8007bea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007bee:	f04f 32ff 	mov.w	r2, #4294967295
 8007bf2:	f7f8 ffa3 	bl	8000b3c <__aeabi_dcmpun>
 8007bf6:	bb88      	cbnz	r0, 8007c5c <_printf_float+0xd0>
 8007bf8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007bfc:	4b9a      	ldr	r3, [pc, #616]	; (8007e68 <_printf_float+0x2dc>)
 8007bfe:	f04f 32ff 	mov.w	r2, #4294967295
 8007c02:	f7f8 ff7d 	bl	8000b00 <__aeabi_dcmple>
 8007c06:	bb48      	cbnz	r0, 8007c5c <_printf_float+0xd0>
 8007c08:	2200      	movs	r2, #0
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	4640      	mov	r0, r8
 8007c0e:	4649      	mov	r1, r9
 8007c10:	f7f8 ff6c 	bl	8000aec <__aeabi_dcmplt>
 8007c14:	b110      	cbz	r0, 8007c1c <_printf_float+0x90>
 8007c16:	232d      	movs	r3, #45	; 0x2d
 8007c18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c1c:	4b93      	ldr	r3, [pc, #588]	; (8007e6c <_printf_float+0x2e0>)
 8007c1e:	4894      	ldr	r0, [pc, #592]	; (8007e70 <_printf_float+0x2e4>)
 8007c20:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007c24:	bf94      	ite	ls
 8007c26:	4698      	movls	r8, r3
 8007c28:	4680      	movhi	r8, r0
 8007c2a:	2303      	movs	r3, #3
 8007c2c:	6123      	str	r3, [r4, #16]
 8007c2e:	9b05      	ldr	r3, [sp, #20]
 8007c30:	f023 0204 	bic.w	r2, r3, #4
 8007c34:	6022      	str	r2, [r4, #0]
 8007c36:	f04f 0900 	mov.w	r9, #0
 8007c3a:	9700      	str	r7, [sp, #0]
 8007c3c:	4633      	mov	r3, r6
 8007c3e:	aa0b      	add	r2, sp, #44	; 0x2c
 8007c40:	4621      	mov	r1, r4
 8007c42:	4628      	mov	r0, r5
 8007c44:	f000 f9d8 	bl	8007ff8 <_printf_common>
 8007c48:	3001      	adds	r0, #1
 8007c4a:	f040 8090 	bne.w	8007d6e <_printf_float+0x1e2>
 8007c4e:	f04f 30ff 	mov.w	r0, #4294967295
 8007c52:	b00d      	add	sp, #52	; 0x34
 8007c54:	ecbd 8b02 	vpop	{d8}
 8007c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c5c:	4642      	mov	r2, r8
 8007c5e:	464b      	mov	r3, r9
 8007c60:	4640      	mov	r0, r8
 8007c62:	4649      	mov	r1, r9
 8007c64:	f7f8 ff6a 	bl	8000b3c <__aeabi_dcmpun>
 8007c68:	b140      	cbz	r0, 8007c7c <_printf_float+0xf0>
 8007c6a:	464b      	mov	r3, r9
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	bfbc      	itt	lt
 8007c70:	232d      	movlt	r3, #45	; 0x2d
 8007c72:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007c76:	487f      	ldr	r0, [pc, #508]	; (8007e74 <_printf_float+0x2e8>)
 8007c78:	4b7f      	ldr	r3, [pc, #508]	; (8007e78 <_printf_float+0x2ec>)
 8007c7a:	e7d1      	b.n	8007c20 <_printf_float+0x94>
 8007c7c:	6863      	ldr	r3, [r4, #4]
 8007c7e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007c82:	9206      	str	r2, [sp, #24]
 8007c84:	1c5a      	adds	r2, r3, #1
 8007c86:	d13f      	bne.n	8007d08 <_printf_float+0x17c>
 8007c88:	2306      	movs	r3, #6
 8007c8a:	6063      	str	r3, [r4, #4]
 8007c8c:	9b05      	ldr	r3, [sp, #20]
 8007c8e:	6861      	ldr	r1, [r4, #4]
 8007c90:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007c94:	2300      	movs	r3, #0
 8007c96:	9303      	str	r3, [sp, #12]
 8007c98:	ab0a      	add	r3, sp, #40	; 0x28
 8007c9a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007c9e:	ab09      	add	r3, sp, #36	; 0x24
 8007ca0:	ec49 8b10 	vmov	d0, r8, r9
 8007ca4:	9300      	str	r3, [sp, #0]
 8007ca6:	6022      	str	r2, [r4, #0]
 8007ca8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007cac:	4628      	mov	r0, r5
 8007cae:	f7ff fecd 	bl	8007a4c <__cvt>
 8007cb2:	9b06      	ldr	r3, [sp, #24]
 8007cb4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007cb6:	2b47      	cmp	r3, #71	; 0x47
 8007cb8:	4680      	mov	r8, r0
 8007cba:	d108      	bne.n	8007cce <_printf_float+0x142>
 8007cbc:	1cc8      	adds	r0, r1, #3
 8007cbe:	db02      	blt.n	8007cc6 <_printf_float+0x13a>
 8007cc0:	6863      	ldr	r3, [r4, #4]
 8007cc2:	4299      	cmp	r1, r3
 8007cc4:	dd41      	ble.n	8007d4a <_printf_float+0x1be>
 8007cc6:	f1ab 0b02 	sub.w	fp, fp, #2
 8007cca:	fa5f fb8b 	uxtb.w	fp, fp
 8007cce:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007cd2:	d820      	bhi.n	8007d16 <_printf_float+0x18a>
 8007cd4:	3901      	subs	r1, #1
 8007cd6:	465a      	mov	r2, fp
 8007cd8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007cdc:	9109      	str	r1, [sp, #36]	; 0x24
 8007cde:	f7ff ff17 	bl	8007b10 <__exponent>
 8007ce2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ce4:	1813      	adds	r3, r2, r0
 8007ce6:	2a01      	cmp	r2, #1
 8007ce8:	4681      	mov	r9, r0
 8007cea:	6123      	str	r3, [r4, #16]
 8007cec:	dc02      	bgt.n	8007cf4 <_printf_float+0x168>
 8007cee:	6822      	ldr	r2, [r4, #0]
 8007cf0:	07d2      	lsls	r2, r2, #31
 8007cf2:	d501      	bpl.n	8007cf8 <_printf_float+0x16c>
 8007cf4:	3301      	adds	r3, #1
 8007cf6:	6123      	str	r3, [r4, #16]
 8007cf8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d09c      	beq.n	8007c3a <_printf_float+0xae>
 8007d00:	232d      	movs	r3, #45	; 0x2d
 8007d02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d06:	e798      	b.n	8007c3a <_printf_float+0xae>
 8007d08:	9a06      	ldr	r2, [sp, #24]
 8007d0a:	2a47      	cmp	r2, #71	; 0x47
 8007d0c:	d1be      	bne.n	8007c8c <_printf_float+0x100>
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d1bc      	bne.n	8007c8c <_printf_float+0x100>
 8007d12:	2301      	movs	r3, #1
 8007d14:	e7b9      	b.n	8007c8a <_printf_float+0xfe>
 8007d16:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007d1a:	d118      	bne.n	8007d4e <_printf_float+0x1c2>
 8007d1c:	2900      	cmp	r1, #0
 8007d1e:	6863      	ldr	r3, [r4, #4]
 8007d20:	dd0b      	ble.n	8007d3a <_printf_float+0x1ae>
 8007d22:	6121      	str	r1, [r4, #16]
 8007d24:	b913      	cbnz	r3, 8007d2c <_printf_float+0x1a0>
 8007d26:	6822      	ldr	r2, [r4, #0]
 8007d28:	07d0      	lsls	r0, r2, #31
 8007d2a:	d502      	bpl.n	8007d32 <_printf_float+0x1a6>
 8007d2c:	3301      	adds	r3, #1
 8007d2e:	440b      	add	r3, r1
 8007d30:	6123      	str	r3, [r4, #16]
 8007d32:	65a1      	str	r1, [r4, #88]	; 0x58
 8007d34:	f04f 0900 	mov.w	r9, #0
 8007d38:	e7de      	b.n	8007cf8 <_printf_float+0x16c>
 8007d3a:	b913      	cbnz	r3, 8007d42 <_printf_float+0x1b6>
 8007d3c:	6822      	ldr	r2, [r4, #0]
 8007d3e:	07d2      	lsls	r2, r2, #31
 8007d40:	d501      	bpl.n	8007d46 <_printf_float+0x1ba>
 8007d42:	3302      	adds	r3, #2
 8007d44:	e7f4      	b.n	8007d30 <_printf_float+0x1a4>
 8007d46:	2301      	movs	r3, #1
 8007d48:	e7f2      	b.n	8007d30 <_printf_float+0x1a4>
 8007d4a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007d4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d50:	4299      	cmp	r1, r3
 8007d52:	db05      	blt.n	8007d60 <_printf_float+0x1d4>
 8007d54:	6823      	ldr	r3, [r4, #0]
 8007d56:	6121      	str	r1, [r4, #16]
 8007d58:	07d8      	lsls	r0, r3, #31
 8007d5a:	d5ea      	bpl.n	8007d32 <_printf_float+0x1a6>
 8007d5c:	1c4b      	adds	r3, r1, #1
 8007d5e:	e7e7      	b.n	8007d30 <_printf_float+0x1a4>
 8007d60:	2900      	cmp	r1, #0
 8007d62:	bfd4      	ite	le
 8007d64:	f1c1 0202 	rsble	r2, r1, #2
 8007d68:	2201      	movgt	r2, #1
 8007d6a:	4413      	add	r3, r2
 8007d6c:	e7e0      	b.n	8007d30 <_printf_float+0x1a4>
 8007d6e:	6823      	ldr	r3, [r4, #0]
 8007d70:	055a      	lsls	r2, r3, #21
 8007d72:	d407      	bmi.n	8007d84 <_printf_float+0x1f8>
 8007d74:	6923      	ldr	r3, [r4, #16]
 8007d76:	4642      	mov	r2, r8
 8007d78:	4631      	mov	r1, r6
 8007d7a:	4628      	mov	r0, r5
 8007d7c:	47b8      	blx	r7
 8007d7e:	3001      	adds	r0, #1
 8007d80:	d12c      	bne.n	8007ddc <_printf_float+0x250>
 8007d82:	e764      	b.n	8007c4e <_printf_float+0xc2>
 8007d84:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007d88:	f240 80e0 	bls.w	8007f4c <_printf_float+0x3c0>
 8007d8c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007d90:	2200      	movs	r2, #0
 8007d92:	2300      	movs	r3, #0
 8007d94:	f7f8 fea0 	bl	8000ad8 <__aeabi_dcmpeq>
 8007d98:	2800      	cmp	r0, #0
 8007d9a:	d034      	beq.n	8007e06 <_printf_float+0x27a>
 8007d9c:	4a37      	ldr	r2, [pc, #220]	; (8007e7c <_printf_float+0x2f0>)
 8007d9e:	2301      	movs	r3, #1
 8007da0:	4631      	mov	r1, r6
 8007da2:	4628      	mov	r0, r5
 8007da4:	47b8      	blx	r7
 8007da6:	3001      	adds	r0, #1
 8007da8:	f43f af51 	beq.w	8007c4e <_printf_float+0xc2>
 8007dac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007db0:	429a      	cmp	r2, r3
 8007db2:	db02      	blt.n	8007dba <_printf_float+0x22e>
 8007db4:	6823      	ldr	r3, [r4, #0]
 8007db6:	07d8      	lsls	r0, r3, #31
 8007db8:	d510      	bpl.n	8007ddc <_printf_float+0x250>
 8007dba:	ee18 3a10 	vmov	r3, s16
 8007dbe:	4652      	mov	r2, sl
 8007dc0:	4631      	mov	r1, r6
 8007dc2:	4628      	mov	r0, r5
 8007dc4:	47b8      	blx	r7
 8007dc6:	3001      	adds	r0, #1
 8007dc8:	f43f af41 	beq.w	8007c4e <_printf_float+0xc2>
 8007dcc:	f04f 0800 	mov.w	r8, #0
 8007dd0:	f104 091a 	add.w	r9, r4, #26
 8007dd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007dd6:	3b01      	subs	r3, #1
 8007dd8:	4543      	cmp	r3, r8
 8007dda:	dc09      	bgt.n	8007df0 <_printf_float+0x264>
 8007ddc:	6823      	ldr	r3, [r4, #0]
 8007dde:	079b      	lsls	r3, r3, #30
 8007de0:	f100 8105 	bmi.w	8007fee <_printf_float+0x462>
 8007de4:	68e0      	ldr	r0, [r4, #12]
 8007de6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007de8:	4298      	cmp	r0, r3
 8007dea:	bfb8      	it	lt
 8007dec:	4618      	movlt	r0, r3
 8007dee:	e730      	b.n	8007c52 <_printf_float+0xc6>
 8007df0:	2301      	movs	r3, #1
 8007df2:	464a      	mov	r2, r9
 8007df4:	4631      	mov	r1, r6
 8007df6:	4628      	mov	r0, r5
 8007df8:	47b8      	blx	r7
 8007dfa:	3001      	adds	r0, #1
 8007dfc:	f43f af27 	beq.w	8007c4e <_printf_float+0xc2>
 8007e00:	f108 0801 	add.w	r8, r8, #1
 8007e04:	e7e6      	b.n	8007dd4 <_printf_float+0x248>
 8007e06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	dc39      	bgt.n	8007e80 <_printf_float+0x2f4>
 8007e0c:	4a1b      	ldr	r2, [pc, #108]	; (8007e7c <_printf_float+0x2f0>)
 8007e0e:	2301      	movs	r3, #1
 8007e10:	4631      	mov	r1, r6
 8007e12:	4628      	mov	r0, r5
 8007e14:	47b8      	blx	r7
 8007e16:	3001      	adds	r0, #1
 8007e18:	f43f af19 	beq.w	8007c4e <_printf_float+0xc2>
 8007e1c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007e20:	4313      	orrs	r3, r2
 8007e22:	d102      	bne.n	8007e2a <_printf_float+0x29e>
 8007e24:	6823      	ldr	r3, [r4, #0]
 8007e26:	07d9      	lsls	r1, r3, #31
 8007e28:	d5d8      	bpl.n	8007ddc <_printf_float+0x250>
 8007e2a:	ee18 3a10 	vmov	r3, s16
 8007e2e:	4652      	mov	r2, sl
 8007e30:	4631      	mov	r1, r6
 8007e32:	4628      	mov	r0, r5
 8007e34:	47b8      	blx	r7
 8007e36:	3001      	adds	r0, #1
 8007e38:	f43f af09 	beq.w	8007c4e <_printf_float+0xc2>
 8007e3c:	f04f 0900 	mov.w	r9, #0
 8007e40:	f104 0a1a 	add.w	sl, r4, #26
 8007e44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e46:	425b      	negs	r3, r3
 8007e48:	454b      	cmp	r3, r9
 8007e4a:	dc01      	bgt.n	8007e50 <_printf_float+0x2c4>
 8007e4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e4e:	e792      	b.n	8007d76 <_printf_float+0x1ea>
 8007e50:	2301      	movs	r3, #1
 8007e52:	4652      	mov	r2, sl
 8007e54:	4631      	mov	r1, r6
 8007e56:	4628      	mov	r0, r5
 8007e58:	47b8      	blx	r7
 8007e5a:	3001      	adds	r0, #1
 8007e5c:	f43f aef7 	beq.w	8007c4e <_printf_float+0xc2>
 8007e60:	f109 0901 	add.w	r9, r9, #1
 8007e64:	e7ee      	b.n	8007e44 <_printf_float+0x2b8>
 8007e66:	bf00      	nop
 8007e68:	7fefffff 	.word	0x7fefffff
 8007e6c:	0800a610 	.word	0x0800a610
 8007e70:	0800a614 	.word	0x0800a614
 8007e74:	0800a61c 	.word	0x0800a61c
 8007e78:	0800a618 	.word	0x0800a618
 8007e7c:	0800a620 	.word	0x0800a620
 8007e80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e82:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007e84:	429a      	cmp	r2, r3
 8007e86:	bfa8      	it	ge
 8007e88:	461a      	movge	r2, r3
 8007e8a:	2a00      	cmp	r2, #0
 8007e8c:	4691      	mov	r9, r2
 8007e8e:	dc37      	bgt.n	8007f00 <_printf_float+0x374>
 8007e90:	f04f 0b00 	mov.w	fp, #0
 8007e94:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007e98:	f104 021a 	add.w	r2, r4, #26
 8007e9c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007e9e:	9305      	str	r3, [sp, #20]
 8007ea0:	eba3 0309 	sub.w	r3, r3, r9
 8007ea4:	455b      	cmp	r3, fp
 8007ea6:	dc33      	bgt.n	8007f10 <_printf_float+0x384>
 8007ea8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007eac:	429a      	cmp	r2, r3
 8007eae:	db3b      	blt.n	8007f28 <_printf_float+0x39c>
 8007eb0:	6823      	ldr	r3, [r4, #0]
 8007eb2:	07da      	lsls	r2, r3, #31
 8007eb4:	d438      	bmi.n	8007f28 <_printf_float+0x39c>
 8007eb6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007eb8:	9b05      	ldr	r3, [sp, #20]
 8007eba:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007ebc:	1ad3      	subs	r3, r2, r3
 8007ebe:	eba2 0901 	sub.w	r9, r2, r1
 8007ec2:	4599      	cmp	r9, r3
 8007ec4:	bfa8      	it	ge
 8007ec6:	4699      	movge	r9, r3
 8007ec8:	f1b9 0f00 	cmp.w	r9, #0
 8007ecc:	dc35      	bgt.n	8007f3a <_printf_float+0x3ae>
 8007ece:	f04f 0800 	mov.w	r8, #0
 8007ed2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007ed6:	f104 0a1a 	add.w	sl, r4, #26
 8007eda:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007ede:	1a9b      	subs	r3, r3, r2
 8007ee0:	eba3 0309 	sub.w	r3, r3, r9
 8007ee4:	4543      	cmp	r3, r8
 8007ee6:	f77f af79 	ble.w	8007ddc <_printf_float+0x250>
 8007eea:	2301      	movs	r3, #1
 8007eec:	4652      	mov	r2, sl
 8007eee:	4631      	mov	r1, r6
 8007ef0:	4628      	mov	r0, r5
 8007ef2:	47b8      	blx	r7
 8007ef4:	3001      	adds	r0, #1
 8007ef6:	f43f aeaa 	beq.w	8007c4e <_printf_float+0xc2>
 8007efa:	f108 0801 	add.w	r8, r8, #1
 8007efe:	e7ec      	b.n	8007eda <_printf_float+0x34e>
 8007f00:	4613      	mov	r3, r2
 8007f02:	4631      	mov	r1, r6
 8007f04:	4642      	mov	r2, r8
 8007f06:	4628      	mov	r0, r5
 8007f08:	47b8      	blx	r7
 8007f0a:	3001      	adds	r0, #1
 8007f0c:	d1c0      	bne.n	8007e90 <_printf_float+0x304>
 8007f0e:	e69e      	b.n	8007c4e <_printf_float+0xc2>
 8007f10:	2301      	movs	r3, #1
 8007f12:	4631      	mov	r1, r6
 8007f14:	4628      	mov	r0, r5
 8007f16:	9205      	str	r2, [sp, #20]
 8007f18:	47b8      	blx	r7
 8007f1a:	3001      	adds	r0, #1
 8007f1c:	f43f ae97 	beq.w	8007c4e <_printf_float+0xc2>
 8007f20:	9a05      	ldr	r2, [sp, #20]
 8007f22:	f10b 0b01 	add.w	fp, fp, #1
 8007f26:	e7b9      	b.n	8007e9c <_printf_float+0x310>
 8007f28:	ee18 3a10 	vmov	r3, s16
 8007f2c:	4652      	mov	r2, sl
 8007f2e:	4631      	mov	r1, r6
 8007f30:	4628      	mov	r0, r5
 8007f32:	47b8      	blx	r7
 8007f34:	3001      	adds	r0, #1
 8007f36:	d1be      	bne.n	8007eb6 <_printf_float+0x32a>
 8007f38:	e689      	b.n	8007c4e <_printf_float+0xc2>
 8007f3a:	9a05      	ldr	r2, [sp, #20]
 8007f3c:	464b      	mov	r3, r9
 8007f3e:	4442      	add	r2, r8
 8007f40:	4631      	mov	r1, r6
 8007f42:	4628      	mov	r0, r5
 8007f44:	47b8      	blx	r7
 8007f46:	3001      	adds	r0, #1
 8007f48:	d1c1      	bne.n	8007ece <_printf_float+0x342>
 8007f4a:	e680      	b.n	8007c4e <_printf_float+0xc2>
 8007f4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f4e:	2a01      	cmp	r2, #1
 8007f50:	dc01      	bgt.n	8007f56 <_printf_float+0x3ca>
 8007f52:	07db      	lsls	r3, r3, #31
 8007f54:	d538      	bpl.n	8007fc8 <_printf_float+0x43c>
 8007f56:	2301      	movs	r3, #1
 8007f58:	4642      	mov	r2, r8
 8007f5a:	4631      	mov	r1, r6
 8007f5c:	4628      	mov	r0, r5
 8007f5e:	47b8      	blx	r7
 8007f60:	3001      	adds	r0, #1
 8007f62:	f43f ae74 	beq.w	8007c4e <_printf_float+0xc2>
 8007f66:	ee18 3a10 	vmov	r3, s16
 8007f6a:	4652      	mov	r2, sl
 8007f6c:	4631      	mov	r1, r6
 8007f6e:	4628      	mov	r0, r5
 8007f70:	47b8      	blx	r7
 8007f72:	3001      	adds	r0, #1
 8007f74:	f43f ae6b 	beq.w	8007c4e <_printf_float+0xc2>
 8007f78:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	2300      	movs	r3, #0
 8007f80:	f7f8 fdaa 	bl	8000ad8 <__aeabi_dcmpeq>
 8007f84:	b9d8      	cbnz	r0, 8007fbe <_printf_float+0x432>
 8007f86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f88:	f108 0201 	add.w	r2, r8, #1
 8007f8c:	3b01      	subs	r3, #1
 8007f8e:	4631      	mov	r1, r6
 8007f90:	4628      	mov	r0, r5
 8007f92:	47b8      	blx	r7
 8007f94:	3001      	adds	r0, #1
 8007f96:	d10e      	bne.n	8007fb6 <_printf_float+0x42a>
 8007f98:	e659      	b.n	8007c4e <_printf_float+0xc2>
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	4652      	mov	r2, sl
 8007f9e:	4631      	mov	r1, r6
 8007fa0:	4628      	mov	r0, r5
 8007fa2:	47b8      	blx	r7
 8007fa4:	3001      	adds	r0, #1
 8007fa6:	f43f ae52 	beq.w	8007c4e <_printf_float+0xc2>
 8007faa:	f108 0801 	add.w	r8, r8, #1
 8007fae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fb0:	3b01      	subs	r3, #1
 8007fb2:	4543      	cmp	r3, r8
 8007fb4:	dcf1      	bgt.n	8007f9a <_printf_float+0x40e>
 8007fb6:	464b      	mov	r3, r9
 8007fb8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007fbc:	e6dc      	b.n	8007d78 <_printf_float+0x1ec>
 8007fbe:	f04f 0800 	mov.w	r8, #0
 8007fc2:	f104 0a1a 	add.w	sl, r4, #26
 8007fc6:	e7f2      	b.n	8007fae <_printf_float+0x422>
 8007fc8:	2301      	movs	r3, #1
 8007fca:	4642      	mov	r2, r8
 8007fcc:	e7df      	b.n	8007f8e <_printf_float+0x402>
 8007fce:	2301      	movs	r3, #1
 8007fd0:	464a      	mov	r2, r9
 8007fd2:	4631      	mov	r1, r6
 8007fd4:	4628      	mov	r0, r5
 8007fd6:	47b8      	blx	r7
 8007fd8:	3001      	adds	r0, #1
 8007fda:	f43f ae38 	beq.w	8007c4e <_printf_float+0xc2>
 8007fde:	f108 0801 	add.w	r8, r8, #1
 8007fe2:	68e3      	ldr	r3, [r4, #12]
 8007fe4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007fe6:	1a5b      	subs	r3, r3, r1
 8007fe8:	4543      	cmp	r3, r8
 8007fea:	dcf0      	bgt.n	8007fce <_printf_float+0x442>
 8007fec:	e6fa      	b.n	8007de4 <_printf_float+0x258>
 8007fee:	f04f 0800 	mov.w	r8, #0
 8007ff2:	f104 0919 	add.w	r9, r4, #25
 8007ff6:	e7f4      	b.n	8007fe2 <_printf_float+0x456>

08007ff8 <_printf_common>:
 8007ff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ffc:	4616      	mov	r6, r2
 8007ffe:	4699      	mov	r9, r3
 8008000:	688a      	ldr	r2, [r1, #8]
 8008002:	690b      	ldr	r3, [r1, #16]
 8008004:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008008:	4293      	cmp	r3, r2
 800800a:	bfb8      	it	lt
 800800c:	4613      	movlt	r3, r2
 800800e:	6033      	str	r3, [r6, #0]
 8008010:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008014:	4607      	mov	r7, r0
 8008016:	460c      	mov	r4, r1
 8008018:	b10a      	cbz	r2, 800801e <_printf_common+0x26>
 800801a:	3301      	adds	r3, #1
 800801c:	6033      	str	r3, [r6, #0]
 800801e:	6823      	ldr	r3, [r4, #0]
 8008020:	0699      	lsls	r1, r3, #26
 8008022:	bf42      	ittt	mi
 8008024:	6833      	ldrmi	r3, [r6, #0]
 8008026:	3302      	addmi	r3, #2
 8008028:	6033      	strmi	r3, [r6, #0]
 800802a:	6825      	ldr	r5, [r4, #0]
 800802c:	f015 0506 	ands.w	r5, r5, #6
 8008030:	d106      	bne.n	8008040 <_printf_common+0x48>
 8008032:	f104 0a19 	add.w	sl, r4, #25
 8008036:	68e3      	ldr	r3, [r4, #12]
 8008038:	6832      	ldr	r2, [r6, #0]
 800803a:	1a9b      	subs	r3, r3, r2
 800803c:	42ab      	cmp	r3, r5
 800803e:	dc26      	bgt.n	800808e <_printf_common+0x96>
 8008040:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008044:	1e13      	subs	r3, r2, #0
 8008046:	6822      	ldr	r2, [r4, #0]
 8008048:	bf18      	it	ne
 800804a:	2301      	movne	r3, #1
 800804c:	0692      	lsls	r2, r2, #26
 800804e:	d42b      	bmi.n	80080a8 <_printf_common+0xb0>
 8008050:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008054:	4649      	mov	r1, r9
 8008056:	4638      	mov	r0, r7
 8008058:	47c0      	blx	r8
 800805a:	3001      	adds	r0, #1
 800805c:	d01e      	beq.n	800809c <_printf_common+0xa4>
 800805e:	6823      	ldr	r3, [r4, #0]
 8008060:	68e5      	ldr	r5, [r4, #12]
 8008062:	6832      	ldr	r2, [r6, #0]
 8008064:	f003 0306 	and.w	r3, r3, #6
 8008068:	2b04      	cmp	r3, #4
 800806a:	bf08      	it	eq
 800806c:	1aad      	subeq	r5, r5, r2
 800806e:	68a3      	ldr	r3, [r4, #8]
 8008070:	6922      	ldr	r2, [r4, #16]
 8008072:	bf0c      	ite	eq
 8008074:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008078:	2500      	movne	r5, #0
 800807a:	4293      	cmp	r3, r2
 800807c:	bfc4      	itt	gt
 800807e:	1a9b      	subgt	r3, r3, r2
 8008080:	18ed      	addgt	r5, r5, r3
 8008082:	2600      	movs	r6, #0
 8008084:	341a      	adds	r4, #26
 8008086:	42b5      	cmp	r5, r6
 8008088:	d11a      	bne.n	80080c0 <_printf_common+0xc8>
 800808a:	2000      	movs	r0, #0
 800808c:	e008      	b.n	80080a0 <_printf_common+0xa8>
 800808e:	2301      	movs	r3, #1
 8008090:	4652      	mov	r2, sl
 8008092:	4649      	mov	r1, r9
 8008094:	4638      	mov	r0, r7
 8008096:	47c0      	blx	r8
 8008098:	3001      	adds	r0, #1
 800809a:	d103      	bne.n	80080a4 <_printf_common+0xac>
 800809c:	f04f 30ff 	mov.w	r0, #4294967295
 80080a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080a4:	3501      	adds	r5, #1
 80080a6:	e7c6      	b.n	8008036 <_printf_common+0x3e>
 80080a8:	18e1      	adds	r1, r4, r3
 80080aa:	1c5a      	adds	r2, r3, #1
 80080ac:	2030      	movs	r0, #48	; 0x30
 80080ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80080b2:	4422      	add	r2, r4
 80080b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80080b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80080bc:	3302      	adds	r3, #2
 80080be:	e7c7      	b.n	8008050 <_printf_common+0x58>
 80080c0:	2301      	movs	r3, #1
 80080c2:	4622      	mov	r2, r4
 80080c4:	4649      	mov	r1, r9
 80080c6:	4638      	mov	r0, r7
 80080c8:	47c0      	blx	r8
 80080ca:	3001      	adds	r0, #1
 80080cc:	d0e6      	beq.n	800809c <_printf_common+0xa4>
 80080ce:	3601      	adds	r6, #1
 80080d0:	e7d9      	b.n	8008086 <_printf_common+0x8e>
	...

080080d4 <_printf_i>:
 80080d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80080d8:	460c      	mov	r4, r1
 80080da:	4691      	mov	r9, r2
 80080dc:	7e27      	ldrb	r7, [r4, #24]
 80080de:	990c      	ldr	r1, [sp, #48]	; 0x30
 80080e0:	2f78      	cmp	r7, #120	; 0x78
 80080e2:	4680      	mov	r8, r0
 80080e4:	469a      	mov	sl, r3
 80080e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80080ea:	d807      	bhi.n	80080fc <_printf_i+0x28>
 80080ec:	2f62      	cmp	r7, #98	; 0x62
 80080ee:	d80a      	bhi.n	8008106 <_printf_i+0x32>
 80080f0:	2f00      	cmp	r7, #0
 80080f2:	f000 80d8 	beq.w	80082a6 <_printf_i+0x1d2>
 80080f6:	2f58      	cmp	r7, #88	; 0x58
 80080f8:	f000 80a3 	beq.w	8008242 <_printf_i+0x16e>
 80080fc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008100:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008104:	e03a      	b.n	800817c <_printf_i+0xa8>
 8008106:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800810a:	2b15      	cmp	r3, #21
 800810c:	d8f6      	bhi.n	80080fc <_printf_i+0x28>
 800810e:	a001      	add	r0, pc, #4	; (adr r0, 8008114 <_printf_i+0x40>)
 8008110:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008114:	0800816d 	.word	0x0800816d
 8008118:	08008181 	.word	0x08008181
 800811c:	080080fd 	.word	0x080080fd
 8008120:	080080fd 	.word	0x080080fd
 8008124:	080080fd 	.word	0x080080fd
 8008128:	080080fd 	.word	0x080080fd
 800812c:	08008181 	.word	0x08008181
 8008130:	080080fd 	.word	0x080080fd
 8008134:	080080fd 	.word	0x080080fd
 8008138:	080080fd 	.word	0x080080fd
 800813c:	080080fd 	.word	0x080080fd
 8008140:	0800828d 	.word	0x0800828d
 8008144:	080081b1 	.word	0x080081b1
 8008148:	0800826f 	.word	0x0800826f
 800814c:	080080fd 	.word	0x080080fd
 8008150:	080080fd 	.word	0x080080fd
 8008154:	080082af 	.word	0x080082af
 8008158:	080080fd 	.word	0x080080fd
 800815c:	080081b1 	.word	0x080081b1
 8008160:	080080fd 	.word	0x080080fd
 8008164:	080080fd 	.word	0x080080fd
 8008168:	08008277 	.word	0x08008277
 800816c:	680b      	ldr	r3, [r1, #0]
 800816e:	1d1a      	adds	r2, r3, #4
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	600a      	str	r2, [r1, #0]
 8008174:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008178:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800817c:	2301      	movs	r3, #1
 800817e:	e0a3      	b.n	80082c8 <_printf_i+0x1f4>
 8008180:	6825      	ldr	r5, [r4, #0]
 8008182:	6808      	ldr	r0, [r1, #0]
 8008184:	062e      	lsls	r6, r5, #24
 8008186:	f100 0304 	add.w	r3, r0, #4
 800818a:	d50a      	bpl.n	80081a2 <_printf_i+0xce>
 800818c:	6805      	ldr	r5, [r0, #0]
 800818e:	600b      	str	r3, [r1, #0]
 8008190:	2d00      	cmp	r5, #0
 8008192:	da03      	bge.n	800819c <_printf_i+0xc8>
 8008194:	232d      	movs	r3, #45	; 0x2d
 8008196:	426d      	negs	r5, r5
 8008198:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800819c:	485e      	ldr	r0, [pc, #376]	; (8008318 <_printf_i+0x244>)
 800819e:	230a      	movs	r3, #10
 80081a0:	e019      	b.n	80081d6 <_printf_i+0x102>
 80081a2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80081a6:	6805      	ldr	r5, [r0, #0]
 80081a8:	600b      	str	r3, [r1, #0]
 80081aa:	bf18      	it	ne
 80081ac:	b22d      	sxthne	r5, r5
 80081ae:	e7ef      	b.n	8008190 <_printf_i+0xbc>
 80081b0:	680b      	ldr	r3, [r1, #0]
 80081b2:	6825      	ldr	r5, [r4, #0]
 80081b4:	1d18      	adds	r0, r3, #4
 80081b6:	6008      	str	r0, [r1, #0]
 80081b8:	0628      	lsls	r0, r5, #24
 80081ba:	d501      	bpl.n	80081c0 <_printf_i+0xec>
 80081bc:	681d      	ldr	r5, [r3, #0]
 80081be:	e002      	b.n	80081c6 <_printf_i+0xf2>
 80081c0:	0669      	lsls	r1, r5, #25
 80081c2:	d5fb      	bpl.n	80081bc <_printf_i+0xe8>
 80081c4:	881d      	ldrh	r5, [r3, #0]
 80081c6:	4854      	ldr	r0, [pc, #336]	; (8008318 <_printf_i+0x244>)
 80081c8:	2f6f      	cmp	r7, #111	; 0x6f
 80081ca:	bf0c      	ite	eq
 80081cc:	2308      	moveq	r3, #8
 80081ce:	230a      	movne	r3, #10
 80081d0:	2100      	movs	r1, #0
 80081d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80081d6:	6866      	ldr	r6, [r4, #4]
 80081d8:	60a6      	str	r6, [r4, #8]
 80081da:	2e00      	cmp	r6, #0
 80081dc:	bfa2      	ittt	ge
 80081de:	6821      	ldrge	r1, [r4, #0]
 80081e0:	f021 0104 	bicge.w	r1, r1, #4
 80081e4:	6021      	strge	r1, [r4, #0]
 80081e6:	b90d      	cbnz	r5, 80081ec <_printf_i+0x118>
 80081e8:	2e00      	cmp	r6, #0
 80081ea:	d04d      	beq.n	8008288 <_printf_i+0x1b4>
 80081ec:	4616      	mov	r6, r2
 80081ee:	fbb5 f1f3 	udiv	r1, r5, r3
 80081f2:	fb03 5711 	mls	r7, r3, r1, r5
 80081f6:	5dc7      	ldrb	r7, [r0, r7]
 80081f8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80081fc:	462f      	mov	r7, r5
 80081fe:	42bb      	cmp	r3, r7
 8008200:	460d      	mov	r5, r1
 8008202:	d9f4      	bls.n	80081ee <_printf_i+0x11a>
 8008204:	2b08      	cmp	r3, #8
 8008206:	d10b      	bne.n	8008220 <_printf_i+0x14c>
 8008208:	6823      	ldr	r3, [r4, #0]
 800820a:	07df      	lsls	r7, r3, #31
 800820c:	d508      	bpl.n	8008220 <_printf_i+0x14c>
 800820e:	6923      	ldr	r3, [r4, #16]
 8008210:	6861      	ldr	r1, [r4, #4]
 8008212:	4299      	cmp	r1, r3
 8008214:	bfde      	ittt	le
 8008216:	2330      	movle	r3, #48	; 0x30
 8008218:	f806 3c01 	strble.w	r3, [r6, #-1]
 800821c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008220:	1b92      	subs	r2, r2, r6
 8008222:	6122      	str	r2, [r4, #16]
 8008224:	f8cd a000 	str.w	sl, [sp]
 8008228:	464b      	mov	r3, r9
 800822a:	aa03      	add	r2, sp, #12
 800822c:	4621      	mov	r1, r4
 800822e:	4640      	mov	r0, r8
 8008230:	f7ff fee2 	bl	8007ff8 <_printf_common>
 8008234:	3001      	adds	r0, #1
 8008236:	d14c      	bne.n	80082d2 <_printf_i+0x1fe>
 8008238:	f04f 30ff 	mov.w	r0, #4294967295
 800823c:	b004      	add	sp, #16
 800823e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008242:	4835      	ldr	r0, [pc, #212]	; (8008318 <_printf_i+0x244>)
 8008244:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008248:	6823      	ldr	r3, [r4, #0]
 800824a:	680e      	ldr	r6, [r1, #0]
 800824c:	061f      	lsls	r7, r3, #24
 800824e:	f856 5b04 	ldr.w	r5, [r6], #4
 8008252:	600e      	str	r6, [r1, #0]
 8008254:	d514      	bpl.n	8008280 <_printf_i+0x1ac>
 8008256:	07d9      	lsls	r1, r3, #31
 8008258:	bf44      	itt	mi
 800825a:	f043 0320 	orrmi.w	r3, r3, #32
 800825e:	6023      	strmi	r3, [r4, #0]
 8008260:	b91d      	cbnz	r5, 800826a <_printf_i+0x196>
 8008262:	6823      	ldr	r3, [r4, #0]
 8008264:	f023 0320 	bic.w	r3, r3, #32
 8008268:	6023      	str	r3, [r4, #0]
 800826a:	2310      	movs	r3, #16
 800826c:	e7b0      	b.n	80081d0 <_printf_i+0xfc>
 800826e:	6823      	ldr	r3, [r4, #0]
 8008270:	f043 0320 	orr.w	r3, r3, #32
 8008274:	6023      	str	r3, [r4, #0]
 8008276:	2378      	movs	r3, #120	; 0x78
 8008278:	4828      	ldr	r0, [pc, #160]	; (800831c <_printf_i+0x248>)
 800827a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800827e:	e7e3      	b.n	8008248 <_printf_i+0x174>
 8008280:	065e      	lsls	r6, r3, #25
 8008282:	bf48      	it	mi
 8008284:	b2ad      	uxthmi	r5, r5
 8008286:	e7e6      	b.n	8008256 <_printf_i+0x182>
 8008288:	4616      	mov	r6, r2
 800828a:	e7bb      	b.n	8008204 <_printf_i+0x130>
 800828c:	680b      	ldr	r3, [r1, #0]
 800828e:	6826      	ldr	r6, [r4, #0]
 8008290:	6960      	ldr	r0, [r4, #20]
 8008292:	1d1d      	adds	r5, r3, #4
 8008294:	600d      	str	r5, [r1, #0]
 8008296:	0635      	lsls	r5, r6, #24
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	d501      	bpl.n	80082a0 <_printf_i+0x1cc>
 800829c:	6018      	str	r0, [r3, #0]
 800829e:	e002      	b.n	80082a6 <_printf_i+0x1d2>
 80082a0:	0671      	lsls	r1, r6, #25
 80082a2:	d5fb      	bpl.n	800829c <_printf_i+0x1c8>
 80082a4:	8018      	strh	r0, [r3, #0]
 80082a6:	2300      	movs	r3, #0
 80082a8:	6123      	str	r3, [r4, #16]
 80082aa:	4616      	mov	r6, r2
 80082ac:	e7ba      	b.n	8008224 <_printf_i+0x150>
 80082ae:	680b      	ldr	r3, [r1, #0]
 80082b0:	1d1a      	adds	r2, r3, #4
 80082b2:	600a      	str	r2, [r1, #0]
 80082b4:	681e      	ldr	r6, [r3, #0]
 80082b6:	6862      	ldr	r2, [r4, #4]
 80082b8:	2100      	movs	r1, #0
 80082ba:	4630      	mov	r0, r6
 80082bc:	f7f7 ff98 	bl	80001f0 <memchr>
 80082c0:	b108      	cbz	r0, 80082c6 <_printf_i+0x1f2>
 80082c2:	1b80      	subs	r0, r0, r6
 80082c4:	6060      	str	r0, [r4, #4]
 80082c6:	6863      	ldr	r3, [r4, #4]
 80082c8:	6123      	str	r3, [r4, #16]
 80082ca:	2300      	movs	r3, #0
 80082cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80082d0:	e7a8      	b.n	8008224 <_printf_i+0x150>
 80082d2:	6923      	ldr	r3, [r4, #16]
 80082d4:	4632      	mov	r2, r6
 80082d6:	4649      	mov	r1, r9
 80082d8:	4640      	mov	r0, r8
 80082da:	47d0      	blx	sl
 80082dc:	3001      	adds	r0, #1
 80082de:	d0ab      	beq.n	8008238 <_printf_i+0x164>
 80082e0:	6823      	ldr	r3, [r4, #0]
 80082e2:	079b      	lsls	r3, r3, #30
 80082e4:	d413      	bmi.n	800830e <_printf_i+0x23a>
 80082e6:	68e0      	ldr	r0, [r4, #12]
 80082e8:	9b03      	ldr	r3, [sp, #12]
 80082ea:	4298      	cmp	r0, r3
 80082ec:	bfb8      	it	lt
 80082ee:	4618      	movlt	r0, r3
 80082f0:	e7a4      	b.n	800823c <_printf_i+0x168>
 80082f2:	2301      	movs	r3, #1
 80082f4:	4632      	mov	r2, r6
 80082f6:	4649      	mov	r1, r9
 80082f8:	4640      	mov	r0, r8
 80082fa:	47d0      	blx	sl
 80082fc:	3001      	adds	r0, #1
 80082fe:	d09b      	beq.n	8008238 <_printf_i+0x164>
 8008300:	3501      	adds	r5, #1
 8008302:	68e3      	ldr	r3, [r4, #12]
 8008304:	9903      	ldr	r1, [sp, #12]
 8008306:	1a5b      	subs	r3, r3, r1
 8008308:	42ab      	cmp	r3, r5
 800830a:	dcf2      	bgt.n	80082f2 <_printf_i+0x21e>
 800830c:	e7eb      	b.n	80082e6 <_printf_i+0x212>
 800830e:	2500      	movs	r5, #0
 8008310:	f104 0619 	add.w	r6, r4, #25
 8008314:	e7f5      	b.n	8008302 <_printf_i+0x22e>
 8008316:	bf00      	nop
 8008318:	0800a622 	.word	0x0800a622
 800831c:	0800a633 	.word	0x0800a633

08008320 <iprintf>:
 8008320:	b40f      	push	{r0, r1, r2, r3}
 8008322:	4b0a      	ldr	r3, [pc, #40]	; (800834c <iprintf+0x2c>)
 8008324:	b513      	push	{r0, r1, r4, lr}
 8008326:	681c      	ldr	r4, [r3, #0]
 8008328:	b124      	cbz	r4, 8008334 <iprintf+0x14>
 800832a:	69a3      	ldr	r3, [r4, #24]
 800832c:	b913      	cbnz	r3, 8008334 <iprintf+0x14>
 800832e:	4620      	mov	r0, r4
 8008330:	f001 f8d8 	bl	80094e4 <__sinit>
 8008334:	ab05      	add	r3, sp, #20
 8008336:	9a04      	ldr	r2, [sp, #16]
 8008338:	68a1      	ldr	r1, [r4, #8]
 800833a:	9301      	str	r3, [sp, #4]
 800833c:	4620      	mov	r0, r4
 800833e:	f001 fe45 	bl	8009fcc <_vfiprintf_r>
 8008342:	b002      	add	sp, #8
 8008344:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008348:	b004      	add	sp, #16
 800834a:	4770      	bx	lr
 800834c:	20000010 	.word	0x20000010

08008350 <_puts_r>:
 8008350:	b570      	push	{r4, r5, r6, lr}
 8008352:	460e      	mov	r6, r1
 8008354:	4605      	mov	r5, r0
 8008356:	b118      	cbz	r0, 8008360 <_puts_r+0x10>
 8008358:	6983      	ldr	r3, [r0, #24]
 800835a:	b90b      	cbnz	r3, 8008360 <_puts_r+0x10>
 800835c:	f001 f8c2 	bl	80094e4 <__sinit>
 8008360:	69ab      	ldr	r3, [r5, #24]
 8008362:	68ac      	ldr	r4, [r5, #8]
 8008364:	b913      	cbnz	r3, 800836c <_puts_r+0x1c>
 8008366:	4628      	mov	r0, r5
 8008368:	f001 f8bc 	bl	80094e4 <__sinit>
 800836c:	4b2c      	ldr	r3, [pc, #176]	; (8008420 <_puts_r+0xd0>)
 800836e:	429c      	cmp	r4, r3
 8008370:	d120      	bne.n	80083b4 <_puts_r+0x64>
 8008372:	686c      	ldr	r4, [r5, #4]
 8008374:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008376:	07db      	lsls	r3, r3, #31
 8008378:	d405      	bmi.n	8008386 <_puts_r+0x36>
 800837a:	89a3      	ldrh	r3, [r4, #12]
 800837c:	0598      	lsls	r0, r3, #22
 800837e:	d402      	bmi.n	8008386 <_puts_r+0x36>
 8008380:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008382:	f001 f952 	bl	800962a <__retarget_lock_acquire_recursive>
 8008386:	89a3      	ldrh	r3, [r4, #12]
 8008388:	0719      	lsls	r1, r3, #28
 800838a:	d51d      	bpl.n	80083c8 <_puts_r+0x78>
 800838c:	6923      	ldr	r3, [r4, #16]
 800838e:	b1db      	cbz	r3, 80083c8 <_puts_r+0x78>
 8008390:	3e01      	subs	r6, #1
 8008392:	68a3      	ldr	r3, [r4, #8]
 8008394:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008398:	3b01      	subs	r3, #1
 800839a:	60a3      	str	r3, [r4, #8]
 800839c:	bb39      	cbnz	r1, 80083ee <_puts_r+0x9e>
 800839e:	2b00      	cmp	r3, #0
 80083a0:	da38      	bge.n	8008414 <_puts_r+0xc4>
 80083a2:	4622      	mov	r2, r4
 80083a4:	210a      	movs	r1, #10
 80083a6:	4628      	mov	r0, r5
 80083a8:	f000 f848 	bl	800843c <__swbuf_r>
 80083ac:	3001      	adds	r0, #1
 80083ae:	d011      	beq.n	80083d4 <_puts_r+0x84>
 80083b0:	250a      	movs	r5, #10
 80083b2:	e011      	b.n	80083d8 <_puts_r+0x88>
 80083b4:	4b1b      	ldr	r3, [pc, #108]	; (8008424 <_puts_r+0xd4>)
 80083b6:	429c      	cmp	r4, r3
 80083b8:	d101      	bne.n	80083be <_puts_r+0x6e>
 80083ba:	68ac      	ldr	r4, [r5, #8]
 80083bc:	e7da      	b.n	8008374 <_puts_r+0x24>
 80083be:	4b1a      	ldr	r3, [pc, #104]	; (8008428 <_puts_r+0xd8>)
 80083c0:	429c      	cmp	r4, r3
 80083c2:	bf08      	it	eq
 80083c4:	68ec      	ldreq	r4, [r5, #12]
 80083c6:	e7d5      	b.n	8008374 <_puts_r+0x24>
 80083c8:	4621      	mov	r1, r4
 80083ca:	4628      	mov	r0, r5
 80083cc:	f000 f888 	bl	80084e0 <__swsetup_r>
 80083d0:	2800      	cmp	r0, #0
 80083d2:	d0dd      	beq.n	8008390 <_puts_r+0x40>
 80083d4:	f04f 35ff 	mov.w	r5, #4294967295
 80083d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80083da:	07da      	lsls	r2, r3, #31
 80083dc:	d405      	bmi.n	80083ea <_puts_r+0x9a>
 80083de:	89a3      	ldrh	r3, [r4, #12]
 80083e0:	059b      	lsls	r3, r3, #22
 80083e2:	d402      	bmi.n	80083ea <_puts_r+0x9a>
 80083e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80083e6:	f001 f921 	bl	800962c <__retarget_lock_release_recursive>
 80083ea:	4628      	mov	r0, r5
 80083ec:	bd70      	pop	{r4, r5, r6, pc}
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	da04      	bge.n	80083fc <_puts_r+0xac>
 80083f2:	69a2      	ldr	r2, [r4, #24]
 80083f4:	429a      	cmp	r2, r3
 80083f6:	dc06      	bgt.n	8008406 <_puts_r+0xb6>
 80083f8:	290a      	cmp	r1, #10
 80083fa:	d004      	beq.n	8008406 <_puts_r+0xb6>
 80083fc:	6823      	ldr	r3, [r4, #0]
 80083fe:	1c5a      	adds	r2, r3, #1
 8008400:	6022      	str	r2, [r4, #0]
 8008402:	7019      	strb	r1, [r3, #0]
 8008404:	e7c5      	b.n	8008392 <_puts_r+0x42>
 8008406:	4622      	mov	r2, r4
 8008408:	4628      	mov	r0, r5
 800840a:	f000 f817 	bl	800843c <__swbuf_r>
 800840e:	3001      	adds	r0, #1
 8008410:	d1bf      	bne.n	8008392 <_puts_r+0x42>
 8008412:	e7df      	b.n	80083d4 <_puts_r+0x84>
 8008414:	6823      	ldr	r3, [r4, #0]
 8008416:	250a      	movs	r5, #10
 8008418:	1c5a      	adds	r2, r3, #1
 800841a:	6022      	str	r2, [r4, #0]
 800841c:	701d      	strb	r5, [r3, #0]
 800841e:	e7db      	b.n	80083d8 <_puts_r+0x88>
 8008420:	0800a6f8 	.word	0x0800a6f8
 8008424:	0800a718 	.word	0x0800a718
 8008428:	0800a6d8 	.word	0x0800a6d8

0800842c <puts>:
 800842c:	4b02      	ldr	r3, [pc, #8]	; (8008438 <puts+0xc>)
 800842e:	4601      	mov	r1, r0
 8008430:	6818      	ldr	r0, [r3, #0]
 8008432:	f7ff bf8d 	b.w	8008350 <_puts_r>
 8008436:	bf00      	nop
 8008438:	20000010 	.word	0x20000010

0800843c <__swbuf_r>:
 800843c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800843e:	460e      	mov	r6, r1
 8008440:	4614      	mov	r4, r2
 8008442:	4605      	mov	r5, r0
 8008444:	b118      	cbz	r0, 800844e <__swbuf_r+0x12>
 8008446:	6983      	ldr	r3, [r0, #24]
 8008448:	b90b      	cbnz	r3, 800844e <__swbuf_r+0x12>
 800844a:	f001 f84b 	bl	80094e4 <__sinit>
 800844e:	4b21      	ldr	r3, [pc, #132]	; (80084d4 <__swbuf_r+0x98>)
 8008450:	429c      	cmp	r4, r3
 8008452:	d12b      	bne.n	80084ac <__swbuf_r+0x70>
 8008454:	686c      	ldr	r4, [r5, #4]
 8008456:	69a3      	ldr	r3, [r4, #24]
 8008458:	60a3      	str	r3, [r4, #8]
 800845a:	89a3      	ldrh	r3, [r4, #12]
 800845c:	071a      	lsls	r2, r3, #28
 800845e:	d52f      	bpl.n	80084c0 <__swbuf_r+0x84>
 8008460:	6923      	ldr	r3, [r4, #16]
 8008462:	b36b      	cbz	r3, 80084c0 <__swbuf_r+0x84>
 8008464:	6923      	ldr	r3, [r4, #16]
 8008466:	6820      	ldr	r0, [r4, #0]
 8008468:	1ac0      	subs	r0, r0, r3
 800846a:	6963      	ldr	r3, [r4, #20]
 800846c:	b2f6      	uxtb	r6, r6
 800846e:	4283      	cmp	r3, r0
 8008470:	4637      	mov	r7, r6
 8008472:	dc04      	bgt.n	800847e <__swbuf_r+0x42>
 8008474:	4621      	mov	r1, r4
 8008476:	4628      	mov	r0, r5
 8008478:	f000 ffa0 	bl	80093bc <_fflush_r>
 800847c:	bb30      	cbnz	r0, 80084cc <__swbuf_r+0x90>
 800847e:	68a3      	ldr	r3, [r4, #8]
 8008480:	3b01      	subs	r3, #1
 8008482:	60a3      	str	r3, [r4, #8]
 8008484:	6823      	ldr	r3, [r4, #0]
 8008486:	1c5a      	adds	r2, r3, #1
 8008488:	6022      	str	r2, [r4, #0]
 800848a:	701e      	strb	r6, [r3, #0]
 800848c:	6963      	ldr	r3, [r4, #20]
 800848e:	3001      	adds	r0, #1
 8008490:	4283      	cmp	r3, r0
 8008492:	d004      	beq.n	800849e <__swbuf_r+0x62>
 8008494:	89a3      	ldrh	r3, [r4, #12]
 8008496:	07db      	lsls	r3, r3, #31
 8008498:	d506      	bpl.n	80084a8 <__swbuf_r+0x6c>
 800849a:	2e0a      	cmp	r6, #10
 800849c:	d104      	bne.n	80084a8 <__swbuf_r+0x6c>
 800849e:	4621      	mov	r1, r4
 80084a0:	4628      	mov	r0, r5
 80084a2:	f000 ff8b 	bl	80093bc <_fflush_r>
 80084a6:	b988      	cbnz	r0, 80084cc <__swbuf_r+0x90>
 80084a8:	4638      	mov	r0, r7
 80084aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084ac:	4b0a      	ldr	r3, [pc, #40]	; (80084d8 <__swbuf_r+0x9c>)
 80084ae:	429c      	cmp	r4, r3
 80084b0:	d101      	bne.n	80084b6 <__swbuf_r+0x7a>
 80084b2:	68ac      	ldr	r4, [r5, #8]
 80084b4:	e7cf      	b.n	8008456 <__swbuf_r+0x1a>
 80084b6:	4b09      	ldr	r3, [pc, #36]	; (80084dc <__swbuf_r+0xa0>)
 80084b8:	429c      	cmp	r4, r3
 80084ba:	bf08      	it	eq
 80084bc:	68ec      	ldreq	r4, [r5, #12]
 80084be:	e7ca      	b.n	8008456 <__swbuf_r+0x1a>
 80084c0:	4621      	mov	r1, r4
 80084c2:	4628      	mov	r0, r5
 80084c4:	f000 f80c 	bl	80084e0 <__swsetup_r>
 80084c8:	2800      	cmp	r0, #0
 80084ca:	d0cb      	beq.n	8008464 <__swbuf_r+0x28>
 80084cc:	f04f 37ff 	mov.w	r7, #4294967295
 80084d0:	e7ea      	b.n	80084a8 <__swbuf_r+0x6c>
 80084d2:	bf00      	nop
 80084d4:	0800a6f8 	.word	0x0800a6f8
 80084d8:	0800a718 	.word	0x0800a718
 80084dc:	0800a6d8 	.word	0x0800a6d8

080084e0 <__swsetup_r>:
 80084e0:	4b32      	ldr	r3, [pc, #200]	; (80085ac <__swsetup_r+0xcc>)
 80084e2:	b570      	push	{r4, r5, r6, lr}
 80084e4:	681d      	ldr	r5, [r3, #0]
 80084e6:	4606      	mov	r6, r0
 80084e8:	460c      	mov	r4, r1
 80084ea:	b125      	cbz	r5, 80084f6 <__swsetup_r+0x16>
 80084ec:	69ab      	ldr	r3, [r5, #24]
 80084ee:	b913      	cbnz	r3, 80084f6 <__swsetup_r+0x16>
 80084f0:	4628      	mov	r0, r5
 80084f2:	f000 fff7 	bl	80094e4 <__sinit>
 80084f6:	4b2e      	ldr	r3, [pc, #184]	; (80085b0 <__swsetup_r+0xd0>)
 80084f8:	429c      	cmp	r4, r3
 80084fa:	d10f      	bne.n	800851c <__swsetup_r+0x3c>
 80084fc:	686c      	ldr	r4, [r5, #4]
 80084fe:	89a3      	ldrh	r3, [r4, #12]
 8008500:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008504:	0719      	lsls	r1, r3, #28
 8008506:	d42c      	bmi.n	8008562 <__swsetup_r+0x82>
 8008508:	06dd      	lsls	r5, r3, #27
 800850a:	d411      	bmi.n	8008530 <__swsetup_r+0x50>
 800850c:	2309      	movs	r3, #9
 800850e:	6033      	str	r3, [r6, #0]
 8008510:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008514:	81a3      	strh	r3, [r4, #12]
 8008516:	f04f 30ff 	mov.w	r0, #4294967295
 800851a:	e03e      	b.n	800859a <__swsetup_r+0xba>
 800851c:	4b25      	ldr	r3, [pc, #148]	; (80085b4 <__swsetup_r+0xd4>)
 800851e:	429c      	cmp	r4, r3
 8008520:	d101      	bne.n	8008526 <__swsetup_r+0x46>
 8008522:	68ac      	ldr	r4, [r5, #8]
 8008524:	e7eb      	b.n	80084fe <__swsetup_r+0x1e>
 8008526:	4b24      	ldr	r3, [pc, #144]	; (80085b8 <__swsetup_r+0xd8>)
 8008528:	429c      	cmp	r4, r3
 800852a:	bf08      	it	eq
 800852c:	68ec      	ldreq	r4, [r5, #12]
 800852e:	e7e6      	b.n	80084fe <__swsetup_r+0x1e>
 8008530:	0758      	lsls	r0, r3, #29
 8008532:	d512      	bpl.n	800855a <__swsetup_r+0x7a>
 8008534:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008536:	b141      	cbz	r1, 800854a <__swsetup_r+0x6a>
 8008538:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800853c:	4299      	cmp	r1, r3
 800853e:	d002      	beq.n	8008546 <__swsetup_r+0x66>
 8008540:	4630      	mov	r0, r6
 8008542:	f001 fc6f 	bl	8009e24 <_free_r>
 8008546:	2300      	movs	r3, #0
 8008548:	6363      	str	r3, [r4, #52]	; 0x34
 800854a:	89a3      	ldrh	r3, [r4, #12]
 800854c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008550:	81a3      	strh	r3, [r4, #12]
 8008552:	2300      	movs	r3, #0
 8008554:	6063      	str	r3, [r4, #4]
 8008556:	6923      	ldr	r3, [r4, #16]
 8008558:	6023      	str	r3, [r4, #0]
 800855a:	89a3      	ldrh	r3, [r4, #12]
 800855c:	f043 0308 	orr.w	r3, r3, #8
 8008560:	81a3      	strh	r3, [r4, #12]
 8008562:	6923      	ldr	r3, [r4, #16]
 8008564:	b94b      	cbnz	r3, 800857a <__swsetup_r+0x9a>
 8008566:	89a3      	ldrh	r3, [r4, #12]
 8008568:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800856c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008570:	d003      	beq.n	800857a <__swsetup_r+0x9a>
 8008572:	4621      	mov	r1, r4
 8008574:	4630      	mov	r0, r6
 8008576:	f001 f87f 	bl	8009678 <__smakebuf_r>
 800857a:	89a0      	ldrh	r0, [r4, #12]
 800857c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008580:	f010 0301 	ands.w	r3, r0, #1
 8008584:	d00a      	beq.n	800859c <__swsetup_r+0xbc>
 8008586:	2300      	movs	r3, #0
 8008588:	60a3      	str	r3, [r4, #8]
 800858a:	6963      	ldr	r3, [r4, #20]
 800858c:	425b      	negs	r3, r3
 800858e:	61a3      	str	r3, [r4, #24]
 8008590:	6923      	ldr	r3, [r4, #16]
 8008592:	b943      	cbnz	r3, 80085a6 <__swsetup_r+0xc6>
 8008594:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008598:	d1ba      	bne.n	8008510 <__swsetup_r+0x30>
 800859a:	bd70      	pop	{r4, r5, r6, pc}
 800859c:	0781      	lsls	r1, r0, #30
 800859e:	bf58      	it	pl
 80085a0:	6963      	ldrpl	r3, [r4, #20]
 80085a2:	60a3      	str	r3, [r4, #8]
 80085a4:	e7f4      	b.n	8008590 <__swsetup_r+0xb0>
 80085a6:	2000      	movs	r0, #0
 80085a8:	e7f7      	b.n	800859a <__swsetup_r+0xba>
 80085aa:	bf00      	nop
 80085ac:	20000010 	.word	0x20000010
 80085b0:	0800a6f8 	.word	0x0800a6f8
 80085b4:	0800a718 	.word	0x0800a718
 80085b8:	0800a6d8 	.word	0x0800a6d8

080085bc <quorem>:
 80085bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085c0:	6903      	ldr	r3, [r0, #16]
 80085c2:	690c      	ldr	r4, [r1, #16]
 80085c4:	42a3      	cmp	r3, r4
 80085c6:	4607      	mov	r7, r0
 80085c8:	f2c0 8081 	blt.w	80086ce <quorem+0x112>
 80085cc:	3c01      	subs	r4, #1
 80085ce:	f101 0814 	add.w	r8, r1, #20
 80085d2:	f100 0514 	add.w	r5, r0, #20
 80085d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80085da:	9301      	str	r3, [sp, #4]
 80085dc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80085e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80085e4:	3301      	adds	r3, #1
 80085e6:	429a      	cmp	r2, r3
 80085e8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80085ec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80085f0:	fbb2 f6f3 	udiv	r6, r2, r3
 80085f4:	d331      	bcc.n	800865a <quorem+0x9e>
 80085f6:	f04f 0e00 	mov.w	lr, #0
 80085fa:	4640      	mov	r0, r8
 80085fc:	46ac      	mov	ip, r5
 80085fe:	46f2      	mov	sl, lr
 8008600:	f850 2b04 	ldr.w	r2, [r0], #4
 8008604:	b293      	uxth	r3, r2
 8008606:	fb06 e303 	mla	r3, r6, r3, lr
 800860a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800860e:	b29b      	uxth	r3, r3
 8008610:	ebaa 0303 	sub.w	r3, sl, r3
 8008614:	0c12      	lsrs	r2, r2, #16
 8008616:	f8dc a000 	ldr.w	sl, [ip]
 800861a:	fb06 e202 	mla	r2, r6, r2, lr
 800861e:	fa13 f38a 	uxtah	r3, r3, sl
 8008622:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008626:	fa1f fa82 	uxth.w	sl, r2
 800862a:	f8dc 2000 	ldr.w	r2, [ip]
 800862e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8008632:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008636:	b29b      	uxth	r3, r3
 8008638:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800863c:	4581      	cmp	r9, r0
 800863e:	f84c 3b04 	str.w	r3, [ip], #4
 8008642:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008646:	d2db      	bcs.n	8008600 <quorem+0x44>
 8008648:	f855 300b 	ldr.w	r3, [r5, fp]
 800864c:	b92b      	cbnz	r3, 800865a <quorem+0x9e>
 800864e:	9b01      	ldr	r3, [sp, #4]
 8008650:	3b04      	subs	r3, #4
 8008652:	429d      	cmp	r5, r3
 8008654:	461a      	mov	r2, r3
 8008656:	d32e      	bcc.n	80086b6 <quorem+0xfa>
 8008658:	613c      	str	r4, [r7, #16]
 800865a:	4638      	mov	r0, r7
 800865c:	f001 fad2 	bl	8009c04 <__mcmp>
 8008660:	2800      	cmp	r0, #0
 8008662:	db24      	blt.n	80086ae <quorem+0xf2>
 8008664:	3601      	adds	r6, #1
 8008666:	4628      	mov	r0, r5
 8008668:	f04f 0c00 	mov.w	ip, #0
 800866c:	f858 2b04 	ldr.w	r2, [r8], #4
 8008670:	f8d0 e000 	ldr.w	lr, [r0]
 8008674:	b293      	uxth	r3, r2
 8008676:	ebac 0303 	sub.w	r3, ip, r3
 800867a:	0c12      	lsrs	r2, r2, #16
 800867c:	fa13 f38e 	uxtah	r3, r3, lr
 8008680:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008684:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008688:	b29b      	uxth	r3, r3
 800868a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800868e:	45c1      	cmp	r9, r8
 8008690:	f840 3b04 	str.w	r3, [r0], #4
 8008694:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008698:	d2e8      	bcs.n	800866c <quorem+0xb0>
 800869a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800869e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80086a2:	b922      	cbnz	r2, 80086ae <quorem+0xf2>
 80086a4:	3b04      	subs	r3, #4
 80086a6:	429d      	cmp	r5, r3
 80086a8:	461a      	mov	r2, r3
 80086aa:	d30a      	bcc.n	80086c2 <quorem+0x106>
 80086ac:	613c      	str	r4, [r7, #16]
 80086ae:	4630      	mov	r0, r6
 80086b0:	b003      	add	sp, #12
 80086b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086b6:	6812      	ldr	r2, [r2, #0]
 80086b8:	3b04      	subs	r3, #4
 80086ba:	2a00      	cmp	r2, #0
 80086bc:	d1cc      	bne.n	8008658 <quorem+0x9c>
 80086be:	3c01      	subs	r4, #1
 80086c0:	e7c7      	b.n	8008652 <quorem+0x96>
 80086c2:	6812      	ldr	r2, [r2, #0]
 80086c4:	3b04      	subs	r3, #4
 80086c6:	2a00      	cmp	r2, #0
 80086c8:	d1f0      	bne.n	80086ac <quorem+0xf0>
 80086ca:	3c01      	subs	r4, #1
 80086cc:	e7eb      	b.n	80086a6 <quorem+0xea>
 80086ce:	2000      	movs	r0, #0
 80086d0:	e7ee      	b.n	80086b0 <quorem+0xf4>
 80086d2:	0000      	movs	r0, r0
 80086d4:	0000      	movs	r0, r0
	...

080086d8 <_dtoa_r>:
 80086d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086dc:	ed2d 8b02 	vpush	{d8}
 80086e0:	ec57 6b10 	vmov	r6, r7, d0
 80086e4:	b095      	sub	sp, #84	; 0x54
 80086e6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80086e8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80086ec:	9105      	str	r1, [sp, #20]
 80086ee:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80086f2:	4604      	mov	r4, r0
 80086f4:	9209      	str	r2, [sp, #36]	; 0x24
 80086f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80086f8:	b975      	cbnz	r5, 8008718 <_dtoa_r+0x40>
 80086fa:	2010      	movs	r0, #16
 80086fc:	f000 fffc 	bl	80096f8 <malloc>
 8008700:	4602      	mov	r2, r0
 8008702:	6260      	str	r0, [r4, #36]	; 0x24
 8008704:	b920      	cbnz	r0, 8008710 <_dtoa_r+0x38>
 8008706:	4bb2      	ldr	r3, [pc, #712]	; (80089d0 <_dtoa_r+0x2f8>)
 8008708:	21ea      	movs	r1, #234	; 0xea
 800870a:	48b2      	ldr	r0, [pc, #712]	; (80089d4 <_dtoa_r+0x2fc>)
 800870c:	f001 fdf4 	bl	800a2f8 <__assert_func>
 8008710:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008714:	6005      	str	r5, [r0, #0]
 8008716:	60c5      	str	r5, [r0, #12]
 8008718:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800871a:	6819      	ldr	r1, [r3, #0]
 800871c:	b151      	cbz	r1, 8008734 <_dtoa_r+0x5c>
 800871e:	685a      	ldr	r2, [r3, #4]
 8008720:	604a      	str	r2, [r1, #4]
 8008722:	2301      	movs	r3, #1
 8008724:	4093      	lsls	r3, r2
 8008726:	608b      	str	r3, [r1, #8]
 8008728:	4620      	mov	r0, r4
 800872a:	f001 f82d 	bl	8009788 <_Bfree>
 800872e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008730:	2200      	movs	r2, #0
 8008732:	601a      	str	r2, [r3, #0]
 8008734:	1e3b      	subs	r3, r7, #0
 8008736:	bfb9      	ittee	lt
 8008738:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800873c:	9303      	strlt	r3, [sp, #12]
 800873e:	2300      	movge	r3, #0
 8008740:	f8c8 3000 	strge.w	r3, [r8]
 8008744:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8008748:	4ba3      	ldr	r3, [pc, #652]	; (80089d8 <_dtoa_r+0x300>)
 800874a:	bfbc      	itt	lt
 800874c:	2201      	movlt	r2, #1
 800874e:	f8c8 2000 	strlt.w	r2, [r8]
 8008752:	ea33 0309 	bics.w	r3, r3, r9
 8008756:	d11b      	bne.n	8008790 <_dtoa_r+0xb8>
 8008758:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800875a:	f242 730f 	movw	r3, #9999	; 0x270f
 800875e:	6013      	str	r3, [r2, #0]
 8008760:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008764:	4333      	orrs	r3, r6
 8008766:	f000 857a 	beq.w	800925e <_dtoa_r+0xb86>
 800876a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800876c:	b963      	cbnz	r3, 8008788 <_dtoa_r+0xb0>
 800876e:	4b9b      	ldr	r3, [pc, #620]	; (80089dc <_dtoa_r+0x304>)
 8008770:	e024      	b.n	80087bc <_dtoa_r+0xe4>
 8008772:	4b9b      	ldr	r3, [pc, #620]	; (80089e0 <_dtoa_r+0x308>)
 8008774:	9300      	str	r3, [sp, #0]
 8008776:	3308      	adds	r3, #8
 8008778:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800877a:	6013      	str	r3, [r2, #0]
 800877c:	9800      	ldr	r0, [sp, #0]
 800877e:	b015      	add	sp, #84	; 0x54
 8008780:	ecbd 8b02 	vpop	{d8}
 8008784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008788:	4b94      	ldr	r3, [pc, #592]	; (80089dc <_dtoa_r+0x304>)
 800878a:	9300      	str	r3, [sp, #0]
 800878c:	3303      	adds	r3, #3
 800878e:	e7f3      	b.n	8008778 <_dtoa_r+0xa0>
 8008790:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008794:	2200      	movs	r2, #0
 8008796:	ec51 0b17 	vmov	r0, r1, d7
 800879a:	2300      	movs	r3, #0
 800879c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80087a0:	f7f8 f99a 	bl	8000ad8 <__aeabi_dcmpeq>
 80087a4:	4680      	mov	r8, r0
 80087a6:	b158      	cbz	r0, 80087c0 <_dtoa_r+0xe8>
 80087a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80087aa:	2301      	movs	r3, #1
 80087ac:	6013      	str	r3, [r2, #0]
 80087ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	f000 8551 	beq.w	8009258 <_dtoa_r+0xb80>
 80087b6:	488b      	ldr	r0, [pc, #556]	; (80089e4 <_dtoa_r+0x30c>)
 80087b8:	6018      	str	r0, [r3, #0]
 80087ba:	1e43      	subs	r3, r0, #1
 80087bc:	9300      	str	r3, [sp, #0]
 80087be:	e7dd      	b.n	800877c <_dtoa_r+0xa4>
 80087c0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80087c4:	aa12      	add	r2, sp, #72	; 0x48
 80087c6:	a913      	add	r1, sp, #76	; 0x4c
 80087c8:	4620      	mov	r0, r4
 80087ca:	f001 fabf 	bl	8009d4c <__d2b>
 80087ce:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80087d2:	4683      	mov	fp, r0
 80087d4:	2d00      	cmp	r5, #0
 80087d6:	d07c      	beq.n	80088d2 <_dtoa_r+0x1fa>
 80087d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087da:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80087de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80087e2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80087e6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80087ea:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80087ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80087f2:	4b7d      	ldr	r3, [pc, #500]	; (80089e8 <_dtoa_r+0x310>)
 80087f4:	2200      	movs	r2, #0
 80087f6:	4630      	mov	r0, r6
 80087f8:	4639      	mov	r1, r7
 80087fa:	f7f7 fd4d 	bl	8000298 <__aeabi_dsub>
 80087fe:	a36e      	add	r3, pc, #440	; (adr r3, 80089b8 <_dtoa_r+0x2e0>)
 8008800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008804:	f7f7 ff00 	bl	8000608 <__aeabi_dmul>
 8008808:	a36d      	add	r3, pc, #436	; (adr r3, 80089c0 <_dtoa_r+0x2e8>)
 800880a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800880e:	f7f7 fd45 	bl	800029c <__adddf3>
 8008812:	4606      	mov	r6, r0
 8008814:	4628      	mov	r0, r5
 8008816:	460f      	mov	r7, r1
 8008818:	f7f7 fe8c 	bl	8000534 <__aeabi_i2d>
 800881c:	a36a      	add	r3, pc, #424	; (adr r3, 80089c8 <_dtoa_r+0x2f0>)
 800881e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008822:	f7f7 fef1 	bl	8000608 <__aeabi_dmul>
 8008826:	4602      	mov	r2, r0
 8008828:	460b      	mov	r3, r1
 800882a:	4630      	mov	r0, r6
 800882c:	4639      	mov	r1, r7
 800882e:	f7f7 fd35 	bl	800029c <__adddf3>
 8008832:	4606      	mov	r6, r0
 8008834:	460f      	mov	r7, r1
 8008836:	f7f8 f997 	bl	8000b68 <__aeabi_d2iz>
 800883a:	2200      	movs	r2, #0
 800883c:	4682      	mov	sl, r0
 800883e:	2300      	movs	r3, #0
 8008840:	4630      	mov	r0, r6
 8008842:	4639      	mov	r1, r7
 8008844:	f7f8 f952 	bl	8000aec <__aeabi_dcmplt>
 8008848:	b148      	cbz	r0, 800885e <_dtoa_r+0x186>
 800884a:	4650      	mov	r0, sl
 800884c:	f7f7 fe72 	bl	8000534 <__aeabi_i2d>
 8008850:	4632      	mov	r2, r6
 8008852:	463b      	mov	r3, r7
 8008854:	f7f8 f940 	bl	8000ad8 <__aeabi_dcmpeq>
 8008858:	b908      	cbnz	r0, 800885e <_dtoa_r+0x186>
 800885a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800885e:	f1ba 0f16 	cmp.w	sl, #22
 8008862:	d854      	bhi.n	800890e <_dtoa_r+0x236>
 8008864:	4b61      	ldr	r3, [pc, #388]	; (80089ec <_dtoa_r+0x314>)
 8008866:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800886a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800886e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008872:	f7f8 f93b 	bl	8000aec <__aeabi_dcmplt>
 8008876:	2800      	cmp	r0, #0
 8008878:	d04b      	beq.n	8008912 <_dtoa_r+0x23a>
 800887a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800887e:	2300      	movs	r3, #0
 8008880:	930e      	str	r3, [sp, #56]	; 0x38
 8008882:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008884:	1b5d      	subs	r5, r3, r5
 8008886:	1e6b      	subs	r3, r5, #1
 8008888:	9304      	str	r3, [sp, #16]
 800888a:	bf43      	ittte	mi
 800888c:	2300      	movmi	r3, #0
 800888e:	f1c5 0801 	rsbmi	r8, r5, #1
 8008892:	9304      	strmi	r3, [sp, #16]
 8008894:	f04f 0800 	movpl.w	r8, #0
 8008898:	f1ba 0f00 	cmp.w	sl, #0
 800889c:	db3b      	blt.n	8008916 <_dtoa_r+0x23e>
 800889e:	9b04      	ldr	r3, [sp, #16]
 80088a0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80088a4:	4453      	add	r3, sl
 80088a6:	9304      	str	r3, [sp, #16]
 80088a8:	2300      	movs	r3, #0
 80088aa:	9306      	str	r3, [sp, #24]
 80088ac:	9b05      	ldr	r3, [sp, #20]
 80088ae:	2b09      	cmp	r3, #9
 80088b0:	d869      	bhi.n	8008986 <_dtoa_r+0x2ae>
 80088b2:	2b05      	cmp	r3, #5
 80088b4:	bfc4      	itt	gt
 80088b6:	3b04      	subgt	r3, #4
 80088b8:	9305      	strgt	r3, [sp, #20]
 80088ba:	9b05      	ldr	r3, [sp, #20]
 80088bc:	f1a3 0302 	sub.w	r3, r3, #2
 80088c0:	bfcc      	ite	gt
 80088c2:	2500      	movgt	r5, #0
 80088c4:	2501      	movle	r5, #1
 80088c6:	2b03      	cmp	r3, #3
 80088c8:	d869      	bhi.n	800899e <_dtoa_r+0x2c6>
 80088ca:	e8df f003 	tbb	[pc, r3]
 80088ce:	4e2c      	.short	0x4e2c
 80088d0:	5a4c      	.short	0x5a4c
 80088d2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80088d6:	441d      	add	r5, r3
 80088d8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80088dc:	2b20      	cmp	r3, #32
 80088de:	bfc1      	itttt	gt
 80088e0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80088e4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80088e8:	fa09 f303 	lslgt.w	r3, r9, r3
 80088ec:	fa26 f000 	lsrgt.w	r0, r6, r0
 80088f0:	bfda      	itte	le
 80088f2:	f1c3 0320 	rsble	r3, r3, #32
 80088f6:	fa06 f003 	lslle.w	r0, r6, r3
 80088fa:	4318      	orrgt	r0, r3
 80088fc:	f7f7 fe0a 	bl	8000514 <__aeabi_ui2d>
 8008900:	2301      	movs	r3, #1
 8008902:	4606      	mov	r6, r0
 8008904:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008908:	3d01      	subs	r5, #1
 800890a:	9310      	str	r3, [sp, #64]	; 0x40
 800890c:	e771      	b.n	80087f2 <_dtoa_r+0x11a>
 800890e:	2301      	movs	r3, #1
 8008910:	e7b6      	b.n	8008880 <_dtoa_r+0x1a8>
 8008912:	900e      	str	r0, [sp, #56]	; 0x38
 8008914:	e7b5      	b.n	8008882 <_dtoa_r+0x1aa>
 8008916:	f1ca 0300 	rsb	r3, sl, #0
 800891a:	9306      	str	r3, [sp, #24]
 800891c:	2300      	movs	r3, #0
 800891e:	eba8 080a 	sub.w	r8, r8, sl
 8008922:	930d      	str	r3, [sp, #52]	; 0x34
 8008924:	e7c2      	b.n	80088ac <_dtoa_r+0x1d4>
 8008926:	2300      	movs	r3, #0
 8008928:	9308      	str	r3, [sp, #32]
 800892a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800892c:	2b00      	cmp	r3, #0
 800892e:	dc39      	bgt.n	80089a4 <_dtoa_r+0x2cc>
 8008930:	f04f 0901 	mov.w	r9, #1
 8008934:	f8cd 9004 	str.w	r9, [sp, #4]
 8008938:	464b      	mov	r3, r9
 800893a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800893e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008940:	2200      	movs	r2, #0
 8008942:	6042      	str	r2, [r0, #4]
 8008944:	2204      	movs	r2, #4
 8008946:	f102 0614 	add.w	r6, r2, #20
 800894a:	429e      	cmp	r6, r3
 800894c:	6841      	ldr	r1, [r0, #4]
 800894e:	d92f      	bls.n	80089b0 <_dtoa_r+0x2d8>
 8008950:	4620      	mov	r0, r4
 8008952:	f000 fed9 	bl	8009708 <_Balloc>
 8008956:	9000      	str	r0, [sp, #0]
 8008958:	2800      	cmp	r0, #0
 800895a:	d14b      	bne.n	80089f4 <_dtoa_r+0x31c>
 800895c:	4b24      	ldr	r3, [pc, #144]	; (80089f0 <_dtoa_r+0x318>)
 800895e:	4602      	mov	r2, r0
 8008960:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008964:	e6d1      	b.n	800870a <_dtoa_r+0x32>
 8008966:	2301      	movs	r3, #1
 8008968:	e7de      	b.n	8008928 <_dtoa_r+0x250>
 800896a:	2300      	movs	r3, #0
 800896c:	9308      	str	r3, [sp, #32]
 800896e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008970:	eb0a 0903 	add.w	r9, sl, r3
 8008974:	f109 0301 	add.w	r3, r9, #1
 8008978:	2b01      	cmp	r3, #1
 800897a:	9301      	str	r3, [sp, #4]
 800897c:	bfb8      	it	lt
 800897e:	2301      	movlt	r3, #1
 8008980:	e7dd      	b.n	800893e <_dtoa_r+0x266>
 8008982:	2301      	movs	r3, #1
 8008984:	e7f2      	b.n	800896c <_dtoa_r+0x294>
 8008986:	2501      	movs	r5, #1
 8008988:	2300      	movs	r3, #0
 800898a:	9305      	str	r3, [sp, #20]
 800898c:	9508      	str	r5, [sp, #32]
 800898e:	f04f 39ff 	mov.w	r9, #4294967295
 8008992:	2200      	movs	r2, #0
 8008994:	f8cd 9004 	str.w	r9, [sp, #4]
 8008998:	2312      	movs	r3, #18
 800899a:	9209      	str	r2, [sp, #36]	; 0x24
 800899c:	e7cf      	b.n	800893e <_dtoa_r+0x266>
 800899e:	2301      	movs	r3, #1
 80089a0:	9308      	str	r3, [sp, #32]
 80089a2:	e7f4      	b.n	800898e <_dtoa_r+0x2b6>
 80089a4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80089a8:	f8cd 9004 	str.w	r9, [sp, #4]
 80089ac:	464b      	mov	r3, r9
 80089ae:	e7c6      	b.n	800893e <_dtoa_r+0x266>
 80089b0:	3101      	adds	r1, #1
 80089b2:	6041      	str	r1, [r0, #4]
 80089b4:	0052      	lsls	r2, r2, #1
 80089b6:	e7c6      	b.n	8008946 <_dtoa_r+0x26e>
 80089b8:	636f4361 	.word	0x636f4361
 80089bc:	3fd287a7 	.word	0x3fd287a7
 80089c0:	8b60c8b3 	.word	0x8b60c8b3
 80089c4:	3fc68a28 	.word	0x3fc68a28
 80089c8:	509f79fb 	.word	0x509f79fb
 80089cc:	3fd34413 	.word	0x3fd34413
 80089d0:	0800a651 	.word	0x0800a651
 80089d4:	0800a668 	.word	0x0800a668
 80089d8:	7ff00000 	.word	0x7ff00000
 80089dc:	0800a64d 	.word	0x0800a64d
 80089e0:	0800a644 	.word	0x0800a644
 80089e4:	0800a621 	.word	0x0800a621
 80089e8:	3ff80000 	.word	0x3ff80000
 80089ec:	0800a7c0 	.word	0x0800a7c0
 80089f0:	0800a6c7 	.word	0x0800a6c7
 80089f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80089f6:	9a00      	ldr	r2, [sp, #0]
 80089f8:	601a      	str	r2, [r3, #0]
 80089fa:	9b01      	ldr	r3, [sp, #4]
 80089fc:	2b0e      	cmp	r3, #14
 80089fe:	f200 80ad 	bhi.w	8008b5c <_dtoa_r+0x484>
 8008a02:	2d00      	cmp	r5, #0
 8008a04:	f000 80aa 	beq.w	8008b5c <_dtoa_r+0x484>
 8008a08:	f1ba 0f00 	cmp.w	sl, #0
 8008a0c:	dd36      	ble.n	8008a7c <_dtoa_r+0x3a4>
 8008a0e:	4ac3      	ldr	r2, [pc, #780]	; (8008d1c <_dtoa_r+0x644>)
 8008a10:	f00a 030f 	and.w	r3, sl, #15
 8008a14:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008a18:	ed93 7b00 	vldr	d7, [r3]
 8008a1c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008a20:	ea4f 172a 	mov.w	r7, sl, asr #4
 8008a24:	eeb0 8a47 	vmov.f32	s16, s14
 8008a28:	eef0 8a67 	vmov.f32	s17, s15
 8008a2c:	d016      	beq.n	8008a5c <_dtoa_r+0x384>
 8008a2e:	4bbc      	ldr	r3, [pc, #752]	; (8008d20 <_dtoa_r+0x648>)
 8008a30:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008a34:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008a38:	f7f7 ff10 	bl	800085c <__aeabi_ddiv>
 8008a3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a40:	f007 070f 	and.w	r7, r7, #15
 8008a44:	2503      	movs	r5, #3
 8008a46:	4eb6      	ldr	r6, [pc, #728]	; (8008d20 <_dtoa_r+0x648>)
 8008a48:	b957      	cbnz	r7, 8008a60 <_dtoa_r+0x388>
 8008a4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a4e:	ec53 2b18 	vmov	r2, r3, d8
 8008a52:	f7f7 ff03 	bl	800085c <__aeabi_ddiv>
 8008a56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a5a:	e029      	b.n	8008ab0 <_dtoa_r+0x3d8>
 8008a5c:	2502      	movs	r5, #2
 8008a5e:	e7f2      	b.n	8008a46 <_dtoa_r+0x36e>
 8008a60:	07f9      	lsls	r1, r7, #31
 8008a62:	d508      	bpl.n	8008a76 <_dtoa_r+0x39e>
 8008a64:	ec51 0b18 	vmov	r0, r1, d8
 8008a68:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008a6c:	f7f7 fdcc 	bl	8000608 <__aeabi_dmul>
 8008a70:	ec41 0b18 	vmov	d8, r0, r1
 8008a74:	3501      	adds	r5, #1
 8008a76:	107f      	asrs	r7, r7, #1
 8008a78:	3608      	adds	r6, #8
 8008a7a:	e7e5      	b.n	8008a48 <_dtoa_r+0x370>
 8008a7c:	f000 80a6 	beq.w	8008bcc <_dtoa_r+0x4f4>
 8008a80:	f1ca 0600 	rsb	r6, sl, #0
 8008a84:	4ba5      	ldr	r3, [pc, #660]	; (8008d1c <_dtoa_r+0x644>)
 8008a86:	4fa6      	ldr	r7, [pc, #664]	; (8008d20 <_dtoa_r+0x648>)
 8008a88:	f006 020f 	and.w	r2, r6, #15
 8008a8c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a94:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008a98:	f7f7 fdb6 	bl	8000608 <__aeabi_dmul>
 8008a9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008aa0:	1136      	asrs	r6, r6, #4
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	2502      	movs	r5, #2
 8008aa6:	2e00      	cmp	r6, #0
 8008aa8:	f040 8085 	bne.w	8008bb6 <_dtoa_r+0x4de>
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d1d2      	bne.n	8008a56 <_dtoa_r+0x37e>
 8008ab0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	f000 808c 	beq.w	8008bd0 <_dtoa_r+0x4f8>
 8008ab8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008abc:	4b99      	ldr	r3, [pc, #612]	; (8008d24 <_dtoa_r+0x64c>)
 8008abe:	2200      	movs	r2, #0
 8008ac0:	4630      	mov	r0, r6
 8008ac2:	4639      	mov	r1, r7
 8008ac4:	f7f8 f812 	bl	8000aec <__aeabi_dcmplt>
 8008ac8:	2800      	cmp	r0, #0
 8008aca:	f000 8081 	beq.w	8008bd0 <_dtoa_r+0x4f8>
 8008ace:	9b01      	ldr	r3, [sp, #4]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d07d      	beq.n	8008bd0 <_dtoa_r+0x4f8>
 8008ad4:	f1b9 0f00 	cmp.w	r9, #0
 8008ad8:	dd3c      	ble.n	8008b54 <_dtoa_r+0x47c>
 8008ada:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008ade:	9307      	str	r3, [sp, #28]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	4b91      	ldr	r3, [pc, #580]	; (8008d28 <_dtoa_r+0x650>)
 8008ae4:	4630      	mov	r0, r6
 8008ae6:	4639      	mov	r1, r7
 8008ae8:	f7f7 fd8e 	bl	8000608 <__aeabi_dmul>
 8008aec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008af0:	3501      	adds	r5, #1
 8008af2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8008af6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008afa:	4628      	mov	r0, r5
 8008afc:	f7f7 fd1a 	bl	8000534 <__aeabi_i2d>
 8008b00:	4632      	mov	r2, r6
 8008b02:	463b      	mov	r3, r7
 8008b04:	f7f7 fd80 	bl	8000608 <__aeabi_dmul>
 8008b08:	4b88      	ldr	r3, [pc, #544]	; (8008d2c <_dtoa_r+0x654>)
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	f7f7 fbc6 	bl	800029c <__adddf3>
 8008b10:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008b14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b18:	9303      	str	r3, [sp, #12]
 8008b1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d15c      	bne.n	8008bda <_dtoa_r+0x502>
 8008b20:	4b83      	ldr	r3, [pc, #524]	; (8008d30 <_dtoa_r+0x658>)
 8008b22:	2200      	movs	r2, #0
 8008b24:	4630      	mov	r0, r6
 8008b26:	4639      	mov	r1, r7
 8008b28:	f7f7 fbb6 	bl	8000298 <__aeabi_dsub>
 8008b2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008b30:	4606      	mov	r6, r0
 8008b32:	460f      	mov	r7, r1
 8008b34:	f7f7 fff8 	bl	8000b28 <__aeabi_dcmpgt>
 8008b38:	2800      	cmp	r0, #0
 8008b3a:	f040 8296 	bne.w	800906a <_dtoa_r+0x992>
 8008b3e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008b42:	4630      	mov	r0, r6
 8008b44:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008b48:	4639      	mov	r1, r7
 8008b4a:	f7f7 ffcf 	bl	8000aec <__aeabi_dcmplt>
 8008b4e:	2800      	cmp	r0, #0
 8008b50:	f040 8288 	bne.w	8009064 <_dtoa_r+0x98c>
 8008b54:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008b58:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008b5c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	f2c0 8158 	blt.w	8008e14 <_dtoa_r+0x73c>
 8008b64:	f1ba 0f0e 	cmp.w	sl, #14
 8008b68:	f300 8154 	bgt.w	8008e14 <_dtoa_r+0x73c>
 8008b6c:	4b6b      	ldr	r3, [pc, #428]	; (8008d1c <_dtoa_r+0x644>)
 8008b6e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008b72:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008b76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	f280 80e3 	bge.w	8008d44 <_dtoa_r+0x66c>
 8008b7e:	9b01      	ldr	r3, [sp, #4]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	f300 80df 	bgt.w	8008d44 <_dtoa_r+0x66c>
 8008b86:	f040 826d 	bne.w	8009064 <_dtoa_r+0x98c>
 8008b8a:	4b69      	ldr	r3, [pc, #420]	; (8008d30 <_dtoa_r+0x658>)
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	4640      	mov	r0, r8
 8008b90:	4649      	mov	r1, r9
 8008b92:	f7f7 fd39 	bl	8000608 <__aeabi_dmul>
 8008b96:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008b9a:	f7f7 ffbb 	bl	8000b14 <__aeabi_dcmpge>
 8008b9e:	9e01      	ldr	r6, [sp, #4]
 8008ba0:	4637      	mov	r7, r6
 8008ba2:	2800      	cmp	r0, #0
 8008ba4:	f040 8243 	bne.w	800902e <_dtoa_r+0x956>
 8008ba8:	9d00      	ldr	r5, [sp, #0]
 8008baa:	2331      	movs	r3, #49	; 0x31
 8008bac:	f805 3b01 	strb.w	r3, [r5], #1
 8008bb0:	f10a 0a01 	add.w	sl, sl, #1
 8008bb4:	e23f      	b.n	8009036 <_dtoa_r+0x95e>
 8008bb6:	07f2      	lsls	r2, r6, #31
 8008bb8:	d505      	bpl.n	8008bc6 <_dtoa_r+0x4ee>
 8008bba:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008bbe:	f7f7 fd23 	bl	8000608 <__aeabi_dmul>
 8008bc2:	3501      	adds	r5, #1
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	1076      	asrs	r6, r6, #1
 8008bc8:	3708      	adds	r7, #8
 8008bca:	e76c      	b.n	8008aa6 <_dtoa_r+0x3ce>
 8008bcc:	2502      	movs	r5, #2
 8008bce:	e76f      	b.n	8008ab0 <_dtoa_r+0x3d8>
 8008bd0:	9b01      	ldr	r3, [sp, #4]
 8008bd2:	f8cd a01c 	str.w	sl, [sp, #28]
 8008bd6:	930c      	str	r3, [sp, #48]	; 0x30
 8008bd8:	e78d      	b.n	8008af6 <_dtoa_r+0x41e>
 8008bda:	9900      	ldr	r1, [sp, #0]
 8008bdc:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008bde:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008be0:	4b4e      	ldr	r3, [pc, #312]	; (8008d1c <_dtoa_r+0x644>)
 8008be2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008be6:	4401      	add	r1, r0
 8008be8:	9102      	str	r1, [sp, #8]
 8008bea:	9908      	ldr	r1, [sp, #32]
 8008bec:	eeb0 8a47 	vmov.f32	s16, s14
 8008bf0:	eef0 8a67 	vmov.f32	s17, s15
 8008bf4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008bf8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008bfc:	2900      	cmp	r1, #0
 8008bfe:	d045      	beq.n	8008c8c <_dtoa_r+0x5b4>
 8008c00:	494c      	ldr	r1, [pc, #304]	; (8008d34 <_dtoa_r+0x65c>)
 8008c02:	2000      	movs	r0, #0
 8008c04:	f7f7 fe2a 	bl	800085c <__aeabi_ddiv>
 8008c08:	ec53 2b18 	vmov	r2, r3, d8
 8008c0c:	f7f7 fb44 	bl	8000298 <__aeabi_dsub>
 8008c10:	9d00      	ldr	r5, [sp, #0]
 8008c12:	ec41 0b18 	vmov	d8, r0, r1
 8008c16:	4639      	mov	r1, r7
 8008c18:	4630      	mov	r0, r6
 8008c1a:	f7f7 ffa5 	bl	8000b68 <__aeabi_d2iz>
 8008c1e:	900c      	str	r0, [sp, #48]	; 0x30
 8008c20:	f7f7 fc88 	bl	8000534 <__aeabi_i2d>
 8008c24:	4602      	mov	r2, r0
 8008c26:	460b      	mov	r3, r1
 8008c28:	4630      	mov	r0, r6
 8008c2a:	4639      	mov	r1, r7
 8008c2c:	f7f7 fb34 	bl	8000298 <__aeabi_dsub>
 8008c30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c32:	3330      	adds	r3, #48	; 0x30
 8008c34:	f805 3b01 	strb.w	r3, [r5], #1
 8008c38:	ec53 2b18 	vmov	r2, r3, d8
 8008c3c:	4606      	mov	r6, r0
 8008c3e:	460f      	mov	r7, r1
 8008c40:	f7f7 ff54 	bl	8000aec <__aeabi_dcmplt>
 8008c44:	2800      	cmp	r0, #0
 8008c46:	d165      	bne.n	8008d14 <_dtoa_r+0x63c>
 8008c48:	4632      	mov	r2, r6
 8008c4a:	463b      	mov	r3, r7
 8008c4c:	4935      	ldr	r1, [pc, #212]	; (8008d24 <_dtoa_r+0x64c>)
 8008c4e:	2000      	movs	r0, #0
 8008c50:	f7f7 fb22 	bl	8000298 <__aeabi_dsub>
 8008c54:	ec53 2b18 	vmov	r2, r3, d8
 8008c58:	f7f7 ff48 	bl	8000aec <__aeabi_dcmplt>
 8008c5c:	2800      	cmp	r0, #0
 8008c5e:	f040 80b9 	bne.w	8008dd4 <_dtoa_r+0x6fc>
 8008c62:	9b02      	ldr	r3, [sp, #8]
 8008c64:	429d      	cmp	r5, r3
 8008c66:	f43f af75 	beq.w	8008b54 <_dtoa_r+0x47c>
 8008c6a:	4b2f      	ldr	r3, [pc, #188]	; (8008d28 <_dtoa_r+0x650>)
 8008c6c:	ec51 0b18 	vmov	r0, r1, d8
 8008c70:	2200      	movs	r2, #0
 8008c72:	f7f7 fcc9 	bl	8000608 <__aeabi_dmul>
 8008c76:	4b2c      	ldr	r3, [pc, #176]	; (8008d28 <_dtoa_r+0x650>)
 8008c78:	ec41 0b18 	vmov	d8, r0, r1
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	4630      	mov	r0, r6
 8008c80:	4639      	mov	r1, r7
 8008c82:	f7f7 fcc1 	bl	8000608 <__aeabi_dmul>
 8008c86:	4606      	mov	r6, r0
 8008c88:	460f      	mov	r7, r1
 8008c8a:	e7c4      	b.n	8008c16 <_dtoa_r+0x53e>
 8008c8c:	ec51 0b17 	vmov	r0, r1, d7
 8008c90:	f7f7 fcba 	bl	8000608 <__aeabi_dmul>
 8008c94:	9b02      	ldr	r3, [sp, #8]
 8008c96:	9d00      	ldr	r5, [sp, #0]
 8008c98:	930c      	str	r3, [sp, #48]	; 0x30
 8008c9a:	ec41 0b18 	vmov	d8, r0, r1
 8008c9e:	4639      	mov	r1, r7
 8008ca0:	4630      	mov	r0, r6
 8008ca2:	f7f7 ff61 	bl	8000b68 <__aeabi_d2iz>
 8008ca6:	9011      	str	r0, [sp, #68]	; 0x44
 8008ca8:	f7f7 fc44 	bl	8000534 <__aeabi_i2d>
 8008cac:	4602      	mov	r2, r0
 8008cae:	460b      	mov	r3, r1
 8008cb0:	4630      	mov	r0, r6
 8008cb2:	4639      	mov	r1, r7
 8008cb4:	f7f7 faf0 	bl	8000298 <__aeabi_dsub>
 8008cb8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008cba:	3330      	adds	r3, #48	; 0x30
 8008cbc:	f805 3b01 	strb.w	r3, [r5], #1
 8008cc0:	9b02      	ldr	r3, [sp, #8]
 8008cc2:	429d      	cmp	r5, r3
 8008cc4:	4606      	mov	r6, r0
 8008cc6:	460f      	mov	r7, r1
 8008cc8:	f04f 0200 	mov.w	r2, #0
 8008ccc:	d134      	bne.n	8008d38 <_dtoa_r+0x660>
 8008cce:	4b19      	ldr	r3, [pc, #100]	; (8008d34 <_dtoa_r+0x65c>)
 8008cd0:	ec51 0b18 	vmov	r0, r1, d8
 8008cd4:	f7f7 fae2 	bl	800029c <__adddf3>
 8008cd8:	4602      	mov	r2, r0
 8008cda:	460b      	mov	r3, r1
 8008cdc:	4630      	mov	r0, r6
 8008cde:	4639      	mov	r1, r7
 8008ce0:	f7f7 ff22 	bl	8000b28 <__aeabi_dcmpgt>
 8008ce4:	2800      	cmp	r0, #0
 8008ce6:	d175      	bne.n	8008dd4 <_dtoa_r+0x6fc>
 8008ce8:	ec53 2b18 	vmov	r2, r3, d8
 8008cec:	4911      	ldr	r1, [pc, #68]	; (8008d34 <_dtoa_r+0x65c>)
 8008cee:	2000      	movs	r0, #0
 8008cf0:	f7f7 fad2 	bl	8000298 <__aeabi_dsub>
 8008cf4:	4602      	mov	r2, r0
 8008cf6:	460b      	mov	r3, r1
 8008cf8:	4630      	mov	r0, r6
 8008cfa:	4639      	mov	r1, r7
 8008cfc:	f7f7 fef6 	bl	8000aec <__aeabi_dcmplt>
 8008d00:	2800      	cmp	r0, #0
 8008d02:	f43f af27 	beq.w	8008b54 <_dtoa_r+0x47c>
 8008d06:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008d08:	1e6b      	subs	r3, r5, #1
 8008d0a:	930c      	str	r3, [sp, #48]	; 0x30
 8008d0c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008d10:	2b30      	cmp	r3, #48	; 0x30
 8008d12:	d0f8      	beq.n	8008d06 <_dtoa_r+0x62e>
 8008d14:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008d18:	e04a      	b.n	8008db0 <_dtoa_r+0x6d8>
 8008d1a:	bf00      	nop
 8008d1c:	0800a7c0 	.word	0x0800a7c0
 8008d20:	0800a798 	.word	0x0800a798
 8008d24:	3ff00000 	.word	0x3ff00000
 8008d28:	40240000 	.word	0x40240000
 8008d2c:	401c0000 	.word	0x401c0000
 8008d30:	40140000 	.word	0x40140000
 8008d34:	3fe00000 	.word	0x3fe00000
 8008d38:	4baf      	ldr	r3, [pc, #700]	; (8008ff8 <_dtoa_r+0x920>)
 8008d3a:	f7f7 fc65 	bl	8000608 <__aeabi_dmul>
 8008d3e:	4606      	mov	r6, r0
 8008d40:	460f      	mov	r7, r1
 8008d42:	e7ac      	b.n	8008c9e <_dtoa_r+0x5c6>
 8008d44:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008d48:	9d00      	ldr	r5, [sp, #0]
 8008d4a:	4642      	mov	r2, r8
 8008d4c:	464b      	mov	r3, r9
 8008d4e:	4630      	mov	r0, r6
 8008d50:	4639      	mov	r1, r7
 8008d52:	f7f7 fd83 	bl	800085c <__aeabi_ddiv>
 8008d56:	f7f7 ff07 	bl	8000b68 <__aeabi_d2iz>
 8008d5a:	9002      	str	r0, [sp, #8]
 8008d5c:	f7f7 fbea 	bl	8000534 <__aeabi_i2d>
 8008d60:	4642      	mov	r2, r8
 8008d62:	464b      	mov	r3, r9
 8008d64:	f7f7 fc50 	bl	8000608 <__aeabi_dmul>
 8008d68:	4602      	mov	r2, r0
 8008d6a:	460b      	mov	r3, r1
 8008d6c:	4630      	mov	r0, r6
 8008d6e:	4639      	mov	r1, r7
 8008d70:	f7f7 fa92 	bl	8000298 <__aeabi_dsub>
 8008d74:	9e02      	ldr	r6, [sp, #8]
 8008d76:	9f01      	ldr	r7, [sp, #4]
 8008d78:	3630      	adds	r6, #48	; 0x30
 8008d7a:	f805 6b01 	strb.w	r6, [r5], #1
 8008d7e:	9e00      	ldr	r6, [sp, #0]
 8008d80:	1bae      	subs	r6, r5, r6
 8008d82:	42b7      	cmp	r7, r6
 8008d84:	4602      	mov	r2, r0
 8008d86:	460b      	mov	r3, r1
 8008d88:	d137      	bne.n	8008dfa <_dtoa_r+0x722>
 8008d8a:	f7f7 fa87 	bl	800029c <__adddf3>
 8008d8e:	4642      	mov	r2, r8
 8008d90:	464b      	mov	r3, r9
 8008d92:	4606      	mov	r6, r0
 8008d94:	460f      	mov	r7, r1
 8008d96:	f7f7 fec7 	bl	8000b28 <__aeabi_dcmpgt>
 8008d9a:	b9c8      	cbnz	r0, 8008dd0 <_dtoa_r+0x6f8>
 8008d9c:	4642      	mov	r2, r8
 8008d9e:	464b      	mov	r3, r9
 8008da0:	4630      	mov	r0, r6
 8008da2:	4639      	mov	r1, r7
 8008da4:	f7f7 fe98 	bl	8000ad8 <__aeabi_dcmpeq>
 8008da8:	b110      	cbz	r0, 8008db0 <_dtoa_r+0x6d8>
 8008daa:	9b02      	ldr	r3, [sp, #8]
 8008dac:	07d9      	lsls	r1, r3, #31
 8008dae:	d40f      	bmi.n	8008dd0 <_dtoa_r+0x6f8>
 8008db0:	4620      	mov	r0, r4
 8008db2:	4659      	mov	r1, fp
 8008db4:	f000 fce8 	bl	8009788 <_Bfree>
 8008db8:	2300      	movs	r3, #0
 8008dba:	702b      	strb	r3, [r5, #0]
 8008dbc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008dbe:	f10a 0001 	add.w	r0, sl, #1
 8008dc2:	6018      	str	r0, [r3, #0]
 8008dc4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	f43f acd8 	beq.w	800877c <_dtoa_r+0xa4>
 8008dcc:	601d      	str	r5, [r3, #0]
 8008dce:	e4d5      	b.n	800877c <_dtoa_r+0xa4>
 8008dd0:	f8cd a01c 	str.w	sl, [sp, #28]
 8008dd4:	462b      	mov	r3, r5
 8008dd6:	461d      	mov	r5, r3
 8008dd8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008ddc:	2a39      	cmp	r2, #57	; 0x39
 8008dde:	d108      	bne.n	8008df2 <_dtoa_r+0x71a>
 8008de0:	9a00      	ldr	r2, [sp, #0]
 8008de2:	429a      	cmp	r2, r3
 8008de4:	d1f7      	bne.n	8008dd6 <_dtoa_r+0x6fe>
 8008de6:	9a07      	ldr	r2, [sp, #28]
 8008de8:	9900      	ldr	r1, [sp, #0]
 8008dea:	3201      	adds	r2, #1
 8008dec:	9207      	str	r2, [sp, #28]
 8008dee:	2230      	movs	r2, #48	; 0x30
 8008df0:	700a      	strb	r2, [r1, #0]
 8008df2:	781a      	ldrb	r2, [r3, #0]
 8008df4:	3201      	adds	r2, #1
 8008df6:	701a      	strb	r2, [r3, #0]
 8008df8:	e78c      	b.n	8008d14 <_dtoa_r+0x63c>
 8008dfa:	4b7f      	ldr	r3, [pc, #508]	; (8008ff8 <_dtoa_r+0x920>)
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	f7f7 fc03 	bl	8000608 <__aeabi_dmul>
 8008e02:	2200      	movs	r2, #0
 8008e04:	2300      	movs	r3, #0
 8008e06:	4606      	mov	r6, r0
 8008e08:	460f      	mov	r7, r1
 8008e0a:	f7f7 fe65 	bl	8000ad8 <__aeabi_dcmpeq>
 8008e0e:	2800      	cmp	r0, #0
 8008e10:	d09b      	beq.n	8008d4a <_dtoa_r+0x672>
 8008e12:	e7cd      	b.n	8008db0 <_dtoa_r+0x6d8>
 8008e14:	9a08      	ldr	r2, [sp, #32]
 8008e16:	2a00      	cmp	r2, #0
 8008e18:	f000 80c4 	beq.w	8008fa4 <_dtoa_r+0x8cc>
 8008e1c:	9a05      	ldr	r2, [sp, #20]
 8008e1e:	2a01      	cmp	r2, #1
 8008e20:	f300 80a8 	bgt.w	8008f74 <_dtoa_r+0x89c>
 8008e24:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008e26:	2a00      	cmp	r2, #0
 8008e28:	f000 80a0 	beq.w	8008f6c <_dtoa_r+0x894>
 8008e2c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008e30:	9e06      	ldr	r6, [sp, #24]
 8008e32:	4645      	mov	r5, r8
 8008e34:	9a04      	ldr	r2, [sp, #16]
 8008e36:	2101      	movs	r1, #1
 8008e38:	441a      	add	r2, r3
 8008e3a:	4620      	mov	r0, r4
 8008e3c:	4498      	add	r8, r3
 8008e3e:	9204      	str	r2, [sp, #16]
 8008e40:	f000 fd5e 	bl	8009900 <__i2b>
 8008e44:	4607      	mov	r7, r0
 8008e46:	2d00      	cmp	r5, #0
 8008e48:	dd0b      	ble.n	8008e62 <_dtoa_r+0x78a>
 8008e4a:	9b04      	ldr	r3, [sp, #16]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	dd08      	ble.n	8008e62 <_dtoa_r+0x78a>
 8008e50:	42ab      	cmp	r3, r5
 8008e52:	9a04      	ldr	r2, [sp, #16]
 8008e54:	bfa8      	it	ge
 8008e56:	462b      	movge	r3, r5
 8008e58:	eba8 0803 	sub.w	r8, r8, r3
 8008e5c:	1aed      	subs	r5, r5, r3
 8008e5e:	1ad3      	subs	r3, r2, r3
 8008e60:	9304      	str	r3, [sp, #16]
 8008e62:	9b06      	ldr	r3, [sp, #24]
 8008e64:	b1fb      	cbz	r3, 8008ea6 <_dtoa_r+0x7ce>
 8008e66:	9b08      	ldr	r3, [sp, #32]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	f000 809f 	beq.w	8008fac <_dtoa_r+0x8d4>
 8008e6e:	2e00      	cmp	r6, #0
 8008e70:	dd11      	ble.n	8008e96 <_dtoa_r+0x7be>
 8008e72:	4639      	mov	r1, r7
 8008e74:	4632      	mov	r2, r6
 8008e76:	4620      	mov	r0, r4
 8008e78:	f000 fdfe 	bl	8009a78 <__pow5mult>
 8008e7c:	465a      	mov	r2, fp
 8008e7e:	4601      	mov	r1, r0
 8008e80:	4607      	mov	r7, r0
 8008e82:	4620      	mov	r0, r4
 8008e84:	f000 fd52 	bl	800992c <__multiply>
 8008e88:	4659      	mov	r1, fp
 8008e8a:	9007      	str	r0, [sp, #28]
 8008e8c:	4620      	mov	r0, r4
 8008e8e:	f000 fc7b 	bl	8009788 <_Bfree>
 8008e92:	9b07      	ldr	r3, [sp, #28]
 8008e94:	469b      	mov	fp, r3
 8008e96:	9b06      	ldr	r3, [sp, #24]
 8008e98:	1b9a      	subs	r2, r3, r6
 8008e9a:	d004      	beq.n	8008ea6 <_dtoa_r+0x7ce>
 8008e9c:	4659      	mov	r1, fp
 8008e9e:	4620      	mov	r0, r4
 8008ea0:	f000 fdea 	bl	8009a78 <__pow5mult>
 8008ea4:	4683      	mov	fp, r0
 8008ea6:	2101      	movs	r1, #1
 8008ea8:	4620      	mov	r0, r4
 8008eaa:	f000 fd29 	bl	8009900 <__i2b>
 8008eae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	4606      	mov	r6, r0
 8008eb4:	dd7c      	ble.n	8008fb0 <_dtoa_r+0x8d8>
 8008eb6:	461a      	mov	r2, r3
 8008eb8:	4601      	mov	r1, r0
 8008eba:	4620      	mov	r0, r4
 8008ebc:	f000 fddc 	bl	8009a78 <__pow5mult>
 8008ec0:	9b05      	ldr	r3, [sp, #20]
 8008ec2:	2b01      	cmp	r3, #1
 8008ec4:	4606      	mov	r6, r0
 8008ec6:	dd76      	ble.n	8008fb6 <_dtoa_r+0x8de>
 8008ec8:	2300      	movs	r3, #0
 8008eca:	9306      	str	r3, [sp, #24]
 8008ecc:	6933      	ldr	r3, [r6, #16]
 8008ece:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008ed2:	6918      	ldr	r0, [r3, #16]
 8008ed4:	f000 fcc4 	bl	8009860 <__hi0bits>
 8008ed8:	f1c0 0020 	rsb	r0, r0, #32
 8008edc:	9b04      	ldr	r3, [sp, #16]
 8008ede:	4418      	add	r0, r3
 8008ee0:	f010 001f 	ands.w	r0, r0, #31
 8008ee4:	f000 8086 	beq.w	8008ff4 <_dtoa_r+0x91c>
 8008ee8:	f1c0 0320 	rsb	r3, r0, #32
 8008eec:	2b04      	cmp	r3, #4
 8008eee:	dd7f      	ble.n	8008ff0 <_dtoa_r+0x918>
 8008ef0:	f1c0 001c 	rsb	r0, r0, #28
 8008ef4:	9b04      	ldr	r3, [sp, #16]
 8008ef6:	4403      	add	r3, r0
 8008ef8:	4480      	add	r8, r0
 8008efa:	4405      	add	r5, r0
 8008efc:	9304      	str	r3, [sp, #16]
 8008efe:	f1b8 0f00 	cmp.w	r8, #0
 8008f02:	dd05      	ble.n	8008f10 <_dtoa_r+0x838>
 8008f04:	4659      	mov	r1, fp
 8008f06:	4642      	mov	r2, r8
 8008f08:	4620      	mov	r0, r4
 8008f0a:	f000 fe0f 	bl	8009b2c <__lshift>
 8008f0e:	4683      	mov	fp, r0
 8008f10:	9b04      	ldr	r3, [sp, #16]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	dd05      	ble.n	8008f22 <_dtoa_r+0x84a>
 8008f16:	4631      	mov	r1, r6
 8008f18:	461a      	mov	r2, r3
 8008f1a:	4620      	mov	r0, r4
 8008f1c:	f000 fe06 	bl	8009b2c <__lshift>
 8008f20:	4606      	mov	r6, r0
 8008f22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d069      	beq.n	8008ffc <_dtoa_r+0x924>
 8008f28:	4631      	mov	r1, r6
 8008f2a:	4658      	mov	r0, fp
 8008f2c:	f000 fe6a 	bl	8009c04 <__mcmp>
 8008f30:	2800      	cmp	r0, #0
 8008f32:	da63      	bge.n	8008ffc <_dtoa_r+0x924>
 8008f34:	2300      	movs	r3, #0
 8008f36:	4659      	mov	r1, fp
 8008f38:	220a      	movs	r2, #10
 8008f3a:	4620      	mov	r0, r4
 8008f3c:	f000 fc46 	bl	80097cc <__multadd>
 8008f40:	9b08      	ldr	r3, [sp, #32]
 8008f42:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008f46:	4683      	mov	fp, r0
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	f000 818f 	beq.w	800926c <_dtoa_r+0xb94>
 8008f4e:	4639      	mov	r1, r7
 8008f50:	2300      	movs	r3, #0
 8008f52:	220a      	movs	r2, #10
 8008f54:	4620      	mov	r0, r4
 8008f56:	f000 fc39 	bl	80097cc <__multadd>
 8008f5a:	f1b9 0f00 	cmp.w	r9, #0
 8008f5e:	4607      	mov	r7, r0
 8008f60:	f300 808e 	bgt.w	8009080 <_dtoa_r+0x9a8>
 8008f64:	9b05      	ldr	r3, [sp, #20]
 8008f66:	2b02      	cmp	r3, #2
 8008f68:	dc50      	bgt.n	800900c <_dtoa_r+0x934>
 8008f6a:	e089      	b.n	8009080 <_dtoa_r+0x9a8>
 8008f6c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008f6e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008f72:	e75d      	b.n	8008e30 <_dtoa_r+0x758>
 8008f74:	9b01      	ldr	r3, [sp, #4]
 8008f76:	1e5e      	subs	r6, r3, #1
 8008f78:	9b06      	ldr	r3, [sp, #24]
 8008f7a:	42b3      	cmp	r3, r6
 8008f7c:	bfbf      	itttt	lt
 8008f7e:	9b06      	ldrlt	r3, [sp, #24]
 8008f80:	9606      	strlt	r6, [sp, #24]
 8008f82:	1af2      	sublt	r2, r6, r3
 8008f84:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8008f86:	bfb6      	itet	lt
 8008f88:	189b      	addlt	r3, r3, r2
 8008f8a:	1b9e      	subge	r6, r3, r6
 8008f8c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8008f8e:	9b01      	ldr	r3, [sp, #4]
 8008f90:	bfb8      	it	lt
 8008f92:	2600      	movlt	r6, #0
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	bfb5      	itete	lt
 8008f98:	eba8 0503 	sublt.w	r5, r8, r3
 8008f9c:	9b01      	ldrge	r3, [sp, #4]
 8008f9e:	2300      	movlt	r3, #0
 8008fa0:	4645      	movge	r5, r8
 8008fa2:	e747      	b.n	8008e34 <_dtoa_r+0x75c>
 8008fa4:	9e06      	ldr	r6, [sp, #24]
 8008fa6:	9f08      	ldr	r7, [sp, #32]
 8008fa8:	4645      	mov	r5, r8
 8008faa:	e74c      	b.n	8008e46 <_dtoa_r+0x76e>
 8008fac:	9a06      	ldr	r2, [sp, #24]
 8008fae:	e775      	b.n	8008e9c <_dtoa_r+0x7c4>
 8008fb0:	9b05      	ldr	r3, [sp, #20]
 8008fb2:	2b01      	cmp	r3, #1
 8008fb4:	dc18      	bgt.n	8008fe8 <_dtoa_r+0x910>
 8008fb6:	9b02      	ldr	r3, [sp, #8]
 8008fb8:	b9b3      	cbnz	r3, 8008fe8 <_dtoa_r+0x910>
 8008fba:	9b03      	ldr	r3, [sp, #12]
 8008fbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008fc0:	b9a3      	cbnz	r3, 8008fec <_dtoa_r+0x914>
 8008fc2:	9b03      	ldr	r3, [sp, #12]
 8008fc4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008fc8:	0d1b      	lsrs	r3, r3, #20
 8008fca:	051b      	lsls	r3, r3, #20
 8008fcc:	b12b      	cbz	r3, 8008fda <_dtoa_r+0x902>
 8008fce:	9b04      	ldr	r3, [sp, #16]
 8008fd0:	3301      	adds	r3, #1
 8008fd2:	9304      	str	r3, [sp, #16]
 8008fd4:	f108 0801 	add.w	r8, r8, #1
 8008fd8:	2301      	movs	r3, #1
 8008fda:	9306      	str	r3, [sp, #24]
 8008fdc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	f47f af74 	bne.w	8008ecc <_dtoa_r+0x7f4>
 8008fe4:	2001      	movs	r0, #1
 8008fe6:	e779      	b.n	8008edc <_dtoa_r+0x804>
 8008fe8:	2300      	movs	r3, #0
 8008fea:	e7f6      	b.n	8008fda <_dtoa_r+0x902>
 8008fec:	9b02      	ldr	r3, [sp, #8]
 8008fee:	e7f4      	b.n	8008fda <_dtoa_r+0x902>
 8008ff0:	d085      	beq.n	8008efe <_dtoa_r+0x826>
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	301c      	adds	r0, #28
 8008ff6:	e77d      	b.n	8008ef4 <_dtoa_r+0x81c>
 8008ff8:	40240000 	.word	0x40240000
 8008ffc:	9b01      	ldr	r3, [sp, #4]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	dc38      	bgt.n	8009074 <_dtoa_r+0x99c>
 8009002:	9b05      	ldr	r3, [sp, #20]
 8009004:	2b02      	cmp	r3, #2
 8009006:	dd35      	ble.n	8009074 <_dtoa_r+0x99c>
 8009008:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800900c:	f1b9 0f00 	cmp.w	r9, #0
 8009010:	d10d      	bne.n	800902e <_dtoa_r+0x956>
 8009012:	4631      	mov	r1, r6
 8009014:	464b      	mov	r3, r9
 8009016:	2205      	movs	r2, #5
 8009018:	4620      	mov	r0, r4
 800901a:	f000 fbd7 	bl	80097cc <__multadd>
 800901e:	4601      	mov	r1, r0
 8009020:	4606      	mov	r6, r0
 8009022:	4658      	mov	r0, fp
 8009024:	f000 fdee 	bl	8009c04 <__mcmp>
 8009028:	2800      	cmp	r0, #0
 800902a:	f73f adbd 	bgt.w	8008ba8 <_dtoa_r+0x4d0>
 800902e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009030:	9d00      	ldr	r5, [sp, #0]
 8009032:	ea6f 0a03 	mvn.w	sl, r3
 8009036:	f04f 0800 	mov.w	r8, #0
 800903a:	4631      	mov	r1, r6
 800903c:	4620      	mov	r0, r4
 800903e:	f000 fba3 	bl	8009788 <_Bfree>
 8009042:	2f00      	cmp	r7, #0
 8009044:	f43f aeb4 	beq.w	8008db0 <_dtoa_r+0x6d8>
 8009048:	f1b8 0f00 	cmp.w	r8, #0
 800904c:	d005      	beq.n	800905a <_dtoa_r+0x982>
 800904e:	45b8      	cmp	r8, r7
 8009050:	d003      	beq.n	800905a <_dtoa_r+0x982>
 8009052:	4641      	mov	r1, r8
 8009054:	4620      	mov	r0, r4
 8009056:	f000 fb97 	bl	8009788 <_Bfree>
 800905a:	4639      	mov	r1, r7
 800905c:	4620      	mov	r0, r4
 800905e:	f000 fb93 	bl	8009788 <_Bfree>
 8009062:	e6a5      	b.n	8008db0 <_dtoa_r+0x6d8>
 8009064:	2600      	movs	r6, #0
 8009066:	4637      	mov	r7, r6
 8009068:	e7e1      	b.n	800902e <_dtoa_r+0x956>
 800906a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800906c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009070:	4637      	mov	r7, r6
 8009072:	e599      	b.n	8008ba8 <_dtoa_r+0x4d0>
 8009074:	9b08      	ldr	r3, [sp, #32]
 8009076:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800907a:	2b00      	cmp	r3, #0
 800907c:	f000 80fd 	beq.w	800927a <_dtoa_r+0xba2>
 8009080:	2d00      	cmp	r5, #0
 8009082:	dd05      	ble.n	8009090 <_dtoa_r+0x9b8>
 8009084:	4639      	mov	r1, r7
 8009086:	462a      	mov	r2, r5
 8009088:	4620      	mov	r0, r4
 800908a:	f000 fd4f 	bl	8009b2c <__lshift>
 800908e:	4607      	mov	r7, r0
 8009090:	9b06      	ldr	r3, [sp, #24]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d05c      	beq.n	8009150 <_dtoa_r+0xa78>
 8009096:	6879      	ldr	r1, [r7, #4]
 8009098:	4620      	mov	r0, r4
 800909a:	f000 fb35 	bl	8009708 <_Balloc>
 800909e:	4605      	mov	r5, r0
 80090a0:	b928      	cbnz	r0, 80090ae <_dtoa_r+0x9d6>
 80090a2:	4b80      	ldr	r3, [pc, #512]	; (80092a4 <_dtoa_r+0xbcc>)
 80090a4:	4602      	mov	r2, r0
 80090a6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80090aa:	f7ff bb2e 	b.w	800870a <_dtoa_r+0x32>
 80090ae:	693a      	ldr	r2, [r7, #16]
 80090b0:	3202      	adds	r2, #2
 80090b2:	0092      	lsls	r2, r2, #2
 80090b4:	f107 010c 	add.w	r1, r7, #12
 80090b8:	300c      	adds	r0, #12
 80090ba:	f7fe fcb1 	bl	8007a20 <memcpy>
 80090be:	2201      	movs	r2, #1
 80090c0:	4629      	mov	r1, r5
 80090c2:	4620      	mov	r0, r4
 80090c4:	f000 fd32 	bl	8009b2c <__lshift>
 80090c8:	9b00      	ldr	r3, [sp, #0]
 80090ca:	3301      	adds	r3, #1
 80090cc:	9301      	str	r3, [sp, #4]
 80090ce:	9b00      	ldr	r3, [sp, #0]
 80090d0:	444b      	add	r3, r9
 80090d2:	9307      	str	r3, [sp, #28]
 80090d4:	9b02      	ldr	r3, [sp, #8]
 80090d6:	f003 0301 	and.w	r3, r3, #1
 80090da:	46b8      	mov	r8, r7
 80090dc:	9306      	str	r3, [sp, #24]
 80090de:	4607      	mov	r7, r0
 80090e0:	9b01      	ldr	r3, [sp, #4]
 80090e2:	4631      	mov	r1, r6
 80090e4:	3b01      	subs	r3, #1
 80090e6:	4658      	mov	r0, fp
 80090e8:	9302      	str	r3, [sp, #8]
 80090ea:	f7ff fa67 	bl	80085bc <quorem>
 80090ee:	4603      	mov	r3, r0
 80090f0:	3330      	adds	r3, #48	; 0x30
 80090f2:	9004      	str	r0, [sp, #16]
 80090f4:	4641      	mov	r1, r8
 80090f6:	4658      	mov	r0, fp
 80090f8:	9308      	str	r3, [sp, #32]
 80090fa:	f000 fd83 	bl	8009c04 <__mcmp>
 80090fe:	463a      	mov	r2, r7
 8009100:	4681      	mov	r9, r0
 8009102:	4631      	mov	r1, r6
 8009104:	4620      	mov	r0, r4
 8009106:	f000 fd99 	bl	8009c3c <__mdiff>
 800910a:	68c2      	ldr	r2, [r0, #12]
 800910c:	9b08      	ldr	r3, [sp, #32]
 800910e:	4605      	mov	r5, r0
 8009110:	bb02      	cbnz	r2, 8009154 <_dtoa_r+0xa7c>
 8009112:	4601      	mov	r1, r0
 8009114:	4658      	mov	r0, fp
 8009116:	f000 fd75 	bl	8009c04 <__mcmp>
 800911a:	9b08      	ldr	r3, [sp, #32]
 800911c:	4602      	mov	r2, r0
 800911e:	4629      	mov	r1, r5
 8009120:	4620      	mov	r0, r4
 8009122:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8009126:	f000 fb2f 	bl	8009788 <_Bfree>
 800912a:	9b05      	ldr	r3, [sp, #20]
 800912c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800912e:	9d01      	ldr	r5, [sp, #4]
 8009130:	ea43 0102 	orr.w	r1, r3, r2
 8009134:	9b06      	ldr	r3, [sp, #24]
 8009136:	430b      	orrs	r3, r1
 8009138:	9b08      	ldr	r3, [sp, #32]
 800913a:	d10d      	bne.n	8009158 <_dtoa_r+0xa80>
 800913c:	2b39      	cmp	r3, #57	; 0x39
 800913e:	d029      	beq.n	8009194 <_dtoa_r+0xabc>
 8009140:	f1b9 0f00 	cmp.w	r9, #0
 8009144:	dd01      	ble.n	800914a <_dtoa_r+0xa72>
 8009146:	9b04      	ldr	r3, [sp, #16]
 8009148:	3331      	adds	r3, #49	; 0x31
 800914a:	9a02      	ldr	r2, [sp, #8]
 800914c:	7013      	strb	r3, [r2, #0]
 800914e:	e774      	b.n	800903a <_dtoa_r+0x962>
 8009150:	4638      	mov	r0, r7
 8009152:	e7b9      	b.n	80090c8 <_dtoa_r+0x9f0>
 8009154:	2201      	movs	r2, #1
 8009156:	e7e2      	b.n	800911e <_dtoa_r+0xa46>
 8009158:	f1b9 0f00 	cmp.w	r9, #0
 800915c:	db06      	blt.n	800916c <_dtoa_r+0xa94>
 800915e:	9905      	ldr	r1, [sp, #20]
 8009160:	ea41 0909 	orr.w	r9, r1, r9
 8009164:	9906      	ldr	r1, [sp, #24]
 8009166:	ea59 0101 	orrs.w	r1, r9, r1
 800916a:	d120      	bne.n	80091ae <_dtoa_r+0xad6>
 800916c:	2a00      	cmp	r2, #0
 800916e:	ddec      	ble.n	800914a <_dtoa_r+0xa72>
 8009170:	4659      	mov	r1, fp
 8009172:	2201      	movs	r2, #1
 8009174:	4620      	mov	r0, r4
 8009176:	9301      	str	r3, [sp, #4]
 8009178:	f000 fcd8 	bl	8009b2c <__lshift>
 800917c:	4631      	mov	r1, r6
 800917e:	4683      	mov	fp, r0
 8009180:	f000 fd40 	bl	8009c04 <__mcmp>
 8009184:	2800      	cmp	r0, #0
 8009186:	9b01      	ldr	r3, [sp, #4]
 8009188:	dc02      	bgt.n	8009190 <_dtoa_r+0xab8>
 800918a:	d1de      	bne.n	800914a <_dtoa_r+0xa72>
 800918c:	07da      	lsls	r2, r3, #31
 800918e:	d5dc      	bpl.n	800914a <_dtoa_r+0xa72>
 8009190:	2b39      	cmp	r3, #57	; 0x39
 8009192:	d1d8      	bne.n	8009146 <_dtoa_r+0xa6e>
 8009194:	9a02      	ldr	r2, [sp, #8]
 8009196:	2339      	movs	r3, #57	; 0x39
 8009198:	7013      	strb	r3, [r2, #0]
 800919a:	462b      	mov	r3, r5
 800919c:	461d      	mov	r5, r3
 800919e:	3b01      	subs	r3, #1
 80091a0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80091a4:	2a39      	cmp	r2, #57	; 0x39
 80091a6:	d050      	beq.n	800924a <_dtoa_r+0xb72>
 80091a8:	3201      	adds	r2, #1
 80091aa:	701a      	strb	r2, [r3, #0]
 80091ac:	e745      	b.n	800903a <_dtoa_r+0x962>
 80091ae:	2a00      	cmp	r2, #0
 80091b0:	dd03      	ble.n	80091ba <_dtoa_r+0xae2>
 80091b2:	2b39      	cmp	r3, #57	; 0x39
 80091b4:	d0ee      	beq.n	8009194 <_dtoa_r+0xabc>
 80091b6:	3301      	adds	r3, #1
 80091b8:	e7c7      	b.n	800914a <_dtoa_r+0xa72>
 80091ba:	9a01      	ldr	r2, [sp, #4]
 80091bc:	9907      	ldr	r1, [sp, #28]
 80091be:	f802 3c01 	strb.w	r3, [r2, #-1]
 80091c2:	428a      	cmp	r2, r1
 80091c4:	d02a      	beq.n	800921c <_dtoa_r+0xb44>
 80091c6:	4659      	mov	r1, fp
 80091c8:	2300      	movs	r3, #0
 80091ca:	220a      	movs	r2, #10
 80091cc:	4620      	mov	r0, r4
 80091ce:	f000 fafd 	bl	80097cc <__multadd>
 80091d2:	45b8      	cmp	r8, r7
 80091d4:	4683      	mov	fp, r0
 80091d6:	f04f 0300 	mov.w	r3, #0
 80091da:	f04f 020a 	mov.w	r2, #10
 80091de:	4641      	mov	r1, r8
 80091e0:	4620      	mov	r0, r4
 80091e2:	d107      	bne.n	80091f4 <_dtoa_r+0xb1c>
 80091e4:	f000 faf2 	bl	80097cc <__multadd>
 80091e8:	4680      	mov	r8, r0
 80091ea:	4607      	mov	r7, r0
 80091ec:	9b01      	ldr	r3, [sp, #4]
 80091ee:	3301      	adds	r3, #1
 80091f0:	9301      	str	r3, [sp, #4]
 80091f2:	e775      	b.n	80090e0 <_dtoa_r+0xa08>
 80091f4:	f000 faea 	bl	80097cc <__multadd>
 80091f8:	4639      	mov	r1, r7
 80091fa:	4680      	mov	r8, r0
 80091fc:	2300      	movs	r3, #0
 80091fe:	220a      	movs	r2, #10
 8009200:	4620      	mov	r0, r4
 8009202:	f000 fae3 	bl	80097cc <__multadd>
 8009206:	4607      	mov	r7, r0
 8009208:	e7f0      	b.n	80091ec <_dtoa_r+0xb14>
 800920a:	f1b9 0f00 	cmp.w	r9, #0
 800920e:	9a00      	ldr	r2, [sp, #0]
 8009210:	bfcc      	ite	gt
 8009212:	464d      	movgt	r5, r9
 8009214:	2501      	movle	r5, #1
 8009216:	4415      	add	r5, r2
 8009218:	f04f 0800 	mov.w	r8, #0
 800921c:	4659      	mov	r1, fp
 800921e:	2201      	movs	r2, #1
 8009220:	4620      	mov	r0, r4
 8009222:	9301      	str	r3, [sp, #4]
 8009224:	f000 fc82 	bl	8009b2c <__lshift>
 8009228:	4631      	mov	r1, r6
 800922a:	4683      	mov	fp, r0
 800922c:	f000 fcea 	bl	8009c04 <__mcmp>
 8009230:	2800      	cmp	r0, #0
 8009232:	dcb2      	bgt.n	800919a <_dtoa_r+0xac2>
 8009234:	d102      	bne.n	800923c <_dtoa_r+0xb64>
 8009236:	9b01      	ldr	r3, [sp, #4]
 8009238:	07db      	lsls	r3, r3, #31
 800923a:	d4ae      	bmi.n	800919a <_dtoa_r+0xac2>
 800923c:	462b      	mov	r3, r5
 800923e:	461d      	mov	r5, r3
 8009240:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009244:	2a30      	cmp	r2, #48	; 0x30
 8009246:	d0fa      	beq.n	800923e <_dtoa_r+0xb66>
 8009248:	e6f7      	b.n	800903a <_dtoa_r+0x962>
 800924a:	9a00      	ldr	r2, [sp, #0]
 800924c:	429a      	cmp	r2, r3
 800924e:	d1a5      	bne.n	800919c <_dtoa_r+0xac4>
 8009250:	f10a 0a01 	add.w	sl, sl, #1
 8009254:	2331      	movs	r3, #49	; 0x31
 8009256:	e779      	b.n	800914c <_dtoa_r+0xa74>
 8009258:	4b13      	ldr	r3, [pc, #76]	; (80092a8 <_dtoa_r+0xbd0>)
 800925a:	f7ff baaf 	b.w	80087bc <_dtoa_r+0xe4>
 800925e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009260:	2b00      	cmp	r3, #0
 8009262:	f47f aa86 	bne.w	8008772 <_dtoa_r+0x9a>
 8009266:	4b11      	ldr	r3, [pc, #68]	; (80092ac <_dtoa_r+0xbd4>)
 8009268:	f7ff baa8 	b.w	80087bc <_dtoa_r+0xe4>
 800926c:	f1b9 0f00 	cmp.w	r9, #0
 8009270:	dc03      	bgt.n	800927a <_dtoa_r+0xba2>
 8009272:	9b05      	ldr	r3, [sp, #20]
 8009274:	2b02      	cmp	r3, #2
 8009276:	f73f aec9 	bgt.w	800900c <_dtoa_r+0x934>
 800927a:	9d00      	ldr	r5, [sp, #0]
 800927c:	4631      	mov	r1, r6
 800927e:	4658      	mov	r0, fp
 8009280:	f7ff f99c 	bl	80085bc <quorem>
 8009284:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009288:	f805 3b01 	strb.w	r3, [r5], #1
 800928c:	9a00      	ldr	r2, [sp, #0]
 800928e:	1aaa      	subs	r2, r5, r2
 8009290:	4591      	cmp	r9, r2
 8009292:	ddba      	ble.n	800920a <_dtoa_r+0xb32>
 8009294:	4659      	mov	r1, fp
 8009296:	2300      	movs	r3, #0
 8009298:	220a      	movs	r2, #10
 800929a:	4620      	mov	r0, r4
 800929c:	f000 fa96 	bl	80097cc <__multadd>
 80092a0:	4683      	mov	fp, r0
 80092a2:	e7eb      	b.n	800927c <_dtoa_r+0xba4>
 80092a4:	0800a6c7 	.word	0x0800a6c7
 80092a8:	0800a620 	.word	0x0800a620
 80092ac:	0800a644 	.word	0x0800a644

080092b0 <__sflush_r>:
 80092b0:	898a      	ldrh	r2, [r1, #12]
 80092b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092b6:	4605      	mov	r5, r0
 80092b8:	0710      	lsls	r0, r2, #28
 80092ba:	460c      	mov	r4, r1
 80092bc:	d458      	bmi.n	8009370 <__sflush_r+0xc0>
 80092be:	684b      	ldr	r3, [r1, #4]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	dc05      	bgt.n	80092d0 <__sflush_r+0x20>
 80092c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	dc02      	bgt.n	80092d0 <__sflush_r+0x20>
 80092ca:	2000      	movs	r0, #0
 80092cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80092d2:	2e00      	cmp	r6, #0
 80092d4:	d0f9      	beq.n	80092ca <__sflush_r+0x1a>
 80092d6:	2300      	movs	r3, #0
 80092d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80092dc:	682f      	ldr	r7, [r5, #0]
 80092de:	602b      	str	r3, [r5, #0]
 80092e0:	d032      	beq.n	8009348 <__sflush_r+0x98>
 80092e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80092e4:	89a3      	ldrh	r3, [r4, #12]
 80092e6:	075a      	lsls	r2, r3, #29
 80092e8:	d505      	bpl.n	80092f6 <__sflush_r+0x46>
 80092ea:	6863      	ldr	r3, [r4, #4]
 80092ec:	1ac0      	subs	r0, r0, r3
 80092ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80092f0:	b10b      	cbz	r3, 80092f6 <__sflush_r+0x46>
 80092f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80092f4:	1ac0      	subs	r0, r0, r3
 80092f6:	2300      	movs	r3, #0
 80092f8:	4602      	mov	r2, r0
 80092fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80092fc:	6a21      	ldr	r1, [r4, #32]
 80092fe:	4628      	mov	r0, r5
 8009300:	47b0      	blx	r6
 8009302:	1c43      	adds	r3, r0, #1
 8009304:	89a3      	ldrh	r3, [r4, #12]
 8009306:	d106      	bne.n	8009316 <__sflush_r+0x66>
 8009308:	6829      	ldr	r1, [r5, #0]
 800930a:	291d      	cmp	r1, #29
 800930c:	d82c      	bhi.n	8009368 <__sflush_r+0xb8>
 800930e:	4a2a      	ldr	r2, [pc, #168]	; (80093b8 <__sflush_r+0x108>)
 8009310:	40ca      	lsrs	r2, r1
 8009312:	07d6      	lsls	r6, r2, #31
 8009314:	d528      	bpl.n	8009368 <__sflush_r+0xb8>
 8009316:	2200      	movs	r2, #0
 8009318:	6062      	str	r2, [r4, #4]
 800931a:	04d9      	lsls	r1, r3, #19
 800931c:	6922      	ldr	r2, [r4, #16]
 800931e:	6022      	str	r2, [r4, #0]
 8009320:	d504      	bpl.n	800932c <__sflush_r+0x7c>
 8009322:	1c42      	adds	r2, r0, #1
 8009324:	d101      	bne.n	800932a <__sflush_r+0x7a>
 8009326:	682b      	ldr	r3, [r5, #0]
 8009328:	b903      	cbnz	r3, 800932c <__sflush_r+0x7c>
 800932a:	6560      	str	r0, [r4, #84]	; 0x54
 800932c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800932e:	602f      	str	r7, [r5, #0]
 8009330:	2900      	cmp	r1, #0
 8009332:	d0ca      	beq.n	80092ca <__sflush_r+0x1a>
 8009334:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009338:	4299      	cmp	r1, r3
 800933a:	d002      	beq.n	8009342 <__sflush_r+0x92>
 800933c:	4628      	mov	r0, r5
 800933e:	f000 fd71 	bl	8009e24 <_free_r>
 8009342:	2000      	movs	r0, #0
 8009344:	6360      	str	r0, [r4, #52]	; 0x34
 8009346:	e7c1      	b.n	80092cc <__sflush_r+0x1c>
 8009348:	6a21      	ldr	r1, [r4, #32]
 800934a:	2301      	movs	r3, #1
 800934c:	4628      	mov	r0, r5
 800934e:	47b0      	blx	r6
 8009350:	1c41      	adds	r1, r0, #1
 8009352:	d1c7      	bne.n	80092e4 <__sflush_r+0x34>
 8009354:	682b      	ldr	r3, [r5, #0]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d0c4      	beq.n	80092e4 <__sflush_r+0x34>
 800935a:	2b1d      	cmp	r3, #29
 800935c:	d001      	beq.n	8009362 <__sflush_r+0xb2>
 800935e:	2b16      	cmp	r3, #22
 8009360:	d101      	bne.n	8009366 <__sflush_r+0xb6>
 8009362:	602f      	str	r7, [r5, #0]
 8009364:	e7b1      	b.n	80092ca <__sflush_r+0x1a>
 8009366:	89a3      	ldrh	r3, [r4, #12]
 8009368:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800936c:	81a3      	strh	r3, [r4, #12]
 800936e:	e7ad      	b.n	80092cc <__sflush_r+0x1c>
 8009370:	690f      	ldr	r7, [r1, #16]
 8009372:	2f00      	cmp	r7, #0
 8009374:	d0a9      	beq.n	80092ca <__sflush_r+0x1a>
 8009376:	0793      	lsls	r3, r2, #30
 8009378:	680e      	ldr	r6, [r1, #0]
 800937a:	bf08      	it	eq
 800937c:	694b      	ldreq	r3, [r1, #20]
 800937e:	600f      	str	r7, [r1, #0]
 8009380:	bf18      	it	ne
 8009382:	2300      	movne	r3, #0
 8009384:	eba6 0807 	sub.w	r8, r6, r7
 8009388:	608b      	str	r3, [r1, #8]
 800938a:	f1b8 0f00 	cmp.w	r8, #0
 800938e:	dd9c      	ble.n	80092ca <__sflush_r+0x1a>
 8009390:	6a21      	ldr	r1, [r4, #32]
 8009392:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009394:	4643      	mov	r3, r8
 8009396:	463a      	mov	r2, r7
 8009398:	4628      	mov	r0, r5
 800939a:	47b0      	blx	r6
 800939c:	2800      	cmp	r0, #0
 800939e:	dc06      	bgt.n	80093ae <__sflush_r+0xfe>
 80093a0:	89a3      	ldrh	r3, [r4, #12]
 80093a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093a6:	81a3      	strh	r3, [r4, #12]
 80093a8:	f04f 30ff 	mov.w	r0, #4294967295
 80093ac:	e78e      	b.n	80092cc <__sflush_r+0x1c>
 80093ae:	4407      	add	r7, r0
 80093b0:	eba8 0800 	sub.w	r8, r8, r0
 80093b4:	e7e9      	b.n	800938a <__sflush_r+0xda>
 80093b6:	bf00      	nop
 80093b8:	20400001 	.word	0x20400001

080093bc <_fflush_r>:
 80093bc:	b538      	push	{r3, r4, r5, lr}
 80093be:	690b      	ldr	r3, [r1, #16]
 80093c0:	4605      	mov	r5, r0
 80093c2:	460c      	mov	r4, r1
 80093c4:	b913      	cbnz	r3, 80093cc <_fflush_r+0x10>
 80093c6:	2500      	movs	r5, #0
 80093c8:	4628      	mov	r0, r5
 80093ca:	bd38      	pop	{r3, r4, r5, pc}
 80093cc:	b118      	cbz	r0, 80093d6 <_fflush_r+0x1a>
 80093ce:	6983      	ldr	r3, [r0, #24]
 80093d0:	b90b      	cbnz	r3, 80093d6 <_fflush_r+0x1a>
 80093d2:	f000 f887 	bl	80094e4 <__sinit>
 80093d6:	4b14      	ldr	r3, [pc, #80]	; (8009428 <_fflush_r+0x6c>)
 80093d8:	429c      	cmp	r4, r3
 80093da:	d11b      	bne.n	8009414 <_fflush_r+0x58>
 80093dc:	686c      	ldr	r4, [r5, #4]
 80093de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d0ef      	beq.n	80093c6 <_fflush_r+0xa>
 80093e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80093e8:	07d0      	lsls	r0, r2, #31
 80093ea:	d404      	bmi.n	80093f6 <_fflush_r+0x3a>
 80093ec:	0599      	lsls	r1, r3, #22
 80093ee:	d402      	bmi.n	80093f6 <_fflush_r+0x3a>
 80093f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80093f2:	f000 f91a 	bl	800962a <__retarget_lock_acquire_recursive>
 80093f6:	4628      	mov	r0, r5
 80093f8:	4621      	mov	r1, r4
 80093fa:	f7ff ff59 	bl	80092b0 <__sflush_r>
 80093fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009400:	07da      	lsls	r2, r3, #31
 8009402:	4605      	mov	r5, r0
 8009404:	d4e0      	bmi.n	80093c8 <_fflush_r+0xc>
 8009406:	89a3      	ldrh	r3, [r4, #12]
 8009408:	059b      	lsls	r3, r3, #22
 800940a:	d4dd      	bmi.n	80093c8 <_fflush_r+0xc>
 800940c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800940e:	f000 f90d 	bl	800962c <__retarget_lock_release_recursive>
 8009412:	e7d9      	b.n	80093c8 <_fflush_r+0xc>
 8009414:	4b05      	ldr	r3, [pc, #20]	; (800942c <_fflush_r+0x70>)
 8009416:	429c      	cmp	r4, r3
 8009418:	d101      	bne.n	800941e <_fflush_r+0x62>
 800941a:	68ac      	ldr	r4, [r5, #8]
 800941c:	e7df      	b.n	80093de <_fflush_r+0x22>
 800941e:	4b04      	ldr	r3, [pc, #16]	; (8009430 <_fflush_r+0x74>)
 8009420:	429c      	cmp	r4, r3
 8009422:	bf08      	it	eq
 8009424:	68ec      	ldreq	r4, [r5, #12]
 8009426:	e7da      	b.n	80093de <_fflush_r+0x22>
 8009428:	0800a6f8 	.word	0x0800a6f8
 800942c:	0800a718 	.word	0x0800a718
 8009430:	0800a6d8 	.word	0x0800a6d8

08009434 <std>:
 8009434:	2300      	movs	r3, #0
 8009436:	b510      	push	{r4, lr}
 8009438:	4604      	mov	r4, r0
 800943a:	e9c0 3300 	strd	r3, r3, [r0]
 800943e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009442:	6083      	str	r3, [r0, #8]
 8009444:	8181      	strh	r1, [r0, #12]
 8009446:	6643      	str	r3, [r0, #100]	; 0x64
 8009448:	81c2      	strh	r2, [r0, #14]
 800944a:	6183      	str	r3, [r0, #24]
 800944c:	4619      	mov	r1, r3
 800944e:	2208      	movs	r2, #8
 8009450:	305c      	adds	r0, #92	; 0x5c
 8009452:	f7fe faf3 	bl	8007a3c <memset>
 8009456:	4b05      	ldr	r3, [pc, #20]	; (800946c <std+0x38>)
 8009458:	6263      	str	r3, [r4, #36]	; 0x24
 800945a:	4b05      	ldr	r3, [pc, #20]	; (8009470 <std+0x3c>)
 800945c:	62a3      	str	r3, [r4, #40]	; 0x28
 800945e:	4b05      	ldr	r3, [pc, #20]	; (8009474 <std+0x40>)
 8009460:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009462:	4b05      	ldr	r3, [pc, #20]	; (8009478 <std+0x44>)
 8009464:	6224      	str	r4, [r4, #32]
 8009466:	6323      	str	r3, [r4, #48]	; 0x30
 8009468:	bd10      	pop	{r4, pc}
 800946a:	bf00      	nop
 800946c:	0800a24d 	.word	0x0800a24d
 8009470:	0800a26f 	.word	0x0800a26f
 8009474:	0800a2a7 	.word	0x0800a2a7
 8009478:	0800a2cb 	.word	0x0800a2cb

0800947c <_cleanup_r>:
 800947c:	4901      	ldr	r1, [pc, #4]	; (8009484 <_cleanup_r+0x8>)
 800947e:	f000 b8af 	b.w	80095e0 <_fwalk_reent>
 8009482:	bf00      	nop
 8009484:	080093bd 	.word	0x080093bd

08009488 <__sfmoreglue>:
 8009488:	b570      	push	{r4, r5, r6, lr}
 800948a:	1e4a      	subs	r2, r1, #1
 800948c:	2568      	movs	r5, #104	; 0x68
 800948e:	4355      	muls	r5, r2
 8009490:	460e      	mov	r6, r1
 8009492:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009496:	f000 fd15 	bl	8009ec4 <_malloc_r>
 800949a:	4604      	mov	r4, r0
 800949c:	b140      	cbz	r0, 80094b0 <__sfmoreglue+0x28>
 800949e:	2100      	movs	r1, #0
 80094a0:	e9c0 1600 	strd	r1, r6, [r0]
 80094a4:	300c      	adds	r0, #12
 80094a6:	60a0      	str	r0, [r4, #8]
 80094a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80094ac:	f7fe fac6 	bl	8007a3c <memset>
 80094b0:	4620      	mov	r0, r4
 80094b2:	bd70      	pop	{r4, r5, r6, pc}

080094b4 <__sfp_lock_acquire>:
 80094b4:	4801      	ldr	r0, [pc, #4]	; (80094bc <__sfp_lock_acquire+0x8>)
 80094b6:	f000 b8b8 	b.w	800962a <__retarget_lock_acquire_recursive>
 80094ba:	bf00      	nop
 80094bc:	20004fdc 	.word	0x20004fdc

080094c0 <__sfp_lock_release>:
 80094c0:	4801      	ldr	r0, [pc, #4]	; (80094c8 <__sfp_lock_release+0x8>)
 80094c2:	f000 b8b3 	b.w	800962c <__retarget_lock_release_recursive>
 80094c6:	bf00      	nop
 80094c8:	20004fdc 	.word	0x20004fdc

080094cc <__sinit_lock_acquire>:
 80094cc:	4801      	ldr	r0, [pc, #4]	; (80094d4 <__sinit_lock_acquire+0x8>)
 80094ce:	f000 b8ac 	b.w	800962a <__retarget_lock_acquire_recursive>
 80094d2:	bf00      	nop
 80094d4:	20004fd7 	.word	0x20004fd7

080094d8 <__sinit_lock_release>:
 80094d8:	4801      	ldr	r0, [pc, #4]	; (80094e0 <__sinit_lock_release+0x8>)
 80094da:	f000 b8a7 	b.w	800962c <__retarget_lock_release_recursive>
 80094de:	bf00      	nop
 80094e0:	20004fd7 	.word	0x20004fd7

080094e4 <__sinit>:
 80094e4:	b510      	push	{r4, lr}
 80094e6:	4604      	mov	r4, r0
 80094e8:	f7ff fff0 	bl	80094cc <__sinit_lock_acquire>
 80094ec:	69a3      	ldr	r3, [r4, #24]
 80094ee:	b11b      	cbz	r3, 80094f8 <__sinit+0x14>
 80094f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094f4:	f7ff bff0 	b.w	80094d8 <__sinit_lock_release>
 80094f8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80094fc:	6523      	str	r3, [r4, #80]	; 0x50
 80094fe:	4b13      	ldr	r3, [pc, #76]	; (800954c <__sinit+0x68>)
 8009500:	4a13      	ldr	r2, [pc, #76]	; (8009550 <__sinit+0x6c>)
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	62a2      	str	r2, [r4, #40]	; 0x28
 8009506:	42a3      	cmp	r3, r4
 8009508:	bf04      	itt	eq
 800950a:	2301      	moveq	r3, #1
 800950c:	61a3      	streq	r3, [r4, #24]
 800950e:	4620      	mov	r0, r4
 8009510:	f000 f820 	bl	8009554 <__sfp>
 8009514:	6060      	str	r0, [r4, #4]
 8009516:	4620      	mov	r0, r4
 8009518:	f000 f81c 	bl	8009554 <__sfp>
 800951c:	60a0      	str	r0, [r4, #8]
 800951e:	4620      	mov	r0, r4
 8009520:	f000 f818 	bl	8009554 <__sfp>
 8009524:	2200      	movs	r2, #0
 8009526:	60e0      	str	r0, [r4, #12]
 8009528:	2104      	movs	r1, #4
 800952a:	6860      	ldr	r0, [r4, #4]
 800952c:	f7ff ff82 	bl	8009434 <std>
 8009530:	68a0      	ldr	r0, [r4, #8]
 8009532:	2201      	movs	r2, #1
 8009534:	2109      	movs	r1, #9
 8009536:	f7ff ff7d 	bl	8009434 <std>
 800953a:	68e0      	ldr	r0, [r4, #12]
 800953c:	2202      	movs	r2, #2
 800953e:	2112      	movs	r1, #18
 8009540:	f7ff ff78 	bl	8009434 <std>
 8009544:	2301      	movs	r3, #1
 8009546:	61a3      	str	r3, [r4, #24]
 8009548:	e7d2      	b.n	80094f0 <__sinit+0xc>
 800954a:	bf00      	nop
 800954c:	0800a60c 	.word	0x0800a60c
 8009550:	0800947d 	.word	0x0800947d

08009554 <__sfp>:
 8009554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009556:	4607      	mov	r7, r0
 8009558:	f7ff ffac 	bl	80094b4 <__sfp_lock_acquire>
 800955c:	4b1e      	ldr	r3, [pc, #120]	; (80095d8 <__sfp+0x84>)
 800955e:	681e      	ldr	r6, [r3, #0]
 8009560:	69b3      	ldr	r3, [r6, #24]
 8009562:	b913      	cbnz	r3, 800956a <__sfp+0x16>
 8009564:	4630      	mov	r0, r6
 8009566:	f7ff ffbd 	bl	80094e4 <__sinit>
 800956a:	3648      	adds	r6, #72	; 0x48
 800956c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009570:	3b01      	subs	r3, #1
 8009572:	d503      	bpl.n	800957c <__sfp+0x28>
 8009574:	6833      	ldr	r3, [r6, #0]
 8009576:	b30b      	cbz	r3, 80095bc <__sfp+0x68>
 8009578:	6836      	ldr	r6, [r6, #0]
 800957a:	e7f7      	b.n	800956c <__sfp+0x18>
 800957c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009580:	b9d5      	cbnz	r5, 80095b8 <__sfp+0x64>
 8009582:	4b16      	ldr	r3, [pc, #88]	; (80095dc <__sfp+0x88>)
 8009584:	60e3      	str	r3, [r4, #12]
 8009586:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800958a:	6665      	str	r5, [r4, #100]	; 0x64
 800958c:	f000 f84c 	bl	8009628 <__retarget_lock_init_recursive>
 8009590:	f7ff ff96 	bl	80094c0 <__sfp_lock_release>
 8009594:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009598:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800959c:	6025      	str	r5, [r4, #0]
 800959e:	61a5      	str	r5, [r4, #24]
 80095a0:	2208      	movs	r2, #8
 80095a2:	4629      	mov	r1, r5
 80095a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80095a8:	f7fe fa48 	bl	8007a3c <memset>
 80095ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80095b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80095b4:	4620      	mov	r0, r4
 80095b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095b8:	3468      	adds	r4, #104	; 0x68
 80095ba:	e7d9      	b.n	8009570 <__sfp+0x1c>
 80095bc:	2104      	movs	r1, #4
 80095be:	4638      	mov	r0, r7
 80095c0:	f7ff ff62 	bl	8009488 <__sfmoreglue>
 80095c4:	4604      	mov	r4, r0
 80095c6:	6030      	str	r0, [r6, #0]
 80095c8:	2800      	cmp	r0, #0
 80095ca:	d1d5      	bne.n	8009578 <__sfp+0x24>
 80095cc:	f7ff ff78 	bl	80094c0 <__sfp_lock_release>
 80095d0:	230c      	movs	r3, #12
 80095d2:	603b      	str	r3, [r7, #0]
 80095d4:	e7ee      	b.n	80095b4 <__sfp+0x60>
 80095d6:	bf00      	nop
 80095d8:	0800a60c 	.word	0x0800a60c
 80095dc:	ffff0001 	.word	0xffff0001

080095e0 <_fwalk_reent>:
 80095e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095e4:	4606      	mov	r6, r0
 80095e6:	4688      	mov	r8, r1
 80095e8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80095ec:	2700      	movs	r7, #0
 80095ee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80095f2:	f1b9 0901 	subs.w	r9, r9, #1
 80095f6:	d505      	bpl.n	8009604 <_fwalk_reent+0x24>
 80095f8:	6824      	ldr	r4, [r4, #0]
 80095fa:	2c00      	cmp	r4, #0
 80095fc:	d1f7      	bne.n	80095ee <_fwalk_reent+0xe>
 80095fe:	4638      	mov	r0, r7
 8009600:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009604:	89ab      	ldrh	r3, [r5, #12]
 8009606:	2b01      	cmp	r3, #1
 8009608:	d907      	bls.n	800961a <_fwalk_reent+0x3a>
 800960a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800960e:	3301      	adds	r3, #1
 8009610:	d003      	beq.n	800961a <_fwalk_reent+0x3a>
 8009612:	4629      	mov	r1, r5
 8009614:	4630      	mov	r0, r6
 8009616:	47c0      	blx	r8
 8009618:	4307      	orrs	r7, r0
 800961a:	3568      	adds	r5, #104	; 0x68
 800961c:	e7e9      	b.n	80095f2 <_fwalk_reent+0x12>
	...

08009620 <_localeconv_r>:
 8009620:	4800      	ldr	r0, [pc, #0]	; (8009624 <_localeconv_r+0x4>)
 8009622:	4770      	bx	lr
 8009624:	20000164 	.word	0x20000164

08009628 <__retarget_lock_init_recursive>:
 8009628:	4770      	bx	lr

0800962a <__retarget_lock_acquire_recursive>:
 800962a:	4770      	bx	lr

0800962c <__retarget_lock_release_recursive>:
 800962c:	4770      	bx	lr

0800962e <__swhatbuf_r>:
 800962e:	b570      	push	{r4, r5, r6, lr}
 8009630:	460e      	mov	r6, r1
 8009632:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009636:	2900      	cmp	r1, #0
 8009638:	b096      	sub	sp, #88	; 0x58
 800963a:	4614      	mov	r4, r2
 800963c:	461d      	mov	r5, r3
 800963e:	da07      	bge.n	8009650 <__swhatbuf_r+0x22>
 8009640:	2300      	movs	r3, #0
 8009642:	602b      	str	r3, [r5, #0]
 8009644:	89b3      	ldrh	r3, [r6, #12]
 8009646:	061a      	lsls	r2, r3, #24
 8009648:	d410      	bmi.n	800966c <__swhatbuf_r+0x3e>
 800964a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800964e:	e00e      	b.n	800966e <__swhatbuf_r+0x40>
 8009650:	466a      	mov	r2, sp
 8009652:	f000 fe91 	bl	800a378 <_fstat_r>
 8009656:	2800      	cmp	r0, #0
 8009658:	dbf2      	blt.n	8009640 <__swhatbuf_r+0x12>
 800965a:	9a01      	ldr	r2, [sp, #4]
 800965c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009660:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009664:	425a      	negs	r2, r3
 8009666:	415a      	adcs	r2, r3
 8009668:	602a      	str	r2, [r5, #0]
 800966a:	e7ee      	b.n	800964a <__swhatbuf_r+0x1c>
 800966c:	2340      	movs	r3, #64	; 0x40
 800966e:	2000      	movs	r0, #0
 8009670:	6023      	str	r3, [r4, #0]
 8009672:	b016      	add	sp, #88	; 0x58
 8009674:	bd70      	pop	{r4, r5, r6, pc}
	...

08009678 <__smakebuf_r>:
 8009678:	898b      	ldrh	r3, [r1, #12]
 800967a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800967c:	079d      	lsls	r5, r3, #30
 800967e:	4606      	mov	r6, r0
 8009680:	460c      	mov	r4, r1
 8009682:	d507      	bpl.n	8009694 <__smakebuf_r+0x1c>
 8009684:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009688:	6023      	str	r3, [r4, #0]
 800968a:	6123      	str	r3, [r4, #16]
 800968c:	2301      	movs	r3, #1
 800968e:	6163      	str	r3, [r4, #20]
 8009690:	b002      	add	sp, #8
 8009692:	bd70      	pop	{r4, r5, r6, pc}
 8009694:	ab01      	add	r3, sp, #4
 8009696:	466a      	mov	r2, sp
 8009698:	f7ff ffc9 	bl	800962e <__swhatbuf_r>
 800969c:	9900      	ldr	r1, [sp, #0]
 800969e:	4605      	mov	r5, r0
 80096a0:	4630      	mov	r0, r6
 80096a2:	f000 fc0f 	bl	8009ec4 <_malloc_r>
 80096a6:	b948      	cbnz	r0, 80096bc <__smakebuf_r+0x44>
 80096a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096ac:	059a      	lsls	r2, r3, #22
 80096ae:	d4ef      	bmi.n	8009690 <__smakebuf_r+0x18>
 80096b0:	f023 0303 	bic.w	r3, r3, #3
 80096b4:	f043 0302 	orr.w	r3, r3, #2
 80096b8:	81a3      	strh	r3, [r4, #12]
 80096ba:	e7e3      	b.n	8009684 <__smakebuf_r+0xc>
 80096bc:	4b0d      	ldr	r3, [pc, #52]	; (80096f4 <__smakebuf_r+0x7c>)
 80096be:	62b3      	str	r3, [r6, #40]	; 0x28
 80096c0:	89a3      	ldrh	r3, [r4, #12]
 80096c2:	6020      	str	r0, [r4, #0]
 80096c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096c8:	81a3      	strh	r3, [r4, #12]
 80096ca:	9b00      	ldr	r3, [sp, #0]
 80096cc:	6163      	str	r3, [r4, #20]
 80096ce:	9b01      	ldr	r3, [sp, #4]
 80096d0:	6120      	str	r0, [r4, #16]
 80096d2:	b15b      	cbz	r3, 80096ec <__smakebuf_r+0x74>
 80096d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80096d8:	4630      	mov	r0, r6
 80096da:	f000 fe5f 	bl	800a39c <_isatty_r>
 80096de:	b128      	cbz	r0, 80096ec <__smakebuf_r+0x74>
 80096e0:	89a3      	ldrh	r3, [r4, #12]
 80096e2:	f023 0303 	bic.w	r3, r3, #3
 80096e6:	f043 0301 	orr.w	r3, r3, #1
 80096ea:	81a3      	strh	r3, [r4, #12]
 80096ec:	89a0      	ldrh	r0, [r4, #12]
 80096ee:	4305      	orrs	r5, r0
 80096f0:	81a5      	strh	r5, [r4, #12]
 80096f2:	e7cd      	b.n	8009690 <__smakebuf_r+0x18>
 80096f4:	0800947d 	.word	0x0800947d

080096f8 <malloc>:
 80096f8:	4b02      	ldr	r3, [pc, #8]	; (8009704 <malloc+0xc>)
 80096fa:	4601      	mov	r1, r0
 80096fc:	6818      	ldr	r0, [r3, #0]
 80096fe:	f000 bbe1 	b.w	8009ec4 <_malloc_r>
 8009702:	bf00      	nop
 8009704:	20000010 	.word	0x20000010

08009708 <_Balloc>:
 8009708:	b570      	push	{r4, r5, r6, lr}
 800970a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800970c:	4604      	mov	r4, r0
 800970e:	460d      	mov	r5, r1
 8009710:	b976      	cbnz	r6, 8009730 <_Balloc+0x28>
 8009712:	2010      	movs	r0, #16
 8009714:	f7ff fff0 	bl	80096f8 <malloc>
 8009718:	4602      	mov	r2, r0
 800971a:	6260      	str	r0, [r4, #36]	; 0x24
 800971c:	b920      	cbnz	r0, 8009728 <_Balloc+0x20>
 800971e:	4b18      	ldr	r3, [pc, #96]	; (8009780 <_Balloc+0x78>)
 8009720:	4818      	ldr	r0, [pc, #96]	; (8009784 <_Balloc+0x7c>)
 8009722:	2166      	movs	r1, #102	; 0x66
 8009724:	f000 fde8 	bl	800a2f8 <__assert_func>
 8009728:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800972c:	6006      	str	r6, [r0, #0]
 800972e:	60c6      	str	r6, [r0, #12]
 8009730:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009732:	68f3      	ldr	r3, [r6, #12]
 8009734:	b183      	cbz	r3, 8009758 <_Balloc+0x50>
 8009736:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009738:	68db      	ldr	r3, [r3, #12]
 800973a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800973e:	b9b8      	cbnz	r0, 8009770 <_Balloc+0x68>
 8009740:	2101      	movs	r1, #1
 8009742:	fa01 f605 	lsl.w	r6, r1, r5
 8009746:	1d72      	adds	r2, r6, #5
 8009748:	0092      	lsls	r2, r2, #2
 800974a:	4620      	mov	r0, r4
 800974c:	f000 fb5a 	bl	8009e04 <_calloc_r>
 8009750:	b160      	cbz	r0, 800976c <_Balloc+0x64>
 8009752:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009756:	e00e      	b.n	8009776 <_Balloc+0x6e>
 8009758:	2221      	movs	r2, #33	; 0x21
 800975a:	2104      	movs	r1, #4
 800975c:	4620      	mov	r0, r4
 800975e:	f000 fb51 	bl	8009e04 <_calloc_r>
 8009762:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009764:	60f0      	str	r0, [r6, #12]
 8009766:	68db      	ldr	r3, [r3, #12]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d1e4      	bne.n	8009736 <_Balloc+0x2e>
 800976c:	2000      	movs	r0, #0
 800976e:	bd70      	pop	{r4, r5, r6, pc}
 8009770:	6802      	ldr	r2, [r0, #0]
 8009772:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009776:	2300      	movs	r3, #0
 8009778:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800977c:	e7f7      	b.n	800976e <_Balloc+0x66>
 800977e:	bf00      	nop
 8009780:	0800a651 	.word	0x0800a651
 8009784:	0800a738 	.word	0x0800a738

08009788 <_Bfree>:
 8009788:	b570      	push	{r4, r5, r6, lr}
 800978a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800978c:	4605      	mov	r5, r0
 800978e:	460c      	mov	r4, r1
 8009790:	b976      	cbnz	r6, 80097b0 <_Bfree+0x28>
 8009792:	2010      	movs	r0, #16
 8009794:	f7ff ffb0 	bl	80096f8 <malloc>
 8009798:	4602      	mov	r2, r0
 800979a:	6268      	str	r0, [r5, #36]	; 0x24
 800979c:	b920      	cbnz	r0, 80097a8 <_Bfree+0x20>
 800979e:	4b09      	ldr	r3, [pc, #36]	; (80097c4 <_Bfree+0x3c>)
 80097a0:	4809      	ldr	r0, [pc, #36]	; (80097c8 <_Bfree+0x40>)
 80097a2:	218a      	movs	r1, #138	; 0x8a
 80097a4:	f000 fda8 	bl	800a2f8 <__assert_func>
 80097a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80097ac:	6006      	str	r6, [r0, #0]
 80097ae:	60c6      	str	r6, [r0, #12]
 80097b0:	b13c      	cbz	r4, 80097c2 <_Bfree+0x3a>
 80097b2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80097b4:	6862      	ldr	r2, [r4, #4]
 80097b6:	68db      	ldr	r3, [r3, #12]
 80097b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80097bc:	6021      	str	r1, [r4, #0]
 80097be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80097c2:	bd70      	pop	{r4, r5, r6, pc}
 80097c4:	0800a651 	.word	0x0800a651
 80097c8:	0800a738 	.word	0x0800a738

080097cc <__multadd>:
 80097cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097d0:	690e      	ldr	r6, [r1, #16]
 80097d2:	4607      	mov	r7, r0
 80097d4:	4698      	mov	r8, r3
 80097d6:	460c      	mov	r4, r1
 80097d8:	f101 0014 	add.w	r0, r1, #20
 80097dc:	2300      	movs	r3, #0
 80097de:	6805      	ldr	r5, [r0, #0]
 80097e0:	b2a9      	uxth	r1, r5
 80097e2:	fb02 8101 	mla	r1, r2, r1, r8
 80097e6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80097ea:	0c2d      	lsrs	r5, r5, #16
 80097ec:	fb02 c505 	mla	r5, r2, r5, ip
 80097f0:	b289      	uxth	r1, r1
 80097f2:	3301      	adds	r3, #1
 80097f4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80097f8:	429e      	cmp	r6, r3
 80097fa:	f840 1b04 	str.w	r1, [r0], #4
 80097fe:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8009802:	dcec      	bgt.n	80097de <__multadd+0x12>
 8009804:	f1b8 0f00 	cmp.w	r8, #0
 8009808:	d022      	beq.n	8009850 <__multadd+0x84>
 800980a:	68a3      	ldr	r3, [r4, #8]
 800980c:	42b3      	cmp	r3, r6
 800980e:	dc19      	bgt.n	8009844 <__multadd+0x78>
 8009810:	6861      	ldr	r1, [r4, #4]
 8009812:	4638      	mov	r0, r7
 8009814:	3101      	adds	r1, #1
 8009816:	f7ff ff77 	bl	8009708 <_Balloc>
 800981a:	4605      	mov	r5, r0
 800981c:	b928      	cbnz	r0, 800982a <__multadd+0x5e>
 800981e:	4602      	mov	r2, r0
 8009820:	4b0d      	ldr	r3, [pc, #52]	; (8009858 <__multadd+0x8c>)
 8009822:	480e      	ldr	r0, [pc, #56]	; (800985c <__multadd+0x90>)
 8009824:	21b5      	movs	r1, #181	; 0xb5
 8009826:	f000 fd67 	bl	800a2f8 <__assert_func>
 800982a:	6922      	ldr	r2, [r4, #16]
 800982c:	3202      	adds	r2, #2
 800982e:	f104 010c 	add.w	r1, r4, #12
 8009832:	0092      	lsls	r2, r2, #2
 8009834:	300c      	adds	r0, #12
 8009836:	f7fe f8f3 	bl	8007a20 <memcpy>
 800983a:	4621      	mov	r1, r4
 800983c:	4638      	mov	r0, r7
 800983e:	f7ff ffa3 	bl	8009788 <_Bfree>
 8009842:	462c      	mov	r4, r5
 8009844:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009848:	3601      	adds	r6, #1
 800984a:	f8c3 8014 	str.w	r8, [r3, #20]
 800984e:	6126      	str	r6, [r4, #16]
 8009850:	4620      	mov	r0, r4
 8009852:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009856:	bf00      	nop
 8009858:	0800a6c7 	.word	0x0800a6c7
 800985c:	0800a738 	.word	0x0800a738

08009860 <__hi0bits>:
 8009860:	0c03      	lsrs	r3, r0, #16
 8009862:	041b      	lsls	r3, r3, #16
 8009864:	b9d3      	cbnz	r3, 800989c <__hi0bits+0x3c>
 8009866:	0400      	lsls	r0, r0, #16
 8009868:	2310      	movs	r3, #16
 800986a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800986e:	bf04      	itt	eq
 8009870:	0200      	lsleq	r0, r0, #8
 8009872:	3308      	addeq	r3, #8
 8009874:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009878:	bf04      	itt	eq
 800987a:	0100      	lsleq	r0, r0, #4
 800987c:	3304      	addeq	r3, #4
 800987e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009882:	bf04      	itt	eq
 8009884:	0080      	lsleq	r0, r0, #2
 8009886:	3302      	addeq	r3, #2
 8009888:	2800      	cmp	r0, #0
 800988a:	db05      	blt.n	8009898 <__hi0bits+0x38>
 800988c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009890:	f103 0301 	add.w	r3, r3, #1
 8009894:	bf08      	it	eq
 8009896:	2320      	moveq	r3, #32
 8009898:	4618      	mov	r0, r3
 800989a:	4770      	bx	lr
 800989c:	2300      	movs	r3, #0
 800989e:	e7e4      	b.n	800986a <__hi0bits+0xa>

080098a0 <__lo0bits>:
 80098a0:	6803      	ldr	r3, [r0, #0]
 80098a2:	f013 0207 	ands.w	r2, r3, #7
 80098a6:	4601      	mov	r1, r0
 80098a8:	d00b      	beq.n	80098c2 <__lo0bits+0x22>
 80098aa:	07da      	lsls	r2, r3, #31
 80098ac:	d424      	bmi.n	80098f8 <__lo0bits+0x58>
 80098ae:	0798      	lsls	r0, r3, #30
 80098b0:	bf49      	itett	mi
 80098b2:	085b      	lsrmi	r3, r3, #1
 80098b4:	089b      	lsrpl	r3, r3, #2
 80098b6:	2001      	movmi	r0, #1
 80098b8:	600b      	strmi	r3, [r1, #0]
 80098ba:	bf5c      	itt	pl
 80098bc:	600b      	strpl	r3, [r1, #0]
 80098be:	2002      	movpl	r0, #2
 80098c0:	4770      	bx	lr
 80098c2:	b298      	uxth	r0, r3
 80098c4:	b9b0      	cbnz	r0, 80098f4 <__lo0bits+0x54>
 80098c6:	0c1b      	lsrs	r3, r3, #16
 80098c8:	2010      	movs	r0, #16
 80098ca:	f013 0fff 	tst.w	r3, #255	; 0xff
 80098ce:	bf04      	itt	eq
 80098d0:	0a1b      	lsreq	r3, r3, #8
 80098d2:	3008      	addeq	r0, #8
 80098d4:	071a      	lsls	r2, r3, #28
 80098d6:	bf04      	itt	eq
 80098d8:	091b      	lsreq	r3, r3, #4
 80098da:	3004      	addeq	r0, #4
 80098dc:	079a      	lsls	r2, r3, #30
 80098de:	bf04      	itt	eq
 80098e0:	089b      	lsreq	r3, r3, #2
 80098e2:	3002      	addeq	r0, #2
 80098e4:	07da      	lsls	r2, r3, #31
 80098e6:	d403      	bmi.n	80098f0 <__lo0bits+0x50>
 80098e8:	085b      	lsrs	r3, r3, #1
 80098ea:	f100 0001 	add.w	r0, r0, #1
 80098ee:	d005      	beq.n	80098fc <__lo0bits+0x5c>
 80098f0:	600b      	str	r3, [r1, #0]
 80098f2:	4770      	bx	lr
 80098f4:	4610      	mov	r0, r2
 80098f6:	e7e8      	b.n	80098ca <__lo0bits+0x2a>
 80098f8:	2000      	movs	r0, #0
 80098fa:	4770      	bx	lr
 80098fc:	2020      	movs	r0, #32
 80098fe:	4770      	bx	lr

08009900 <__i2b>:
 8009900:	b510      	push	{r4, lr}
 8009902:	460c      	mov	r4, r1
 8009904:	2101      	movs	r1, #1
 8009906:	f7ff feff 	bl	8009708 <_Balloc>
 800990a:	4602      	mov	r2, r0
 800990c:	b928      	cbnz	r0, 800991a <__i2b+0x1a>
 800990e:	4b05      	ldr	r3, [pc, #20]	; (8009924 <__i2b+0x24>)
 8009910:	4805      	ldr	r0, [pc, #20]	; (8009928 <__i2b+0x28>)
 8009912:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009916:	f000 fcef 	bl	800a2f8 <__assert_func>
 800991a:	2301      	movs	r3, #1
 800991c:	6144      	str	r4, [r0, #20]
 800991e:	6103      	str	r3, [r0, #16]
 8009920:	bd10      	pop	{r4, pc}
 8009922:	bf00      	nop
 8009924:	0800a6c7 	.word	0x0800a6c7
 8009928:	0800a738 	.word	0x0800a738

0800992c <__multiply>:
 800992c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009930:	4614      	mov	r4, r2
 8009932:	690a      	ldr	r2, [r1, #16]
 8009934:	6923      	ldr	r3, [r4, #16]
 8009936:	429a      	cmp	r2, r3
 8009938:	bfb8      	it	lt
 800993a:	460b      	movlt	r3, r1
 800993c:	460d      	mov	r5, r1
 800993e:	bfbc      	itt	lt
 8009940:	4625      	movlt	r5, r4
 8009942:	461c      	movlt	r4, r3
 8009944:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8009948:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800994c:	68ab      	ldr	r3, [r5, #8]
 800994e:	6869      	ldr	r1, [r5, #4]
 8009950:	eb0a 0709 	add.w	r7, sl, r9
 8009954:	42bb      	cmp	r3, r7
 8009956:	b085      	sub	sp, #20
 8009958:	bfb8      	it	lt
 800995a:	3101      	addlt	r1, #1
 800995c:	f7ff fed4 	bl	8009708 <_Balloc>
 8009960:	b930      	cbnz	r0, 8009970 <__multiply+0x44>
 8009962:	4602      	mov	r2, r0
 8009964:	4b42      	ldr	r3, [pc, #264]	; (8009a70 <__multiply+0x144>)
 8009966:	4843      	ldr	r0, [pc, #268]	; (8009a74 <__multiply+0x148>)
 8009968:	f240 115d 	movw	r1, #349	; 0x15d
 800996c:	f000 fcc4 	bl	800a2f8 <__assert_func>
 8009970:	f100 0614 	add.w	r6, r0, #20
 8009974:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009978:	4633      	mov	r3, r6
 800997a:	2200      	movs	r2, #0
 800997c:	4543      	cmp	r3, r8
 800997e:	d31e      	bcc.n	80099be <__multiply+0x92>
 8009980:	f105 0c14 	add.w	ip, r5, #20
 8009984:	f104 0314 	add.w	r3, r4, #20
 8009988:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800998c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009990:	9202      	str	r2, [sp, #8]
 8009992:	ebac 0205 	sub.w	r2, ip, r5
 8009996:	3a15      	subs	r2, #21
 8009998:	f022 0203 	bic.w	r2, r2, #3
 800999c:	3204      	adds	r2, #4
 800999e:	f105 0115 	add.w	r1, r5, #21
 80099a2:	458c      	cmp	ip, r1
 80099a4:	bf38      	it	cc
 80099a6:	2204      	movcc	r2, #4
 80099a8:	9201      	str	r2, [sp, #4]
 80099aa:	9a02      	ldr	r2, [sp, #8]
 80099ac:	9303      	str	r3, [sp, #12]
 80099ae:	429a      	cmp	r2, r3
 80099b0:	d808      	bhi.n	80099c4 <__multiply+0x98>
 80099b2:	2f00      	cmp	r7, #0
 80099b4:	dc55      	bgt.n	8009a62 <__multiply+0x136>
 80099b6:	6107      	str	r7, [r0, #16]
 80099b8:	b005      	add	sp, #20
 80099ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099be:	f843 2b04 	str.w	r2, [r3], #4
 80099c2:	e7db      	b.n	800997c <__multiply+0x50>
 80099c4:	f8b3 a000 	ldrh.w	sl, [r3]
 80099c8:	f1ba 0f00 	cmp.w	sl, #0
 80099cc:	d020      	beq.n	8009a10 <__multiply+0xe4>
 80099ce:	f105 0e14 	add.w	lr, r5, #20
 80099d2:	46b1      	mov	r9, r6
 80099d4:	2200      	movs	r2, #0
 80099d6:	f85e 4b04 	ldr.w	r4, [lr], #4
 80099da:	f8d9 b000 	ldr.w	fp, [r9]
 80099de:	b2a1      	uxth	r1, r4
 80099e0:	fa1f fb8b 	uxth.w	fp, fp
 80099e4:	fb0a b101 	mla	r1, sl, r1, fp
 80099e8:	4411      	add	r1, r2
 80099ea:	f8d9 2000 	ldr.w	r2, [r9]
 80099ee:	0c24      	lsrs	r4, r4, #16
 80099f0:	0c12      	lsrs	r2, r2, #16
 80099f2:	fb0a 2404 	mla	r4, sl, r4, r2
 80099f6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80099fa:	b289      	uxth	r1, r1
 80099fc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009a00:	45f4      	cmp	ip, lr
 8009a02:	f849 1b04 	str.w	r1, [r9], #4
 8009a06:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009a0a:	d8e4      	bhi.n	80099d6 <__multiply+0xaa>
 8009a0c:	9901      	ldr	r1, [sp, #4]
 8009a0e:	5072      	str	r2, [r6, r1]
 8009a10:	9a03      	ldr	r2, [sp, #12]
 8009a12:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009a16:	3304      	adds	r3, #4
 8009a18:	f1b9 0f00 	cmp.w	r9, #0
 8009a1c:	d01f      	beq.n	8009a5e <__multiply+0x132>
 8009a1e:	6834      	ldr	r4, [r6, #0]
 8009a20:	f105 0114 	add.w	r1, r5, #20
 8009a24:	46b6      	mov	lr, r6
 8009a26:	f04f 0a00 	mov.w	sl, #0
 8009a2a:	880a      	ldrh	r2, [r1, #0]
 8009a2c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009a30:	fb09 b202 	mla	r2, r9, r2, fp
 8009a34:	4492      	add	sl, r2
 8009a36:	b2a4      	uxth	r4, r4
 8009a38:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009a3c:	f84e 4b04 	str.w	r4, [lr], #4
 8009a40:	f851 4b04 	ldr.w	r4, [r1], #4
 8009a44:	f8be 2000 	ldrh.w	r2, [lr]
 8009a48:	0c24      	lsrs	r4, r4, #16
 8009a4a:	fb09 2404 	mla	r4, r9, r4, r2
 8009a4e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009a52:	458c      	cmp	ip, r1
 8009a54:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009a58:	d8e7      	bhi.n	8009a2a <__multiply+0xfe>
 8009a5a:	9a01      	ldr	r2, [sp, #4]
 8009a5c:	50b4      	str	r4, [r6, r2]
 8009a5e:	3604      	adds	r6, #4
 8009a60:	e7a3      	b.n	80099aa <__multiply+0x7e>
 8009a62:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d1a5      	bne.n	80099b6 <__multiply+0x8a>
 8009a6a:	3f01      	subs	r7, #1
 8009a6c:	e7a1      	b.n	80099b2 <__multiply+0x86>
 8009a6e:	bf00      	nop
 8009a70:	0800a6c7 	.word	0x0800a6c7
 8009a74:	0800a738 	.word	0x0800a738

08009a78 <__pow5mult>:
 8009a78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a7c:	4615      	mov	r5, r2
 8009a7e:	f012 0203 	ands.w	r2, r2, #3
 8009a82:	4606      	mov	r6, r0
 8009a84:	460f      	mov	r7, r1
 8009a86:	d007      	beq.n	8009a98 <__pow5mult+0x20>
 8009a88:	4c25      	ldr	r4, [pc, #148]	; (8009b20 <__pow5mult+0xa8>)
 8009a8a:	3a01      	subs	r2, #1
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009a92:	f7ff fe9b 	bl	80097cc <__multadd>
 8009a96:	4607      	mov	r7, r0
 8009a98:	10ad      	asrs	r5, r5, #2
 8009a9a:	d03d      	beq.n	8009b18 <__pow5mult+0xa0>
 8009a9c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009a9e:	b97c      	cbnz	r4, 8009ac0 <__pow5mult+0x48>
 8009aa0:	2010      	movs	r0, #16
 8009aa2:	f7ff fe29 	bl	80096f8 <malloc>
 8009aa6:	4602      	mov	r2, r0
 8009aa8:	6270      	str	r0, [r6, #36]	; 0x24
 8009aaa:	b928      	cbnz	r0, 8009ab8 <__pow5mult+0x40>
 8009aac:	4b1d      	ldr	r3, [pc, #116]	; (8009b24 <__pow5mult+0xac>)
 8009aae:	481e      	ldr	r0, [pc, #120]	; (8009b28 <__pow5mult+0xb0>)
 8009ab0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009ab4:	f000 fc20 	bl	800a2f8 <__assert_func>
 8009ab8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009abc:	6004      	str	r4, [r0, #0]
 8009abe:	60c4      	str	r4, [r0, #12]
 8009ac0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009ac4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009ac8:	b94c      	cbnz	r4, 8009ade <__pow5mult+0x66>
 8009aca:	f240 2171 	movw	r1, #625	; 0x271
 8009ace:	4630      	mov	r0, r6
 8009ad0:	f7ff ff16 	bl	8009900 <__i2b>
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	f8c8 0008 	str.w	r0, [r8, #8]
 8009ada:	4604      	mov	r4, r0
 8009adc:	6003      	str	r3, [r0, #0]
 8009ade:	f04f 0900 	mov.w	r9, #0
 8009ae2:	07eb      	lsls	r3, r5, #31
 8009ae4:	d50a      	bpl.n	8009afc <__pow5mult+0x84>
 8009ae6:	4639      	mov	r1, r7
 8009ae8:	4622      	mov	r2, r4
 8009aea:	4630      	mov	r0, r6
 8009aec:	f7ff ff1e 	bl	800992c <__multiply>
 8009af0:	4639      	mov	r1, r7
 8009af2:	4680      	mov	r8, r0
 8009af4:	4630      	mov	r0, r6
 8009af6:	f7ff fe47 	bl	8009788 <_Bfree>
 8009afa:	4647      	mov	r7, r8
 8009afc:	106d      	asrs	r5, r5, #1
 8009afe:	d00b      	beq.n	8009b18 <__pow5mult+0xa0>
 8009b00:	6820      	ldr	r0, [r4, #0]
 8009b02:	b938      	cbnz	r0, 8009b14 <__pow5mult+0x9c>
 8009b04:	4622      	mov	r2, r4
 8009b06:	4621      	mov	r1, r4
 8009b08:	4630      	mov	r0, r6
 8009b0a:	f7ff ff0f 	bl	800992c <__multiply>
 8009b0e:	6020      	str	r0, [r4, #0]
 8009b10:	f8c0 9000 	str.w	r9, [r0]
 8009b14:	4604      	mov	r4, r0
 8009b16:	e7e4      	b.n	8009ae2 <__pow5mult+0x6a>
 8009b18:	4638      	mov	r0, r7
 8009b1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b1e:	bf00      	nop
 8009b20:	0800a888 	.word	0x0800a888
 8009b24:	0800a651 	.word	0x0800a651
 8009b28:	0800a738 	.word	0x0800a738

08009b2c <__lshift>:
 8009b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b30:	460c      	mov	r4, r1
 8009b32:	6849      	ldr	r1, [r1, #4]
 8009b34:	6923      	ldr	r3, [r4, #16]
 8009b36:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009b3a:	68a3      	ldr	r3, [r4, #8]
 8009b3c:	4607      	mov	r7, r0
 8009b3e:	4691      	mov	r9, r2
 8009b40:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009b44:	f108 0601 	add.w	r6, r8, #1
 8009b48:	42b3      	cmp	r3, r6
 8009b4a:	db0b      	blt.n	8009b64 <__lshift+0x38>
 8009b4c:	4638      	mov	r0, r7
 8009b4e:	f7ff fddb 	bl	8009708 <_Balloc>
 8009b52:	4605      	mov	r5, r0
 8009b54:	b948      	cbnz	r0, 8009b6a <__lshift+0x3e>
 8009b56:	4602      	mov	r2, r0
 8009b58:	4b28      	ldr	r3, [pc, #160]	; (8009bfc <__lshift+0xd0>)
 8009b5a:	4829      	ldr	r0, [pc, #164]	; (8009c00 <__lshift+0xd4>)
 8009b5c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009b60:	f000 fbca 	bl	800a2f8 <__assert_func>
 8009b64:	3101      	adds	r1, #1
 8009b66:	005b      	lsls	r3, r3, #1
 8009b68:	e7ee      	b.n	8009b48 <__lshift+0x1c>
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	f100 0114 	add.w	r1, r0, #20
 8009b70:	f100 0210 	add.w	r2, r0, #16
 8009b74:	4618      	mov	r0, r3
 8009b76:	4553      	cmp	r3, sl
 8009b78:	db33      	blt.n	8009be2 <__lshift+0xb6>
 8009b7a:	6920      	ldr	r0, [r4, #16]
 8009b7c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009b80:	f104 0314 	add.w	r3, r4, #20
 8009b84:	f019 091f 	ands.w	r9, r9, #31
 8009b88:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009b8c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009b90:	d02b      	beq.n	8009bea <__lshift+0xbe>
 8009b92:	f1c9 0e20 	rsb	lr, r9, #32
 8009b96:	468a      	mov	sl, r1
 8009b98:	2200      	movs	r2, #0
 8009b9a:	6818      	ldr	r0, [r3, #0]
 8009b9c:	fa00 f009 	lsl.w	r0, r0, r9
 8009ba0:	4302      	orrs	r2, r0
 8009ba2:	f84a 2b04 	str.w	r2, [sl], #4
 8009ba6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009baa:	459c      	cmp	ip, r3
 8009bac:	fa22 f20e 	lsr.w	r2, r2, lr
 8009bb0:	d8f3      	bhi.n	8009b9a <__lshift+0x6e>
 8009bb2:	ebac 0304 	sub.w	r3, ip, r4
 8009bb6:	3b15      	subs	r3, #21
 8009bb8:	f023 0303 	bic.w	r3, r3, #3
 8009bbc:	3304      	adds	r3, #4
 8009bbe:	f104 0015 	add.w	r0, r4, #21
 8009bc2:	4584      	cmp	ip, r0
 8009bc4:	bf38      	it	cc
 8009bc6:	2304      	movcc	r3, #4
 8009bc8:	50ca      	str	r2, [r1, r3]
 8009bca:	b10a      	cbz	r2, 8009bd0 <__lshift+0xa4>
 8009bcc:	f108 0602 	add.w	r6, r8, #2
 8009bd0:	3e01      	subs	r6, #1
 8009bd2:	4638      	mov	r0, r7
 8009bd4:	612e      	str	r6, [r5, #16]
 8009bd6:	4621      	mov	r1, r4
 8009bd8:	f7ff fdd6 	bl	8009788 <_Bfree>
 8009bdc:	4628      	mov	r0, r5
 8009bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009be2:	f842 0f04 	str.w	r0, [r2, #4]!
 8009be6:	3301      	adds	r3, #1
 8009be8:	e7c5      	b.n	8009b76 <__lshift+0x4a>
 8009bea:	3904      	subs	r1, #4
 8009bec:	f853 2b04 	ldr.w	r2, [r3], #4
 8009bf0:	f841 2f04 	str.w	r2, [r1, #4]!
 8009bf4:	459c      	cmp	ip, r3
 8009bf6:	d8f9      	bhi.n	8009bec <__lshift+0xc0>
 8009bf8:	e7ea      	b.n	8009bd0 <__lshift+0xa4>
 8009bfa:	bf00      	nop
 8009bfc:	0800a6c7 	.word	0x0800a6c7
 8009c00:	0800a738 	.word	0x0800a738

08009c04 <__mcmp>:
 8009c04:	b530      	push	{r4, r5, lr}
 8009c06:	6902      	ldr	r2, [r0, #16]
 8009c08:	690c      	ldr	r4, [r1, #16]
 8009c0a:	1b12      	subs	r2, r2, r4
 8009c0c:	d10e      	bne.n	8009c2c <__mcmp+0x28>
 8009c0e:	f100 0314 	add.w	r3, r0, #20
 8009c12:	3114      	adds	r1, #20
 8009c14:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009c18:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009c1c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009c20:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009c24:	42a5      	cmp	r5, r4
 8009c26:	d003      	beq.n	8009c30 <__mcmp+0x2c>
 8009c28:	d305      	bcc.n	8009c36 <__mcmp+0x32>
 8009c2a:	2201      	movs	r2, #1
 8009c2c:	4610      	mov	r0, r2
 8009c2e:	bd30      	pop	{r4, r5, pc}
 8009c30:	4283      	cmp	r3, r0
 8009c32:	d3f3      	bcc.n	8009c1c <__mcmp+0x18>
 8009c34:	e7fa      	b.n	8009c2c <__mcmp+0x28>
 8009c36:	f04f 32ff 	mov.w	r2, #4294967295
 8009c3a:	e7f7      	b.n	8009c2c <__mcmp+0x28>

08009c3c <__mdiff>:
 8009c3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c40:	460c      	mov	r4, r1
 8009c42:	4606      	mov	r6, r0
 8009c44:	4611      	mov	r1, r2
 8009c46:	4620      	mov	r0, r4
 8009c48:	4617      	mov	r7, r2
 8009c4a:	f7ff ffdb 	bl	8009c04 <__mcmp>
 8009c4e:	1e05      	subs	r5, r0, #0
 8009c50:	d110      	bne.n	8009c74 <__mdiff+0x38>
 8009c52:	4629      	mov	r1, r5
 8009c54:	4630      	mov	r0, r6
 8009c56:	f7ff fd57 	bl	8009708 <_Balloc>
 8009c5a:	b930      	cbnz	r0, 8009c6a <__mdiff+0x2e>
 8009c5c:	4b39      	ldr	r3, [pc, #228]	; (8009d44 <__mdiff+0x108>)
 8009c5e:	4602      	mov	r2, r0
 8009c60:	f240 2132 	movw	r1, #562	; 0x232
 8009c64:	4838      	ldr	r0, [pc, #224]	; (8009d48 <__mdiff+0x10c>)
 8009c66:	f000 fb47 	bl	800a2f8 <__assert_func>
 8009c6a:	2301      	movs	r3, #1
 8009c6c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009c70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c74:	bfa4      	itt	ge
 8009c76:	463b      	movge	r3, r7
 8009c78:	4627      	movge	r7, r4
 8009c7a:	4630      	mov	r0, r6
 8009c7c:	6879      	ldr	r1, [r7, #4]
 8009c7e:	bfa6      	itte	ge
 8009c80:	461c      	movge	r4, r3
 8009c82:	2500      	movge	r5, #0
 8009c84:	2501      	movlt	r5, #1
 8009c86:	f7ff fd3f 	bl	8009708 <_Balloc>
 8009c8a:	b920      	cbnz	r0, 8009c96 <__mdiff+0x5a>
 8009c8c:	4b2d      	ldr	r3, [pc, #180]	; (8009d44 <__mdiff+0x108>)
 8009c8e:	4602      	mov	r2, r0
 8009c90:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009c94:	e7e6      	b.n	8009c64 <__mdiff+0x28>
 8009c96:	693e      	ldr	r6, [r7, #16]
 8009c98:	60c5      	str	r5, [r0, #12]
 8009c9a:	6925      	ldr	r5, [r4, #16]
 8009c9c:	f107 0114 	add.w	r1, r7, #20
 8009ca0:	f104 0914 	add.w	r9, r4, #20
 8009ca4:	f100 0e14 	add.w	lr, r0, #20
 8009ca8:	f107 0210 	add.w	r2, r7, #16
 8009cac:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8009cb0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8009cb4:	46f2      	mov	sl, lr
 8009cb6:	2700      	movs	r7, #0
 8009cb8:	f859 3b04 	ldr.w	r3, [r9], #4
 8009cbc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009cc0:	fa1f f883 	uxth.w	r8, r3
 8009cc4:	fa17 f78b 	uxtah	r7, r7, fp
 8009cc8:	0c1b      	lsrs	r3, r3, #16
 8009cca:	eba7 0808 	sub.w	r8, r7, r8
 8009cce:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009cd2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009cd6:	fa1f f888 	uxth.w	r8, r8
 8009cda:	141f      	asrs	r7, r3, #16
 8009cdc:	454d      	cmp	r5, r9
 8009cde:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009ce2:	f84a 3b04 	str.w	r3, [sl], #4
 8009ce6:	d8e7      	bhi.n	8009cb8 <__mdiff+0x7c>
 8009ce8:	1b2b      	subs	r3, r5, r4
 8009cea:	3b15      	subs	r3, #21
 8009cec:	f023 0303 	bic.w	r3, r3, #3
 8009cf0:	3304      	adds	r3, #4
 8009cf2:	3415      	adds	r4, #21
 8009cf4:	42a5      	cmp	r5, r4
 8009cf6:	bf38      	it	cc
 8009cf8:	2304      	movcc	r3, #4
 8009cfa:	4419      	add	r1, r3
 8009cfc:	4473      	add	r3, lr
 8009cfe:	469e      	mov	lr, r3
 8009d00:	460d      	mov	r5, r1
 8009d02:	4565      	cmp	r5, ip
 8009d04:	d30e      	bcc.n	8009d24 <__mdiff+0xe8>
 8009d06:	f10c 0203 	add.w	r2, ip, #3
 8009d0a:	1a52      	subs	r2, r2, r1
 8009d0c:	f022 0203 	bic.w	r2, r2, #3
 8009d10:	3903      	subs	r1, #3
 8009d12:	458c      	cmp	ip, r1
 8009d14:	bf38      	it	cc
 8009d16:	2200      	movcc	r2, #0
 8009d18:	441a      	add	r2, r3
 8009d1a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009d1e:	b17b      	cbz	r3, 8009d40 <__mdiff+0x104>
 8009d20:	6106      	str	r6, [r0, #16]
 8009d22:	e7a5      	b.n	8009c70 <__mdiff+0x34>
 8009d24:	f855 8b04 	ldr.w	r8, [r5], #4
 8009d28:	fa17 f488 	uxtah	r4, r7, r8
 8009d2c:	1422      	asrs	r2, r4, #16
 8009d2e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8009d32:	b2a4      	uxth	r4, r4
 8009d34:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009d38:	f84e 4b04 	str.w	r4, [lr], #4
 8009d3c:	1417      	asrs	r7, r2, #16
 8009d3e:	e7e0      	b.n	8009d02 <__mdiff+0xc6>
 8009d40:	3e01      	subs	r6, #1
 8009d42:	e7ea      	b.n	8009d1a <__mdiff+0xde>
 8009d44:	0800a6c7 	.word	0x0800a6c7
 8009d48:	0800a738 	.word	0x0800a738

08009d4c <__d2b>:
 8009d4c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009d50:	4689      	mov	r9, r1
 8009d52:	2101      	movs	r1, #1
 8009d54:	ec57 6b10 	vmov	r6, r7, d0
 8009d58:	4690      	mov	r8, r2
 8009d5a:	f7ff fcd5 	bl	8009708 <_Balloc>
 8009d5e:	4604      	mov	r4, r0
 8009d60:	b930      	cbnz	r0, 8009d70 <__d2b+0x24>
 8009d62:	4602      	mov	r2, r0
 8009d64:	4b25      	ldr	r3, [pc, #148]	; (8009dfc <__d2b+0xb0>)
 8009d66:	4826      	ldr	r0, [pc, #152]	; (8009e00 <__d2b+0xb4>)
 8009d68:	f240 310a 	movw	r1, #778	; 0x30a
 8009d6c:	f000 fac4 	bl	800a2f8 <__assert_func>
 8009d70:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009d74:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009d78:	bb35      	cbnz	r5, 8009dc8 <__d2b+0x7c>
 8009d7a:	2e00      	cmp	r6, #0
 8009d7c:	9301      	str	r3, [sp, #4]
 8009d7e:	d028      	beq.n	8009dd2 <__d2b+0x86>
 8009d80:	4668      	mov	r0, sp
 8009d82:	9600      	str	r6, [sp, #0]
 8009d84:	f7ff fd8c 	bl	80098a0 <__lo0bits>
 8009d88:	9900      	ldr	r1, [sp, #0]
 8009d8a:	b300      	cbz	r0, 8009dce <__d2b+0x82>
 8009d8c:	9a01      	ldr	r2, [sp, #4]
 8009d8e:	f1c0 0320 	rsb	r3, r0, #32
 8009d92:	fa02 f303 	lsl.w	r3, r2, r3
 8009d96:	430b      	orrs	r3, r1
 8009d98:	40c2      	lsrs	r2, r0
 8009d9a:	6163      	str	r3, [r4, #20]
 8009d9c:	9201      	str	r2, [sp, #4]
 8009d9e:	9b01      	ldr	r3, [sp, #4]
 8009da0:	61a3      	str	r3, [r4, #24]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	bf14      	ite	ne
 8009da6:	2202      	movne	r2, #2
 8009da8:	2201      	moveq	r2, #1
 8009daa:	6122      	str	r2, [r4, #16]
 8009dac:	b1d5      	cbz	r5, 8009de4 <__d2b+0x98>
 8009dae:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009db2:	4405      	add	r5, r0
 8009db4:	f8c9 5000 	str.w	r5, [r9]
 8009db8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009dbc:	f8c8 0000 	str.w	r0, [r8]
 8009dc0:	4620      	mov	r0, r4
 8009dc2:	b003      	add	sp, #12
 8009dc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009dc8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009dcc:	e7d5      	b.n	8009d7a <__d2b+0x2e>
 8009dce:	6161      	str	r1, [r4, #20]
 8009dd0:	e7e5      	b.n	8009d9e <__d2b+0x52>
 8009dd2:	a801      	add	r0, sp, #4
 8009dd4:	f7ff fd64 	bl	80098a0 <__lo0bits>
 8009dd8:	9b01      	ldr	r3, [sp, #4]
 8009dda:	6163      	str	r3, [r4, #20]
 8009ddc:	2201      	movs	r2, #1
 8009dde:	6122      	str	r2, [r4, #16]
 8009de0:	3020      	adds	r0, #32
 8009de2:	e7e3      	b.n	8009dac <__d2b+0x60>
 8009de4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009de8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009dec:	f8c9 0000 	str.w	r0, [r9]
 8009df0:	6918      	ldr	r0, [r3, #16]
 8009df2:	f7ff fd35 	bl	8009860 <__hi0bits>
 8009df6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009dfa:	e7df      	b.n	8009dbc <__d2b+0x70>
 8009dfc:	0800a6c7 	.word	0x0800a6c7
 8009e00:	0800a738 	.word	0x0800a738

08009e04 <_calloc_r>:
 8009e04:	b513      	push	{r0, r1, r4, lr}
 8009e06:	434a      	muls	r2, r1
 8009e08:	4611      	mov	r1, r2
 8009e0a:	9201      	str	r2, [sp, #4]
 8009e0c:	f000 f85a 	bl	8009ec4 <_malloc_r>
 8009e10:	4604      	mov	r4, r0
 8009e12:	b118      	cbz	r0, 8009e1c <_calloc_r+0x18>
 8009e14:	9a01      	ldr	r2, [sp, #4]
 8009e16:	2100      	movs	r1, #0
 8009e18:	f7fd fe10 	bl	8007a3c <memset>
 8009e1c:	4620      	mov	r0, r4
 8009e1e:	b002      	add	sp, #8
 8009e20:	bd10      	pop	{r4, pc}
	...

08009e24 <_free_r>:
 8009e24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009e26:	2900      	cmp	r1, #0
 8009e28:	d048      	beq.n	8009ebc <_free_r+0x98>
 8009e2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e2e:	9001      	str	r0, [sp, #4]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	f1a1 0404 	sub.w	r4, r1, #4
 8009e36:	bfb8      	it	lt
 8009e38:	18e4      	addlt	r4, r4, r3
 8009e3a:	f000 fae3 	bl	800a404 <__malloc_lock>
 8009e3e:	4a20      	ldr	r2, [pc, #128]	; (8009ec0 <_free_r+0x9c>)
 8009e40:	9801      	ldr	r0, [sp, #4]
 8009e42:	6813      	ldr	r3, [r2, #0]
 8009e44:	4615      	mov	r5, r2
 8009e46:	b933      	cbnz	r3, 8009e56 <_free_r+0x32>
 8009e48:	6063      	str	r3, [r4, #4]
 8009e4a:	6014      	str	r4, [r2, #0]
 8009e4c:	b003      	add	sp, #12
 8009e4e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009e52:	f000 badd 	b.w	800a410 <__malloc_unlock>
 8009e56:	42a3      	cmp	r3, r4
 8009e58:	d90b      	bls.n	8009e72 <_free_r+0x4e>
 8009e5a:	6821      	ldr	r1, [r4, #0]
 8009e5c:	1862      	adds	r2, r4, r1
 8009e5e:	4293      	cmp	r3, r2
 8009e60:	bf04      	itt	eq
 8009e62:	681a      	ldreq	r2, [r3, #0]
 8009e64:	685b      	ldreq	r3, [r3, #4]
 8009e66:	6063      	str	r3, [r4, #4]
 8009e68:	bf04      	itt	eq
 8009e6a:	1852      	addeq	r2, r2, r1
 8009e6c:	6022      	streq	r2, [r4, #0]
 8009e6e:	602c      	str	r4, [r5, #0]
 8009e70:	e7ec      	b.n	8009e4c <_free_r+0x28>
 8009e72:	461a      	mov	r2, r3
 8009e74:	685b      	ldr	r3, [r3, #4]
 8009e76:	b10b      	cbz	r3, 8009e7c <_free_r+0x58>
 8009e78:	42a3      	cmp	r3, r4
 8009e7a:	d9fa      	bls.n	8009e72 <_free_r+0x4e>
 8009e7c:	6811      	ldr	r1, [r2, #0]
 8009e7e:	1855      	adds	r5, r2, r1
 8009e80:	42a5      	cmp	r5, r4
 8009e82:	d10b      	bne.n	8009e9c <_free_r+0x78>
 8009e84:	6824      	ldr	r4, [r4, #0]
 8009e86:	4421      	add	r1, r4
 8009e88:	1854      	adds	r4, r2, r1
 8009e8a:	42a3      	cmp	r3, r4
 8009e8c:	6011      	str	r1, [r2, #0]
 8009e8e:	d1dd      	bne.n	8009e4c <_free_r+0x28>
 8009e90:	681c      	ldr	r4, [r3, #0]
 8009e92:	685b      	ldr	r3, [r3, #4]
 8009e94:	6053      	str	r3, [r2, #4]
 8009e96:	4421      	add	r1, r4
 8009e98:	6011      	str	r1, [r2, #0]
 8009e9a:	e7d7      	b.n	8009e4c <_free_r+0x28>
 8009e9c:	d902      	bls.n	8009ea4 <_free_r+0x80>
 8009e9e:	230c      	movs	r3, #12
 8009ea0:	6003      	str	r3, [r0, #0]
 8009ea2:	e7d3      	b.n	8009e4c <_free_r+0x28>
 8009ea4:	6825      	ldr	r5, [r4, #0]
 8009ea6:	1961      	adds	r1, r4, r5
 8009ea8:	428b      	cmp	r3, r1
 8009eaa:	bf04      	itt	eq
 8009eac:	6819      	ldreq	r1, [r3, #0]
 8009eae:	685b      	ldreq	r3, [r3, #4]
 8009eb0:	6063      	str	r3, [r4, #4]
 8009eb2:	bf04      	itt	eq
 8009eb4:	1949      	addeq	r1, r1, r5
 8009eb6:	6021      	streq	r1, [r4, #0]
 8009eb8:	6054      	str	r4, [r2, #4]
 8009eba:	e7c7      	b.n	8009e4c <_free_r+0x28>
 8009ebc:	b003      	add	sp, #12
 8009ebe:	bd30      	pop	{r4, r5, pc}
 8009ec0:	20004d90 	.word	0x20004d90

08009ec4 <_malloc_r>:
 8009ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ec6:	1ccd      	adds	r5, r1, #3
 8009ec8:	f025 0503 	bic.w	r5, r5, #3
 8009ecc:	3508      	adds	r5, #8
 8009ece:	2d0c      	cmp	r5, #12
 8009ed0:	bf38      	it	cc
 8009ed2:	250c      	movcc	r5, #12
 8009ed4:	2d00      	cmp	r5, #0
 8009ed6:	4606      	mov	r6, r0
 8009ed8:	db01      	blt.n	8009ede <_malloc_r+0x1a>
 8009eda:	42a9      	cmp	r1, r5
 8009edc:	d903      	bls.n	8009ee6 <_malloc_r+0x22>
 8009ede:	230c      	movs	r3, #12
 8009ee0:	6033      	str	r3, [r6, #0]
 8009ee2:	2000      	movs	r0, #0
 8009ee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ee6:	f000 fa8d 	bl	800a404 <__malloc_lock>
 8009eea:	4921      	ldr	r1, [pc, #132]	; (8009f70 <_malloc_r+0xac>)
 8009eec:	680a      	ldr	r2, [r1, #0]
 8009eee:	4614      	mov	r4, r2
 8009ef0:	b99c      	cbnz	r4, 8009f1a <_malloc_r+0x56>
 8009ef2:	4f20      	ldr	r7, [pc, #128]	; (8009f74 <_malloc_r+0xb0>)
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	b923      	cbnz	r3, 8009f02 <_malloc_r+0x3e>
 8009ef8:	4621      	mov	r1, r4
 8009efa:	4630      	mov	r0, r6
 8009efc:	f000 f996 	bl	800a22c <_sbrk_r>
 8009f00:	6038      	str	r0, [r7, #0]
 8009f02:	4629      	mov	r1, r5
 8009f04:	4630      	mov	r0, r6
 8009f06:	f000 f991 	bl	800a22c <_sbrk_r>
 8009f0a:	1c43      	adds	r3, r0, #1
 8009f0c:	d123      	bne.n	8009f56 <_malloc_r+0x92>
 8009f0e:	230c      	movs	r3, #12
 8009f10:	6033      	str	r3, [r6, #0]
 8009f12:	4630      	mov	r0, r6
 8009f14:	f000 fa7c 	bl	800a410 <__malloc_unlock>
 8009f18:	e7e3      	b.n	8009ee2 <_malloc_r+0x1e>
 8009f1a:	6823      	ldr	r3, [r4, #0]
 8009f1c:	1b5b      	subs	r3, r3, r5
 8009f1e:	d417      	bmi.n	8009f50 <_malloc_r+0x8c>
 8009f20:	2b0b      	cmp	r3, #11
 8009f22:	d903      	bls.n	8009f2c <_malloc_r+0x68>
 8009f24:	6023      	str	r3, [r4, #0]
 8009f26:	441c      	add	r4, r3
 8009f28:	6025      	str	r5, [r4, #0]
 8009f2a:	e004      	b.n	8009f36 <_malloc_r+0x72>
 8009f2c:	6863      	ldr	r3, [r4, #4]
 8009f2e:	42a2      	cmp	r2, r4
 8009f30:	bf0c      	ite	eq
 8009f32:	600b      	streq	r3, [r1, #0]
 8009f34:	6053      	strne	r3, [r2, #4]
 8009f36:	4630      	mov	r0, r6
 8009f38:	f000 fa6a 	bl	800a410 <__malloc_unlock>
 8009f3c:	f104 000b 	add.w	r0, r4, #11
 8009f40:	1d23      	adds	r3, r4, #4
 8009f42:	f020 0007 	bic.w	r0, r0, #7
 8009f46:	1ac2      	subs	r2, r0, r3
 8009f48:	d0cc      	beq.n	8009ee4 <_malloc_r+0x20>
 8009f4a:	1a1b      	subs	r3, r3, r0
 8009f4c:	50a3      	str	r3, [r4, r2]
 8009f4e:	e7c9      	b.n	8009ee4 <_malloc_r+0x20>
 8009f50:	4622      	mov	r2, r4
 8009f52:	6864      	ldr	r4, [r4, #4]
 8009f54:	e7cc      	b.n	8009ef0 <_malloc_r+0x2c>
 8009f56:	1cc4      	adds	r4, r0, #3
 8009f58:	f024 0403 	bic.w	r4, r4, #3
 8009f5c:	42a0      	cmp	r0, r4
 8009f5e:	d0e3      	beq.n	8009f28 <_malloc_r+0x64>
 8009f60:	1a21      	subs	r1, r4, r0
 8009f62:	4630      	mov	r0, r6
 8009f64:	f000 f962 	bl	800a22c <_sbrk_r>
 8009f68:	3001      	adds	r0, #1
 8009f6a:	d1dd      	bne.n	8009f28 <_malloc_r+0x64>
 8009f6c:	e7cf      	b.n	8009f0e <_malloc_r+0x4a>
 8009f6e:	bf00      	nop
 8009f70:	20004d90 	.word	0x20004d90
 8009f74:	20004d94 	.word	0x20004d94

08009f78 <__sfputc_r>:
 8009f78:	6893      	ldr	r3, [r2, #8]
 8009f7a:	3b01      	subs	r3, #1
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	b410      	push	{r4}
 8009f80:	6093      	str	r3, [r2, #8]
 8009f82:	da08      	bge.n	8009f96 <__sfputc_r+0x1e>
 8009f84:	6994      	ldr	r4, [r2, #24]
 8009f86:	42a3      	cmp	r3, r4
 8009f88:	db01      	blt.n	8009f8e <__sfputc_r+0x16>
 8009f8a:	290a      	cmp	r1, #10
 8009f8c:	d103      	bne.n	8009f96 <__sfputc_r+0x1e>
 8009f8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f92:	f7fe ba53 	b.w	800843c <__swbuf_r>
 8009f96:	6813      	ldr	r3, [r2, #0]
 8009f98:	1c58      	adds	r0, r3, #1
 8009f9a:	6010      	str	r0, [r2, #0]
 8009f9c:	7019      	strb	r1, [r3, #0]
 8009f9e:	4608      	mov	r0, r1
 8009fa0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009fa4:	4770      	bx	lr

08009fa6 <__sfputs_r>:
 8009fa6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fa8:	4606      	mov	r6, r0
 8009faa:	460f      	mov	r7, r1
 8009fac:	4614      	mov	r4, r2
 8009fae:	18d5      	adds	r5, r2, r3
 8009fb0:	42ac      	cmp	r4, r5
 8009fb2:	d101      	bne.n	8009fb8 <__sfputs_r+0x12>
 8009fb4:	2000      	movs	r0, #0
 8009fb6:	e007      	b.n	8009fc8 <__sfputs_r+0x22>
 8009fb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fbc:	463a      	mov	r2, r7
 8009fbe:	4630      	mov	r0, r6
 8009fc0:	f7ff ffda 	bl	8009f78 <__sfputc_r>
 8009fc4:	1c43      	adds	r3, r0, #1
 8009fc6:	d1f3      	bne.n	8009fb0 <__sfputs_r+0xa>
 8009fc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009fcc <_vfiprintf_r>:
 8009fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fd0:	460d      	mov	r5, r1
 8009fd2:	b09d      	sub	sp, #116	; 0x74
 8009fd4:	4614      	mov	r4, r2
 8009fd6:	4698      	mov	r8, r3
 8009fd8:	4606      	mov	r6, r0
 8009fda:	b118      	cbz	r0, 8009fe4 <_vfiprintf_r+0x18>
 8009fdc:	6983      	ldr	r3, [r0, #24]
 8009fde:	b90b      	cbnz	r3, 8009fe4 <_vfiprintf_r+0x18>
 8009fe0:	f7ff fa80 	bl	80094e4 <__sinit>
 8009fe4:	4b89      	ldr	r3, [pc, #548]	; (800a20c <_vfiprintf_r+0x240>)
 8009fe6:	429d      	cmp	r5, r3
 8009fe8:	d11b      	bne.n	800a022 <_vfiprintf_r+0x56>
 8009fea:	6875      	ldr	r5, [r6, #4]
 8009fec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009fee:	07d9      	lsls	r1, r3, #31
 8009ff0:	d405      	bmi.n	8009ffe <_vfiprintf_r+0x32>
 8009ff2:	89ab      	ldrh	r3, [r5, #12]
 8009ff4:	059a      	lsls	r2, r3, #22
 8009ff6:	d402      	bmi.n	8009ffe <_vfiprintf_r+0x32>
 8009ff8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009ffa:	f7ff fb16 	bl	800962a <__retarget_lock_acquire_recursive>
 8009ffe:	89ab      	ldrh	r3, [r5, #12]
 800a000:	071b      	lsls	r3, r3, #28
 800a002:	d501      	bpl.n	800a008 <_vfiprintf_r+0x3c>
 800a004:	692b      	ldr	r3, [r5, #16]
 800a006:	b9eb      	cbnz	r3, 800a044 <_vfiprintf_r+0x78>
 800a008:	4629      	mov	r1, r5
 800a00a:	4630      	mov	r0, r6
 800a00c:	f7fe fa68 	bl	80084e0 <__swsetup_r>
 800a010:	b1c0      	cbz	r0, 800a044 <_vfiprintf_r+0x78>
 800a012:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a014:	07dc      	lsls	r4, r3, #31
 800a016:	d50e      	bpl.n	800a036 <_vfiprintf_r+0x6a>
 800a018:	f04f 30ff 	mov.w	r0, #4294967295
 800a01c:	b01d      	add	sp, #116	; 0x74
 800a01e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a022:	4b7b      	ldr	r3, [pc, #492]	; (800a210 <_vfiprintf_r+0x244>)
 800a024:	429d      	cmp	r5, r3
 800a026:	d101      	bne.n	800a02c <_vfiprintf_r+0x60>
 800a028:	68b5      	ldr	r5, [r6, #8]
 800a02a:	e7df      	b.n	8009fec <_vfiprintf_r+0x20>
 800a02c:	4b79      	ldr	r3, [pc, #484]	; (800a214 <_vfiprintf_r+0x248>)
 800a02e:	429d      	cmp	r5, r3
 800a030:	bf08      	it	eq
 800a032:	68f5      	ldreq	r5, [r6, #12]
 800a034:	e7da      	b.n	8009fec <_vfiprintf_r+0x20>
 800a036:	89ab      	ldrh	r3, [r5, #12]
 800a038:	0598      	lsls	r0, r3, #22
 800a03a:	d4ed      	bmi.n	800a018 <_vfiprintf_r+0x4c>
 800a03c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a03e:	f7ff faf5 	bl	800962c <__retarget_lock_release_recursive>
 800a042:	e7e9      	b.n	800a018 <_vfiprintf_r+0x4c>
 800a044:	2300      	movs	r3, #0
 800a046:	9309      	str	r3, [sp, #36]	; 0x24
 800a048:	2320      	movs	r3, #32
 800a04a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a04e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a052:	2330      	movs	r3, #48	; 0x30
 800a054:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a218 <_vfiprintf_r+0x24c>
 800a058:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a05c:	f04f 0901 	mov.w	r9, #1
 800a060:	4623      	mov	r3, r4
 800a062:	469a      	mov	sl, r3
 800a064:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a068:	b10a      	cbz	r2, 800a06e <_vfiprintf_r+0xa2>
 800a06a:	2a25      	cmp	r2, #37	; 0x25
 800a06c:	d1f9      	bne.n	800a062 <_vfiprintf_r+0x96>
 800a06e:	ebba 0b04 	subs.w	fp, sl, r4
 800a072:	d00b      	beq.n	800a08c <_vfiprintf_r+0xc0>
 800a074:	465b      	mov	r3, fp
 800a076:	4622      	mov	r2, r4
 800a078:	4629      	mov	r1, r5
 800a07a:	4630      	mov	r0, r6
 800a07c:	f7ff ff93 	bl	8009fa6 <__sfputs_r>
 800a080:	3001      	adds	r0, #1
 800a082:	f000 80aa 	beq.w	800a1da <_vfiprintf_r+0x20e>
 800a086:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a088:	445a      	add	r2, fp
 800a08a:	9209      	str	r2, [sp, #36]	; 0x24
 800a08c:	f89a 3000 	ldrb.w	r3, [sl]
 800a090:	2b00      	cmp	r3, #0
 800a092:	f000 80a2 	beq.w	800a1da <_vfiprintf_r+0x20e>
 800a096:	2300      	movs	r3, #0
 800a098:	f04f 32ff 	mov.w	r2, #4294967295
 800a09c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a0a0:	f10a 0a01 	add.w	sl, sl, #1
 800a0a4:	9304      	str	r3, [sp, #16]
 800a0a6:	9307      	str	r3, [sp, #28]
 800a0a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a0ac:	931a      	str	r3, [sp, #104]	; 0x68
 800a0ae:	4654      	mov	r4, sl
 800a0b0:	2205      	movs	r2, #5
 800a0b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0b6:	4858      	ldr	r0, [pc, #352]	; (800a218 <_vfiprintf_r+0x24c>)
 800a0b8:	f7f6 f89a 	bl	80001f0 <memchr>
 800a0bc:	9a04      	ldr	r2, [sp, #16]
 800a0be:	b9d8      	cbnz	r0, 800a0f8 <_vfiprintf_r+0x12c>
 800a0c0:	06d1      	lsls	r1, r2, #27
 800a0c2:	bf44      	itt	mi
 800a0c4:	2320      	movmi	r3, #32
 800a0c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0ca:	0713      	lsls	r3, r2, #28
 800a0cc:	bf44      	itt	mi
 800a0ce:	232b      	movmi	r3, #43	; 0x2b
 800a0d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0d4:	f89a 3000 	ldrb.w	r3, [sl]
 800a0d8:	2b2a      	cmp	r3, #42	; 0x2a
 800a0da:	d015      	beq.n	800a108 <_vfiprintf_r+0x13c>
 800a0dc:	9a07      	ldr	r2, [sp, #28]
 800a0de:	4654      	mov	r4, sl
 800a0e0:	2000      	movs	r0, #0
 800a0e2:	f04f 0c0a 	mov.w	ip, #10
 800a0e6:	4621      	mov	r1, r4
 800a0e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a0ec:	3b30      	subs	r3, #48	; 0x30
 800a0ee:	2b09      	cmp	r3, #9
 800a0f0:	d94e      	bls.n	800a190 <_vfiprintf_r+0x1c4>
 800a0f2:	b1b0      	cbz	r0, 800a122 <_vfiprintf_r+0x156>
 800a0f4:	9207      	str	r2, [sp, #28]
 800a0f6:	e014      	b.n	800a122 <_vfiprintf_r+0x156>
 800a0f8:	eba0 0308 	sub.w	r3, r0, r8
 800a0fc:	fa09 f303 	lsl.w	r3, r9, r3
 800a100:	4313      	orrs	r3, r2
 800a102:	9304      	str	r3, [sp, #16]
 800a104:	46a2      	mov	sl, r4
 800a106:	e7d2      	b.n	800a0ae <_vfiprintf_r+0xe2>
 800a108:	9b03      	ldr	r3, [sp, #12]
 800a10a:	1d19      	adds	r1, r3, #4
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	9103      	str	r1, [sp, #12]
 800a110:	2b00      	cmp	r3, #0
 800a112:	bfbb      	ittet	lt
 800a114:	425b      	neglt	r3, r3
 800a116:	f042 0202 	orrlt.w	r2, r2, #2
 800a11a:	9307      	strge	r3, [sp, #28]
 800a11c:	9307      	strlt	r3, [sp, #28]
 800a11e:	bfb8      	it	lt
 800a120:	9204      	strlt	r2, [sp, #16]
 800a122:	7823      	ldrb	r3, [r4, #0]
 800a124:	2b2e      	cmp	r3, #46	; 0x2e
 800a126:	d10c      	bne.n	800a142 <_vfiprintf_r+0x176>
 800a128:	7863      	ldrb	r3, [r4, #1]
 800a12a:	2b2a      	cmp	r3, #42	; 0x2a
 800a12c:	d135      	bne.n	800a19a <_vfiprintf_r+0x1ce>
 800a12e:	9b03      	ldr	r3, [sp, #12]
 800a130:	1d1a      	adds	r2, r3, #4
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	9203      	str	r2, [sp, #12]
 800a136:	2b00      	cmp	r3, #0
 800a138:	bfb8      	it	lt
 800a13a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a13e:	3402      	adds	r4, #2
 800a140:	9305      	str	r3, [sp, #20]
 800a142:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a228 <_vfiprintf_r+0x25c>
 800a146:	7821      	ldrb	r1, [r4, #0]
 800a148:	2203      	movs	r2, #3
 800a14a:	4650      	mov	r0, sl
 800a14c:	f7f6 f850 	bl	80001f0 <memchr>
 800a150:	b140      	cbz	r0, 800a164 <_vfiprintf_r+0x198>
 800a152:	2340      	movs	r3, #64	; 0x40
 800a154:	eba0 000a 	sub.w	r0, r0, sl
 800a158:	fa03 f000 	lsl.w	r0, r3, r0
 800a15c:	9b04      	ldr	r3, [sp, #16]
 800a15e:	4303      	orrs	r3, r0
 800a160:	3401      	adds	r4, #1
 800a162:	9304      	str	r3, [sp, #16]
 800a164:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a168:	482c      	ldr	r0, [pc, #176]	; (800a21c <_vfiprintf_r+0x250>)
 800a16a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a16e:	2206      	movs	r2, #6
 800a170:	f7f6 f83e 	bl	80001f0 <memchr>
 800a174:	2800      	cmp	r0, #0
 800a176:	d03f      	beq.n	800a1f8 <_vfiprintf_r+0x22c>
 800a178:	4b29      	ldr	r3, [pc, #164]	; (800a220 <_vfiprintf_r+0x254>)
 800a17a:	bb1b      	cbnz	r3, 800a1c4 <_vfiprintf_r+0x1f8>
 800a17c:	9b03      	ldr	r3, [sp, #12]
 800a17e:	3307      	adds	r3, #7
 800a180:	f023 0307 	bic.w	r3, r3, #7
 800a184:	3308      	adds	r3, #8
 800a186:	9303      	str	r3, [sp, #12]
 800a188:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a18a:	443b      	add	r3, r7
 800a18c:	9309      	str	r3, [sp, #36]	; 0x24
 800a18e:	e767      	b.n	800a060 <_vfiprintf_r+0x94>
 800a190:	fb0c 3202 	mla	r2, ip, r2, r3
 800a194:	460c      	mov	r4, r1
 800a196:	2001      	movs	r0, #1
 800a198:	e7a5      	b.n	800a0e6 <_vfiprintf_r+0x11a>
 800a19a:	2300      	movs	r3, #0
 800a19c:	3401      	adds	r4, #1
 800a19e:	9305      	str	r3, [sp, #20]
 800a1a0:	4619      	mov	r1, r3
 800a1a2:	f04f 0c0a 	mov.w	ip, #10
 800a1a6:	4620      	mov	r0, r4
 800a1a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a1ac:	3a30      	subs	r2, #48	; 0x30
 800a1ae:	2a09      	cmp	r2, #9
 800a1b0:	d903      	bls.n	800a1ba <_vfiprintf_r+0x1ee>
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d0c5      	beq.n	800a142 <_vfiprintf_r+0x176>
 800a1b6:	9105      	str	r1, [sp, #20]
 800a1b8:	e7c3      	b.n	800a142 <_vfiprintf_r+0x176>
 800a1ba:	fb0c 2101 	mla	r1, ip, r1, r2
 800a1be:	4604      	mov	r4, r0
 800a1c0:	2301      	movs	r3, #1
 800a1c2:	e7f0      	b.n	800a1a6 <_vfiprintf_r+0x1da>
 800a1c4:	ab03      	add	r3, sp, #12
 800a1c6:	9300      	str	r3, [sp, #0]
 800a1c8:	462a      	mov	r2, r5
 800a1ca:	4b16      	ldr	r3, [pc, #88]	; (800a224 <_vfiprintf_r+0x258>)
 800a1cc:	a904      	add	r1, sp, #16
 800a1ce:	4630      	mov	r0, r6
 800a1d0:	f7fd fcdc 	bl	8007b8c <_printf_float>
 800a1d4:	4607      	mov	r7, r0
 800a1d6:	1c78      	adds	r0, r7, #1
 800a1d8:	d1d6      	bne.n	800a188 <_vfiprintf_r+0x1bc>
 800a1da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a1dc:	07d9      	lsls	r1, r3, #31
 800a1de:	d405      	bmi.n	800a1ec <_vfiprintf_r+0x220>
 800a1e0:	89ab      	ldrh	r3, [r5, #12]
 800a1e2:	059a      	lsls	r2, r3, #22
 800a1e4:	d402      	bmi.n	800a1ec <_vfiprintf_r+0x220>
 800a1e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a1e8:	f7ff fa20 	bl	800962c <__retarget_lock_release_recursive>
 800a1ec:	89ab      	ldrh	r3, [r5, #12]
 800a1ee:	065b      	lsls	r3, r3, #25
 800a1f0:	f53f af12 	bmi.w	800a018 <_vfiprintf_r+0x4c>
 800a1f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a1f6:	e711      	b.n	800a01c <_vfiprintf_r+0x50>
 800a1f8:	ab03      	add	r3, sp, #12
 800a1fa:	9300      	str	r3, [sp, #0]
 800a1fc:	462a      	mov	r2, r5
 800a1fe:	4b09      	ldr	r3, [pc, #36]	; (800a224 <_vfiprintf_r+0x258>)
 800a200:	a904      	add	r1, sp, #16
 800a202:	4630      	mov	r0, r6
 800a204:	f7fd ff66 	bl	80080d4 <_printf_i>
 800a208:	e7e4      	b.n	800a1d4 <_vfiprintf_r+0x208>
 800a20a:	bf00      	nop
 800a20c:	0800a6f8 	.word	0x0800a6f8
 800a210:	0800a718 	.word	0x0800a718
 800a214:	0800a6d8 	.word	0x0800a6d8
 800a218:	0800a894 	.word	0x0800a894
 800a21c:	0800a89e 	.word	0x0800a89e
 800a220:	08007b8d 	.word	0x08007b8d
 800a224:	08009fa7 	.word	0x08009fa7
 800a228:	0800a89a 	.word	0x0800a89a

0800a22c <_sbrk_r>:
 800a22c:	b538      	push	{r3, r4, r5, lr}
 800a22e:	4d06      	ldr	r5, [pc, #24]	; (800a248 <_sbrk_r+0x1c>)
 800a230:	2300      	movs	r3, #0
 800a232:	4604      	mov	r4, r0
 800a234:	4608      	mov	r0, r1
 800a236:	602b      	str	r3, [r5, #0]
 800a238:	f7f7 fa0a 	bl	8001650 <_sbrk>
 800a23c:	1c43      	adds	r3, r0, #1
 800a23e:	d102      	bne.n	800a246 <_sbrk_r+0x1a>
 800a240:	682b      	ldr	r3, [r5, #0]
 800a242:	b103      	cbz	r3, 800a246 <_sbrk_r+0x1a>
 800a244:	6023      	str	r3, [r4, #0]
 800a246:	bd38      	pop	{r3, r4, r5, pc}
 800a248:	20004fe0 	.word	0x20004fe0

0800a24c <__sread>:
 800a24c:	b510      	push	{r4, lr}
 800a24e:	460c      	mov	r4, r1
 800a250:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a254:	f000 f8e2 	bl	800a41c <_read_r>
 800a258:	2800      	cmp	r0, #0
 800a25a:	bfab      	itete	ge
 800a25c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a25e:	89a3      	ldrhlt	r3, [r4, #12]
 800a260:	181b      	addge	r3, r3, r0
 800a262:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a266:	bfac      	ite	ge
 800a268:	6563      	strge	r3, [r4, #84]	; 0x54
 800a26a:	81a3      	strhlt	r3, [r4, #12]
 800a26c:	bd10      	pop	{r4, pc}

0800a26e <__swrite>:
 800a26e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a272:	461f      	mov	r7, r3
 800a274:	898b      	ldrh	r3, [r1, #12]
 800a276:	05db      	lsls	r3, r3, #23
 800a278:	4605      	mov	r5, r0
 800a27a:	460c      	mov	r4, r1
 800a27c:	4616      	mov	r6, r2
 800a27e:	d505      	bpl.n	800a28c <__swrite+0x1e>
 800a280:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a284:	2302      	movs	r3, #2
 800a286:	2200      	movs	r2, #0
 800a288:	f000 f898 	bl	800a3bc <_lseek_r>
 800a28c:	89a3      	ldrh	r3, [r4, #12]
 800a28e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a292:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a296:	81a3      	strh	r3, [r4, #12]
 800a298:	4632      	mov	r2, r6
 800a29a:	463b      	mov	r3, r7
 800a29c:	4628      	mov	r0, r5
 800a29e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a2a2:	f000 b817 	b.w	800a2d4 <_write_r>

0800a2a6 <__sseek>:
 800a2a6:	b510      	push	{r4, lr}
 800a2a8:	460c      	mov	r4, r1
 800a2aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2ae:	f000 f885 	bl	800a3bc <_lseek_r>
 800a2b2:	1c43      	adds	r3, r0, #1
 800a2b4:	89a3      	ldrh	r3, [r4, #12]
 800a2b6:	bf15      	itete	ne
 800a2b8:	6560      	strne	r0, [r4, #84]	; 0x54
 800a2ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a2be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a2c2:	81a3      	strheq	r3, [r4, #12]
 800a2c4:	bf18      	it	ne
 800a2c6:	81a3      	strhne	r3, [r4, #12]
 800a2c8:	bd10      	pop	{r4, pc}

0800a2ca <__sclose>:
 800a2ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2ce:	f000 b831 	b.w	800a334 <_close_r>
	...

0800a2d4 <_write_r>:
 800a2d4:	b538      	push	{r3, r4, r5, lr}
 800a2d6:	4d07      	ldr	r5, [pc, #28]	; (800a2f4 <_write_r+0x20>)
 800a2d8:	4604      	mov	r4, r0
 800a2da:	4608      	mov	r0, r1
 800a2dc:	4611      	mov	r1, r2
 800a2de:	2200      	movs	r2, #0
 800a2e0:	602a      	str	r2, [r5, #0]
 800a2e2:	461a      	mov	r2, r3
 800a2e4:	f7f7 f963 	bl	80015ae <_write>
 800a2e8:	1c43      	adds	r3, r0, #1
 800a2ea:	d102      	bne.n	800a2f2 <_write_r+0x1e>
 800a2ec:	682b      	ldr	r3, [r5, #0]
 800a2ee:	b103      	cbz	r3, 800a2f2 <_write_r+0x1e>
 800a2f0:	6023      	str	r3, [r4, #0]
 800a2f2:	bd38      	pop	{r3, r4, r5, pc}
 800a2f4:	20004fe0 	.word	0x20004fe0

0800a2f8 <__assert_func>:
 800a2f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a2fa:	4614      	mov	r4, r2
 800a2fc:	461a      	mov	r2, r3
 800a2fe:	4b09      	ldr	r3, [pc, #36]	; (800a324 <__assert_func+0x2c>)
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	4605      	mov	r5, r0
 800a304:	68d8      	ldr	r0, [r3, #12]
 800a306:	b14c      	cbz	r4, 800a31c <__assert_func+0x24>
 800a308:	4b07      	ldr	r3, [pc, #28]	; (800a328 <__assert_func+0x30>)
 800a30a:	9100      	str	r1, [sp, #0]
 800a30c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a310:	4906      	ldr	r1, [pc, #24]	; (800a32c <__assert_func+0x34>)
 800a312:	462b      	mov	r3, r5
 800a314:	f000 f81e 	bl	800a354 <fiprintf>
 800a318:	f000 f89f 	bl	800a45a <abort>
 800a31c:	4b04      	ldr	r3, [pc, #16]	; (800a330 <__assert_func+0x38>)
 800a31e:	461c      	mov	r4, r3
 800a320:	e7f3      	b.n	800a30a <__assert_func+0x12>
 800a322:	bf00      	nop
 800a324:	20000010 	.word	0x20000010
 800a328:	0800a8a5 	.word	0x0800a8a5
 800a32c:	0800a8b2 	.word	0x0800a8b2
 800a330:	0800a8e0 	.word	0x0800a8e0

0800a334 <_close_r>:
 800a334:	b538      	push	{r3, r4, r5, lr}
 800a336:	4d06      	ldr	r5, [pc, #24]	; (800a350 <_close_r+0x1c>)
 800a338:	2300      	movs	r3, #0
 800a33a:	4604      	mov	r4, r0
 800a33c:	4608      	mov	r0, r1
 800a33e:	602b      	str	r3, [r5, #0]
 800a340:	f7f7 f951 	bl	80015e6 <_close>
 800a344:	1c43      	adds	r3, r0, #1
 800a346:	d102      	bne.n	800a34e <_close_r+0x1a>
 800a348:	682b      	ldr	r3, [r5, #0]
 800a34a:	b103      	cbz	r3, 800a34e <_close_r+0x1a>
 800a34c:	6023      	str	r3, [r4, #0]
 800a34e:	bd38      	pop	{r3, r4, r5, pc}
 800a350:	20004fe0 	.word	0x20004fe0

0800a354 <fiprintf>:
 800a354:	b40e      	push	{r1, r2, r3}
 800a356:	b503      	push	{r0, r1, lr}
 800a358:	4601      	mov	r1, r0
 800a35a:	ab03      	add	r3, sp, #12
 800a35c:	4805      	ldr	r0, [pc, #20]	; (800a374 <fiprintf+0x20>)
 800a35e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a362:	6800      	ldr	r0, [r0, #0]
 800a364:	9301      	str	r3, [sp, #4]
 800a366:	f7ff fe31 	bl	8009fcc <_vfiprintf_r>
 800a36a:	b002      	add	sp, #8
 800a36c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a370:	b003      	add	sp, #12
 800a372:	4770      	bx	lr
 800a374:	20000010 	.word	0x20000010

0800a378 <_fstat_r>:
 800a378:	b538      	push	{r3, r4, r5, lr}
 800a37a:	4d07      	ldr	r5, [pc, #28]	; (800a398 <_fstat_r+0x20>)
 800a37c:	2300      	movs	r3, #0
 800a37e:	4604      	mov	r4, r0
 800a380:	4608      	mov	r0, r1
 800a382:	4611      	mov	r1, r2
 800a384:	602b      	str	r3, [r5, #0]
 800a386:	f7f7 f93a 	bl	80015fe <_fstat>
 800a38a:	1c43      	adds	r3, r0, #1
 800a38c:	d102      	bne.n	800a394 <_fstat_r+0x1c>
 800a38e:	682b      	ldr	r3, [r5, #0]
 800a390:	b103      	cbz	r3, 800a394 <_fstat_r+0x1c>
 800a392:	6023      	str	r3, [r4, #0]
 800a394:	bd38      	pop	{r3, r4, r5, pc}
 800a396:	bf00      	nop
 800a398:	20004fe0 	.word	0x20004fe0

0800a39c <_isatty_r>:
 800a39c:	b538      	push	{r3, r4, r5, lr}
 800a39e:	4d06      	ldr	r5, [pc, #24]	; (800a3b8 <_isatty_r+0x1c>)
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	4604      	mov	r4, r0
 800a3a4:	4608      	mov	r0, r1
 800a3a6:	602b      	str	r3, [r5, #0]
 800a3a8:	f7f7 f939 	bl	800161e <_isatty>
 800a3ac:	1c43      	adds	r3, r0, #1
 800a3ae:	d102      	bne.n	800a3b6 <_isatty_r+0x1a>
 800a3b0:	682b      	ldr	r3, [r5, #0]
 800a3b2:	b103      	cbz	r3, 800a3b6 <_isatty_r+0x1a>
 800a3b4:	6023      	str	r3, [r4, #0]
 800a3b6:	bd38      	pop	{r3, r4, r5, pc}
 800a3b8:	20004fe0 	.word	0x20004fe0

0800a3bc <_lseek_r>:
 800a3bc:	b538      	push	{r3, r4, r5, lr}
 800a3be:	4d07      	ldr	r5, [pc, #28]	; (800a3dc <_lseek_r+0x20>)
 800a3c0:	4604      	mov	r4, r0
 800a3c2:	4608      	mov	r0, r1
 800a3c4:	4611      	mov	r1, r2
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	602a      	str	r2, [r5, #0]
 800a3ca:	461a      	mov	r2, r3
 800a3cc:	f7f7 f932 	bl	8001634 <_lseek>
 800a3d0:	1c43      	adds	r3, r0, #1
 800a3d2:	d102      	bne.n	800a3da <_lseek_r+0x1e>
 800a3d4:	682b      	ldr	r3, [r5, #0]
 800a3d6:	b103      	cbz	r3, 800a3da <_lseek_r+0x1e>
 800a3d8:	6023      	str	r3, [r4, #0]
 800a3da:	bd38      	pop	{r3, r4, r5, pc}
 800a3dc:	20004fe0 	.word	0x20004fe0

0800a3e0 <__ascii_mbtowc>:
 800a3e0:	b082      	sub	sp, #8
 800a3e2:	b901      	cbnz	r1, 800a3e6 <__ascii_mbtowc+0x6>
 800a3e4:	a901      	add	r1, sp, #4
 800a3e6:	b142      	cbz	r2, 800a3fa <__ascii_mbtowc+0x1a>
 800a3e8:	b14b      	cbz	r3, 800a3fe <__ascii_mbtowc+0x1e>
 800a3ea:	7813      	ldrb	r3, [r2, #0]
 800a3ec:	600b      	str	r3, [r1, #0]
 800a3ee:	7812      	ldrb	r2, [r2, #0]
 800a3f0:	1e10      	subs	r0, r2, #0
 800a3f2:	bf18      	it	ne
 800a3f4:	2001      	movne	r0, #1
 800a3f6:	b002      	add	sp, #8
 800a3f8:	4770      	bx	lr
 800a3fa:	4610      	mov	r0, r2
 800a3fc:	e7fb      	b.n	800a3f6 <__ascii_mbtowc+0x16>
 800a3fe:	f06f 0001 	mvn.w	r0, #1
 800a402:	e7f8      	b.n	800a3f6 <__ascii_mbtowc+0x16>

0800a404 <__malloc_lock>:
 800a404:	4801      	ldr	r0, [pc, #4]	; (800a40c <__malloc_lock+0x8>)
 800a406:	f7ff b910 	b.w	800962a <__retarget_lock_acquire_recursive>
 800a40a:	bf00      	nop
 800a40c:	20004fd8 	.word	0x20004fd8

0800a410 <__malloc_unlock>:
 800a410:	4801      	ldr	r0, [pc, #4]	; (800a418 <__malloc_unlock+0x8>)
 800a412:	f7ff b90b 	b.w	800962c <__retarget_lock_release_recursive>
 800a416:	bf00      	nop
 800a418:	20004fd8 	.word	0x20004fd8

0800a41c <_read_r>:
 800a41c:	b538      	push	{r3, r4, r5, lr}
 800a41e:	4d07      	ldr	r5, [pc, #28]	; (800a43c <_read_r+0x20>)
 800a420:	4604      	mov	r4, r0
 800a422:	4608      	mov	r0, r1
 800a424:	4611      	mov	r1, r2
 800a426:	2200      	movs	r2, #0
 800a428:	602a      	str	r2, [r5, #0]
 800a42a:	461a      	mov	r2, r3
 800a42c:	f7f7 f8a2 	bl	8001574 <_read>
 800a430:	1c43      	adds	r3, r0, #1
 800a432:	d102      	bne.n	800a43a <_read_r+0x1e>
 800a434:	682b      	ldr	r3, [r5, #0]
 800a436:	b103      	cbz	r3, 800a43a <_read_r+0x1e>
 800a438:	6023      	str	r3, [r4, #0]
 800a43a:	bd38      	pop	{r3, r4, r5, pc}
 800a43c:	20004fe0 	.word	0x20004fe0

0800a440 <__ascii_wctomb>:
 800a440:	b149      	cbz	r1, 800a456 <__ascii_wctomb+0x16>
 800a442:	2aff      	cmp	r2, #255	; 0xff
 800a444:	bf85      	ittet	hi
 800a446:	238a      	movhi	r3, #138	; 0x8a
 800a448:	6003      	strhi	r3, [r0, #0]
 800a44a:	700a      	strbls	r2, [r1, #0]
 800a44c:	f04f 30ff 	movhi.w	r0, #4294967295
 800a450:	bf98      	it	ls
 800a452:	2001      	movls	r0, #1
 800a454:	4770      	bx	lr
 800a456:	4608      	mov	r0, r1
 800a458:	4770      	bx	lr

0800a45a <abort>:
 800a45a:	b508      	push	{r3, lr}
 800a45c:	2006      	movs	r0, #6
 800a45e:	f000 f82b 	bl	800a4b8 <raise>
 800a462:	2001      	movs	r0, #1
 800a464:	f7f7 f87c 	bl	8001560 <_exit>

0800a468 <_raise_r>:
 800a468:	291f      	cmp	r1, #31
 800a46a:	b538      	push	{r3, r4, r5, lr}
 800a46c:	4604      	mov	r4, r0
 800a46e:	460d      	mov	r5, r1
 800a470:	d904      	bls.n	800a47c <_raise_r+0x14>
 800a472:	2316      	movs	r3, #22
 800a474:	6003      	str	r3, [r0, #0]
 800a476:	f04f 30ff 	mov.w	r0, #4294967295
 800a47a:	bd38      	pop	{r3, r4, r5, pc}
 800a47c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a47e:	b112      	cbz	r2, 800a486 <_raise_r+0x1e>
 800a480:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a484:	b94b      	cbnz	r3, 800a49a <_raise_r+0x32>
 800a486:	4620      	mov	r0, r4
 800a488:	f000 f830 	bl	800a4ec <_getpid_r>
 800a48c:	462a      	mov	r2, r5
 800a48e:	4601      	mov	r1, r0
 800a490:	4620      	mov	r0, r4
 800a492:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a496:	f000 b817 	b.w	800a4c8 <_kill_r>
 800a49a:	2b01      	cmp	r3, #1
 800a49c:	d00a      	beq.n	800a4b4 <_raise_r+0x4c>
 800a49e:	1c59      	adds	r1, r3, #1
 800a4a0:	d103      	bne.n	800a4aa <_raise_r+0x42>
 800a4a2:	2316      	movs	r3, #22
 800a4a4:	6003      	str	r3, [r0, #0]
 800a4a6:	2001      	movs	r0, #1
 800a4a8:	e7e7      	b.n	800a47a <_raise_r+0x12>
 800a4aa:	2400      	movs	r4, #0
 800a4ac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a4b0:	4628      	mov	r0, r5
 800a4b2:	4798      	blx	r3
 800a4b4:	2000      	movs	r0, #0
 800a4b6:	e7e0      	b.n	800a47a <_raise_r+0x12>

0800a4b8 <raise>:
 800a4b8:	4b02      	ldr	r3, [pc, #8]	; (800a4c4 <raise+0xc>)
 800a4ba:	4601      	mov	r1, r0
 800a4bc:	6818      	ldr	r0, [r3, #0]
 800a4be:	f7ff bfd3 	b.w	800a468 <_raise_r>
 800a4c2:	bf00      	nop
 800a4c4:	20000010 	.word	0x20000010

0800a4c8 <_kill_r>:
 800a4c8:	b538      	push	{r3, r4, r5, lr}
 800a4ca:	4d07      	ldr	r5, [pc, #28]	; (800a4e8 <_kill_r+0x20>)
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	4604      	mov	r4, r0
 800a4d0:	4608      	mov	r0, r1
 800a4d2:	4611      	mov	r1, r2
 800a4d4:	602b      	str	r3, [r5, #0]
 800a4d6:	f7f7 f833 	bl	8001540 <_kill>
 800a4da:	1c43      	adds	r3, r0, #1
 800a4dc:	d102      	bne.n	800a4e4 <_kill_r+0x1c>
 800a4de:	682b      	ldr	r3, [r5, #0]
 800a4e0:	b103      	cbz	r3, 800a4e4 <_kill_r+0x1c>
 800a4e2:	6023      	str	r3, [r4, #0]
 800a4e4:	bd38      	pop	{r3, r4, r5, pc}
 800a4e6:	bf00      	nop
 800a4e8:	20004fe0 	.word	0x20004fe0

0800a4ec <_getpid_r>:
 800a4ec:	f7f7 b820 	b.w	8001530 <_getpid>

0800a4f0 <_init>:
 800a4f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4f2:	bf00      	nop
 800a4f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4f6:	bc08      	pop	{r3}
 800a4f8:	469e      	mov	lr, r3
 800a4fa:	4770      	bx	lr

0800a4fc <_fini>:
 800a4fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4fe:	bf00      	nop
 800a500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a502:	bc08      	pop	{r3}
 800a504:	469e      	mov	lr, r3
 800a506:	4770      	bx	lr
