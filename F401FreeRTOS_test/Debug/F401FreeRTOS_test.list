
F401FreeRTOS_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a5f8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000070c  0800a798  0800a798  0001a798  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aea4  0800aea4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800aea4  0800aea4  0001aea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aeac  0800aeac  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aeac  0800aeac  0001aeac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aeb0  0800aeb0  0001aeb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800aeb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005050  200001e0  0800b094  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005230  0800b094  00025230  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001dfb0  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d22  00000000  00000000  0003e1c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001590  00000000  00000000  00041ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001438  00000000  00000000  00043478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005705  00000000  00000000  000448b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017426  00000000  00000000  00049fb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098fd2  00000000  00000000  000613db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fa3ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ac4  00000000  00000000  000fa400  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a780 	.word	0x0800a780

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	0800a780 	.word	0x0800a780

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96e 	b.w	8000eac <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468c      	mov	ip, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	f040 8083 	bne.w	8000cfe <__udivmoddi4+0x116>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d947      	bls.n	8000c8e <__udivmoddi4+0xa6>
 8000bfe:	fab2 f282 	clz	r2, r2
 8000c02:	b142      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	f1c2 0020 	rsb	r0, r2, #32
 8000c08:	fa24 f000 	lsr.w	r0, r4, r0
 8000c0c:	4091      	lsls	r1, r2
 8000c0e:	4097      	lsls	r7, r2
 8000c10:	ea40 0c01 	orr.w	ip, r0, r1
 8000c14:	4094      	lsls	r4, r2
 8000c16:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c1a:	0c23      	lsrs	r3, r4, #16
 8000c1c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c20:	fa1f fe87 	uxth.w	lr, r7
 8000c24:	fb08 c116 	mls	r1, r8, r6, ip
 8000c28:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x60>
 8000c34:	18fb      	adds	r3, r7, r3
 8000c36:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3a:	f080 8119 	bcs.w	8000e70 <__udivmoddi4+0x288>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 8116 	bls.w	8000e70 <__udivmoddi4+0x288>
 8000c44:	3e02      	subs	r6, #2
 8000c46:	443b      	add	r3, r7
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c50:	fb08 3310 	mls	r3, r8, r0, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c5c:	45a6      	cmp	lr, r4
 8000c5e:	d909      	bls.n	8000c74 <__udivmoddi4+0x8c>
 8000c60:	193c      	adds	r4, r7, r4
 8000c62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c66:	f080 8105 	bcs.w	8000e74 <__udivmoddi4+0x28c>
 8000c6a:	45a6      	cmp	lr, r4
 8000c6c:	f240 8102 	bls.w	8000e74 <__udivmoddi4+0x28c>
 8000c70:	3802      	subs	r0, #2
 8000c72:	443c      	add	r4, r7
 8000c74:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c78:	eba4 040e 	sub.w	r4, r4, lr
 8000c7c:	2600      	movs	r6, #0
 8000c7e:	b11d      	cbz	r5, 8000c88 <__udivmoddi4+0xa0>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c5 4300 	strd	r4, r3, [r5]
 8000c88:	4631      	mov	r1, r6
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	b902      	cbnz	r2, 8000c92 <__udivmoddi4+0xaa>
 8000c90:	deff      	udf	#255	; 0xff
 8000c92:	fab2 f282 	clz	r2, r2
 8000c96:	2a00      	cmp	r2, #0
 8000c98:	d150      	bne.n	8000d3c <__udivmoddi4+0x154>
 8000c9a:	1bcb      	subs	r3, r1, r7
 8000c9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ca0:	fa1f f887 	uxth.w	r8, r7
 8000ca4:	2601      	movs	r6, #1
 8000ca6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000caa:	0c21      	lsrs	r1, r4, #16
 8000cac:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	d907      	bls.n	8000ccc <__udivmoddi4+0xe4>
 8000cbc:	1879      	adds	r1, r7, r1
 8000cbe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0xe2>
 8000cc4:	428b      	cmp	r3, r1
 8000cc6:	f200 80e9 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000cca:	4684      	mov	ip, r0
 8000ccc:	1ac9      	subs	r1, r1, r3
 8000cce:	b2a3      	uxth	r3, r4
 8000cd0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cd4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cd8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cdc:	fb08 f800 	mul.w	r8, r8, r0
 8000ce0:	45a0      	cmp	r8, r4
 8000ce2:	d907      	bls.n	8000cf4 <__udivmoddi4+0x10c>
 8000ce4:	193c      	adds	r4, r7, r4
 8000ce6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x10a>
 8000cec:	45a0      	cmp	r8, r4
 8000cee:	f200 80d9 	bhi.w	8000ea4 <__udivmoddi4+0x2bc>
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	eba4 0408 	sub.w	r4, r4, r8
 8000cf8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cfc:	e7bf      	b.n	8000c7e <__udivmoddi4+0x96>
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0x12e>
 8000d02:	2d00      	cmp	r5, #0
 8000d04:	f000 80b1 	beq.w	8000e6a <__udivmoddi4+0x282>
 8000d08:	2600      	movs	r6, #0
 8000d0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d0e:	4630      	mov	r0, r6
 8000d10:	4631      	mov	r1, r6
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	fab3 f683 	clz	r6, r3
 8000d1a:	2e00      	cmp	r6, #0
 8000d1c:	d14a      	bne.n	8000db4 <__udivmoddi4+0x1cc>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d302      	bcc.n	8000d28 <__udivmoddi4+0x140>
 8000d22:	4282      	cmp	r2, r0
 8000d24:	f200 80b8 	bhi.w	8000e98 <__udivmoddi4+0x2b0>
 8000d28:	1a84      	subs	r4, r0, r2
 8000d2a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d2e:	2001      	movs	r0, #1
 8000d30:	468c      	mov	ip, r1
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	d0a8      	beq.n	8000c88 <__udivmoddi4+0xa0>
 8000d36:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d3a:	e7a5      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000d3c:	f1c2 0320 	rsb	r3, r2, #32
 8000d40:	fa20 f603 	lsr.w	r6, r0, r3
 8000d44:	4097      	lsls	r7, r2
 8000d46:	fa01 f002 	lsl.w	r0, r1, r2
 8000d4a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d4e:	40d9      	lsrs	r1, r3
 8000d50:	4330      	orrs	r0, r6
 8000d52:	0c03      	lsrs	r3, r0, #16
 8000d54:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d58:	fa1f f887 	uxth.w	r8, r7
 8000d5c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d64:	fb06 f108 	mul.w	r1, r6, r8
 8000d68:	4299      	cmp	r1, r3
 8000d6a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x19c>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d76:	f080 808d 	bcs.w	8000e94 <__udivmoddi4+0x2ac>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 808a 	bls.w	8000e94 <__udivmoddi4+0x2ac>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b281      	uxth	r1, r0
 8000d88:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d8c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d94:	fb00 f308 	mul.w	r3, r0, r8
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x1c4>
 8000d9c:	1879      	adds	r1, r7, r1
 8000d9e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000da2:	d273      	bcs.n	8000e8c <__udivmoddi4+0x2a4>
 8000da4:	428b      	cmp	r3, r1
 8000da6:	d971      	bls.n	8000e8c <__udivmoddi4+0x2a4>
 8000da8:	3802      	subs	r0, #2
 8000daa:	4439      	add	r1, r7
 8000dac:	1acb      	subs	r3, r1, r3
 8000dae:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000db2:	e778      	b.n	8000ca6 <__udivmoddi4+0xbe>
 8000db4:	f1c6 0c20 	rsb	ip, r6, #32
 8000db8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dbc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dc0:	431c      	orrs	r4, r3
 8000dc2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dc6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dca:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dce:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	0c3b      	lsrs	r3, r7, #16
 8000dd6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dda:	fa1f f884 	uxth.w	r8, r4
 8000dde:	fb0e 1119 	mls	r1, lr, r9, r1
 8000de2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000de6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dea:	458a      	cmp	sl, r1
 8000dec:	fa02 f206 	lsl.w	r2, r2, r6
 8000df0:	fa00 f306 	lsl.w	r3, r0, r6
 8000df4:	d908      	bls.n	8000e08 <__udivmoddi4+0x220>
 8000df6:	1861      	adds	r1, r4, r1
 8000df8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dfc:	d248      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000dfe:	458a      	cmp	sl, r1
 8000e00:	d946      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e02:	f1a9 0902 	sub.w	r9, r9, #2
 8000e06:	4421      	add	r1, r4
 8000e08:	eba1 010a 	sub.w	r1, r1, sl
 8000e0c:	b2bf      	uxth	r7, r7
 8000e0e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e12:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e16:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e1a:	fb00 f808 	mul.w	r8, r0, r8
 8000e1e:	45b8      	cmp	r8, r7
 8000e20:	d907      	bls.n	8000e32 <__udivmoddi4+0x24a>
 8000e22:	19e7      	adds	r7, r4, r7
 8000e24:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e28:	d22e      	bcs.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2a:	45b8      	cmp	r8, r7
 8000e2c:	d92c      	bls.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2e:	3802      	subs	r0, #2
 8000e30:	4427      	add	r7, r4
 8000e32:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e36:	eba7 0708 	sub.w	r7, r7, r8
 8000e3a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e3e:	454f      	cmp	r7, r9
 8000e40:	46c6      	mov	lr, r8
 8000e42:	4649      	mov	r1, r9
 8000e44:	d31a      	bcc.n	8000e7c <__udivmoddi4+0x294>
 8000e46:	d017      	beq.n	8000e78 <__udivmoddi4+0x290>
 8000e48:	b15d      	cbz	r5, 8000e62 <__udivmoddi4+0x27a>
 8000e4a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e4e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e52:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e56:	40f2      	lsrs	r2, r6
 8000e58:	ea4c 0202 	orr.w	r2, ip, r2
 8000e5c:	40f7      	lsrs	r7, r6
 8000e5e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e62:	2600      	movs	r6, #0
 8000e64:	4631      	mov	r1, r6
 8000e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e70b      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e9      	b.n	8000c48 <__udivmoddi4+0x60>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6fd      	b.n	8000c74 <__udivmoddi4+0x8c>
 8000e78:	4543      	cmp	r3, r8
 8000e7a:	d2e5      	bcs.n	8000e48 <__udivmoddi4+0x260>
 8000e7c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e80:	eb69 0104 	sbc.w	r1, r9, r4
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7df      	b.n	8000e48 <__udivmoddi4+0x260>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e7d2      	b.n	8000e32 <__udivmoddi4+0x24a>
 8000e8c:	4660      	mov	r0, ip
 8000e8e:	e78d      	b.n	8000dac <__udivmoddi4+0x1c4>
 8000e90:	4681      	mov	r9, r0
 8000e92:	e7b9      	b.n	8000e08 <__udivmoddi4+0x220>
 8000e94:	4666      	mov	r6, ip
 8000e96:	e775      	b.n	8000d84 <__udivmoddi4+0x19c>
 8000e98:	4630      	mov	r0, r6
 8000e9a:	e74a      	b.n	8000d32 <__udivmoddi4+0x14a>
 8000e9c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea0:	4439      	add	r1, r7
 8000ea2:	e713      	b.n	8000ccc <__udivmoddi4+0xe4>
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	443c      	add	r4, r7
 8000ea8:	e724      	b.n	8000cf4 <__udivmoddi4+0x10c>
 8000eaa:	bf00      	nop

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <modbus_crc16>:
  0X4E00, 0X8EC1, 0X8F81, 0X4F40, 0X8D01, 0X4DC0, 0X4C80, 0X8C41,
  0X4400, 0X84C1, 0X8581, 0X4540, 0X8701, 0X47C0, 0X4680, 0X8641,
  0X8201, 0X42C0, 0X4380, 0X8341, 0X4100, 0X81C1, 0X8081, 0X4040
};
uint16_t modbus_crc16(const uint8_t *nData, uint16_t wLength)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b085      	sub	sp, #20
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	460b      	mov	r3, r1
 8000eba:	807b      	strh	r3, [r7, #2]
  uint8_t nTemp;
  uint16_t wCRCWord = 0xFFFF;
 8000ebc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ec0:	81fb      	strh	r3, [r7, #14]
  while (wLength--)
 8000ec2:	e011      	b.n	8000ee8 <modbus_crc16+0x38>
  {
    nTemp = *nData++ ^ wCRCWord;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	1c5a      	adds	r2, r3, #1
 8000ec8:	607a      	str	r2, [r7, #4]
 8000eca:	781a      	ldrb	r2, [r3, #0]
 8000ecc:	89fb      	ldrh	r3, [r7, #14]
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	4053      	eors	r3, r2
 8000ed2:	737b      	strb	r3, [r7, #13]
    wCRCWord >>= 8;
 8000ed4:	89fb      	ldrh	r3, [r7, #14]
 8000ed6:	0a1b      	lsrs	r3, r3, #8
 8000ed8:	81fb      	strh	r3, [r7, #14]
    wCRCWord  ^= wCRCTable[nTemp];
 8000eda:	7b7b      	ldrb	r3, [r7, #13]
 8000edc:	4a08      	ldr	r2, [pc, #32]	; (8000f00 <modbus_crc16+0x50>)
 8000ede:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000ee2:	89fb      	ldrh	r3, [r7, #14]
 8000ee4:	4053      	eors	r3, r2
 8000ee6:	81fb      	strh	r3, [r7, #14]
  while (wLength--)
 8000ee8:	887b      	ldrh	r3, [r7, #2]
 8000eea:	1e5a      	subs	r2, r3, #1
 8000eec:	807a      	strh	r2, [r7, #2]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d1e8      	bne.n	8000ec4 <modbus_crc16+0x14>
  }
  return wCRCWord;
 8000ef2:	89fb      	ldrh	r3, [r7, #14]
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3714      	adds	r7, #20
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	0800a840 	.word	0x0800a840

08000f04 <modbus_callback_txDMA>:

//#####################################################################################################
void  modbus_callback_txDMA(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
    modbus.txDmaDone = 1;
 8000f08:	4b04      	ldr	r3, [pc, #16]	; (8000f1c <modbus_callback_txDMA+0x18>)
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	20004d9c 	.word	0x20004d9c

08000f20 <modbus_init>:

//##################################################################################################
bool modbus_init(uint32_t timeout)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  memset(&modbus, 0, sizeof(modbus));
 8000f28:	f44f 728a 	mov.w	r2, #276	; 0x114
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	4806      	ldr	r0, [pc, #24]	; (8000f48 <modbus_init+0x28>)
 8000f30:	f006 fecc 	bl	8007ccc <memset>
  modbus.timeout = timeout;
 8000f34:	4a04      	ldr	r2, [pc, #16]	; (8000f48 <modbus_init+0x28>)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
  return true;
 8000f3c:	2301      	movs	r3, #1
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	20004d9c 	.word	0x20004d9c

08000f4c <modbus_receiveRaw>:
//##################################################################################################

uint16_t modbus_receiveRaw(uint32_t timeout)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  //Start DMA transmission of 255 bytes of data at a time
  HAL_UART_Receive_DMA(&huart1, (uint8_t*)receive_buff, BUFFER_SIZE);
 8000f54:	22ff      	movs	r2, #255	; 0xff
 8000f56:	4914      	ldr	r1, [pc, #80]	; (8000fa8 <modbus_receiveRaw+0x5c>)
 8000f58:	4814      	ldr	r0, [pc, #80]	; (8000fac <modbus_receiveRaw+0x60>)
 8000f5a:	f002 fcd5 	bl	8003908 <HAL_UART_Receive_DMA>
  uint32_t startTime = HAL_GetTick();
 8000f5e:	f000 fe91 	bl	8001c84 <HAL_GetTick>
 8000f62:	60f8      	str	r0, [r7, #12]
  while(1)
  {
    if(HAL_GetTick() - startTime > timeout)
 8000f64:	f000 fe8e 	bl	8001c84 <HAL_GetTick>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	1ad3      	subs	r3, r2, r3
 8000f6e:	687a      	ldr	r2, [r7, #4]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	d201      	bcs.n	8000f78 <modbus_receiveRaw+0x2c>
      return 0;
 8000f74:	2300      	movs	r3, #0
 8000f76:	e013      	b.n	8000fa0 <modbus_receiveRaw+0x54>
    if((modbus.rxIndex > 0) && (modbus.RxDmaDone == 1))
 8000f78:	4b0d      	ldr	r3, [pc, #52]	; (8000fb0 <modbus_receiveRaw+0x64>)
 8000f7a:	881b      	ldrh	r3, [r3, #0]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d00b      	beq.n	8000f98 <modbus_receiveRaw+0x4c>
 8000f80:	4b0b      	ldr	r3, [pc, #44]	; (8000fb0 <modbus_receiveRaw+0x64>)
 8000f82:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d106      	bne.n	8000f98 <modbus_receiveRaw+0x4c>
    {
    	modbus.RxDmaDone = 0;
 8000f8a:	4b09      	ldr	r3, [pc, #36]	; (8000fb0 <modbus_receiveRaw+0x64>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
    	return modbus.rxIndex;
 8000f92:	4b07      	ldr	r3, [pc, #28]	; (8000fb0 <modbus_receiveRaw+0x64>)
 8000f94:	881b      	ldrh	r3, [r3, #0]
 8000f96:	e003      	b.n	8000fa0 <modbus_receiveRaw+0x54>
    }
    osDelay(1);
 8000f98:	2001      	movs	r0, #1
 8000f9a:	f003 fcab 	bl	80048f4 <osDelay>
    if(HAL_GetTick() - startTime > timeout)
 8000f9e:	e7e1      	b.n	8000f64 <modbus_receiveRaw+0x18>
  }
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3710      	adds	r7, #16
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	20004ec0 	.word	0x20004ec0
 8000fac:	20005080 	.word	0x20005080
 8000fb0:	20004d9c 	.word	0x20004d9c

08000fb4 <modbus_sendRaw>:

//##################################################################################################
bool modbus_sendRaw(uint8_t *data, uint16_t size, uint32_t timeout)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b086      	sub	sp, #24
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	60f8      	str	r0, [r7, #12]
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	607a      	str	r2, [r7, #4]
 8000fc0:	817b      	strh	r3, [r7, #10]
  while(modbus.txBusy == 1)
 8000fc2:	e002      	b.n	8000fca <modbus_sendRaw+0x16>
    osDelay(1);
 8000fc4:	2001      	movs	r0, #1
 8000fc6:	f003 fc95 	bl	80048f4 <osDelay>
  while(modbus.txBusy == 1)
 8000fca:	4b1f      	ldr	r3, [pc, #124]	; (8001048 <modbus_sendRaw+0x94>)
 8000fcc:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d0f7      	beq.n	8000fc4 <modbus_sendRaw+0x10>
  modbus.txBusy = 1;
 8000fd4:	4b1c      	ldr	r3, [pc, #112]	; (8001048 <modbus_sendRaw+0x94>)
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
  memset(modbus.rxBuf, 0, BUFFER_SIZE);
 8000fdc:	22ff      	movs	r2, #255	; 0xff
 8000fde:	2100      	movs	r1, #0
 8000fe0:	481a      	ldr	r0, [pc, #104]	; (800104c <modbus_sendRaw+0x98>)
 8000fe2:	f006 fe73 	bl	8007ccc <memset>
  modbus.rxIndex = 0;
 8000fe6:	4b18      	ldr	r3, [pc, #96]	; (8001048 <modbus_sendRaw+0x94>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	801a      	strh	r2, [r3, #0]
  uint32_t startTime = HAL_GetTick();
 8000fec:	f000 fe4a 	bl	8001c84 <HAL_GetTick>
 8000ff0:	6178      	str	r0, [r7, #20]
  //HAL_GPIO_WritePin(_MMODBUS_CTRL_GPIO, _MMODBUS_CTRL_PIN, GPIO_PIN_SET);
  modbus.txDmaDone = 0;
 8000ff2:	4b15      	ldr	r3, [pc, #84]	; (8001048 <modbus_sendRaw+0x94>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
  HAL_UART_Transmit_DMA(&huart1, data, size);
 8000ffa:	897b      	ldrh	r3, [r7, #10]
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	68f9      	ldr	r1, [r7, #12]
 8001000:	4813      	ldr	r0, [pc, #76]	; (8001050 <modbus_sendRaw+0x9c>)
 8001002:	f002 fc15 	bl	8003830 <HAL_UART_Transmit_DMA>
  while(modbus.txDmaDone == 0)
 8001006:	e010      	b.n	800102a <modbus_sendRaw+0x76>
  {
    osDelay(1);
 8001008:	2001      	movs	r0, #1
 800100a:	f003 fc73 	bl	80048f4 <osDelay>
    if(HAL_GetTick() - startTime > timeout)
 800100e:	f000 fe39 	bl	8001c84 <HAL_GetTick>
 8001012:	4602      	mov	r2, r0
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	1ad3      	subs	r3, r2, r3
 8001018:	687a      	ldr	r2, [r7, #4]
 800101a:	429a      	cmp	r2, r3
 800101c:	d205      	bcs.n	800102a <modbus_sendRaw+0x76>
    {
      //HAL_GPIO_WritePin(_MMODBUS_CTRL_GPIO, _MMODBUS_CTRL_PIN, GPIO_PIN_RESET);
      modbus.txBusy = 0;
 800101e:	4b0a      	ldr	r3, [pc, #40]	; (8001048 <modbus_sendRaw+0x94>)
 8001020:	2200      	movs	r2, #0
 8001022:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
      return false;
 8001026:	2300      	movs	r3, #0
 8001028:	e009      	b.n	800103e <modbus_sendRaw+0x8a>
  while(modbus.txDmaDone == 0)
 800102a:	4b07      	ldr	r3, [pc, #28]	; (8001048 <modbus_sendRaw+0x94>)
 800102c:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8001030:	2b00      	cmp	r3, #0
 8001032:	d0e9      	beq.n	8001008 <modbus_sendRaw+0x54>
    }
  }
  //while (!LL_USART_IsActiveFlag_TC(_MMODBUS_USART))
    //osDelay(1);
  //HAL_GPIO_WritePin(_MMODBUS_CTRL_GPIO, _MMODBUS_CTRL_PIN, GPIO_PIN_RESET);
  modbus.txBusy = 0;
 8001034:	4b04      	ldr	r3, [pc, #16]	; (8001048 <modbus_sendRaw+0x94>)
 8001036:	2200      	movs	r2, #0
 8001038:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
  return true;
 800103c:	2301      	movs	r3, #1
}
 800103e:	4618      	mov	r0, r3
 8001040:	3718      	adds	r7, #24
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	20004d9c 	.word	0x20004d9c
 800104c:	20004d9e 	.word	0x20004d9e
 8001050:	20005080 	.word	0x20005080

08001054 <modbus_readHoldingRegisters>:

//##################################################################################################
bool modbus_readHoldingRegisters(uint8_t slaveAddress, uint16_t startNumber_0_to_9998, uint16_t length, uint16_t *data)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b088      	sub	sp, #32
 8001058:	af00      	add	r7, sp, #0
 800105a:	607b      	str	r3, [r7, #4]
 800105c:	4603      	mov	r3, r0
 800105e:	73fb      	strb	r3, [r7, #15]
 8001060:	460b      	mov	r3, r1
 8001062:	81bb      	strh	r3, [r7, #12]
 8001064:	4613      	mov	r3, r2
 8001066:	817b      	strh	r3, [r7, #10]
  if(startNumber_0_to_9998 > 9998)
 8001068:	89bb      	ldrh	r3, [r7, #12]
 800106a:	f242 720e 	movw	r2, #9998	; 0x270e
 800106e:	4293      	cmp	r3, r2
 8001070:	d901      	bls.n	8001076 <modbus_readHoldingRegisters+0x22>
    return false;
 8001072:	2300      	movs	r3, #0
 8001074:	e09c      	b.n	80011b0 <modbus_readHoldingRegisters+0x15c>

  uint8_t txData[8];
  txData[0] = slaveAddress;
 8001076:	7bfb      	ldrb	r3, [r7, #15]
 8001078:	743b      	strb	r3, [r7, #16]
  txData[1] = ModbusCMD_ReadHoldingRegisters;
 800107a:	2303      	movs	r3, #3
 800107c:	747b      	strb	r3, [r7, #17]
  txData[2] = (startNumber_0_to_9998 & 0xFF00) >> 8;
 800107e:	89bb      	ldrh	r3, [r7, #12]
 8001080:	0a1b      	lsrs	r3, r3, #8
 8001082:	b29b      	uxth	r3, r3
 8001084:	b2db      	uxtb	r3, r3
 8001086:	74bb      	strb	r3, [r7, #18]
  txData[3] = (startNumber_0_to_9998 & 0x00FF);
 8001088:	89bb      	ldrh	r3, [r7, #12]
 800108a:	b2db      	uxtb	r3, r3
 800108c:	74fb      	strb	r3, [r7, #19]
  txData[4] = (length & 0xFF00) >> 8;
 800108e:	897b      	ldrh	r3, [r7, #10]
 8001090:	0a1b      	lsrs	r3, r3, #8
 8001092:	b29b      	uxth	r3, r3
 8001094:	b2db      	uxtb	r3, r3
 8001096:	753b      	strb	r3, [r7, #20]
  txData[5] = (length & 0x00FF);
 8001098:	897b      	ldrh	r3, [r7, #10]
 800109a:	b2db      	uxtb	r3, r3
 800109c:	757b      	strb	r3, [r7, #21]
  static uint16_t  crc;
  crc = modbus_crc16(txData, 6);
 800109e:	f107 0310 	add.w	r3, r7, #16
 80010a2:	2106      	movs	r1, #6
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff ff03 	bl	8000eb0 <modbus_crc16>
 80010aa:	4603      	mov	r3, r0
 80010ac:	461a      	mov	r2, r3
 80010ae:	4b42      	ldr	r3, [pc, #264]	; (80011b8 <modbus_readHoldingRegisters+0x164>)
 80010b0:	801a      	strh	r2, [r3, #0]
  txData[6] = (crc & 0x00FF);
 80010b2:	4b41      	ldr	r3, [pc, #260]	; (80011b8 <modbus_readHoldingRegisters+0x164>)
 80010b4:	881b      	ldrh	r3, [r3, #0]
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	75bb      	strb	r3, [r7, #22]
  txData[7] = (crc & 0xFF00) >> 8;
 80010ba:	4b3f      	ldr	r3, [pc, #252]	; (80011b8 <modbus_readHoldingRegisters+0x164>)
 80010bc:	881b      	ldrh	r3, [r3, #0]
 80010be:	0a1b      	lsrs	r3, r3, #8
 80010c0:	b29b      	uxth	r3, r3
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	75fb      	strb	r3, [r7, #23]
  modbus_sendRaw(txData, 8, 100);
 80010c6:	f107 0310 	add.w	r3, r7, #16
 80010ca:	2264      	movs	r2, #100	; 0x64
 80010cc:	2108      	movs	r1, #8
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff ff70 	bl	8000fb4 <modbus_sendRaw>
  uint16_t recLen = modbus_receiveRaw(modbus.timeout);
 80010d4:	4b39      	ldr	r3, [pc, #228]	; (80011bc <modbus_readHoldingRegisters+0x168>)
 80010d6:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff ff36 	bl	8000f4c <modbus_receiveRaw>
 80010e0:	4603      	mov	r3, r0
 80010e2:	83bb      	strh	r3, [r7, #28]
  if(recLen == 0)
 80010e4:	8bbb      	ldrh	r3, [r7, #28]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d101      	bne.n	80010ee <modbus_readHoldingRegisters+0x9a>
    return false;
 80010ea:	2300      	movs	r3, #0
 80010ec:	e060      	b.n	80011b0 <modbus_readHoldingRegisters+0x15c>
  if(modbus.rxBuf[0] != slaveAddress)
 80010ee:	4b33      	ldr	r3, [pc, #204]	; (80011bc <modbus_readHoldingRegisters+0x168>)
 80010f0:	789b      	ldrb	r3, [r3, #2]
 80010f2:	7bfa      	ldrb	r2, [r7, #15]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d001      	beq.n	80010fc <modbus_readHoldingRegisters+0xa8>
    return false;
 80010f8:	2300      	movs	r3, #0
 80010fa:	e059      	b.n	80011b0 <modbus_readHoldingRegisters+0x15c>
  if(modbus.rxBuf[1] != ModbusCMD_ReadHoldingRegisters)
 80010fc:	4b2f      	ldr	r3, [pc, #188]	; (80011bc <modbus_readHoldingRegisters+0x168>)
 80010fe:	78db      	ldrb	r3, [r3, #3]
 8001100:	2b03      	cmp	r3, #3
 8001102:	d001      	beq.n	8001108 <modbus_readHoldingRegisters+0xb4>
    return false;
 8001104:	2300      	movs	r3, #0
 8001106:	e053      	b.n	80011b0 <modbus_readHoldingRegisters+0x15c>
  crc = modbus_crc16(modbus.rxBuf, modbus.rxBuf[2] + 3);
 8001108:	4b2c      	ldr	r3, [pc, #176]	; (80011bc <modbus_readHoldingRegisters+0x168>)
 800110a:	791b      	ldrb	r3, [r3, #4]
 800110c:	b29b      	uxth	r3, r3
 800110e:	3303      	adds	r3, #3
 8001110:	b29b      	uxth	r3, r3
 8001112:	4619      	mov	r1, r3
 8001114:	482a      	ldr	r0, [pc, #168]	; (80011c0 <modbus_readHoldingRegisters+0x16c>)
 8001116:	f7ff fecb 	bl	8000eb0 <modbus_crc16>
 800111a:	4603      	mov	r3, r0
 800111c:	461a      	mov	r2, r3
 800111e:	4b26      	ldr	r3, [pc, #152]	; (80011b8 <modbus_readHoldingRegisters+0x164>)
 8001120:	801a      	strh	r2, [r3, #0]
  if(((crc & 0x00FF) != modbus.rxBuf[modbus.rxBuf[2] + 3]) || (((crc & 0xFF00) >> 8) != modbus.rxBuf[modbus.rxBuf[2] + 4]))
 8001122:	4b25      	ldr	r3, [pc, #148]	; (80011b8 <modbus_readHoldingRegisters+0x164>)
 8001124:	881b      	ldrh	r3, [r3, #0]
 8001126:	b2db      	uxtb	r3, r3
 8001128:	4a24      	ldr	r2, [pc, #144]	; (80011bc <modbus_readHoldingRegisters+0x168>)
 800112a:	7912      	ldrb	r2, [r2, #4]
 800112c:	3203      	adds	r2, #3
 800112e:	4923      	ldr	r1, [pc, #140]	; (80011bc <modbus_readHoldingRegisters+0x168>)
 8001130:	440a      	add	r2, r1
 8001132:	7892      	ldrb	r2, [r2, #2]
 8001134:	4293      	cmp	r3, r2
 8001136:	d10c      	bne.n	8001152 <modbus_readHoldingRegisters+0xfe>
 8001138:	4b1f      	ldr	r3, [pc, #124]	; (80011b8 <modbus_readHoldingRegisters+0x164>)
 800113a:	881b      	ldrh	r3, [r3, #0]
 800113c:	0a1b      	lsrs	r3, r3, #8
 800113e:	b29a      	uxth	r2, r3
 8001140:	4b1e      	ldr	r3, [pc, #120]	; (80011bc <modbus_readHoldingRegisters+0x168>)
 8001142:	791b      	ldrb	r3, [r3, #4]
 8001144:	3304      	adds	r3, #4
 8001146:	491d      	ldr	r1, [pc, #116]	; (80011bc <modbus_readHoldingRegisters+0x168>)
 8001148:	440b      	add	r3, r1
 800114a:	789b      	ldrb	r3, [r3, #2]
 800114c:	b29b      	uxth	r3, r3
 800114e:	429a      	cmp	r2, r3
 8001150:	d001      	beq.n	8001156 <modbus_readHoldingRegisters+0x102>
    return false;
 8001152:	2300      	movs	r3, #0
 8001154:	e02c      	b.n	80011b0 <modbus_readHoldingRegisters+0x15c>
  if(data != NULL)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d028      	beq.n	80011ae <modbus_readHoldingRegisters+0x15a>
  {
    for(uint8_t i=0 ; i<modbus.rxBuf[2] ; i+=2)
 800115c:	2300      	movs	r3, #0
 800115e:	77fb      	strb	r3, [r7, #31]
 8001160:	e019      	b.n	8001196 <modbus_readHoldingRegisters+0x142>
    {
      uint8_t H = modbus.rxBuf[i+3];
 8001162:	7ffb      	ldrb	r3, [r7, #31]
 8001164:	3303      	adds	r3, #3
 8001166:	4a15      	ldr	r2, [pc, #84]	; (80011bc <modbus_readHoldingRegisters+0x168>)
 8001168:	4413      	add	r3, r2
 800116a:	789b      	ldrb	r3, [r3, #2]
 800116c:	76fb      	strb	r3, [r7, #27]
      modbus.rxBuf[i+3] = modbus.rxBuf[i+3+1];
 800116e:	7ffb      	ldrb	r3, [r7, #31]
 8001170:	1d1a      	adds	r2, r3, #4
 8001172:	7ffb      	ldrb	r3, [r7, #31]
 8001174:	3303      	adds	r3, #3
 8001176:	4911      	ldr	r1, [pc, #68]	; (80011bc <modbus_readHoldingRegisters+0x168>)
 8001178:	440a      	add	r2, r1
 800117a:	7891      	ldrb	r1, [r2, #2]
 800117c:	4a0f      	ldr	r2, [pc, #60]	; (80011bc <modbus_readHoldingRegisters+0x168>)
 800117e:	4413      	add	r3, r2
 8001180:	460a      	mov	r2, r1
 8001182:	709a      	strb	r2, [r3, #2]
      modbus.rxBuf[i+3+1] = H;
 8001184:	7ffb      	ldrb	r3, [r7, #31]
 8001186:	3304      	adds	r3, #4
 8001188:	4a0c      	ldr	r2, [pc, #48]	; (80011bc <modbus_readHoldingRegisters+0x168>)
 800118a:	4413      	add	r3, r2
 800118c:	7efa      	ldrb	r2, [r7, #27]
 800118e:	709a      	strb	r2, [r3, #2]
    for(uint8_t i=0 ; i<modbus.rxBuf[2] ; i+=2)
 8001190:	7ffb      	ldrb	r3, [r7, #31]
 8001192:	3302      	adds	r3, #2
 8001194:	77fb      	strb	r3, [r7, #31]
 8001196:	4b09      	ldr	r3, [pc, #36]	; (80011bc <modbus_readHoldingRegisters+0x168>)
 8001198:	791b      	ldrb	r3, [r3, #4]
 800119a:	7ffa      	ldrb	r2, [r7, #31]
 800119c:	429a      	cmp	r2, r3
 800119e:	d3e0      	bcc.n	8001162 <modbus_readHoldingRegisters+0x10e>
    }
    memcpy(data, &modbus.rxBuf[3], modbus.rxBuf[2]);
 80011a0:	4b06      	ldr	r3, [pc, #24]	; (80011bc <modbus_readHoldingRegisters+0x168>)
 80011a2:	791b      	ldrb	r3, [r3, #4]
 80011a4:	461a      	mov	r2, r3
 80011a6:	4907      	ldr	r1, [pc, #28]	; (80011c4 <modbus_readHoldingRegisters+0x170>)
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f006 fd81 	bl	8007cb0 <memcpy>
  }
  return true;
 80011ae:	2301      	movs	r3, #1

}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3720      	adds	r7, #32
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	200001fc 	.word	0x200001fc
 80011bc:	20004d9c 	.word	0x20004d9c
 80011c0:	20004d9e 	.word	0x20004d9e
 80011c4:	20004da1 	.word	0x20004da1

080011c8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80011d0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80011d4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80011d8:	f003 0301 	and.w	r3, r3, #1
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d013      	beq.n	8001208 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80011e0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80011e4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80011e8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d00b      	beq.n	8001208 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80011f0:	e000      	b.n	80011f4 <ITM_SendChar+0x2c>
    {
      __NOP();
 80011f2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80011f4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d0f9      	beq.n	80011f2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80011fe:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	b2d2      	uxtb	r2, r2
 8001206:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001208:	687b      	ldr	r3, [r7, #4]
}
 800120a:	4618      	mov	r0, r3
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr

08001216 <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b082      	sub	sp, #8
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff ffd1 	bl	80011c8 <ITM_SendChar>
	return(ch);
 8001226:	687b      	ldr	r3, [r7, #4]
}
 8001228:	4618      	mov	r0, r3
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}

08001230 <HAL_UART_TxCpltCallback>:
//----------------------------------------------------------------------------
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
        // завершена передача всех данных
}
 8001238:	bf00      	nop
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001248:	f000 fce6 	bl	8001c18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800124c:	f000 f84c 	bl	80012e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001250:	f000 f906 	bl	8001460 <MX_GPIO_Init>
  MX_DMA_Init();
 8001254:	f000 f8dc 	bl	8001410 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001258:	f000 f8b0 	bl	80013bc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  //size_t fre=xPortGetFreeHeapSize();
  printf("Programm started!\n");
 800125c:	4817      	ldr	r0, [pc, #92]	; (80012bc <main+0x78>)
 800125e:	f007 fa2d 	bl	80086bc <puts>
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8001262:	4b17      	ldr	r3, [pc, #92]	; (80012c0 <main+0x7c>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	68da      	ldr	r2, [r3, #12]
 8001268:	4b15      	ldr	r3, [pc, #84]	; (80012c0 <main+0x7c>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f042 0210 	orr.w	r2, r2, #16
 8001270:	60da      	str	r2, [r3, #12]
  //	HAL_UART_Receive_DMA(&huart1, (uint8_t*)receive_buff, 255);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001272:	f003 fa63 	bl	800473c <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  BigMac = osSemaphoreNew( 20, 0, NULL/*&BigMac_attributes */);
 8001276:	2200      	movs	r2, #0
 8001278:	2100      	movs	r1, #0
 800127a:	2014      	movs	r0, #20
 800127c:	f003 fb55 	bl	800492a <osSemaphoreNew>
 8001280:	4603      	mov	r3, r0
 8001282:	4a10      	ldr	r2, [pc, #64]	; (80012c4 <main+0x80>)
 8001284:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of messQueue */
  messQueueHandle = osMessageQueueNew (128, sizeof(uint8_t), &messQueue_attributes);
 8001286:	4a10      	ldr	r2, [pc, #64]	; (80012c8 <main+0x84>)
 8001288:	2101      	movs	r1, #1
 800128a:	2080      	movs	r0, #128	; 0x80
 800128c:	f003 fc48 	bl	8004b20 <osMessageQueueNew>
 8001290:	4603      	mov	r3, r0
 8001292:	4a0e      	ldr	r2, [pc, #56]	; (80012cc <main+0x88>)
 8001294:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001296:	4a0e      	ldr	r2, [pc, #56]	; (80012d0 <main+0x8c>)
 8001298:	2100      	movs	r1, #0
 800129a:	480e      	ldr	r0, [pc, #56]	; (80012d4 <main+0x90>)
 800129c:	f003 fa98 	bl	80047d0 <osThreadNew>
 80012a0:	4603      	mov	r3, r0
 80012a2:	4a0d      	ldr	r2, [pc, #52]	; (80012d8 <main+0x94>)
 80012a4:	6013      	str	r3, [r2, #0]

  /* creation of ledBlynk */
  ledBlynkHandle = osThreadNew(Start_ledBlynk, NULL, &ledBlynk_attributes);
 80012a6:	4a0d      	ldr	r2, [pc, #52]	; (80012dc <main+0x98>)
 80012a8:	2100      	movs	r1, #0
 80012aa:	480d      	ldr	r0, [pc, #52]	; (80012e0 <main+0x9c>)
 80012ac:	f003 fa90 	bl	80047d0 <osThreadNew>
 80012b0:	4603      	mov	r3, r0
 80012b2:	4a0c      	ldr	r2, [pc, #48]	; (80012e4 <main+0xa0>)
 80012b4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80012b6:	f003 fa65 	bl	8004784 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012ba:	e7fe      	b.n	80012ba <main+0x76>
 80012bc:	0800a7bc 	.word	0x0800a7bc
 80012c0:	20005080 	.word	0x20005080
 80012c4:	20004eb4 	.word	0x20004eb4
 80012c8:	0800aa88 	.word	0x0800aa88
 80012cc:	20004eb0 	.word	0x20004eb0
 80012d0:	0800aa40 	.word	0x0800aa40
 80012d4:	0800153d 	.word	0x0800153d
 80012d8:	20004eb8 	.word	0x20004eb8
 80012dc:	0800aa64 	.word	0x0800aa64
 80012e0:	08001581 	.word	0x08001581
 80012e4:	20004ebc 	.word	0x20004ebc

080012e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b094      	sub	sp, #80	; 0x50
 80012ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ee:	f107 0320 	add.w	r3, r7, #32
 80012f2:	2230      	movs	r2, #48	; 0x30
 80012f4:	2100      	movs	r1, #0
 80012f6:	4618      	mov	r0, r3
 80012f8:	f006 fce8 	bl	8007ccc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012fc:	f107 030c 	add.w	r3, r7, #12
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	609a      	str	r2, [r3, #8]
 8001308:	60da      	str	r2, [r3, #12]
 800130a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800130c:	2300      	movs	r3, #0
 800130e:	60bb      	str	r3, [r7, #8]
 8001310:	4b28      	ldr	r3, [pc, #160]	; (80013b4 <SystemClock_Config+0xcc>)
 8001312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001314:	4a27      	ldr	r2, [pc, #156]	; (80013b4 <SystemClock_Config+0xcc>)
 8001316:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800131a:	6413      	str	r3, [r2, #64]	; 0x40
 800131c:	4b25      	ldr	r3, [pc, #148]	; (80013b4 <SystemClock_Config+0xcc>)
 800131e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001320:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001324:	60bb      	str	r3, [r7, #8]
 8001326:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001328:	2300      	movs	r3, #0
 800132a:	607b      	str	r3, [r7, #4]
 800132c:	4b22      	ldr	r3, [pc, #136]	; (80013b8 <SystemClock_Config+0xd0>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001334:	4a20      	ldr	r2, [pc, #128]	; (80013b8 <SystemClock_Config+0xd0>)
 8001336:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800133a:	6013      	str	r3, [r2, #0]
 800133c:	4b1e      	ldr	r3, [pc, #120]	; (80013b8 <SystemClock_Config+0xd0>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001344:	607b      	str	r3, [r7, #4]
 8001346:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001348:	2301      	movs	r3, #1
 800134a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800134c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001350:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001352:	2302      	movs	r3, #2
 8001354:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001356:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800135a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800135c:	2319      	movs	r3, #25
 800135e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 128;
 8001360:	2380      	movs	r3, #128	; 0x80
 8001362:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001364:	2302      	movs	r3, #2
 8001366:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001368:	2304      	movs	r3, #4
 800136a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800136c:	f107 0320 	add.w	r3, r7, #32
 8001370:	4618      	mov	r0, r3
 8001372:	f001 fb15 	bl	80029a0 <HAL_RCC_OscConfig>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800137c:	f000 f942 	bl	8001604 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001380:	230f      	movs	r3, #15
 8001382:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001384:	2302      	movs	r3, #2
 8001386:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 8001388:	2390      	movs	r3, #144	; 0x90
 800138a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800138c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001390:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001392:	2300      	movs	r3, #0
 8001394:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001396:	f107 030c 	add.w	r3, r7, #12
 800139a:	2100      	movs	r1, #0
 800139c:	4618      	mov	r0, r3
 800139e:	f001 fd77 	bl	8002e90 <HAL_RCC_ClockConfig>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80013a8:	f000 f92c 	bl	8001604 <Error_Handler>
  }
}
 80013ac:	bf00      	nop
 80013ae:	3750      	adds	r7, #80	; 0x50
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	40023800 	.word	0x40023800
 80013b8:	40007000 	.word	0x40007000

080013bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013c0:	4b11      	ldr	r3, [pc, #68]	; (8001408 <MX_USART1_UART_Init+0x4c>)
 80013c2:	4a12      	ldr	r2, [pc, #72]	; (800140c <MX_USART1_UART_Init+0x50>)
 80013c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80013c6:	4b10      	ldr	r3, [pc, #64]	; (8001408 <MX_USART1_UART_Init+0x4c>)
 80013c8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80013cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013ce:	4b0e      	ldr	r3, [pc, #56]	; (8001408 <MX_USART1_UART_Init+0x4c>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013d4:	4b0c      	ldr	r3, [pc, #48]	; (8001408 <MX_USART1_UART_Init+0x4c>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013da:	4b0b      	ldr	r3, [pc, #44]	; (8001408 <MX_USART1_UART_Init+0x4c>)
 80013dc:	2200      	movs	r2, #0
 80013de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013e0:	4b09      	ldr	r3, [pc, #36]	; (8001408 <MX_USART1_UART_Init+0x4c>)
 80013e2:	220c      	movs	r2, #12
 80013e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013e6:	4b08      	ldr	r3, [pc, #32]	; (8001408 <MX_USART1_UART_Init+0x4c>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013ec:	4b06      	ldr	r3, [pc, #24]	; (8001408 <MX_USART1_UART_Init+0x4c>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013f2:	4805      	ldr	r0, [pc, #20]	; (8001408 <MX_USART1_UART_Init+0x4c>)
 80013f4:	f002 f9ce 	bl	8003794 <HAL_UART_Init>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80013fe:	f000 f901 	bl	8001604 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001402:	bf00      	nop
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	20005080 	.word	0x20005080
 800140c:	40011000 	.word	0x40011000

08001410 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	607b      	str	r3, [r7, #4]
 800141a:	4b10      	ldr	r3, [pc, #64]	; (800145c <MX_DMA_Init+0x4c>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	4a0f      	ldr	r2, [pc, #60]	; (800145c <MX_DMA_Init+0x4c>)
 8001420:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001424:	6313      	str	r3, [r2, #48]	; 0x30
 8001426:	4b0d      	ldr	r3, [pc, #52]	; (800145c <MX_DMA_Init+0x4c>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800142e:	607b      	str	r3, [r7, #4]
 8001430:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 5, 0);
 8001432:	2200      	movs	r2, #0
 8001434:	2105      	movs	r1, #5
 8001436:	2044      	movs	r0, #68	; 0x44
 8001438:	f000 fce8 	bl	8001e0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 800143c:	2044      	movs	r0, #68	; 0x44
 800143e:	f000 fd01 	bl	8001e44 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8001442:	2200      	movs	r2, #0
 8001444:	2105      	movs	r1, #5
 8001446:	2046      	movs	r0, #70	; 0x46
 8001448:	f000 fce0 	bl	8001e0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800144c:	2046      	movs	r0, #70	; 0x46
 800144e:	f000 fcf9 	bl	8001e44 <HAL_NVIC_EnableIRQ>

}
 8001452:	bf00      	nop
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	40023800 	.word	0x40023800

08001460 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b08a      	sub	sp, #40	; 0x28
 8001464:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001466:	f107 0314 	add.w	r3, r7, #20
 800146a:	2200      	movs	r2, #0
 800146c:	601a      	str	r2, [r3, #0]
 800146e:	605a      	str	r2, [r3, #4]
 8001470:	609a      	str	r2, [r3, #8]
 8001472:	60da      	str	r2, [r3, #12]
 8001474:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	613b      	str	r3, [r7, #16]
 800147a:	4b2d      	ldr	r3, [pc, #180]	; (8001530 <MX_GPIO_Init+0xd0>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	4a2c      	ldr	r2, [pc, #176]	; (8001530 <MX_GPIO_Init+0xd0>)
 8001480:	f043 0304 	orr.w	r3, r3, #4
 8001484:	6313      	str	r3, [r2, #48]	; 0x30
 8001486:	4b2a      	ldr	r3, [pc, #168]	; (8001530 <MX_GPIO_Init+0xd0>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	f003 0304 	and.w	r3, r3, #4
 800148e:	613b      	str	r3, [r7, #16]
 8001490:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	60fb      	str	r3, [r7, #12]
 8001496:	4b26      	ldr	r3, [pc, #152]	; (8001530 <MX_GPIO_Init+0xd0>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	4a25      	ldr	r2, [pc, #148]	; (8001530 <MX_GPIO_Init+0xd0>)
 800149c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014a0:	6313      	str	r3, [r2, #48]	; 0x30
 80014a2:	4b23      	ldr	r3, [pc, #140]	; (8001530 <MX_GPIO_Init+0xd0>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014aa:	60fb      	str	r3, [r7, #12]
 80014ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	60bb      	str	r3, [r7, #8]
 80014b2:	4b1f      	ldr	r3, [pc, #124]	; (8001530 <MX_GPIO_Init+0xd0>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	4a1e      	ldr	r2, [pc, #120]	; (8001530 <MX_GPIO_Init+0xd0>)
 80014b8:	f043 0301 	orr.w	r3, r3, #1
 80014bc:	6313      	str	r3, [r2, #48]	; 0x30
 80014be:	4b1c      	ldr	r3, [pc, #112]	; (8001530 <MX_GPIO_Init+0xd0>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	60bb      	str	r3, [r7, #8]
 80014c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	607b      	str	r3, [r7, #4]
 80014ce:	4b18      	ldr	r3, [pc, #96]	; (8001530 <MX_GPIO_Init+0xd0>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	4a17      	ldr	r2, [pc, #92]	; (8001530 <MX_GPIO_Init+0xd0>)
 80014d4:	f043 0302 	orr.w	r3, r3, #2
 80014d8:	6313      	str	r3, [r2, #48]	; 0x30
 80014da:	4b15      	ldr	r3, [pc, #84]	; (8001530 <MX_GPIO_Init+0xd0>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	607b      	str	r3, [r7, #4]
 80014e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80014e6:	2201      	movs	r2, #1
 80014e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014ec:	4811      	ldr	r0, [pc, #68]	; (8001534 <MX_GPIO_Init+0xd4>)
 80014ee:	f001 fa3d 	bl	800296c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80014f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f8:	2301      	movs	r3, #1
 80014fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fc:	2300      	movs	r3, #0
 80014fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001500:	2300      	movs	r3, #0
 8001502:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001504:	f107 0314 	add.w	r3, r7, #20
 8001508:	4619      	mov	r1, r3
 800150a:	480a      	ldr	r0, [pc, #40]	; (8001534 <MX_GPIO_Init+0xd4>)
 800150c:	f001 f8aa 	bl	8002664 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001510:	2301      	movs	r3, #1
 8001512:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001514:	2300      	movs	r3, #0
 8001516:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001518:	2301      	movs	r3, #1
 800151a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151c:	f107 0314 	add.w	r3, r7, #20
 8001520:	4619      	mov	r1, r3
 8001522:	4805      	ldr	r0, [pc, #20]	; (8001538 <MX_GPIO_Init+0xd8>)
 8001524:	f001 f89e 	bl	8002664 <HAL_GPIO_Init>

}
 8001528:	bf00      	nop
 800152a:	3728      	adds	r7, #40	; 0x28
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	40023800 	.word	0x40023800
 8001534:	40020800 	.word	0x40020800
 8001538:	40020000 	.word	0x40020000

0800153c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint16_t data = 0;
 8001544:	2300      	movs	r3, #0
 8001546:	81fb      	strh	r3, [r7, #14]
	modbus_init(500);
 8001548:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800154c:	f7ff fce8 	bl	8000f20 <modbus_init>
	  		  //osSemaphoreRelease(BigMac);

	  	  //}
	  	  //osDelay(200);

	  modbus_readHoldingRegisters(0x01, 0x1C , 0x01, &data);
 8001550:	f107 030e 	add.w	r3, r7, #14
 8001554:	2201      	movs	r2, #1
 8001556:	211c      	movs	r1, #28
 8001558:	2001      	movs	r0, #1
 800155a:	f7ff fd7b 	bl	8001054 <modbus_readHoldingRegisters>
	  printf("Receive Data = %d ",data);
 800155e:	89fb      	ldrh	r3, [r7, #14]
 8001560:	4619      	mov	r1, r3
 8001562:	4805      	ldr	r0, [pc, #20]	; (8001578 <StartDefaultTask+0x3c>)
 8001564:	f007 f824 	bl	80085b0 <iprintf>
	  printf("\r\n");
 8001568:	4804      	ldr	r0, [pc, #16]	; (800157c <StartDefaultTask+0x40>)
 800156a:	f007 f8a7 	bl	80086bc <puts>
	  osDelay(2000);
 800156e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001572:	f003 f9bf 	bl	80048f4 <osDelay>
	  modbus_readHoldingRegisters(0x01, 0x1C , 0x01, &data);
 8001576:	e7eb      	b.n	8001550 <StartDefaultTask+0x14>
 8001578:	0800a7d0 	.word	0x0800a7d0
 800157c:	0800a7e4 	.word	0x0800a7e4

08001580 <Start_ledBlynk>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_ledBlynk */
void Start_ledBlynk(void *argument)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_ledBlynk */
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire( BigMac, portMAX_DELAY);
 8001588:	4b12      	ldr	r3, [pc, #72]	; (80015d4 <Start_ledBlynk+0x54>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f04f 31ff 	mov.w	r1, #4294967295
 8001590:	4618      	mov	r0, r3
 8001592:	f003 fa53 	bl	8004a3c <osSemaphoreAcquire>
	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,GPIO_PIN_RESET);
 8001596:	2200      	movs	r2, #0
 8001598:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800159c:	480e      	ldr	r0, [pc, #56]	; (80015d8 <Start_ledBlynk+0x58>)
 800159e:	f001 f9e5 	bl	800296c <HAL_GPIO_WritePin>
	  osDelay(500);
 80015a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015a6:	f003 f9a5 	bl	80048f4 <osDelay>
	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,GPIO_PIN_SET);
 80015aa:	2201      	movs	r2, #1
 80015ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015b0:	4809      	ldr	r0, [pc, #36]	; (80015d8 <Start_ledBlynk+0x58>)
 80015b2:	f001 f9db 	bl	800296c <HAL_GPIO_WritePin>
	  printf("BigMac Count = %d\n", (int)osSemaphoreGetCount(BigMac));
 80015b6:	4b07      	ldr	r3, [pc, #28]	; (80015d4 <Start_ledBlynk+0x54>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4618      	mov	r0, r3
 80015bc:	f003 fa90 	bl	8004ae0 <osSemaphoreGetCount>
 80015c0:	4603      	mov	r3, r0
 80015c2:	4619      	mov	r1, r3
 80015c4:	4805      	ldr	r0, [pc, #20]	; (80015dc <Start_ledBlynk+0x5c>)
 80015c6:	f006 fff3 	bl	80085b0 <iprintf>
	  osDelay(500);
 80015ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015ce:	f003 f991 	bl	80048f4 <osDelay>
	  osSemaphoreAcquire( BigMac, portMAX_DELAY);
 80015d2:	e7d9      	b.n	8001588 <Start_ledBlynk+0x8>
 80015d4:	20004eb4 	.word	0x20004eb4
 80015d8:	40020800 	.word	0x40020800
 80015dc:	0800a7e8 	.word	0x0800a7e8

080015e0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a04      	ldr	r2, [pc, #16]	; (8001600 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d101      	bne.n	80015f6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80015f2:	f000 fb33 	bl	8001c5c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80015f6:	bf00      	nop
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	40014400 	.word	0x40014400

08001604 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001608:	b672      	cpsid	i
}
 800160a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800160c:	e7fe      	b.n	800160c <Error_Handler+0x8>
	...

08001610 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	607b      	str	r3, [r7, #4]
 800161a:	4b12      	ldr	r3, [pc, #72]	; (8001664 <HAL_MspInit+0x54>)
 800161c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800161e:	4a11      	ldr	r2, [pc, #68]	; (8001664 <HAL_MspInit+0x54>)
 8001620:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001624:	6453      	str	r3, [r2, #68]	; 0x44
 8001626:	4b0f      	ldr	r3, [pc, #60]	; (8001664 <HAL_MspInit+0x54>)
 8001628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800162e:	607b      	str	r3, [r7, #4]
 8001630:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	603b      	str	r3, [r7, #0]
 8001636:	4b0b      	ldr	r3, [pc, #44]	; (8001664 <HAL_MspInit+0x54>)
 8001638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163a:	4a0a      	ldr	r2, [pc, #40]	; (8001664 <HAL_MspInit+0x54>)
 800163c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001640:	6413      	str	r3, [r2, #64]	; 0x40
 8001642:	4b08      	ldr	r3, [pc, #32]	; (8001664 <HAL_MspInit+0x54>)
 8001644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800164a:	603b      	str	r3, [r7, #0]
 800164c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800164e:	2200      	movs	r2, #0
 8001650:	210f      	movs	r1, #15
 8001652:	f06f 0001 	mvn.w	r0, #1
 8001656:	f000 fbd9 	bl	8001e0c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800165a:	bf00      	nop
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	40023800 	.word	0x40023800

08001668 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b08a      	sub	sp, #40	; 0x28
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001670:	f107 0314 	add.w	r3, r7, #20
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	605a      	str	r2, [r3, #4]
 800167a:	609a      	str	r2, [r3, #8]
 800167c:	60da      	str	r2, [r3, #12]
 800167e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a4c      	ldr	r2, [pc, #304]	; (80017b8 <HAL_UART_MspInit+0x150>)
 8001686:	4293      	cmp	r3, r2
 8001688:	f040 8091 	bne.w	80017ae <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800168c:	2300      	movs	r3, #0
 800168e:	613b      	str	r3, [r7, #16]
 8001690:	4b4a      	ldr	r3, [pc, #296]	; (80017bc <HAL_UART_MspInit+0x154>)
 8001692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001694:	4a49      	ldr	r2, [pc, #292]	; (80017bc <HAL_UART_MspInit+0x154>)
 8001696:	f043 0310 	orr.w	r3, r3, #16
 800169a:	6453      	str	r3, [r2, #68]	; 0x44
 800169c:	4b47      	ldr	r3, [pc, #284]	; (80017bc <HAL_UART_MspInit+0x154>)
 800169e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a0:	f003 0310 	and.w	r3, r3, #16
 80016a4:	613b      	str	r3, [r7, #16]
 80016a6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a8:	2300      	movs	r3, #0
 80016aa:	60fb      	str	r3, [r7, #12]
 80016ac:	4b43      	ldr	r3, [pc, #268]	; (80017bc <HAL_UART_MspInit+0x154>)
 80016ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b0:	4a42      	ldr	r2, [pc, #264]	; (80017bc <HAL_UART_MspInit+0x154>)
 80016b2:	f043 0301 	orr.w	r3, r3, #1
 80016b6:	6313      	str	r3, [r2, #48]	; 0x30
 80016b8:	4b40      	ldr	r3, [pc, #256]	; (80017bc <HAL_UART_MspInit+0x154>)
 80016ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016bc:	f003 0301 	and.w	r3, r3, #1
 80016c0:	60fb      	str	r3, [r7, #12]
 80016c2:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80016c4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80016c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ca:	2302      	movs	r3, #2
 80016cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ce:	2300      	movs	r3, #0
 80016d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d2:	2303      	movs	r3, #3
 80016d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016d6:	2307      	movs	r3, #7
 80016d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016da:	f107 0314 	add.w	r3, r7, #20
 80016de:	4619      	mov	r1, r3
 80016e0:	4837      	ldr	r0, [pc, #220]	; (80017c0 <HAL_UART_MspInit+0x158>)
 80016e2:	f000 ffbf 	bl	8002664 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream5;
 80016e6:	4b37      	ldr	r3, [pc, #220]	; (80017c4 <HAL_UART_MspInit+0x15c>)
 80016e8:	4a37      	ldr	r2, [pc, #220]	; (80017c8 <HAL_UART_MspInit+0x160>)
 80016ea:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80016ec:	4b35      	ldr	r3, [pc, #212]	; (80017c4 <HAL_UART_MspInit+0x15c>)
 80016ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016f2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016f4:	4b33      	ldr	r3, [pc, #204]	; (80017c4 <HAL_UART_MspInit+0x15c>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016fa:	4b32      	ldr	r3, [pc, #200]	; (80017c4 <HAL_UART_MspInit+0x15c>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001700:	4b30      	ldr	r3, [pc, #192]	; (80017c4 <HAL_UART_MspInit+0x15c>)
 8001702:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001706:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001708:	4b2e      	ldr	r3, [pc, #184]	; (80017c4 <HAL_UART_MspInit+0x15c>)
 800170a:	2200      	movs	r2, #0
 800170c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800170e:	4b2d      	ldr	r3, [pc, #180]	; (80017c4 <HAL_UART_MspInit+0x15c>)
 8001710:	2200      	movs	r2, #0
 8001712:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001714:	4b2b      	ldr	r3, [pc, #172]	; (80017c4 <HAL_UART_MspInit+0x15c>)
 8001716:	2200      	movs	r2, #0
 8001718:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800171a:	4b2a      	ldr	r3, [pc, #168]	; (80017c4 <HAL_UART_MspInit+0x15c>)
 800171c:	2200      	movs	r2, #0
 800171e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001720:	4b28      	ldr	r3, [pc, #160]	; (80017c4 <HAL_UART_MspInit+0x15c>)
 8001722:	2200      	movs	r2, #0
 8001724:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001726:	4827      	ldr	r0, [pc, #156]	; (80017c4 <HAL_UART_MspInit+0x15c>)
 8001728:	f000 fb9a 	bl	8001e60 <HAL_DMA_Init>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001732:	f7ff ff67 	bl	8001604 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4a22      	ldr	r2, [pc, #136]	; (80017c4 <HAL_UART_MspInit+0x15c>)
 800173a:	639a      	str	r2, [r3, #56]	; 0x38
 800173c:	4a21      	ldr	r2, [pc, #132]	; (80017c4 <HAL_UART_MspInit+0x15c>)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8001742:	4b22      	ldr	r3, [pc, #136]	; (80017cc <HAL_UART_MspInit+0x164>)
 8001744:	4a22      	ldr	r2, [pc, #136]	; (80017d0 <HAL_UART_MspInit+0x168>)
 8001746:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8001748:	4b20      	ldr	r3, [pc, #128]	; (80017cc <HAL_UART_MspInit+0x164>)
 800174a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800174e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001750:	4b1e      	ldr	r3, [pc, #120]	; (80017cc <HAL_UART_MspInit+0x164>)
 8001752:	2240      	movs	r2, #64	; 0x40
 8001754:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001756:	4b1d      	ldr	r3, [pc, #116]	; (80017cc <HAL_UART_MspInit+0x164>)
 8001758:	2200      	movs	r2, #0
 800175a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800175c:	4b1b      	ldr	r3, [pc, #108]	; (80017cc <HAL_UART_MspInit+0x164>)
 800175e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001762:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001764:	4b19      	ldr	r3, [pc, #100]	; (80017cc <HAL_UART_MspInit+0x164>)
 8001766:	2200      	movs	r2, #0
 8001768:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800176a:	4b18      	ldr	r3, [pc, #96]	; (80017cc <HAL_UART_MspInit+0x164>)
 800176c:	2200      	movs	r2, #0
 800176e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001770:	4b16      	ldr	r3, [pc, #88]	; (80017cc <HAL_UART_MspInit+0x164>)
 8001772:	2200      	movs	r2, #0
 8001774:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001776:	4b15      	ldr	r3, [pc, #84]	; (80017cc <HAL_UART_MspInit+0x164>)
 8001778:	2200      	movs	r2, #0
 800177a:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800177c:	4b13      	ldr	r3, [pc, #76]	; (80017cc <HAL_UART_MspInit+0x164>)
 800177e:	2200      	movs	r2, #0
 8001780:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001782:	4812      	ldr	r0, [pc, #72]	; (80017cc <HAL_UART_MspInit+0x164>)
 8001784:	f000 fb6c 	bl	8001e60 <HAL_DMA_Init>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 800178e:	f7ff ff39 	bl	8001604 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a0d      	ldr	r2, [pc, #52]	; (80017cc <HAL_UART_MspInit+0x164>)
 8001796:	635a      	str	r2, [r3, #52]	; 0x34
 8001798:	4a0c      	ldr	r2, [pc, #48]	; (80017cc <HAL_UART_MspInit+0x164>)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800179e:	2200      	movs	r2, #0
 80017a0:	2105      	movs	r1, #5
 80017a2:	2025      	movs	r0, #37	; 0x25
 80017a4:	f000 fb32 	bl	8001e0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80017a8:	2025      	movs	r0, #37	; 0x25
 80017aa:	f000 fb4b 	bl	8001e44 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80017ae:	bf00      	nop
 80017b0:	3728      	adds	r7, #40	; 0x28
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40011000 	.word	0x40011000
 80017bc:	40023800 	.word	0x40023800
 80017c0:	40020000 	.word	0x40020000
 80017c4:	20005020 	.word	0x20005020
 80017c8:	40026488 	.word	0x40026488
 80017cc:	20004fc0 	.word	0x20004fc0
 80017d0:	400264b8 	.word	0x400264b8

080017d4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b08c      	sub	sp, #48	; 0x30
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80017dc:	2300      	movs	r3, #0
 80017de:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80017e0:	2300      	movs	r3, #0
 80017e2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM10 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80017e4:	2200      	movs	r2, #0
 80017e6:	6879      	ldr	r1, [r7, #4]
 80017e8:	2019      	movs	r0, #25
 80017ea:	f000 fb0f 	bl	8001e0c <HAL_NVIC_SetPriority>

  /* Enable the TIM10 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80017ee:	2019      	movs	r0, #25
 80017f0:	f000 fb28 	bl	8001e44 <HAL_NVIC_EnableIRQ>
  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 80017f4:	2300      	movs	r3, #0
 80017f6:	60fb      	str	r3, [r7, #12]
 80017f8:	4b1e      	ldr	r3, [pc, #120]	; (8001874 <HAL_InitTick+0xa0>)
 80017fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fc:	4a1d      	ldr	r2, [pc, #116]	; (8001874 <HAL_InitTick+0xa0>)
 80017fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001802:	6453      	str	r3, [r2, #68]	; 0x44
 8001804:	4b1b      	ldr	r3, [pc, #108]	; (8001874 <HAL_InitTick+0xa0>)
 8001806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001808:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800180c:	60fb      	str	r3, [r7, #12]
 800180e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001810:	f107 0210 	add.w	r2, r7, #16
 8001814:	f107 0314 	add.w	r3, r7, #20
 8001818:	4611      	mov	r1, r2
 800181a:	4618      	mov	r0, r3
 800181c:	f001 fd08 	bl	8003230 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001820:	f001 fcf2 	bl	8003208 <HAL_RCC_GetPCLK2Freq>
 8001824:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001828:	4a13      	ldr	r2, [pc, #76]	; (8001878 <HAL_InitTick+0xa4>)
 800182a:	fba2 2303 	umull	r2, r3, r2, r3
 800182e:	0c9b      	lsrs	r3, r3, #18
 8001830:	3b01      	subs	r3, #1
 8001832:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8001834:	4b11      	ldr	r3, [pc, #68]	; (800187c <HAL_InitTick+0xa8>)
 8001836:	4a12      	ldr	r2, [pc, #72]	; (8001880 <HAL_InitTick+0xac>)
 8001838:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 800183a:	4b10      	ldr	r3, [pc, #64]	; (800187c <HAL_InitTick+0xa8>)
 800183c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001840:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8001842:	4a0e      	ldr	r2, [pc, #56]	; (800187c <HAL_InitTick+0xa8>)
 8001844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001846:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8001848:	4b0c      	ldr	r3, [pc, #48]	; (800187c <HAL_InitTick+0xa8>)
 800184a:	2200      	movs	r2, #0
 800184c:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800184e:	4b0b      	ldr	r3, [pc, #44]	; (800187c <HAL_InitTick+0xa8>)
 8001850:	2200      	movs	r2, #0
 8001852:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim10) == HAL_OK)
 8001854:	4809      	ldr	r0, [pc, #36]	; (800187c <HAL_InitTick+0xa8>)
 8001856:	f001 fd1d 	bl	8003294 <HAL_TIM_Base_Init>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d104      	bne.n	800186a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim10);
 8001860:	4806      	ldr	r0, [pc, #24]	; (800187c <HAL_InitTick+0xa8>)
 8001862:	f001 fd71 	bl	8003348 <HAL_TIM_Base_Start_IT>
 8001866:	4603      	mov	r3, r0
 8001868:	e000      	b.n	800186c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
}
 800186c:	4618      	mov	r0, r3
 800186e:	3730      	adds	r7, #48	; 0x30
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	40023800 	.word	0x40023800
 8001878:	431bde83 	.word	0x431bde83
 800187c:	20005194 	.word	0x20005194
 8001880:	40014400 	.word	0x40014400

08001884 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001888:	e7fe      	b.n	8001888 <NMI_Handler+0x4>

0800188a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800188a:	b480      	push	{r7}
 800188c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800188e:	e7fe      	b.n	800188e <HardFault_Handler+0x4>

08001890 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001894:	e7fe      	b.n	8001894 <MemManage_Handler+0x4>

08001896 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001896:	b480      	push	{r7}
 8001898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800189a:	e7fe      	b.n	800189a <BusFault_Handler+0x4>

0800189c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018a0:	e7fe      	b.n	80018a0 <UsageFault_Handler+0x4>

080018a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018a2:	b480      	push	{r7}
 80018a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018a6:	bf00      	nop
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80018b4:	4802      	ldr	r0, [pc, #8]	; (80018c0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80018b6:	f001 fda9 	bl	800340c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80018ba:	bf00      	nop
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	20005194 	.word	0x20005194

080018c4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80018c8:	4803      	ldr	r0, [pc, #12]	; (80018d8 <USART1_IRQHandler+0x14>)
 80018ca:	f002 f8a9 	bl	8003a20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  USER_UART_IRQHandler(&huart1);
 80018ce:	4802      	ldr	r0, [pc, #8]	; (80018d8 <USART1_IRQHandler+0x14>)
 80018d0:	f000 f8f6 	bl	8001ac0 <USER_UART_IRQHandler>
  /* USER CODE END USART1_IRQn 1 */
}
 80018d4:	bf00      	nop
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	20005080 	.word	0x20005080

080018dc <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80018e0:	4802      	ldr	r0, [pc, #8]	; (80018ec <DMA2_Stream5_IRQHandler+0x10>)
 80018e2:	f000 fc55 	bl	8002190 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	20005020 	.word	0x20005020

080018f0 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80018f4:	4803      	ldr	r0, [pc, #12]	; (8001904 <DMA2_Stream7_IRQHandler+0x14>)
 80018f6:	f000 fc4b 	bl	8002190 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */
  modbus_callback_txDMA();
 80018fa:	f7ff fb03 	bl	8000f04 <modbus_callback_txDMA>
  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80018fe:	bf00      	nop
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	20004fc0 	.word	0x20004fc0

08001908 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
	return 1;
 800190c:	2301      	movs	r3, #1
}
 800190e:	4618      	mov	r0, r3
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <_kill>:

int _kill(int pid, int sig)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001922:	f006 f99b 	bl	8007c5c <__errno>
 8001926:	4603      	mov	r3, r0
 8001928:	2216      	movs	r2, #22
 800192a:	601a      	str	r2, [r3, #0]
	return -1;
 800192c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001930:	4618      	mov	r0, r3
 8001932:	3708      	adds	r7, #8
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}

08001938 <_exit>:

void _exit (int status)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001940:	f04f 31ff 	mov.w	r1, #4294967295
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f7ff ffe7 	bl	8001918 <_kill>
	while (1) {}		/* Make sure we hang here */
 800194a:	e7fe      	b.n	800194a <_exit+0x12>

0800194c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b086      	sub	sp, #24
 8001950:	af00      	add	r7, sp, #0
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	60b9      	str	r1, [r7, #8]
 8001956:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001958:	2300      	movs	r3, #0
 800195a:	617b      	str	r3, [r7, #20]
 800195c:	e00a      	b.n	8001974 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800195e:	f3af 8000 	nop.w
 8001962:	4601      	mov	r1, r0
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	1c5a      	adds	r2, r3, #1
 8001968:	60ba      	str	r2, [r7, #8]
 800196a:	b2ca      	uxtb	r2, r1
 800196c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	3301      	adds	r3, #1
 8001972:	617b      	str	r3, [r7, #20]
 8001974:	697a      	ldr	r2, [r7, #20]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	429a      	cmp	r2, r3
 800197a:	dbf0      	blt.n	800195e <_read+0x12>
	}

return len;
 800197c:	687b      	ldr	r3, [r7, #4]
}
 800197e:	4618      	mov	r0, r3
 8001980:	3718      	adds	r7, #24
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}

08001986 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001986:	b580      	push	{r7, lr}
 8001988:	b086      	sub	sp, #24
 800198a:	af00      	add	r7, sp, #0
 800198c:	60f8      	str	r0, [r7, #12]
 800198e:	60b9      	str	r1, [r7, #8]
 8001990:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001992:	2300      	movs	r3, #0
 8001994:	617b      	str	r3, [r7, #20]
 8001996:	e009      	b.n	80019ac <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	1c5a      	adds	r2, r3, #1
 800199c:	60ba      	str	r2, [r7, #8]
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7ff fc38 	bl	8001216 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	3301      	adds	r3, #1
 80019aa:	617b      	str	r3, [r7, #20]
 80019ac:	697a      	ldr	r2, [r7, #20]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	dbf1      	blt.n	8001998 <_write+0x12>

	}
	return len;
 80019b4:	687b      	ldr	r3, [r7, #4]
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3718      	adds	r7, #24
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <_close>:

int _close(int file)
{
 80019be:	b480      	push	{r7}
 80019c0:	b083      	sub	sp, #12
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
	return -1;
 80019c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr

080019d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019d6:	b480      	push	{r7}
 80019d8:	b083      	sub	sp, #12
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
 80019de:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019e6:	605a      	str	r2, [r3, #4]
	return 0;
 80019e8:	2300      	movs	r3, #0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	370c      	adds	r7, #12
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr

080019f6 <_isatty>:

int _isatty(int file)
{
 80019f6:	b480      	push	{r7}
 80019f8:	b083      	sub	sp, #12
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
	return 1;
 80019fe:	2301      	movs	r3, #1
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b085      	sub	sp, #20
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	60b9      	str	r1, [r7, #8]
 8001a16:	607a      	str	r2, [r7, #4]
	return 0;
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3714      	adds	r7, #20
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
	...

08001a28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a30:	4a14      	ldr	r2, [pc, #80]	; (8001a84 <_sbrk+0x5c>)
 8001a32:	4b15      	ldr	r3, [pc, #84]	; (8001a88 <_sbrk+0x60>)
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a3c:	4b13      	ldr	r3, [pc, #76]	; (8001a8c <_sbrk+0x64>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d102      	bne.n	8001a4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a44:	4b11      	ldr	r3, [pc, #68]	; (8001a8c <_sbrk+0x64>)
 8001a46:	4a12      	ldr	r2, [pc, #72]	; (8001a90 <_sbrk+0x68>)
 8001a48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a4a:	4b10      	ldr	r3, [pc, #64]	; (8001a8c <_sbrk+0x64>)
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4413      	add	r3, r2
 8001a52:	693a      	ldr	r2, [r7, #16]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d207      	bcs.n	8001a68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a58:	f006 f900 	bl	8007c5c <__errno>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	220c      	movs	r2, #12
 8001a60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a62:	f04f 33ff 	mov.w	r3, #4294967295
 8001a66:	e009      	b.n	8001a7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a68:	4b08      	ldr	r3, [pc, #32]	; (8001a8c <_sbrk+0x64>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a6e:	4b07      	ldr	r3, [pc, #28]	; (8001a8c <_sbrk+0x64>)
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4413      	add	r3, r2
 8001a76:	4a05      	ldr	r2, [pc, #20]	; (8001a8c <_sbrk+0x64>)
 8001a78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3718      	adds	r7, #24
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	20010000 	.word	0x20010000
 8001a88:	00000400 	.word	0x00000400
 8001a8c:	20000200 	.word	0x20000200
 8001a90:	20005230 	.word	0x20005230

08001a94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a98:	4b08      	ldr	r3, [pc, #32]	; (8001abc <SystemInit+0x28>)
 8001a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a9e:	4a07      	ldr	r2, [pc, #28]	; (8001abc <SystemInit+0x28>)
 8001aa0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001aa4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001aa8:	4b04      	ldr	r3, [pc, #16]	; (8001abc <SystemInit+0x28>)
 8001aaa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001aae:	609a      	str	r2, [r3, #8]
#endif
}
 8001ab0:	bf00      	nop
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	e000ed00 	.word	0xe000ed00

08001ac0 <USER_UART_IRQHandler>:
extern uint8_t receive_buff[BUFFER_SIZE];
extern DMA_HandleTypeDef hdma_usart1_rx;
extern UART_HandleTypeDef huart1;

void USER_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
    if(USART1 == huart1.Instance)                                   //Determine whether it is serial port 1
 8001ac8:	4b10      	ldr	r3, [pc, #64]	; (8001b0c <USER_UART_IRQHandler+0x4c>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a10      	ldr	r2, [pc, #64]	; (8001b10 <USER_UART_IRQHandler+0x50>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d117      	bne.n	8001b02 <USER_UART_IRQHandler+0x42>
    {
        if(RESET != __HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE))   //Judging whether it is idle interruption
 8001ad2:	4b0e      	ldr	r3, [pc, #56]	; (8001b0c <USER_UART_IRQHandler+0x4c>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0310 	and.w	r3, r3, #16
 8001adc:	2b10      	cmp	r3, #16
 8001ade:	d110      	bne.n	8001b02 <USER_UART_IRQHandler+0x42>
        {
            __HAL_UART_CLEAR_IDLEFLAG(&huart1);                     //Clear idle interrupt sign (otherwise it will continue to enter interrupt)
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	60fb      	str	r3, [r7, #12]
 8001ae4:	4b09      	ldr	r3, [pc, #36]	; (8001b0c <USER_UART_IRQHandler+0x4c>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	60fb      	str	r3, [r7, #12]
 8001aec:	4b07      	ldr	r3, [pc, #28]	; (8001b0c <USER_UART_IRQHandler+0x4c>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	60fb      	str	r3, [r7, #12]
 8001af4:	68fb      	ldr	r3, [r7, #12]
            printf("\r\nIdle IRQ!\r\n");
 8001af6:	4807      	ldr	r0, [pc, #28]	; (8001b14 <USER_UART_IRQHandler+0x54>)
 8001af8:	f006 fde0 	bl	80086bc <puts>
            USER_UART_IDLECallback(huart);                          //Call interrupt handler
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f000 f80b 	bl	8001b18 <USER_UART_IDLECallback>
        }
    }
}
 8001b02:	bf00      	nop
 8001b04:	3710      	adds	r7, #16
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	20005080 	.word	0x20005080
 8001b10:	40011000 	.word	0x40011000
 8001b14:	0800a7fc 	.word	0x0800a7fc

08001b18 <USER_UART_IDLECallback>:


void USER_UART_IDLECallback(UART_HandleTypeDef *huart)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
	//Stop this DMA transmission
    HAL_UART_DMAStop(&huart1);
 8001b20:	4821      	ldr	r0, [pc, #132]	; (8001ba8 <USER_UART_IDLECallback+0x90>)
 8001b22:	f001 ff21 	bl	8003968 <HAL_UART_DMAStop>

    //Calculate the length of the received data
    uint8_t data_length  = BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart1_rx);
 8001b26:	4b21      	ldr	r3, [pc, #132]	; (8001bac <USER_UART_IDLECallback+0x94>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	43db      	mvns	r3, r3
 8001b30:	72fb      	strb	r3, [r7, #11]

	//Test function: Print out the received data
    printf("length = %d\r\n",data_length);
 8001b32:	7afb      	ldrb	r3, [r7, #11]
 8001b34:	4619      	mov	r1, r3
 8001b36:	481e      	ldr	r0, [pc, #120]	; (8001bb0 <USER_UART_IDLECallback+0x98>)
 8001b38:	f006 fd3a 	bl	80085b0 <iprintf>
    //HAL_UART_Transmit(&huart1,receive_buff,data_length,0x200);
    //memset(modbus.rxBuf,0,BUFFER_SIZE);
    for(int i = 0; i < data_length; ++i)
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	60fb      	str	r3, [r7, #12]
 8001b40:	e014      	b.n	8001b6c <USER_UART_IDLECallback+0x54>
    {
    	printf("%2X ", receive_buff[i]);
 8001b42:	4a1c      	ldr	r2, [pc, #112]	; (8001bb4 <USER_UART_IDLECallback+0x9c>)
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	4413      	add	r3, r2
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	481a      	ldr	r0, [pc, #104]	; (8001bb8 <USER_UART_IDLECallback+0xa0>)
 8001b4e:	f006 fd2f 	bl	80085b0 <iprintf>
    	modbus.rxBuf[i] = receive_buff[i];
 8001b52:	4a18      	ldr	r2, [pc, #96]	; (8001bb4 <USER_UART_IDLECallback+0x9c>)
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	4413      	add	r3, r2
 8001b58:	7819      	ldrb	r1, [r3, #0]
 8001b5a:	4a18      	ldr	r2, [pc, #96]	; (8001bbc <USER_UART_IDLECallback+0xa4>)
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	4413      	add	r3, r2
 8001b60:	3302      	adds	r3, #2
 8001b62:	460a      	mov	r2, r1
 8001b64:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < data_length; ++i)
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	3301      	adds	r3, #1
 8001b6a:	60fb      	str	r3, [r7, #12]
 8001b6c:	7afb      	ldrb	r3, [r7, #11]
 8001b6e:	68fa      	ldr	r2, [r7, #12]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	dbe6      	blt.n	8001b42 <USER_UART_IDLECallback+0x2a>

    }
    modbus.rxIndex = data_length - 1;
 8001b74:	7afb      	ldrb	r3, [r7, #11]
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	3b01      	subs	r3, #1
 8001b7a:	b29a      	uxth	r2, r3
 8001b7c:	4b0f      	ldr	r3, [pc, #60]	; (8001bbc <USER_UART_IDLECallback+0xa4>)
 8001b7e:	801a      	strh	r2, [r3, #0]
    printf("\r\n");
 8001b80:	480f      	ldr	r0, [pc, #60]	; (8001bc0 <USER_UART_IDLECallback+0xa8>)
 8001b82:	f006 fd9b 	bl	80086bc <puts>
	//Zero Receiving Buffer
    memset(receive_buff,0,data_length);
 8001b86:	7afb      	ldrb	r3, [r7, #11]
 8001b88:	461a      	mov	r2, r3
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	4809      	ldr	r0, [pc, #36]	; (8001bb4 <USER_UART_IDLECallback+0x9c>)
 8001b8e:	f006 f89d 	bl	8007ccc <memset>
    data_length = 0;
 8001b92:	2300      	movs	r3, #0
 8001b94:	72fb      	strb	r3, [r7, #11]
    modbus.RxDmaDone = 1;
 8001b96:	4b09      	ldr	r3, [pc, #36]	; (8001bbc <USER_UART_IDLECallback+0xa4>)
 8001b98:	2201      	movs	r2, #1
 8001b9a:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111

}
 8001b9e:	bf00      	nop
 8001ba0:	3710      	adds	r7, #16
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	20005080 	.word	0x20005080
 8001bac:	20005020 	.word	0x20005020
 8001bb0:	0800a80c 	.word	0x0800a80c
 8001bb4:	20004ec0 	.word	0x20004ec0
 8001bb8:	0800a81c 	.word	0x0800a81c
 8001bbc:	20004d9c 	.word	0x20004d9c
 8001bc0:	0800a824 	.word	0x0800a824

08001bc4 <Reset_Handler>:
 8001bc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bfc <LoopFillZerobss+0x14>
 8001bc8:	2100      	movs	r1, #0
 8001bca:	e003      	b.n	8001bd4 <LoopCopyDataInit>

08001bcc <CopyDataInit>:
 8001bcc:	4b0c      	ldr	r3, [pc, #48]	; (8001c00 <LoopFillZerobss+0x18>)
 8001bce:	585b      	ldr	r3, [r3, r1]
 8001bd0:	5043      	str	r3, [r0, r1]
 8001bd2:	3104      	adds	r1, #4

08001bd4 <LoopCopyDataInit>:
 8001bd4:	480b      	ldr	r0, [pc, #44]	; (8001c04 <LoopFillZerobss+0x1c>)
 8001bd6:	4b0c      	ldr	r3, [pc, #48]	; (8001c08 <LoopFillZerobss+0x20>)
 8001bd8:	1842      	adds	r2, r0, r1
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d3f6      	bcc.n	8001bcc <CopyDataInit>
 8001bde:	4a0b      	ldr	r2, [pc, #44]	; (8001c0c <LoopFillZerobss+0x24>)
 8001be0:	e002      	b.n	8001be8 <LoopFillZerobss>

08001be2 <FillZerobss>:
 8001be2:	2300      	movs	r3, #0
 8001be4:	f842 3b04 	str.w	r3, [r2], #4

08001be8 <LoopFillZerobss>:
 8001be8:	4b09      	ldr	r3, [pc, #36]	; (8001c10 <LoopFillZerobss+0x28>)
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d3f9      	bcc.n	8001be2 <FillZerobss>
 8001bee:	f7ff ff51 	bl	8001a94 <SystemInit>
 8001bf2:	f006 f839 	bl	8007c68 <__libc_init_array>
 8001bf6:	f7ff fb25 	bl	8001244 <main>
 8001bfa:	4770      	bx	lr
 8001bfc:	20010000 	.word	0x20010000
 8001c00:	0800aeb4 	.word	0x0800aeb4
 8001c04:	20000000 	.word	0x20000000
 8001c08:	200001e0 	.word	0x200001e0
 8001c0c:	200001e0 	.word	0x200001e0
 8001c10:	20005230 	.word	0x20005230

08001c14 <ADC_IRQHandler>:
 8001c14:	e7fe      	b.n	8001c14 <ADC_IRQHandler>
	...

08001c18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c1c:	4b0e      	ldr	r3, [pc, #56]	; (8001c58 <HAL_Init+0x40>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a0d      	ldr	r2, [pc, #52]	; (8001c58 <HAL_Init+0x40>)
 8001c22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c28:	4b0b      	ldr	r3, [pc, #44]	; (8001c58 <HAL_Init+0x40>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a0a      	ldr	r2, [pc, #40]	; (8001c58 <HAL_Init+0x40>)
 8001c2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c34:	4b08      	ldr	r3, [pc, #32]	; (8001c58 <HAL_Init+0x40>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a07      	ldr	r2, [pc, #28]	; (8001c58 <HAL_Init+0x40>)
 8001c3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c40:	2003      	movs	r0, #3
 8001c42:	f000 f8d8 	bl	8001df6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c46:	2000      	movs	r0, #0
 8001c48:	f7ff fdc4 	bl	80017d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c4c:	f7ff fce0 	bl	8001610 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	40023c00 	.word	0x40023c00

08001c5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c60:	4b06      	ldr	r3, [pc, #24]	; (8001c7c <HAL_IncTick+0x20>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	461a      	mov	r2, r3
 8001c66:	4b06      	ldr	r3, [pc, #24]	; (8001c80 <HAL_IncTick+0x24>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	4a04      	ldr	r2, [pc, #16]	; (8001c80 <HAL_IncTick+0x24>)
 8001c6e:	6013      	str	r3, [r2, #0]
}
 8001c70:	bf00      	nop
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	20000008 	.word	0x20000008
 8001c80:	200051dc 	.word	0x200051dc

08001c84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  return uwTick;
 8001c88:	4b03      	ldr	r3, [pc, #12]	; (8001c98 <HAL_GetTick+0x14>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	200051dc 	.word	0x200051dc

08001c9c <__NVIC_SetPriorityGrouping>:
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b085      	sub	sp, #20
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f003 0307 	and.w	r3, r3, #7
 8001caa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cac:	4b0c      	ldr	r3, [pc, #48]	; (8001ce0 <__NVIC_SetPriorityGrouping+0x44>)
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cb2:	68ba      	ldr	r2, [r7, #8]
 8001cb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cb8:	4013      	ands	r3, r2
 8001cba:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ccc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cce:	4a04      	ldr	r2, [pc, #16]	; (8001ce0 <__NVIC_SetPriorityGrouping+0x44>)
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	60d3      	str	r3, [r2, #12]
}
 8001cd4:	bf00      	nop
 8001cd6:	3714      	adds	r7, #20
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr
 8001ce0:	e000ed00 	.word	0xe000ed00

08001ce4 <__NVIC_GetPriorityGrouping>:
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ce8:	4b04      	ldr	r3, [pc, #16]	; (8001cfc <__NVIC_GetPriorityGrouping+0x18>)
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	0a1b      	lsrs	r3, r3, #8
 8001cee:	f003 0307 	and.w	r3, r3, #7
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr
 8001cfc:	e000ed00 	.word	0xe000ed00

08001d00 <__NVIC_EnableIRQ>:
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	4603      	mov	r3, r0
 8001d08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	db0b      	blt.n	8001d2a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d12:	79fb      	ldrb	r3, [r7, #7]
 8001d14:	f003 021f 	and.w	r2, r3, #31
 8001d18:	4907      	ldr	r1, [pc, #28]	; (8001d38 <__NVIC_EnableIRQ+0x38>)
 8001d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1e:	095b      	lsrs	r3, r3, #5
 8001d20:	2001      	movs	r0, #1
 8001d22:	fa00 f202 	lsl.w	r2, r0, r2
 8001d26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001d2a:	bf00      	nop
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	e000e100 	.word	0xe000e100

08001d3c <__NVIC_SetPriority>:
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	4603      	mov	r3, r0
 8001d44:	6039      	str	r1, [r7, #0]
 8001d46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	db0a      	blt.n	8001d66 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	b2da      	uxtb	r2, r3
 8001d54:	490c      	ldr	r1, [pc, #48]	; (8001d88 <__NVIC_SetPriority+0x4c>)
 8001d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5a:	0112      	lsls	r2, r2, #4
 8001d5c:	b2d2      	uxtb	r2, r2
 8001d5e:	440b      	add	r3, r1
 8001d60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001d64:	e00a      	b.n	8001d7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	b2da      	uxtb	r2, r3
 8001d6a:	4908      	ldr	r1, [pc, #32]	; (8001d8c <__NVIC_SetPriority+0x50>)
 8001d6c:	79fb      	ldrb	r3, [r7, #7]
 8001d6e:	f003 030f 	and.w	r3, r3, #15
 8001d72:	3b04      	subs	r3, #4
 8001d74:	0112      	lsls	r2, r2, #4
 8001d76:	b2d2      	uxtb	r2, r2
 8001d78:	440b      	add	r3, r1
 8001d7a:	761a      	strb	r2, [r3, #24]
}
 8001d7c:	bf00      	nop
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr
 8001d88:	e000e100 	.word	0xe000e100
 8001d8c:	e000ed00 	.word	0xe000ed00

08001d90 <NVIC_EncodePriority>:
{
 8001d90:	b480      	push	{r7}
 8001d92:	b089      	sub	sp, #36	; 0x24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	60f8      	str	r0, [r7, #12]
 8001d98:	60b9      	str	r1, [r7, #8]
 8001d9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f003 0307 	and.w	r3, r3, #7
 8001da2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	f1c3 0307 	rsb	r3, r3, #7
 8001daa:	2b04      	cmp	r3, #4
 8001dac:	bf28      	it	cs
 8001dae:	2304      	movcs	r3, #4
 8001db0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	3304      	adds	r3, #4
 8001db6:	2b06      	cmp	r3, #6
 8001db8:	d902      	bls.n	8001dc0 <NVIC_EncodePriority+0x30>
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	3b03      	subs	r3, #3
 8001dbe:	e000      	b.n	8001dc2 <NVIC_EncodePriority+0x32>
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8001dc8:	69bb      	ldr	r3, [r7, #24]
 8001dca:	fa02 f303 	lsl.w	r3, r2, r3
 8001dce:	43da      	mvns	r2, r3
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	401a      	ands	r2, r3
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dd8:	f04f 31ff 	mov.w	r1, #4294967295
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	fa01 f303 	lsl.w	r3, r1, r3
 8001de2:	43d9      	mvns	r1, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de8:	4313      	orrs	r3, r2
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3724      	adds	r7, #36	; 0x24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr

08001df6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b082      	sub	sp, #8
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f7ff ff4c 	bl	8001c9c <__NVIC_SetPriorityGrouping>
}
 8001e04:	bf00      	nop
 8001e06:	3708      	adds	r7, #8
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b086      	sub	sp, #24
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	4603      	mov	r3, r0
 8001e14:	60b9      	str	r1, [r7, #8]
 8001e16:	607a      	str	r2, [r7, #4]
 8001e18:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e1e:	f7ff ff61 	bl	8001ce4 <__NVIC_GetPriorityGrouping>
 8001e22:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	68b9      	ldr	r1, [r7, #8]
 8001e28:	6978      	ldr	r0, [r7, #20]
 8001e2a:	f7ff ffb1 	bl	8001d90 <NVIC_EncodePriority>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e34:	4611      	mov	r1, r2
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7ff ff80 	bl	8001d3c <__NVIC_SetPriority>
}
 8001e3c:	bf00      	nop
 8001e3e:	3718      	adds	r7, #24
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}

08001e44 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7ff ff54 	bl	8001d00 <__NVIC_EnableIRQ>
}
 8001e58:	bf00      	nop
 8001e5a:	3708      	adds	r7, #8
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b086      	sub	sp, #24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e6c:	f7ff ff0a 	bl	8001c84 <HAL_GetTick>
 8001e70:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d101      	bne.n	8001e7c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e099      	b.n	8001fb0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2202      	movs	r2, #2
 8001e88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f022 0201 	bic.w	r2, r2, #1
 8001e9a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e9c:	e00f      	b.n	8001ebe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e9e:	f7ff fef1 	bl	8001c84 <HAL_GetTick>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	2b05      	cmp	r3, #5
 8001eaa:	d908      	bls.n	8001ebe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2220      	movs	r2, #32
 8001eb0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2203      	movs	r2, #3
 8001eb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e078      	b.n	8001fb0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0301 	and.w	r3, r3, #1
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d1e8      	bne.n	8001e9e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ed4:	697a      	ldr	r2, [r7, #20]
 8001ed6:	4b38      	ldr	r3, [pc, #224]	; (8001fb8 <HAL_DMA_Init+0x158>)
 8001ed8:	4013      	ands	r3, r2
 8001eda:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685a      	ldr	r2, [r3, #4]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001eea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	691b      	ldr	r3, [r3, #16]
 8001ef0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ef6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	699b      	ldr	r3, [r3, #24]
 8001efc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f02:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6a1b      	ldr	r3, [r3, #32]
 8001f08:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f0a:	697a      	ldr	r2, [r7, #20]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f14:	2b04      	cmp	r3, #4
 8001f16:	d107      	bne.n	8001f28 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f20:	4313      	orrs	r3, r2
 8001f22:	697a      	ldr	r2, [r7, #20]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	697a      	ldr	r2, [r7, #20]
 8001f2e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	695b      	ldr	r3, [r3, #20]
 8001f36:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	f023 0307 	bic.w	r3, r3, #7
 8001f3e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f44:	697a      	ldr	r2, [r7, #20]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4e:	2b04      	cmp	r3, #4
 8001f50:	d117      	bne.n	8001f82 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f56:	697a      	ldr	r2, [r7, #20]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d00e      	beq.n	8001f82 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f000 fb01 	bl	800256c <DMA_CheckFifoParam>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d008      	beq.n	8001f82 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2240      	movs	r2, #64	; 0x40
 8001f74:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2201      	movs	r2, #1
 8001f7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e016      	b.n	8001fb0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	697a      	ldr	r2, [r7, #20]
 8001f88:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f000 fab8 	bl	8002500 <DMA_CalcBaseAndBitshift>
 8001f90:	4603      	mov	r3, r0
 8001f92:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f98:	223f      	movs	r2, #63	; 0x3f
 8001f9a:	409a      	lsls	r2, r3
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2201      	movs	r2, #1
 8001faa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001fae:	2300      	movs	r3, #0
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3718      	adds	r7, #24
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	f010803f 	.word	0xf010803f

08001fbc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b086      	sub	sp, #24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	607a      	str	r2, [r7, #4]
 8001fc8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d101      	bne.n	8001fe2 <HAL_DMA_Start_IT+0x26>
 8001fde:	2302      	movs	r3, #2
 8001fe0:	e040      	b.n	8002064 <HAL_DMA_Start_IT+0xa8>
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d12f      	bne.n	8002056 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2202      	movs	r2, #2
 8001ffa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2200      	movs	r2, #0
 8002002:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	68b9      	ldr	r1, [r7, #8]
 800200a:	68f8      	ldr	r0, [r7, #12]
 800200c:	f000 fa4a 	bl	80024a4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002014:	223f      	movs	r2, #63	; 0x3f
 8002016:	409a      	lsls	r2, r3
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f042 0216 	orr.w	r2, r2, #22
 800202a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002030:	2b00      	cmp	r3, #0
 8002032:	d007      	beq.n	8002044 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f042 0208 	orr.w	r2, r2, #8
 8002042:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f042 0201 	orr.w	r2, r2, #1
 8002052:	601a      	str	r2, [r3, #0]
 8002054:	e005      	b.n	8002062 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2200      	movs	r2, #0
 800205a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800205e:	2302      	movs	r3, #2
 8002060:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002062:	7dfb      	ldrb	r3, [r7, #23]
}
 8002064:	4618      	mov	r0, r3
 8002066:	3718      	adds	r7, #24
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002078:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800207a:	f7ff fe03 	bl	8001c84 <HAL_GetTick>
 800207e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002086:	b2db      	uxtb	r3, r3
 8002088:	2b02      	cmp	r3, #2
 800208a:	d008      	beq.n	800209e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2280      	movs	r2, #128	; 0x80
 8002090:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e052      	b.n	8002144 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f022 0216 	bic.w	r2, r2, #22
 80020ac:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	695a      	ldr	r2, [r3, #20]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020bc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d103      	bne.n	80020ce <HAL_DMA_Abort+0x62>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d007      	beq.n	80020de <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f022 0208 	bic.w	r2, r2, #8
 80020dc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f022 0201 	bic.w	r2, r2, #1
 80020ec:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020ee:	e013      	b.n	8002118 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020f0:	f7ff fdc8 	bl	8001c84 <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	2b05      	cmp	r3, #5
 80020fc:	d90c      	bls.n	8002118 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2220      	movs	r2, #32
 8002102:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2203      	movs	r2, #3
 8002110:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	e015      	b.n	8002144 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	2b00      	cmp	r3, #0
 8002124:	d1e4      	bne.n	80020f0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800212a:	223f      	movs	r2, #63	; 0x3f
 800212c:	409a      	lsls	r2, r3
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2201      	movs	r2, #1
 800213e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8002142:	2300      	movs	r3, #0
}
 8002144:	4618      	mov	r0, r3
 8002146:	3710      	adds	r7, #16
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800215a:	b2db      	uxtb	r3, r3
 800215c:	2b02      	cmp	r3, #2
 800215e:	d004      	beq.n	800216a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2280      	movs	r2, #128	; 0x80
 8002164:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e00c      	b.n	8002184 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2205      	movs	r2, #5
 800216e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f022 0201 	bic.w	r2, r2, #1
 8002180:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002182:	2300      	movs	r3, #0
}
 8002184:	4618      	mov	r0, r3
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b086      	sub	sp, #24
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002198:	2300      	movs	r3, #0
 800219a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800219c:	4b92      	ldr	r3, [pc, #584]	; (80023e8 <HAL_DMA_IRQHandler+0x258>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a92      	ldr	r2, [pc, #584]	; (80023ec <HAL_DMA_IRQHandler+0x25c>)
 80021a2:	fba2 2303 	umull	r2, r3, r2, r3
 80021a6:	0a9b      	lsrs	r3, r3, #10
 80021a8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ba:	2208      	movs	r2, #8
 80021bc:	409a      	lsls	r2, r3
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	4013      	ands	r3, r2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d01a      	beq.n	80021fc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0304 	and.w	r3, r3, #4
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d013      	beq.n	80021fc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f022 0204 	bic.w	r2, r2, #4
 80021e2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021e8:	2208      	movs	r2, #8
 80021ea:	409a      	lsls	r2, r3
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021f4:	f043 0201 	orr.w	r2, r3, #1
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002200:	2201      	movs	r2, #1
 8002202:	409a      	lsls	r2, r3
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	4013      	ands	r3, r2
 8002208:	2b00      	cmp	r3, #0
 800220a:	d012      	beq.n	8002232 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	695b      	ldr	r3, [r3, #20]
 8002212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002216:	2b00      	cmp	r3, #0
 8002218:	d00b      	beq.n	8002232 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800221e:	2201      	movs	r2, #1
 8002220:	409a      	lsls	r2, r3
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800222a:	f043 0202 	orr.w	r2, r3, #2
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002236:	2204      	movs	r2, #4
 8002238:	409a      	lsls	r2, r3
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	4013      	ands	r3, r2
 800223e:	2b00      	cmp	r3, #0
 8002240:	d012      	beq.n	8002268 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0302 	and.w	r3, r3, #2
 800224c:	2b00      	cmp	r3, #0
 800224e:	d00b      	beq.n	8002268 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002254:	2204      	movs	r2, #4
 8002256:	409a      	lsls	r2, r3
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002260:	f043 0204 	orr.w	r2, r3, #4
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800226c:	2210      	movs	r2, #16
 800226e:	409a      	lsls	r2, r3
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	4013      	ands	r3, r2
 8002274:	2b00      	cmp	r3, #0
 8002276:	d043      	beq.n	8002300 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0308 	and.w	r3, r3, #8
 8002282:	2b00      	cmp	r3, #0
 8002284:	d03c      	beq.n	8002300 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800228a:	2210      	movs	r2, #16
 800228c:	409a      	lsls	r2, r3
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d018      	beq.n	80022d2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d108      	bne.n	80022c0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d024      	beq.n	8002300 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	4798      	blx	r3
 80022be:	e01f      	b.n	8002300 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d01b      	beq.n	8002300 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	4798      	blx	r3
 80022d0:	e016      	b.n	8002300 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d107      	bne.n	80022f0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f022 0208 	bic.w	r2, r2, #8
 80022ee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d003      	beq.n	8002300 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002304:	2220      	movs	r2, #32
 8002306:	409a      	lsls	r2, r3
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	4013      	ands	r3, r2
 800230c:	2b00      	cmp	r3, #0
 800230e:	f000 808e 	beq.w	800242e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0310 	and.w	r3, r3, #16
 800231c:	2b00      	cmp	r3, #0
 800231e:	f000 8086 	beq.w	800242e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002326:	2220      	movs	r2, #32
 8002328:	409a      	lsls	r2, r3
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002334:	b2db      	uxtb	r3, r3
 8002336:	2b05      	cmp	r3, #5
 8002338:	d136      	bne.n	80023a8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f022 0216 	bic.w	r2, r2, #22
 8002348:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	695a      	ldr	r2, [r3, #20]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002358:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235e:	2b00      	cmp	r3, #0
 8002360:	d103      	bne.n	800236a <HAL_DMA_IRQHandler+0x1da>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002366:	2b00      	cmp	r3, #0
 8002368:	d007      	beq.n	800237a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f022 0208 	bic.w	r2, r2, #8
 8002378:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800237e:	223f      	movs	r2, #63	; 0x3f
 8002380:	409a      	lsls	r2, r3
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2200      	movs	r2, #0
 800238a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2201      	movs	r2, #1
 8002392:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800239a:	2b00      	cmp	r3, #0
 800239c:	d07d      	beq.n	800249a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	4798      	blx	r3
        }
        return;
 80023a6:	e078      	b.n	800249a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d01c      	beq.n	80023f0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d108      	bne.n	80023d6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d030      	beq.n	800242e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	4798      	blx	r3
 80023d4:	e02b      	b.n	800242e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d027      	beq.n	800242e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	4798      	blx	r3
 80023e6:	e022      	b.n	800242e <HAL_DMA_IRQHandler+0x29e>
 80023e8:	20000000 	.word	0x20000000
 80023ec:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d10f      	bne.n	800241e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f022 0210 	bic.w	r2, r2, #16
 800240c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2200      	movs	r2, #0
 8002412:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2201      	movs	r2, #1
 800241a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002422:	2b00      	cmp	r3, #0
 8002424:	d003      	beq.n	800242e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002432:	2b00      	cmp	r3, #0
 8002434:	d032      	beq.n	800249c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	2b00      	cmp	r3, #0
 8002440:	d022      	beq.n	8002488 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2205      	movs	r2, #5
 8002446:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f022 0201 	bic.w	r2, r2, #1
 8002458:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	3301      	adds	r3, #1
 800245e:	60bb      	str	r3, [r7, #8]
 8002460:	697a      	ldr	r2, [r7, #20]
 8002462:	429a      	cmp	r2, r3
 8002464:	d307      	bcc.n	8002476 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0301 	and.w	r3, r3, #1
 8002470:	2b00      	cmp	r3, #0
 8002472:	d1f2      	bne.n	800245a <HAL_DMA_IRQHandler+0x2ca>
 8002474:	e000      	b.n	8002478 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002476:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2200      	movs	r2, #0
 800247c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2201      	movs	r2, #1
 8002484:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800248c:	2b00      	cmp	r3, #0
 800248e:	d005      	beq.n	800249c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	4798      	blx	r3
 8002498:	e000      	b.n	800249c <HAL_DMA_IRQHandler+0x30c>
        return;
 800249a:	bf00      	nop
    }
  }
}
 800249c:	3718      	adds	r7, #24
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop

080024a4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b085      	sub	sp, #20
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]
 80024b0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80024c0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	683a      	ldr	r2, [r7, #0]
 80024c8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	2b40      	cmp	r3, #64	; 0x40
 80024d0:	d108      	bne.n	80024e4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	68ba      	ldr	r2, [r7, #8]
 80024e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80024e2:	e007      	b.n	80024f4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	68ba      	ldr	r2, [r7, #8]
 80024ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	60da      	str	r2, [r3, #12]
}
 80024f4:	bf00      	nop
 80024f6:	3714      	adds	r7, #20
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002500:	b480      	push	{r7}
 8002502:	b085      	sub	sp, #20
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	b2db      	uxtb	r3, r3
 800250e:	3b10      	subs	r3, #16
 8002510:	4a14      	ldr	r2, [pc, #80]	; (8002564 <DMA_CalcBaseAndBitshift+0x64>)
 8002512:	fba2 2303 	umull	r2, r3, r2, r3
 8002516:	091b      	lsrs	r3, r3, #4
 8002518:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800251a:	4a13      	ldr	r2, [pc, #76]	; (8002568 <DMA_CalcBaseAndBitshift+0x68>)
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	4413      	add	r3, r2
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	461a      	mov	r2, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2b03      	cmp	r3, #3
 800252c:	d909      	bls.n	8002542 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002536:	f023 0303 	bic.w	r3, r3, #3
 800253a:	1d1a      	adds	r2, r3, #4
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	659a      	str	r2, [r3, #88]	; 0x58
 8002540:	e007      	b.n	8002552 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800254a:	f023 0303 	bic.w	r3, r3, #3
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002556:	4618      	mov	r0, r3
 8002558:	3714      	adds	r7, #20
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	aaaaaaab 	.word	0xaaaaaaab
 8002568:	0800aab8 	.word	0x0800aab8

0800256c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800256c:	b480      	push	{r7}
 800256e:	b085      	sub	sp, #20
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002574:	2300      	movs	r3, #0
 8002576:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800257c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	699b      	ldr	r3, [r3, #24]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d11f      	bne.n	80025c6 <DMA_CheckFifoParam+0x5a>
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	2b03      	cmp	r3, #3
 800258a:	d856      	bhi.n	800263a <DMA_CheckFifoParam+0xce>
 800258c:	a201      	add	r2, pc, #4	; (adr r2, 8002594 <DMA_CheckFifoParam+0x28>)
 800258e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002592:	bf00      	nop
 8002594:	080025a5 	.word	0x080025a5
 8002598:	080025b7 	.word	0x080025b7
 800259c:	080025a5 	.word	0x080025a5
 80025a0:	0800263b 	.word	0x0800263b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d046      	beq.n	800263e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025b4:	e043      	b.n	800263e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80025be:	d140      	bne.n	8002642 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025c4:	e03d      	b.n	8002642 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	699b      	ldr	r3, [r3, #24]
 80025ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025ce:	d121      	bne.n	8002614 <DMA_CheckFifoParam+0xa8>
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	2b03      	cmp	r3, #3
 80025d4:	d837      	bhi.n	8002646 <DMA_CheckFifoParam+0xda>
 80025d6:	a201      	add	r2, pc, #4	; (adr r2, 80025dc <DMA_CheckFifoParam+0x70>)
 80025d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025dc:	080025ed 	.word	0x080025ed
 80025e0:	080025f3 	.word	0x080025f3
 80025e4:	080025ed 	.word	0x080025ed
 80025e8:	08002605 	.word	0x08002605
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	73fb      	strb	r3, [r7, #15]
      break;
 80025f0:	e030      	b.n	8002654 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d025      	beq.n	800264a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002602:	e022      	b.n	800264a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002608:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800260c:	d11f      	bne.n	800264e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002612:	e01c      	b.n	800264e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	2b02      	cmp	r3, #2
 8002618:	d903      	bls.n	8002622 <DMA_CheckFifoParam+0xb6>
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	2b03      	cmp	r3, #3
 800261e:	d003      	beq.n	8002628 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002620:	e018      	b.n	8002654 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	73fb      	strb	r3, [r7, #15]
      break;
 8002626:	e015      	b.n	8002654 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800262c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d00e      	beq.n	8002652 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	73fb      	strb	r3, [r7, #15]
      break;
 8002638:	e00b      	b.n	8002652 <DMA_CheckFifoParam+0xe6>
      break;
 800263a:	bf00      	nop
 800263c:	e00a      	b.n	8002654 <DMA_CheckFifoParam+0xe8>
      break;
 800263e:	bf00      	nop
 8002640:	e008      	b.n	8002654 <DMA_CheckFifoParam+0xe8>
      break;
 8002642:	bf00      	nop
 8002644:	e006      	b.n	8002654 <DMA_CheckFifoParam+0xe8>
      break;
 8002646:	bf00      	nop
 8002648:	e004      	b.n	8002654 <DMA_CheckFifoParam+0xe8>
      break;
 800264a:	bf00      	nop
 800264c:	e002      	b.n	8002654 <DMA_CheckFifoParam+0xe8>
      break;   
 800264e:	bf00      	nop
 8002650:	e000      	b.n	8002654 <DMA_CheckFifoParam+0xe8>
      break;
 8002652:	bf00      	nop
    }
  } 
  
  return status; 
 8002654:	7bfb      	ldrb	r3, [r7, #15]
}
 8002656:	4618      	mov	r0, r3
 8002658:	3714      	adds	r7, #20
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop

08002664 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002664:	b480      	push	{r7}
 8002666:	b089      	sub	sp, #36	; 0x24
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800266e:	2300      	movs	r3, #0
 8002670:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002672:	2300      	movs	r3, #0
 8002674:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002676:	2300      	movs	r3, #0
 8002678:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800267a:	2300      	movs	r3, #0
 800267c:	61fb      	str	r3, [r7, #28]
 800267e:	e159      	b.n	8002934 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002680:	2201      	movs	r2, #1
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	697a      	ldr	r2, [r7, #20]
 8002690:	4013      	ands	r3, r2
 8002692:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002694:	693a      	ldr	r2, [r7, #16]
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	429a      	cmp	r2, r3
 800269a:	f040 8148 	bne.w	800292e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f003 0303 	and.w	r3, r3, #3
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d005      	beq.n	80026b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d130      	bne.n	8002718 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	005b      	lsls	r3, r3, #1
 80026c0:	2203      	movs	r2, #3
 80026c2:	fa02 f303 	lsl.w	r3, r2, r3
 80026c6:	43db      	mvns	r3, r3
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	4013      	ands	r3, r2
 80026cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	68da      	ldr	r2, [r3, #12]
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	005b      	lsls	r3, r3, #1
 80026d6:	fa02 f303 	lsl.w	r3, r2, r3
 80026da:	69ba      	ldr	r2, [r7, #24]
 80026dc:	4313      	orrs	r3, r2
 80026de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	69ba      	ldr	r2, [r7, #24]
 80026e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026ec:	2201      	movs	r2, #1
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	fa02 f303 	lsl.w	r3, r2, r3
 80026f4:	43db      	mvns	r3, r3
 80026f6:	69ba      	ldr	r2, [r7, #24]
 80026f8:	4013      	ands	r3, r2
 80026fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	091b      	lsrs	r3, r3, #4
 8002702:	f003 0201 	and.w	r2, r3, #1
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	fa02 f303 	lsl.w	r3, r2, r3
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	4313      	orrs	r3, r2
 8002710:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f003 0303 	and.w	r3, r3, #3
 8002720:	2b03      	cmp	r3, #3
 8002722:	d017      	beq.n	8002754 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	2203      	movs	r2, #3
 8002730:	fa02 f303 	lsl.w	r3, r2, r3
 8002734:	43db      	mvns	r3, r3
 8002736:	69ba      	ldr	r2, [r7, #24]
 8002738:	4013      	ands	r3, r2
 800273a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	689a      	ldr	r2, [r3, #8]
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	005b      	lsls	r3, r3, #1
 8002744:	fa02 f303 	lsl.w	r3, r2, r3
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	4313      	orrs	r3, r2
 800274c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f003 0303 	and.w	r3, r3, #3
 800275c:	2b02      	cmp	r3, #2
 800275e:	d123      	bne.n	80027a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	08da      	lsrs	r2, r3, #3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	3208      	adds	r2, #8
 8002768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800276c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	f003 0307 	and.w	r3, r3, #7
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	220f      	movs	r2, #15
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	43db      	mvns	r3, r3
 800277e:	69ba      	ldr	r2, [r7, #24]
 8002780:	4013      	ands	r3, r2
 8002782:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	691a      	ldr	r2, [r3, #16]
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	f003 0307 	and.w	r3, r3, #7
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	fa02 f303 	lsl.w	r3, r2, r3
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	4313      	orrs	r3, r2
 8002798:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	08da      	lsrs	r2, r3, #3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	3208      	adds	r2, #8
 80027a2:	69b9      	ldr	r1, [r7, #24]
 80027a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	005b      	lsls	r3, r3, #1
 80027b2:	2203      	movs	r2, #3
 80027b4:	fa02 f303 	lsl.w	r3, r2, r3
 80027b8:	43db      	mvns	r3, r3
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	4013      	ands	r3, r2
 80027be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f003 0203 	and.w	r2, r3, #3
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	005b      	lsls	r3, r3, #1
 80027cc:	fa02 f303 	lsl.w	r3, r2, r3
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	f000 80a2 	beq.w	800292e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027ea:	2300      	movs	r3, #0
 80027ec:	60fb      	str	r3, [r7, #12]
 80027ee:	4b57      	ldr	r3, [pc, #348]	; (800294c <HAL_GPIO_Init+0x2e8>)
 80027f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f2:	4a56      	ldr	r2, [pc, #344]	; (800294c <HAL_GPIO_Init+0x2e8>)
 80027f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027f8:	6453      	str	r3, [r2, #68]	; 0x44
 80027fa:	4b54      	ldr	r3, [pc, #336]	; (800294c <HAL_GPIO_Init+0x2e8>)
 80027fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002802:	60fb      	str	r3, [r7, #12]
 8002804:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002806:	4a52      	ldr	r2, [pc, #328]	; (8002950 <HAL_GPIO_Init+0x2ec>)
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	089b      	lsrs	r3, r3, #2
 800280c:	3302      	adds	r3, #2
 800280e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002812:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	f003 0303 	and.w	r3, r3, #3
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	220f      	movs	r2, #15
 800281e:	fa02 f303 	lsl.w	r3, r2, r3
 8002822:	43db      	mvns	r3, r3
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	4013      	ands	r3, r2
 8002828:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a49      	ldr	r2, [pc, #292]	; (8002954 <HAL_GPIO_Init+0x2f0>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d019      	beq.n	8002866 <HAL_GPIO_Init+0x202>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4a48      	ldr	r2, [pc, #288]	; (8002958 <HAL_GPIO_Init+0x2f4>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d013      	beq.n	8002862 <HAL_GPIO_Init+0x1fe>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a47      	ldr	r2, [pc, #284]	; (800295c <HAL_GPIO_Init+0x2f8>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d00d      	beq.n	800285e <HAL_GPIO_Init+0x1fa>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a46      	ldr	r2, [pc, #280]	; (8002960 <HAL_GPIO_Init+0x2fc>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d007      	beq.n	800285a <HAL_GPIO_Init+0x1f6>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a45      	ldr	r2, [pc, #276]	; (8002964 <HAL_GPIO_Init+0x300>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d101      	bne.n	8002856 <HAL_GPIO_Init+0x1f2>
 8002852:	2304      	movs	r3, #4
 8002854:	e008      	b.n	8002868 <HAL_GPIO_Init+0x204>
 8002856:	2307      	movs	r3, #7
 8002858:	e006      	b.n	8002868 <HAL_GPIO_Init+0x204>
 800285a:	2303      	movs	r3, #3
 800285c:	e004      	b.n	8002868 <HAL_GPIO_Init+0x204>
 800285e:	2302      	movs	r3, #2
 8002860:	e002      	b.n	8002868 <HAL_GPIO_Init+0x204>
 8002862:	2301      	movs	r3, #1
 8002864:	e000      	b.n	8002868 <HAL_GPIO_Init+0x204>
 8002866:	2300      	movs	r3, #0
 8002868:	69fa      	ldr	r2, [r7, #28]
 800286a:	f002 0203 	and.w	r2, r2, #3
 800286e:	0092      	lsls	r2, r2, #2
 8002870:	4093      	lsls	r3, r2
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	4313      	orrs	r3, r2
 8002876:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002878:	4935      	ldr	r1, [pc, #212]	; (8002950 <HAL_GPIO_Init+0x2ec>)
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	089b      	lsrs	r3, r3, #2
 800287e:	3302      	adds	r3, #2
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002886:	4b38      	ldr	r3, [pc, #224]	; (8002968 <HAL_GPIO_Init+0x304>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	43db      	mvns	r3, r3
 8002890:	69ba      	ldr	r2, [r7, #24]
 8002892:	4013      	ands	r3, r2
 8002894:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d003      	beq.n	80028aa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80028a2:	69ba      	ldr	r2, [r7, #24]
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028aa:	4a2f      	ldr	r2, [pc, #188]	; (8002968 <HAL_GPIO_Init+0x304>)
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80028b0:	4b2d      	ldr	r3, [pc, #180]	; (8002968 <HAL_GPIO_Init+0x304>)
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	43db      	mvns	r3, r3
 80028ba:	69ba      	ldr	r2, [r7, #24]
 80028bc:	4013      	ands	r3, r2
 80028be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d003      	beq.n	80028d4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028d4:	4a24      	ldr	r2, [pc, #144]	; (8002968 <HAL_GPIO_Init+0x304>)
 80028d6:	69bb      	ldr	r3, [r7, #24]
 80028d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028da:	4b23      	ldr	r3, [pc, #140]	; (8002968 <HAL_GPIO_Init+0x304>)
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	43db      	mvns	r3, r3
 80028e4:	69ba      	ldr	r2, [r7, #24]
 80028e6:	4013      	ands	r3, r2
 80028e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d003      	beq.n	80028fe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80028f6:	69ba      	ldr	r2, [r7, #24]
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028fe:	4a1a      	ldr	r2, [pc, #104]	; (8002968 <HAL_GPIO_Init+0x304>)
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002904:	4b18      	ldr	r3, [pc, #96]	; (8002968 <HAL_GPIO_Init+0x304>)
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	43db      	mvns	r3, r3
 800290e:	69ba      	ldr	r2, [r7, #24]
 8002910:	4013      	ands	r3, r2
 8002912:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d003      	beq.n	8002928 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	4313      	orrs	r3, r2
 8002926:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002928:	4a0f      	ldr	r2, [pc, #60]	; (8002968 <HAL_GPIO_Init+0x304>)
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	3301      	adds	r3, #1
 8002932:	61fb      	str	r3, [r7, #28]
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	2b0f      	cmp	r3, #15
 8002938:	f67f aea2 	bls.w	8002680 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800293c:	bf00      	nop
 800293e:	bf00      	nop
 8002940:	3724      	adds	r7, #36	; 0x24
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop
 800294c:	40023800 	.word	0x40023800
 8002950:	40013800 	.word	0x40013800
 8002954:	40020000 	.word	0x40020000
 8002958:	40020400 	.word	0x40020400
 800295c:	40020800 	.word	0x40020800
 8002960:	40020c00 	.word	0x40020c00
 8002964:	40021000 	.word	0x40021000
 8002968:	40013c00 	.word	0x40013c00

0800296c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	460b      	mov	r3, r1
 8002976:	807b      	strh	r3, [r7, #2]
 8002978:	4613      	mov	r3, r2
 800297a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800297c:	787b      	ldrb	r3, [r7, #1]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d003      	beq.n	800298a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002982:	887a      	ldrh	r2, [r7, #2]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002988:	e003      	b.n	8002992 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800298a:	887b      	ldrh	r3, [r7, #2]
 800298c:	041a      	lsls	r2, r3, #16
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	619a      	str	r2, [r3, #24]
}
 8002992:	bf00      	nop
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
	...

080029a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b086      	sub	sp, #24
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d101      	bne.n	80029b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e264      	b.n	8002e7c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d075      	beq.n	8002aaa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029be:	4ba3      	ldr	r3, [pc, #652]	; (8002c4c <HAL_RCC_OscConfig+0x2ac>)
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	f003 030c 	and.w	r3, r3, #12
 80029c6:	2b04      	cmp	r3, #4
 80029c8:	d00c      	beq.n	80029e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029ca:	4ba0      	ldr	r3, [pc, #640]	; (8002c4c <HAL_RCC_OscConfig+0x2ac>)
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029d2:	2b08      	cmp	r3, #8
 80029d4:	d112      	bne.n	80029fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029d6:	4b9d      	ldr	r3, [pc, #628]	; (8002c4c <HAL_RCC_OscConfig+0x2ac>)
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029e2:	d10b      	bne.n	80029fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029e4:	4b99      	ldr	r3, [pc, #612]	; (8002c4c <HAL_RCC_OscConfig+0x2ac>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d05b      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x108>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d157      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e23f      	b.n	8002e7c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a04:	d106      	bne.n	8002a14 <HAL_RCC_OscConfig+0x74>
 8002a06:	4b91      	ldr	r3, [pc, #580]	; (8002c4c <HAL_RCC_OscConfig+0x2ac>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a90      	ldr	r2, [pc, #576]	; (8002c4c <HAL_RCC_OscConfig+0x2ac>)
 8002a0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a10:	6013      	str	r3, [r2, #0]
 8002a12:	e01d      	b.n	8002a50 <HAL_RCC_OscConfig+0xb0>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a1c:	d10c      	bne.n	8002a38 <HAL_RCC_OscConfig+0x98>
 8002a1e:	4b8b      	ldr	r3, [pc, #556]	; (8002c4c <HAL_RCC_OscConfig+0x2ac>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a8a      	ldr	r2, [pc, #552]	; (8002c4c <HAL_RCC_OscConfig+0x2ac>)
 8002a24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a28:	6013      	str	r3, [r2, #0]
 8002a2a:	4b88      	ldr	r3, [pc, #544]	; (8002c4c <HAL_RCC_OscConfig+0x2ac>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a87      	ldr	r2, [pc, #540]	; (8002c4c <HAL_RCC_OscConfig+0x2ac>)
 8002a30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a34:	6013      	str	r3, [r2, #0]
 8002a36:	e00b      	b.n	8002a50 <HAL_RCC_OscConfig+0xb0>
 8002a38:	4b84      	ldr	r3, [pc, #528]	; (8002c4c <HAL_RCC_OscConfig+0x2ac>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a83      	ldr	r2, [pc, #524]	; (8002c4c <HAL_RCC_OscConfig+0x2ac>)
 8002a3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a42:	6013      	str	r3, [r2, #0]
 8002a44:	4b81      	ldr	r3, [pc, #516]	; (8002c4c <HAL_RCC_OscConfig+0x2ac>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a80      	ldr	r2, [pc, #512]	; (8002c4c <HAL_RCC_OscConfig+0x2ac>)
 8002a4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d013      	beq.n	8002a80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a58:	f7ff f914 	bl	8001c84 <HAL_GetTick>
 8002a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a5e:	e008      	b.n	8002a72 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a60:	f7ff f910 	bl	8001c84 <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	2b64      	cmp	r3, #100	; 0x64
 8002a6c:	d901      	bls.n	8002a72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e204      	b.n	8002e7c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a72:	4b76      	ldr	r3, [pc, #472]	; (8002c4c <HAL_RCC_OscConfig+0x2ac>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d0f0      	beq.n	8002a60 <HAL_RCC_OscConfig+0xc0>
 8002a7e:	e014      	b.n	8002aaa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a80:	f7ff f900 	bl	8001c84 <HAL_GetTick>
 8002a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a86:	e008      	b.n	8002a9a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a88:	f7ff f8fc 	bl	8001c84 <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	2b64      	cmp	r3, #100	; 0x64
 8002a94:	d901      	bls.n	8002a9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e1f0      	b.n	8002e7c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a9a:	4b6c      	ldr	r3, [pc, #432]	; (8002c4c <HAL_RCC_OscConfig+0x2ac>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d1f0      	bne.n	8002a88 <HAL_RCC_OscConfig+0xe8>
 8002aa6:	e000      	b.n	8002aaa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aa8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0302 	and.w	r3, r3, #2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d063      	beq.n	8002b7e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ab6:	4b65      	ldr	r3, [pc, #404]	; (8002c4c <HAL_RCC_OscConfig+0x2ac>)
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f003 030c 	and.w	r3, r3, #12
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d00b      	beq.n	8002ada <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ac2:	4b62      	ldr	r3, [pc, #392]	; (8002c4c <HAL_RCC_OscConfig+0x2ac>)
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002aca:	2b08      	cmp	r3, #8
 8002acc:	d11c      	bne.n	8002b08 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ace:	4b5f      	ldr	r3, [pc, #380]	; (8002c4c <HAL_RCC_OscConfig+0x2ac>)
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d116      	bne.n	8002b08 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ada:	4b5c      	ldr	r3, [pc, #368]	; (8002c4c <HAL_RCC_OscConfig+0x2ac>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d005      	beq.n	8002af2 <HAL_RCC_OscConfig+0x152>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d001      	beq.n	8002af2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e1c4      	b.n	8002e7c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002af2:	4b56      	ldr	r3, [pc, #344]	; (8002c4c <HAL_RCC_OscConfig+0x2ac>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	691b      	ldr	r3, [r3, #16]
 8002afe:	00db      	lsls	r3, r3, #3
 8002b00:	4952      	ldr	r1, [pc, #328]	; (8002c4c <HAL_RCC_OscConfig+0x2ac>)
 8002b02:	4313      	orrs	r3, r2
 8002b04:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b06:	e03a      	b.n	8002b7e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d020      	beq.n	8002b52 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b10:	4b4f      	ldr	r3, [pc, #316]	; (8002c50 <HAL_RCC_OscConfig+0x2b0>)
 8002b12:	2201      	movs	r2, #1
 8002b14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b16:	f7ff f8b5 	bl	8001c84 <HAL_GetTick>
 8002b1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b1c:	e008      	b.n	8002b30 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b1e:	f7ff f8b1 	bl	8001c84 <HAL_GetTick>
 8002b22:	4602      	mov	r2, r0
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d901      	bls.n	8002b30 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e1a5      	b.n	8002e7c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b30:	4b46      	ldr	r3, [pc, #280]	; (8002c4c <HAL_RCC_OscConfig+0x2ac>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0302 	and.w	r3, r3, #2
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d0f0      	beq.n	8002b1e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b3c:	4b43      	ldr	r3, [pc, #268]	; (8002c4c <HAL_RCC_OscConfig+0x2ac>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	691b      	ldr	r3, [r3, #16]
 8002b48:	00db      	lsls	r3, r3, #3
 8002b4a:	4940      	ldr	r1, [pc, #256]	; (8002c4c <HAL_RCC_OscConfig+0x2ac>)
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	600b      	str	r3, [r1, #0]
 8002b50:	e015      	b.n	8002b7e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b52:	4b3f      	ldr	r3, [pc, #252]	; (8002c50 <HAL_RCC_OscConfig+0x2b0>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b58:	f7ff f894 	bl	8001c84 <HAL_GetTick>
 8002b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b5e:	e008      	b.n	8002b72 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b60:	f7ff f890 	bl	8001c84 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e184      	b.n	8002e7c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b72:	4b36      	ldr	r3, [pc, #216]	; (8002c4c <HAL_RCC_OscConfig+0x2ac>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0302 	and.w	r3, r3, #2
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d1f0      	bne.n	8002b60 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0308 	and.w	r3, r3, #8
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d030      	beq.n	8002bec <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	695b      	ldr	r3, [r3, #20]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d016      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b92:	4b30      	ldr	r3, [pc, #192]	; (8002c54 <HAL_RCC_OscConfig+0x2b4>)
 8002b94:	2201      	movs	r2, #1
 8002b96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b98:	f7ff f874 	bl	8001c84 <HAL_GetTick>
 8002b9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b9e:	e008      	b.n	8002bb2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ba0:	f7ff f870 	bl	8001c84 <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e164      	b.n	8002e7c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bb2:	4b26      	ldr	r3, [pc, #152]	; (8002c4c <HAL_RCC_OscConfig+0x2ac>)
 8002bb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d0f0      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x200>
 8002bbe:	e015      	b.n	8002bec <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bc0:	4b24      	ldr	r3, [pc, #144]	; (8002c54 <HAL_RCC_OscConfig+0x2b4>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bc6:	f7ff f85d 	bl	8001c84 <HAL_GetTick>
 8002bca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bcc:	e008      	b.n	8002be0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bce:	f7ff f859 	bl	8001c84 <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d901      	bls.n	8002be0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	e14d      	b.n	8002e7c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002be0:	4b1a      	ldr	r3, [pc, #104]	; (8002c4c <HAL_RCC_OscConfig+0x2ac>)
 8002be2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002be4:	f003 0302 	and.w	r3, r3, #2
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d1f0      	bne.n	8002bce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0304 	and.w	r3, r3, #4
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	f000 80a0 	beq.w	8002d3a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bfe:	4b13      	ldr	r3, [pc, #76]	; (8002c4c <HAL_RCC_OscConfig+0x2ac>)
 8002c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d10f      	bne.n	8002c2a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	60bb      	str	r3, [r7, #8]
 8002c0e:	4b0f      	ldr	r3, [pc, #60]	; (8002c4c <HAL_RCC_OscConfig+0x2ac>)
 8002c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c12:	4a0e      	ldr	r2, [pc, #56]	; (8002c4c <HAL_RCC_OscConfig+0x2ac>)
 8002c14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c18:	6413      	str	r3, [r2, #64]	; 0x40
 8002c1a:	4b0c      	ldr	r3, [pc, #48]	; (8002c4c <HAL_RCC_OscConfig+0x2ac>)
 8002c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c22:	60bb      	str	r3, [r7, #8]
 8002c24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c26:	2301      	movs	r3, #1
 8002c28:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c2a:	4b0b      	ldr	r3, [pc, #44]	; (8002c58 <HAL_RCC_OscConfig+0x2b8>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d121      	bne.n	8002c7a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c36:	4b08      	ldr	r3, [pc, #32]	; (8002c58 <HAL_RCC_OscConfig+0x2b8>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a07      	ldr	r2, [pc, #28]	; (8002c58 <HAL_RCC_OscConfig+0x2b8>)
 8002c3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c42:	f7ff f81f 	bl	8001c84 <HAL_GetTick>
 8002c46:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c48:	e011      	b.n	8002c6e <HAL_RCC_OscConfig+0x2ce>
 8002c4a:	bf00      	nop
 8002c4c:	40023800 	.word	0x40023800
 8002c50:	42470000 	.word	0x42470000
 8002c54:	42470e80 	.word	0x42470e80
 8002c58:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c5c:	f7ff f812 	bl	8001c84 <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d901      	bls.n	8002c6e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e106      	b.n	8002e7c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c6e:	4b85      	ldr	r3, [pc, #532]	; (8002e84 <HAL_RCC_OscConfig+0x4e4>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d0f0      	beq.n	8002c5c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d106      	bne.n	8002c90 <HAL_RCC_OscConfig+0x2f0>
 8002c82:	4b81      	ldr	r3, [pc, #516]	; (8002e88 <HAL_RCC_OscConfig+0x4e8>)
 8002c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c86:	4a80      	ldr	r2, [pc, #512]	; (8002e88 <HAL_RCC_OscConfig+0x4e8>)
 8002c88:	f043 0301 	orr.w	r3, r3, #1
 8002c8c:	6713      	str	r3, [r2, #112]	; 0x70
 8002c8e:	e01c      	b.n	8002cca <HAL_RCC_OscConfig+0x32a>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	2b05      	cmp	r3, #5
 8002c96:	d10c      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x312>
 8002c98:	4b7b      	ldr	r3, [pc, #492]	; (8002e88 <HAL_RCC_OscConfig+0x4e8>)
 8002c9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c9c:	4a7a      	ldr	r2, [pc, #488]	; (8002e88 <HAL_RCC_OscConfig+0x4e8>)
 8002c9e:	f043 0304 	orr.w	r3, r3, #4
 8002ca2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ca4:	4b78      	ldr	r3, [pc, #480]	; (8002e88 <HAL_RCC_OscConfig+0x4e8>)
 8002ca6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca8:	4a77      	ldr	r2, [pc, #476]	; (8002e88 <HAL_RCC_OscConfig+0x4e8>)
 8002caa:	f043 0301 	orr.w	r3, r3, #1
 8002cae:	6713      	str	r3, [r2, #112]	; 0x70
 8002cb0:	e00b      	b.n	8002cca <HAL_RCC_OscConfig+0x32a>
 8002cb2:	4b75      	ldr	r3, [pc, #468]	; (8002e88 <HAL_RCC_OscConfig+0x4e8>)
 8002cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb6:	4a74      	ldr	r2, [pc, #464]	; (8002e88 <HAL_RCC_OscConfig+0x4e8>)
 8002cb8:	f023 0301 	bic.w	r3, r3, #1
 8002cbc:	6713      	str	r3, [r2, #112]	; 0x70
 8002cbe:	4b72      	ldr	r3, [pc, #456]	; (8002e88 <HAL_RCC_OscConfig+0x4e8>)
 8002cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc2:	4a71      	ldr	r2, [pc, #452]	; (8002e88 <HAL_RCC_OscConfig+0x4e8>)
 8002cc4:	f023 0304 	bic.w	r3, r3, #4
 8002cc8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d015      	beq.n	8002cfe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cd2:	f7fe ffd7 	bl	8001c84 <HAL_GetTick>
 8002cd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cd8:	e00a      	b.n	8002cf0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cda:	f7fe ffd3 	bl	8001c84 <HAL_GetTick>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d901      	bls.n	8002cf0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e0c5      	b.n	8002e7c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cf0:	4b65      	ldr	r3, [pc, #404]	; (8002e88 <HAL_RCC_OscConfig+0x4e8>)
 8002cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf4:	f003 0302 	and.w	r3, r3, #2
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d0ee      	beq.n	8002cda <HAL_RCC_OscConfig+0x33a>
 8002cfc:	e014      	b.n	8002d28 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cfe:	f7fe ffc1 	bl	8001c84 <HAL_GetTick>
 8002d02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d04:	e00a      	b.n	8002d1c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d06:	f7fe ffbd 	bl	8001c84 <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d901      	bls.n	8002d1c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e0af      	b.n	8002e7c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d1c:	4b5a      	ldr	r3, [pc, #360]	; (8002e88 <HAL_RCC_OscConfig+0x4e8>)
 8002d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d20:	f003 0302 	and.w	r3, r3, #2
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d1ee      	bne.n	8002d06 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d28:	7dfb      	ldrb	r3, [r7, #23]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d105      	bne.n	8002d3a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d2e:	4b56      	ldr	r3, [pc, #344]	; (8002e88 <HAL_RCC_OscConfig+0x4e8>)
 8002d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d32:	4a55      	ldr	r2, [pc, #340]	; (8002e88 <HAL_RCC_OscConfig+0x4e8>)
 8002d34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d38:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	699b      	ldr	r3, [r3, #24]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	f000 809b 	beq.w	8002e7a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d44:	4b50      	ldr	r3, [pc, #320]	; (8002e88 <HAL_RCC_OscConfig+0x4e8>)
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	f003 030c 	and.w	r3, r3, #12
 8002d4c:	2b08      	cmp	r3, #8
 8002d4e:	d05c      	beq.n	8002e0a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	699b      	ldr	r3, [r3, #24]
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d141      	bne.n	8002ddc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d58:	4b4c      	ldr	r3, [pc, #304]	; (8002e8c <HAL_RCC_OscConfig+0x4ec>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d5e:	f7fe ff91 	bl	8001c84 <HAL_GetTick>
 8002d62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d64:	e008      	b.n	8002d78 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d66:	f7fe ff8d 	bl	8001c84 <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d901      	bls.n	8002d78 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	e081      	b.n	8002e7c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d78:	4b43      	ldr	r3, [pc, #268]	; (8002e88 <HAL_RCC_OscConfig+0x4e8>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d1f0      	bne.n	8002d66 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	69da      	ldr	r2, [r3, #28]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6a1b      	ldr	r3, [r3, #32]
 8002d8c:	431a      	orrs	r2, r3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d92:	019b      	lsls	r3, r3, #6
 8002d94:	431a      	orrs	r2, r3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d9a:	085b      	lsrs	r3, r3, #1
 8002d9c:	3b01      	subs	r3, #1
 8002d9e:	041b      	lsls	r3, r3, #16
 8002da0:	431a      	orrs	r2, r3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da6:	061b      	lsls	r3, r3, #24
 8002da8:	4937      	ldr	r1, [pc, #220]	; (8002e88 <HAL_RCC_OscConfig+0x4e8>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dae:	4b37      	ldr	r3, [pc, #220]	; (8002e8c <HAL_RCC_OscConfig+0x4ec>)
 8002db0:	2201      	movs	r2, #1
 8002db2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db4:	f7fe ff66 	bl	8001c84 <HAL_GetTick>
 8002db8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dba:	e008      	b.n	8002dce <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dbc:	f7fe ff62 	bl	8001c84 <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d901      	bls.n	8002dce <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e056      	b.n	8002e7c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dce:	4b2e      	ldr	r3, [pc, #184]	; (8002e88 <HAL_RCC_OscConfig+0x4e8>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d0f0      	beq.n	8002dbc <HAL_RCC_OscConfig+0x41c>
 8002dda:	e04e      	b.n	8002e7a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ddc:	4b2b      	ldr	r3, [pc, #172]	; (8002e8c <HAL_RCC_OscConfig+0x4ec>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de2:	f7fe ff4f 	bl	8001c84 <HAL_GetTick>
 8002de6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002de8:	e008      	b.n	8002dfc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dea:	f7fe ff4b 	bl	8001c84 <HAL_GetTick>
 8002dee:	4602      	mov	r2, r0
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d901      	bls.n	8002dfc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	e03f      	b.n	8002e7c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dfc:	4b22      	ldr	r3, [pc, #136]	; (8002e88 <HAL_RCC_OscConfig+0x4e8>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d1f0      	bne.n	8002dea <HAL_RCC_OscConfig+0x44a>
 8002e08:	e037      	b.n	8002e7a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	699b      	ldr	r3, [r3, #24]
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d101      	bne.n	8002e16 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e032      	b.n	8002e7c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e16:	4b1c      	ldr	r3, [pc, #112]	; (8002e88 <HAL_RCC_OscConfig+0x4e8>)
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d028      	beq.n	8002e76 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d121      	bne.n	8002e76 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d11a      	bne.n	8002e76 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e40:	68fa      	ldr	r2, [r7, #12]
 8002e42:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e46:	4013      	ands	r3, r2
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e4c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d111      	bne.n	8002e76 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e5c:	085b      	lsrs	r3, r3, #1
 8002e5e:	3b01      	subs	r3, #1
 8002e60:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d107      	bne.n	8002e76 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e70:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d001      	beq.n	8002e7a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e000      	b.n	8002e7c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002e7a:	2300      	movs	r3, #0
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3718      	adds	r7, #24
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	40007000 	.word	0x40007000
 8002e88:	40023800 	.word	0x40023800
 8002e8c:	42470060 	.word	0x42470060

08002e90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b084      	sub	sp, #16
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d101      	bne.n	8002ea4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e0cc      	b.n	800303e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ea4:	4b68      	ldr	r3, [pc, #416]	; (8003048 <HAL_RCC_ClockConfig+0x1b8>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0307 	and.w	r3, r3, #7
 8002eac:	683a      	ldr	r2, [r7, #0]
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d90c      	bls.n	8002ecc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eb2:	4b65      	ldr	r3, [pc, #404]	; (8003048 <HAL_RCC_ClockConfig+0x1b8>)
 8002eb4:	683a      	ldr	r2, [r7, #0]
 8002eb6:	b2d2      	uxtb	r2, r2
 8002eb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eba:	4b63      	ldr	r3, [pc, #396]	; (8003048 <HAL_RCC_ClockConfig+0x1b8>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0307 	and.w	r3, r3, #7
 8002ec2:	683a      	ldr	r2, [r7, #0]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d001      	beq.n	8002ecc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e0b8      	b.n	800303e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0302 	and.w	r3, r3, #2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d020      	beq.n	8002f1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0304 	and.w	r3, r3, #4
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d005      	beq.n	8002ef0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ee4:	4b59      	ldr	r3, [pc, #356]	; (800304c <HAL_RCC_ClockConfig+0x1bc>)
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	4a58      	ldr	r2, [pc, #352]	; (800304c <HAL_RCC_ClockConfig+0x1bc>)
 8002eea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002eee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0308 	and.w	r3, r3, #8
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d005      	beq.n	8002f08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002efc:	4b53      	ldr	r3, [pc, #332]	; (800304c <HAL_RCC_ClockConfig+0x1bc>)
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	4a52      	ldr	r2, [pc, #328]	; (800304c <HAL_RCC_ClockConfig+0x1bc>)
 8002f02:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f08:	4b50      	ldr	r3, [pc, #320]	; (800304c <HAL_RCC_ClockConfig+0x1bc>)
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	494d      	ldr	r1, [pc, #308]	; (800304c <HAL_RCC_ClockConfig+0x1bc>)
 8002f16:	4313      	orrs	r3, r2
 8002f18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0301 	and.w	r3, r3, #1
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d044      	beq.n	8002fb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d107      	bne.n	8002f3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f2e:	4b47      	ldr	r3, [pc, #284]	; (800304c <HAL_RCC_ClockConfig+0x1bc>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d119      	bne.n	8002f6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e07f      	b.n	800303e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d003      	beq.n	8002f4e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f4a:	2b03      	cmp	r3, #3
 8002f4c:	d107      	bne.n	8002f5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f4e:	4b3f      	ldr	r3, [pc, #252]	; (800304c <HAL_RCC_ClockConfig+0x1bc>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d109      	bne.n	8002f6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e06f      	b.n	800303e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f5e:	4b3b      	ldr	r3, [pc, #236]	; (800304c <HAL_RCC_ClockConfig+0x1bc>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0302 	and.w	r3, r3, #2
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d101      	bne.n	8002f6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e067      	b.n	800303e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f6e:	4b37      	ldr	r3, [pc, #220]	; (800304c <HAL_RCC_ClockConfig+0x1bc>)
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	f023 0203 	bic.w	r2, r3, #3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	4934      	ldr	r1, [pc, #208]	; (800304c <HAL_RCC_ClockConfig+0x1bc>)
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f80:	f7fe fe80 	bl	8001c84 <HAL_GetTick>
 8002f84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f86:	e00a      	b.n	8002f9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f88:	f7fe fe7c 	bl	8001c84 <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d901      	bls.n	8002f9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e04f      	b.n	800303e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f9e:	4b2b      	ldr	r3, [pc, #172]	; (800304c <HAL_RCC_ClockConfig+0x1bc>)
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	f003 020c 	and.w	r2, r3, #12
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d1eb      	bne.n	8002f88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fb0:	4b25      	ldr	r3, [pc, #148]	; (8003048 <HAL_RCC_ClockConfig+0x1b8>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0307 	and.w	r3, r3, #7
 8002fb8:	683a      	ldr	r2, [r7, #0]
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d20c      	bcs.n	8002fd8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fbe:	4b22      	ldr	r3, [pc, #136]	; (8003048 <HAL_RCC_ClockConfig+0x1b8>)
 8002fc0:	683a      	ldr	r2, [r7, #0]
 8002fc2:	b2d2      	uxtb	r2, r2
 8002fc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fc6:	4b20      	ldr	r3, [pc, #128]	; (8003048 <HAL_RCC_ClockConfig+0x1b8>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0307 	and.w	r3, r3, #7
 8002fce:	683a      	ldr	r2, [r7, #0]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d001      	beq.n	8002fd8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e032      	b.n	800303e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0304 	and.w	r3, r3, #4
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d008      	beq.n	8002ff6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fe4:	4b19      	ldr	r3, [pc, #100]	; (800304c <HAL_RCC_ClockConfig+0x1bc>)
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	4916      	ldr	r1, [pc, #88]	; (800304c <HAL_RCC_ClockConfig+0x1bc>)
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0308 	and.w	r3, r3, #8
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d009      	beq.n	8003016 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003002:	4b12      	ldr	r3, [pc, #72]	; (800304c <HAL_RCC_ClockConfig+0x1bc>)
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	00db      	lsls	r3, r3, #3
 8003010:	490e      	ldr	r1, [pc, #56]	; (800304c <HAL_RCC_ClockConfig+0x1bc>)
 8003012:	4313      	orrs	r3, r2
 8003014:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003016:	f000 f821 	bl	800305c <HAL_RCC_GetSysClockFreq>
 800301a:	4602      	mov	r2, r0
 800301c:	4b0b      	ldr	r3, [pc, #44]	; (800304c <HAL_RCC_ClockConfig+0x1bc>)
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	091b      	lsrs	r3, r3, #4
 8003022:	f003 030f 	and.w	r3, r3, #15
 8003026:	490a      	ldr	r1, [pc, #40]	; (8003050 <HAL_RCC_ClockConfig+0x1c0>)
 8003028:	5ccb      	ldrb	r3, [r1, r3]
 800302a:	fa22 f303 	lsr.w	r3, r2, r3
 800302e:	4a09      	ldr	r2, [pc, #36]	; (8003054 <HAL_RCC_ClockConfig+0x1c4>)
 8003030:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003032:	4b09      	ldr	r3, [pc, #36]	; (8003058 <HAL_RCC_ClockConfig+0x1c8>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4618      	mov	r0, r3
 8003038:	f7fe fbcc 	bl	80017d4 <HAL_InitTick>

  return HAL_OK;
 800303c:	2300      	movs	r3, #0
}
 800303e:	4618      	mov	r0, r3
 8003040:	3710      	adds	r7, #16
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	40023c00 	.word	0x40023c00
 800304c:	40023800 	.word	0x40023800
 8003050:	0800aaa0 	.word	0x0800aaa0
 8003054:	20000000 	.word	0x20000000
 8003058:	20000004 	.word	0x20000004

0800305c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800305c:	b5b0      	push	{r4, r5, r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003062:	2100      	movs	r1, #0
 8003064:	6079      	str	r1, [r7, #4]
 8003066:	2100      	movs	r1, #0
 8003068:	60f9      	str	r1, [r7, #12]
 800306a:	2100      	movs	r1, #0
 800306c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800306e:	2100      	movs	r1, #0
 8003070:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003072:	4952      	ldr	r1, [pc, #328]	; (80031bc <HAL_RCC_GetSysClockFreq+0x160>)
 8003074:	6889      	ldr	r1, [r1, #8]
 8003076:	f001 010c 	and.w	r1, r1, #12
 800307a:	2908      	cmp	r1, #8
 800307c:	d00d      	beq.n	800309a <HAL_RCC_GetSysClockFreq+0x3e>
 800307e:	2908      	cmp	r1, #8
 8003080:	f200 8094 	bhi.w	80031ac <HAL_RCC_GetSysClockFreq+0x150>
 8003084:	2900      	cmp	r1, #0
 8003086:	d002      	beq.n	800308e <HAL_RCC_GetSysClockFreq+0x32>
 8003088:	2904      	cmp	r1, #4
 800308a:	d003      	beq.n	8003094 <HAL_RCC_GetSysClockFreq+0x38>
 800308c:	e08e      	b.n	80031ac <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800308e:	4b4c      	ldr	r3, [pc, #304]	; (80031c0 <HAL_RCC_GetSysClockFreq+0x164>)
 8003090:	60bb      	str	r3, [r7, #8]
       break;
 8003092:	e08e      	b.n	80031b2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003094:	4b4b      	ldr	r3, [pc, #300]	; (80031c4 <HAL_RCC_GetSysClockFreq+0x168>)
 8003096:	60bb      	str	r3, [r7, #8]
      break;
 8003098:	e08b      	b.n	80031b2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800309a:	4948      	ldr	r1, [pc, #288]	; (80031bc <HAL_RCC_GetSysClockFreq+0x160>)
 800309c:	6849      	ldr	r1, [r1, #4]
 800309e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80030a2:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030a4:	4945      	ldr	r1, [pc, #276]	; (80031bc <HAL_RCC_GetSysClockFreq+0x160>)
 80030a6:	6849      	ldr	r1, [r1, #4]
 80030a8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80030ac:	2900      	cmp	r1, #0
 80030ae:	d024      	beq.n	80030fa <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030b0:	4942      	ldr	r1, [pc, #264]	; (80031bc <HAL_RCC_GetSysClockFreq+0x160>)
 80030b2:	6849      	ldr	r1, [r1, #4]
 80030b4:	0989      	lsrs	r1, r1, #6
 80030b6:	4608      	mov	r0, r1
 80030b8:	f04f 0100 	mov.w	r1, #0
 80030bc:	f240 14ff 	movw	r4, #511	; 0x1ff
 80030c0:	f04f 0500 	mov.w	r5, #0
 80030c4:	ea00 0204 	and.w	r2, r0, r4
 80030c8:	ea01 0305 	and.w	r3, r1, r5
 80030cc:	493d      	ldr	r1, [pc, #244]	; (80031c4 <HAL_RCC_GetSysClockFreq+0x168>)
 80030ce:	fb01 f003 	mul.w	r0, r1, r3
 80030d2:	2100      	movs	r1, #0
 80030d4:	fb01 f102 	mul.w	r1, r1, r2
 80030d8:	1844      	adds	r4, r0, r1
 80030da:	493a      	ldr	r1, [pc, #232]	; (80031c4 <HAL_RCC_GetSysClockFreq+0x168>)
 80030dc:	fba2 0101 	umull	r0, r1, r2, r1
 80030e0:	1863      	adds	r3, r4, r1
 80030e2:	4619      	mov	r1, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	461a      	mov	r2, r3
 80030e8:	f04f 0300 	mov.w	r3, #0
 80030ec:	f7fd fd64 	bl	8000bb8 <__aeabi_uldivmod>
 80030f0:	4602      	mov	r2, r0
 80030f2:	460b      	mov	r3, r1
 80030f4:	4613      	mov	r3, r2
 80030f6:	60fb      	str	r3, [r7, #12]
 80030f8:	e04a      	b.n	8003190 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030fa:	4b30      	ldr	r3, [pc, #192]	; (80031bc <HAL_RCC_GetSysClockFreq+0x160>)
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	099b      	lsrs	r3, r3, #6
 8003100:	461a      	mov	r2, r3
 8003102:	f04f 0300 	mov.w	r3, #0
 8003106:	f240 10ff 	movw	r0, #511	; 0x1ff
 800310a:	f04f 0100 	mov.w	r1, #0
 800310e:	ea02 0400 	and.w	r4, r2, r0
 8003112:	ea03 0501 	and.w	r5, r3, r1
 8003116:	4620      	mov	r0, r4
 8003118:	4629      	mov	r1, r5
 800311a:	f04f 0200 	mov.w	r2, #0
 800311e:	f04f 0300 	mov.w	r3, #0
 8003122:	014b      	lsls	r3, r1, #5
 8003124:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003128:	0142      	lsls	r2, r0, #5
 800312a:	4610      	mov	r0, r2
 800312c:	4619      	mov	r1, r3
 800312e:	1b00      	subs	r0, r0, r4
 8003130:	eb61 0105 	sbc.w	r1, r1, r5
 8003134:	f04f 0200 	mov.w	r2, #0
 8003138:	f04f 0300 	mov.w	r3, #0
 800313c:	018b      	lsls	r3, r1, #6
 800313e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003142:	0182      	lsls	r2, r0, #6
 8003144:	1a12      	subs	r2, r2, r0
 8003146:	eb63 0301 	sbc.w	r3, r3, r1
 800314a:	f04f 0000 	mov.w	r0, #0
 800314e:	f04f 0100 	mov.w	r1, #0
 8003152:	00d9      	lsls	r1, r3, #3
 8003154:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003158:	00d0      	lsls	r0, r2, #3
 800315a:	4602      	mov	r2, r0
 800315c:	460b      	mov	r3, r1
 800315e:	1912      	adds	r2, r2, r4
 8003160:	eb45 0303 	adc.w	r3, r5, r3
 8003164:	f04f 0000 	mov.w	r0, #0
 8003168:	f04f 0100 	mov.w	r1, #0
 800316c:	0299      	lsls	r1, r3, #10
 800316e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003172:	0290      	lsls	r0, r2, #10
 8003174:	4602      	mov	r2, r0
 8003176:	460b      	mov	r3, r1
 8003178:	4610      	mov	r0, r2
 800317a:	4619      	mov	r1, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	461a      	mov	r2, r3
 8003180:	f04f 0300 	mov.w	r3, #0
 8003184:	f7fd fd18 	bl	8000bb8 <__aeabi_uldivmod>
 8003188:	4602      	mov	r2, r0
 800318a:	460b      	mov	r3, r1
 800318c:	4613      	mov	r3, r2
 800318e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003190:	4b0a      	ldr	r3, [pc, #40]	; (80031bc <HAL_RCC_GetSysClockFreq+0x160>)
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	0c1b      	lsrs	r3, r3, #16
 8003196:	f003 0303 	and.w	r3, r3, #3
 800319a:	3301      	adds	r3, #1
 800319c:	005b      	lsls	r3, r3, #1
 800319e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80031a0:	68fa      	ldr	r2, [r7, #12]
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031a8:	60bb      	str	r3, [r7, #8]
      break;
 80031aa:	e002      	b.n	80031b2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031ac:	4b04      	ldr	r3, [pc, #16]	; (80031c0 <HAL_RCC_GetSysClockFreq+0x164>)
 80031ae:	60bb      	str	r3, [r7, #8]
      break;
 80031b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031b2:	68bb      	ldr	r3, [r7, #8]
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3710      	adds	r7, #16
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bdb0      	pop	{r4, r5, r7, pc}
 80031bc:	40023800 	.word	0x40023800
 80031c0:	00f42400 	.word	0x00f42400
 80031c4:	017d7840 	.word	0x017d7840

080031c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031c8:	b480      	push	{r7}
 80031ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031cc:	4b03      	ldr	r3, [pc, #12]	; (80031dc <HAL_RCC_GetHCLKFreq+0x14>)
 80031ce:	681b      	ldr	r3, [r3, #0]
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
 80031da:	bf00      	nop
 80031dc:	20000000 	.word	0x20000000

080031e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80031e4:	f7ff fff0 	bl	80031c8 <HAL_RCC_GetHCLKFreq>
 80031e8:	4602      	mov	r2, r0
 80031ea:	4b05      	ldr	r3, [pc, #20]	; (8003200 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	0a9b      	lsrs	r3, r3, #10
 80031f0:	f003 0307 	and.w	r3, r3, #7
 80031f4:	4903      	ldr	r1, [pc, #12]	; (8003204 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031f6:	5ccb      	ldrb	r3, [r1, r3]
 80031f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	40023800 	.word	0x40023800
 8003204:	0800aab0 	.word	0x0800aab0

08003208 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800320c:	f7ff ffdc 	bl	80031c8 <HAL_RCC_GetHCLKFreq>
 8003210:	4602      	mov	r2, r0
 8003212:	4b05      	ldr	r3, [pc, #20]	; (8003228 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	0b5b      	lsrs	r3, r3, #13
 8003218:	f003 0307 	and.w	r3, r3, #7
 800321c:	4903      	ldr	r1, [pc, #12]	; (800322c <HAL_RCC_GetPCLK2Freq+0x24>)
 800321e:	5ccb      	ldrb	r3, [r1, r3]
 8003220:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003224:	4618      	mov	r0, r3
 8003226:	bd80      	pop	{r7, pc}
 8003228:	40023800 	.word	0x40023800
 800322c:	0800aab0 	.word	0x0800aab0

08003230 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	220f      	movs	r2, #15
 800323e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003240:	4b12      	ldr	r3, [pc, #72]	; (800328c <HAL_RCC_GetClockConfig+0x5c>)
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	f003 0203 	and.w	r2, r3, #3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800324c:	4b0f      	ldr	r3, [pc, #60]	; (800328c <HAL_RCC_GetClockConfig+0x5c>)
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003258:	4b0c      	ldr	r3, [pc, #48]	; (800328c <HAL_RCC_GetClockConfig+0x5c>)
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003264:	4b09      	ldr	r3, [pc, #36]	; (800328c <HAL_RCC_GetClockConfig+0x5c>)
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	08db      	lsrs	r3, r3, #3
 800326a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003272:	4b07      	ldr	r3, [pc, #28]	; (8003290 <HAL_RCC_GetClockConfig+0x60>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0207 	and.w	r2, r3, #7
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	601a      	str	r2, [r3, #0]
}
 800327e:	bf00      	nop
 8003280:	370c      	adds	r7, #12
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	40023800 	.word	0x40023800
 8003290:	40023c00 	.word	0x40023c00

08003294 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d101      	bne.n	80032a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e041      	b.n	800332a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d106      	bne.n	80032c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 f839 	bl	8003332 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2202      	movs	r2, #2
 80032c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	3304      	adds	r3, #4
 80032d0:	4619      	mov	r1, r3
 80032d2:	4610      	mov	r0, r2
 80032d4:	f000 f9ca 	bl	800366c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2201      	movs	r2, #1
 8003314:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2201      	movs	r2, #1
 800331c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2201      	movs	r2, #1
 8003324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3708      	adds	r7, #8
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}

08003332 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003332:	b480      	push	{r7}
 8003334:	b083      	sub	sp, #12
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800333a:	bf00      	nop
 800333c:	370c      	adds	r7, #12
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
	...

08003348 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003348:	b480      	push	{r7}
 800334a:	b085      	sub	sp, #20
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003356:	b2db      	uxtb	r3, r3
 8003358:	2b01      	cmp	r3, #1
 800335a:	d001      	beq.n	8003360 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e044      	b.n	80033ea <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2202      	movs	r2, #2
 8003364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68da      	ldr	r2, [r3, #12]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f042 0201 	orr.w	r2, r2, #1
 8003376:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a1e      	ldr	r2, [pc, #120]	; (80033f8 <HAL_TIM_Base_Start_IT+0xb0>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d018      	beq.n	80033b4 <HAL_TIM_Base_Start_IT+0x6c>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800338a:	d013      	beq.n	80033b4 <HAL_TIM_Base_Start_IT+0x6c>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a1a      	ldr	r2, [pc, #104]	; (80033fc <HAL_TIM_Base_Start_IT+0xb4>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d00e      	beq.n	80033b4 <HAL_TIM_Base_Start_IT+0x6c>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a19      	ldr	r2, [pc, #100]	; (8003400 <HAL_TIM_Base_Start_IT+0xb8>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d009      	beq.n	80033b4 <HAL_TIM_Base_Start_IT+0x6c>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a17      	ldr	r2, [pc, #92]	; (8003404 <HAL_TIM_Base_Start_IT+0xbc>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d004      	beq.n	80033b4 <HAL_TIM_Base_Start_IT+0x6c>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a16      	ldr	r2, [pc, #88]	; (8003408 <HAL_TIM_Base_Start_IT+0xc0>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d111      	bne.n	80033d8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f003 0307 	and.w	r3, r3, #7
 80033be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2b06      	cmp	r3, #6
 80033c4:	d010      	beq.n	80033e8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f042 0201 	orr.w	r2, r2, #1
 80033d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033d6:	e007      	b.n	80033e8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f042 0201 	orr.w	r2, r2, #1
 80033e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3714      	adds	r7, #20
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr
 80033f6:	bf00      	nop
 80033f8:	40010000 	.word	0x40010000
 80033fc:	40000400 	.word	0x40000400
 8003400:	40000800 	.word	0x40000800
 8003404:	40000c00 	.word	0x40000c00
 8003408:	40014000 	.word	0x40014000

0800340c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	2b02      	cmp	r3, #2
 8003420:	d122      	bne.n	8003468 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	f003 0302 	and.w	r3, r3, #2
 800342c:	2b02      	cmp	r3, #2
 800342e:	d11b      	bne.n	8003468 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f06f 0202 	mvn.w	r2, #2
 8003438:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2201      	movs	r2, #1
 800343e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	699b      	ldr	r3, [r3, #24]
 8003446:	f003 0303 	and.w	r3, r3, #3
 800344a:	2b00      	cmp	r3, #0
 800344c:	d003      	beq.n	8003456 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 f8ee 	bl	8003630 <HAL_TIM_IC_CaptureCallback>
 8003454:	e005      	b.n	8003462 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 f8e0 	bl	800361c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f000 f8f1 	bl	8003644 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	f003 0304 	and.w	r3, r3, #4
 8003472:	2b04      	cmp	r3, #4
 8003474:	d122      	bne.n	80034bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	f003 0304 	and.w	r3, r3, #4
 8003480:	2b04      	cmp	r3, #4
 8003482:	d11b      	bne.n	80034bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f06f 0204 	mvn.w	r2, #4
 800348c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2202      	movs	r2, #2
 8003492:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	699b      	ldr	r3, [r3, #24]
 800349a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d003      	beq.n	80034aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f000 f8c4 	bl	8003630 <HAL_TIM_IC_CaptureCallback>
 80034a8:	e005      	b.n	80034b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 f8b6 	bl	800361c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f000 f8c7 	bl	8003644 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	f003 0308 	and.w	r3, r3, #8
 80034c6:	2b08      	cmp	r3, #8
 80034c8:	d122      	bne.n	8003510 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	f003 0308 	and.w	r3, r3, #8
 80034d4:	2b08      	cmp	r3, #8
 80034d6:	d11b      	bne.n	8003510 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f06f 0208 	mvn.w	r2, #8
 80034e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2204      	movs	r2, #4
 80034e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	69db      	ldr	r3, [r3, #28]
 80034ee:	f003 0303 	and.w	r3, r3, #3
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d003      	beq.n	80034fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f000 f89a 	bl	8003630 <HAL_TIM_IC_CaptureCallback>
 80034fc:	e005      	b.n	800350a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f000 f88c 	bl	800361c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f000 f89d 	bl	8003644 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	f003 0310 	and.w	r3, r3, #16
 800351a:	2b10      	cmp	r3, #16
 800351c:	d122      	bne.n	8003564 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	f003 0310 	and.w	r3, r3, #16
 8003528:	2b10      	cmp	r3, #16
 800352a:	d11b      	bne.n	8003564 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f06f 0210 	mvn.w	r2, #16
 8003534:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2208      	movs	r2, #8
 800353a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	69db      	ldr	r3, [r3, #28]
 8003542:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003546:	2b00      	cmp	r3, #0
 8003548:	d003      	beq.n	8003552 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 f870 	bl	8003630 <HAL_TIM_IC_CaptureCallback>
 8003550:	e005      	b.n	800355e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 f862 	bl	800361c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f000 f873 	bl	8003644 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	691b      	ldr	r3, [r3, #16]
 800356a:	f003 0301 	and.w	r3, r3, #1
 800356e:	2b01      	cmp	r3, #1
 8003570:	d10e      	bne.n	8003590 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	f003 0301 	and.w	r3, r3, #1
 800357c:	2b01      	cmp	r3, #1
 800357e:	d107      	bne.n	8003590 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f06f 0201 	mvn.w	r2, #1
 8003588:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f7fe f828 	bl	80015e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800359a:	2b80      	cmp	r3, #128	; 0x80
 800359c:	d10e      	bne.n	80035bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035a8:	2b80      	cmp	r3, #128	; 0x80
 80035aa:	d107      	bne.n	80035bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80035b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f000 f8e2 	bl	8003780 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	691b      	ldr	r3, [r3, #16]
 80035c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c6:	2b40      	cmp	r3, #64	; 0x40
 80035c8:	d10e      	bne.n	80035e8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035d4:	2b40      	cmp	r3, #64	; 0x40
 80035d6:	d107      	bne.n	80035e8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80035e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f000 f838 	bl	8003658 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	691b      	ldr	r3, [r3, #16]
 80035ee:	f003 0320 	and.w	r3, r3, #32
 80035f2:	2b20      	cmp	r3, #32
 80035f4:	d10e      	bne.n	8003614 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	f003 0320 	and.w	r3, r3, #32
 8003600:	2b20      	cmp	r3, #32
 8003602:	d107      	bne.n	8003614 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f06f 0220 	mvn.w	r2, #32
 800360c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 f8ac 	bl	800376c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003614:	bf00      	nop
 8003616:	3708      	adds	r7, #8
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003624:	bf00      	nop
 8003626:	370c      	adds	r7, #12
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr

08003630 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003638:	bf00      	nop
 800363a:	370c      	adds	r7, #12
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr

08003644 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003644:	b480      	push	{r7}
 8003646:	b083      	sub	sp, #12
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800364c:	bf00      	nop
 800364e:	370c      	adds	r7, #12
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr

08003658 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003660:	bf00      	nop
 8003662:	370c      	adds	r7, #12
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr

0800366c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800366c:	b480      	push	{r7}
 800366e:	b085      	sub	sp, #20
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	4a34      	ldr	r2, [pc, #208]	; (8003750 <TIM_Base_SetConfig+0xe4>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d00f      	beq.n	80036a4 <TIM_Base_SetConfig+0x38>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800368a:	d00b      	beq.n	80036a4 <TIM_Base_SetConfig+0x38>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	4a31      	ldr	r2, [pc, #196]	; (8003754 <TIM_Base_SetConfig+0xe8>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d007      	beq.n	80036a4 <TIM_Base_SetConfig+0x38>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	4a30      	ldr	r2, [pc, #192]	; (8003758 <TIM_Base_SetConfig+0xec>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d003      	beq.n	80036a4 <TIM_Base_SetConfig+0x38>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	4a2f      	ldr	r2, [pc, #188]	; (800375c <TIM_Base_SetConfig+0xf0>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d108      	bne.n	80036b6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	68fa      	ldr	r2, [r7, #12]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a25      	ldr	r2, [pc, #148]	; (8003750 <TIM_Base_SetConfig+0xe4>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d01b      	beq.n	80036f6 <TIM_Base_SetConfig+0x8a>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036c4:	d017      	beq.n	80036f6 <TIM_Base_SetConfig+0x8a>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a22      	ldr	r2, [pc, #136]	; (8003754 <TIM_Base_SetConfig+0xe8>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d013      	beq.n	80036f6 <TIM_Base_SetConfig+0x8a>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a21      	ldr	r2, [pc, #132]	; (8003758 <TIM_Base_SetConfig+0xec>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d00f      	beq.n	80036f6 <TIM_Base_SetConfig+0x8a>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a20      	ldr	r2, [pc, #128]	; (800375c <TIM_Base_SetConfig+0xf0>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d00b      	beq.n	80036f6 <TIM_Base_SetConfig+0x8a>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a1f      	ldr	r2, [pc, #124]	; (8003760 <TIM_Base_SetConfig+0xf4>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d007      	beq.n	80036f6 <TIM_Base_SetConfig+0x8a>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a1e      	ldr	r2, [pc, #120]	; (8003764 <TIM_Base_SetConfig+0xf8>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d003      	beq.n	80036f6 <TIM_Base_SetConfig+0x8a>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a1d      	ldr	r2, [pc, #116]	; (8003768 <TIM_Base_SetConfig+0xfc>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d108      	bne.n	8003708 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	68fa      	ldr	r2, [r7, #12]
 8003704:	4313      	orrs	r3, r2
 8003706:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	695b      	ldr	r3, [r3, #20]
 8003712:	4313      	orrs	r3, r2
 8003714:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	68fa      	ldr	r2, [r7, #12]
 800371a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	689a      	ldr	r2, [r3, #8]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	4a08      	ldr	r2, [pc, #32]	; (8003750 <TIM_Base_SetConfig+0xe4>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d103      	bne.n	800373c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	691a      	ldr	r2, [r3, #16]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	615a      	str	r2, [r3, #20]
}
 8003742:	bf00      	nop
 8003744:	3714      	adds	r7, #20
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr
 800374e:	bf00      	nop
 8003750:	40010000 	.word	0x40010000
 8003754:	40000400 	.word	0x40000400
 8003758:	40000800 	.word	0x40000800
 800375c:	40000c00 	.word	0x40000c00
 8003760:	40014000 	.word	0x40014000
 8003764:	40014400 	.word	0x40014400
 8003768:	40014800 	.word	0x40014800

0800376c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003774:	bf00      	nop
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003788:	bf00      	nop
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b082      	sub	sp, #8
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d101      	bne.n	80037a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e03f      	b.n	8003826 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d106      	bne.n	80037c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f7fd ff54 	bl	8001668 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2224      	movs	r2, #36	; 0x24
 80037c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	68da      	ldr	r2, [r3, #12]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f000 fda3 	bl	8004324 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	691a      	ldr	r2, [r3, #16]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	695a      	ldr	r2, [r3, #20]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	68da      	ldr	r2, [r3, #12]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800380c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2220      	movs	r2, #32
 8003818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2220      	movs	r2, #32
 8003820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003824:	2300      	movs	r3, #0
}
 8003826:	4618      	mov	r0, r3
 8003828:	3708      	adds	r7, #8
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
	...

08003830 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b086      	sub	sp, #24
 8003834:	af00      	add	r7, sp, #0
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	4613      	mov	r3, r2
 800383c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003844:	b2db      	uxtb	r3, r3
 8003846:	2b20      	cmp	r3, #32
 8003848:	d153      	bne.n	80038f2 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d002      	beq.n	8003856 <HAL_UART_Transmit_DMA+0x26>
 8003850:	88fb      	ldrh	r3, [r7, #6]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d101      	bne.n	800385a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e04c      	b.n	80038f4 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003860:	2b01      	cmp	r3, #1
 8003862:	d101      	bne.n	8003868 <HAL_UART_Transmit_DMA+0x38>
 8003864:	2302      	movs	r3, #2
 8003866:	e045      	b.n	80038f4 <HAL_UART_Transmit_DMA+0xc4>
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8003870:	68ba      	ldr	r2, [r7, #8]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	88fa      	ldrh	r2, [r7, #6]
 800387a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	88fa      	ldrh	r2, [r7, #6]
 8003880:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2200      	movs	r2, #0
 8003886:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2221      	movs	r2, #33	; 0x21
 800388c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003894:	4a19      	ldr	r2, [pc, #100]	; (80038fc <HAL_UART_Transmit_DMA+0xcc>)
 8003896:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800389c:	4a18      	ldr	r2, [pc, #96]	; (8003900 <HAL_UART_Transmit_DMA+0xd0>)
 800389e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038a4:	4a17      	ldr	r2, [pc, #92]	; (8003904 <HAL_UART_Transmit_DMA+0xd4>)
 80038a6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038ac:	2200      	movs	r2, #0
 80038ae:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 80038b0:	f107 0308 	add.w	r3, r7, #8
 80038b4:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	6819      	ldr	r1, [r3, #0]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	3304      	adds	r3, #4
 80038c4:	461a      	mov	r2, r3
 80038c6:	88fb      	ldrh	r3, [r7, #6]
 80038c8:	f7fe fb78 	bl	8001fbc <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80038d4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	695a      	ldr	r2, [r3, #20]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80038ec:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80038ee:	2300      	movs	r3, #0
 80038f0:	e000      	b.n	80038f4 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 80038f2:	2302      	movs	r3, #2
  }
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3718      	adds	r7, #24
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	08003de1 	.word	0x08003de1
 8003900:	08003e33 	.word	0x08003e33
 8003904:	08003f1b 	.word	0x08003f1b

08003908 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	4613      	mov	r3, r2
 8003914:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800391c:	b2db      	uxtb	r3, r3
 800391e:	2b20      	cmp	r3, #32
 8003920:	d11d      	bne.n	800395e <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d002      	beq.n	800392e <HAL_UART_Receive_DMA+0x26>
 8003928:	88fb      	ldrh	r3, [r7, #6]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d101      	bne.n	8003932 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e016      	b.n	8003960 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003938:	2b01      	cmp	r3, #1
 800393a:	d101      	bne.n	8003940 <HAL_UART_Receive_DMA+0x38>
 800393c:	2302      	movs	r3, #2
 800393e:	e00f      	b.n	8003960 <HAL_UART_Receive_DMA+0x58>
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2200      	movs	r2, #0
 800394c:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 800394e:	88fb      	ldrh	r3, [r7, #6]
 8003950:	461a      	mov	r2, r3
 8003952:	68b9      	ldr	r1, [r7, #8]
 8003954:	68f8      	ldr	r0, [r7, #12]
 8003956:	f000 fb2b 	bl	8003fb0 <UART_Start_Receive_DMA>
 800395a:	4603      	mov	r3, r0
 800395c:	e000      	b.n	8003960 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800395e:	2302      	movs	r3, #2
  }
}
 8003960:	4618      	mov	r0, r3
 8003962:	3710      	adds	r7, #16
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003970:	2300      	movs	r3, #0
 8003972:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	695b      	ldr	r3, [r3, #20]
 800397a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800397e:	2b80      	cmp	r3, #128	; 0x80
 8003980:	bf0c      	ite	eq
 8003982:	2301      	moveq	r3, #1
 8003984:	2300      	movne	r3, #0
 8003986:	b2db      	uxtb	r3, r3
 8003988:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003990:	b2db      	uxtb	r3, r3
 8003992:	2b21      	cmp	r3, #33	; 0x21
 8003994:	d116      	bne.n	80039c4 <HAL_UART_DMAStop+0x5c>
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d013      	beq.n	80039c4 <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	695a      	ldr	r2, [r3, #20]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039aa:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d004      	beq.n	80039be <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039b8:	4618      	mov	r0, r3
 80039ba:	f7fe fb57 	bl	800206c <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f000 fb5a 	bl	8004078 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	695b      	ldr	r3, [r3, #20]
 80039ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ce:	2b40      	cmp	r3, #64	; 0x40
 80039d0:	bf0c      	ite	eq
 80039d2:	2301      	moveq	r3, #1
 80039d4:	2300      	movne	r3, #0
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	2b22      	cmp	r3, #34	; 0x22
 80039e4:	d116      	bne.n	8003a14 <HAL_UART_DMAStop+0xac>
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d013      	beq.n	8003a14 <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	695a      	ldr	r2, [r3, #20]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039fa:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d004      	beq.n	8003a0e <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f7fe fb2f 	bl	800206c <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f000 fb48 	bl	80040a4 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3710      	adds	r7, #16
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
	...

08003a20 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b08a      	sub	sp, #40	; 0x28
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	695b      	ldr	r3, [r3, #20]
 8003a3e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003a40:	2300      	movs	r3, #0
 8003a42:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003a44:	2300      	movs	r3, #0
 8003a46:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4a:	f003 030f 	and.w	r3, r3, #15
 8003a4e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d10d      	bne.n	8003a72 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a58:	f003 0320 	and.w	r3, r3, #32
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d008      	beq.n	8003a72 <HAL_UART_IRQHandler+0x52>
 8003a60:	6a3b      	ldr	r3, [r7, #32]
 8003a62:	f003 0320 	and.w	r3, r3, #32
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d003      	beq.n	8003a72 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f000 fbc3 	bl	80041f6 <UART_Receive_IT>
      return;
 8003a70:	e17c      	b.n	8003d6c <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	f000 80b1 	beq.w	8003bdc <HAL_UART_IRQHandler+0x1bc>
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	f003 0301 	and.w	r3, r3, #1
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d105      	bne.n	8003a90 <HAL_UART_IRQHandler+0x70>
 8003a84:	6a3b      	ldr	r3, [r7, #32]
 8003a86:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	f000 80a6 	beq.w	8003bdc <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a92:	f003 0301 	and.w	r3, r3, #1
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d00a      	beq.n	8003ab0 <HAL_UART_IRQHandler+0x90>
 8003a9a:	6a3b      	ldr	r3, [r7, #32]
 8003a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d005      	beq.n	8003ab0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa8:	f043 0201 	orr.w	r2, r3, #1
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab2:	f003 0304 	and.w	r3, r3, #4
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d00a      	beq.n	8003ad0 <HAL_UART_IRQHandler+0xb0>
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	f003 0301 	and.w	r3, r3, #1
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d005      	beq.n	8003ad0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac8:	f043 0202 	orr.w	r2, r3, #2
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad2:	f003 0302 	and.w	r3, r3, #2
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d00a      	beq.n	8003af0 <HAL_UART_IRQHandler+0xd0>
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	f003 0301 	and.w	r3, r3, #1
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d005      	beq.n	8003af0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae8:	f043 0204 	orr.w	r2, r3, #4
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af2:	f003 0308 	and.w	r3, r3, #8
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d00f      	beq.n	8003b1a <HAL_UART_IRQHandler+0xfa>
 8003afa:	6a3b      	ldr	r3, [r7, #32]
 8003afc:	f003 0320 	and.w	r3, r3, #32
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d104      	bne.n	8003b0e <HAL_UART_IRQHandler+0xee>
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	f003 0301 	and.w	r3, r3, #1
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d005      	beq.n	8003b1a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b12:	f043 0208 	orr.w	r2, r3, #8
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	f000 811f 	beq.w	8003d62 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b26:	f003 0320 	and.w	r3, r3, #32
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d007      	beq.n	8003b3e <HAL_UART_IRQHandler+0x11e>
 8003b2e:	6a3b      	ldr	r3, [r7, #32]
 8003b30:	f003 0320 	and.w	r3, r3, #32
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d002      	beq.n	8003b3e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f000 fb5c 	bl	80041f6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	695b      	ldr	r3, [r3, #20]
 8003b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b48:	2b40      	cmp	r3, #64	; 0x40
 8003b4a:	bf0c      	ite	eq
 8003b4c:	2301      	moveq	r3, #1
 8003b4e:	2300      	movne	r3, #0
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b58:	f003 0308 	and.w	r3, r3, #8
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d102      	bne.n	8003b66 <HAL_UART_IRQHandler+0x146>
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d031      	beq.n	8003bca <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f000 fa9c 	bl	80040a4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	695b      	ldr	r3, [r3, #20]
 8003b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b76:	2b40      	cmp	r3, #64	; 0x40
 8003b78:	d123      	bne.n	8003bc2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	695a      	ldr	r2, [r3, #20]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b88:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d013      	beq.n	8003bba <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b96:	4a77      	ldr	r2, [pc, #476]	; (8003d74 <HAL_UART_IRQHandler+0x354>)
 8003b98:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f7fe fad4 	bl	800214c <HAL_DMA_Abort_IT>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d016      	beq.n	8003bd8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003bb4:	4610      	mov	r0, r2
 8003bb6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bb8:	e00e      	b.n	8003bd8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f000 f8fa 	bl	8003db4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bc0:	e00a      	b.n	8003bd8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f000 f8f6 	bl	8003db4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bc8:	e006      	b.n	8003bd8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f000 f8f2 	bl	8003db4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003bd6:	e0c4      	b.n	8003d62 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bd8:	bf00      	nop
    return;
 8003bda:	e0c2      	b.n	8003d62 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	f040 80a2 	bne.w	8003d2a <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be8:	f003 0310 	and.w	r3, r3, #16
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	f000 809c 	beq.w	8003d2a <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003bf2:	6a3b      	ldr	r3, [r7, #32]
 8003bf4:	f003 0310 	and.w	r3, r3, #16
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	f000 8096 	beq.w	8003d2a <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003bfe:	2300      	movs	r3, #0
 8003c00:	60fb      	str	r3, [r7, #12]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	60fb      	str	r3, [r7, #12]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	60fb      	str	r3, [r7, #12]
 8003c12:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	695b      	ldr	r3, [r3, #20]
 8003c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c1e:	2b40      	cmp	r3, #64	; 0x40
 8003c20:	d14f      	bne.n	8003cc2 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003c2c:	8a3b      	ldrh	r3, [r7, #16]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	f000 8099 	beq.w	8003d66 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003c38:	8a3a      	ldrh	r2, [r7, #16]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	f080 8093 	bcs.w	8003d66 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	8a3a      	ldrh	r2, [r7, #16]
 8003c44:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c4a:	69db      	ldr	r3, [r3, #28]
 8003c4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c50:	d02b      	beq.n	8003caa <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	68da      	ldr	r2, [r3, #12]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c60:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	695a      	ldr	r2, [r3, #20]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f022 0201 	bic.w	r2, r2, #1
 8003c70:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	695a      	ldr	r2, [r3, #20]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c80:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2220      	movs	r2, #32
 8003c86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	68da      	ldr	r2, [r3, #12]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f022 0210 	bic.w	r2, r2, #16
 8003c9e:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f7fe f9e1 	bl	800206c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	4619      	mov	r1, r3
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f000 f884 	bl	8003dc8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003cc0:	e051      	b.n	8003d66 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d047      	beq.n	8003d6a <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8003cda:	8a7b      	ldrh	r3, [r7, #18]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d044      	beq.n	8003d6a <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	68da      	ldr	r2, [r3, #12]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003cee:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	695a      	ldr	r2, [r3, #20]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f022 0201 	bic.w	r2, r2, #1
 8003cfe:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2220      	movs	r2, #32
 8003d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	68da      	ldr	r2, [r3, #12]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f022 0210 	bic.w	r2, r2, #16
 8003d1c:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003d1e:	8a7b      	ldrh	r3, [r7, #18]
 8003d20:	4619      	mov	r1, r3
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f000 f850 	bl	8003dc8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003d28:	e01f      	b.n	8003d6a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d008      	beq.n	8003d46 <HAL_UART_IRQHandler+0x326>
 8003d34:	6a3b      	ldr	r3, [r7, #32]
 8003d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d003      	beq.n	8003d46 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f000 f9f1 	bl	8004126 <UART_Transmit_IT>
    return;
 8003d44:	e012      	b.n	8003d6c <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d00d      	beq.n	8003d6c <HAL_UART_IRQHandler+0x34c>
 8003d50:	6a3b      	ldr	r3, [r7, #32]
 8003d52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d008      	beq.n	8003d6c <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f000 fa33 	bl	80041c6 <UART_EndTransmit_IT>
    return;
 8003d60:	e004      	b.n	8003d6c <HAL_UART_IRQHandler+0x34c>
    return;
 8003d62:	bf00      	nop
 8003d64:	e002      	b.n	8003d6c <HAL_UART_IRQHandler+0x34c>
      return;
 8003d66:	bf00      	nop
 8003d68:	e000      	b.n	8003d6c <HAL_UART_IRQHandler+0x34c>
      return;
 8003d6a:	bf00      	nop
  }
}
 8003d6c:	3728      	adds	r7, #40	; 0x28
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	080040ff 	.word	0x080040ff

08003d78 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b083      	sub	sp, #12
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003d80:	bf00      	nop
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr

08003d8c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003d94:	bf00      	nop
 8003d96:	370c      	adds	r7, #12
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr

08003da0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003da8:	bf00      	nop
 8003daa:	370c      	adds	r7, #12
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003dbc:	bf00      	nop
 8003dbe:	370c      	adds	r7, #12
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr

08003dc8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b083      	sub	sp, #12
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	460b      	mov	r3, r1
 8003dd2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003dd4:	bf00      	nop
 8003dd6:	370c      	adds	r7, #12
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr

08003de0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dec:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d113      	bne.n	8003e24 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	695a      	ldr	r2, [r3, #20]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e10:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68da      	ldr	r2, [r3, #12]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e20:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003e22:	e002      	b.n	8003e2a <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8003e24:	68f8      	ldr	r0, [r7, #12]
 8003e26:	f7fd fa03 	bl	8001230 <HAL_UART_TxCpltCallback>
}
 8003e2a:	bf00      	nop
 8003e2c:	3710      	adds	r7, #16
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}

08003e32 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003e32:	b580      	push	{r7, lr}
 8003e34:	b084      	sub	sp, #16
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e3e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003e40:	68f8      	ldr	r0, [r7, #12]
 8003e42:	f7ff ff99 	bl	8003d78 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e46:	bf00      	nop
 8003e48:	3710      	adds	r7, #16
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}

08003e4e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003e4e:	b580      	push	{r7, lr}
 8003e50:	b084      	sub	sp, #16
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e5a:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d12a      	bne.n	8003ec0 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	68da      	ldr	r2, [r3, #12]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e7e:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	695a      	ldr	r2, [r3, #20]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f022 0201 	bic.w	r2, r2, #1
 8003e8e:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	695a      	ldr	r2, [r3, #20]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e9e:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2220      	movs	r2, #32
 8003ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d107      	bne.n	8003ec0 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	68da      	ldr	r2, [r3, #12]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f022 0210 	bic.w	r2, r2, #16
 8003ebe:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d106      	bne.n	8003ed6 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003ecc:	4619      	mov	r1, r3
 8003ece:	68f8      	ldr	r0, [r7, #12]
 8003ed0:	f7ff ff7a 	bl	8003dc8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003ed4:	e002      	b.n	8003edc <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8003ed6:	68f8      	ldr	r0, [r7, #12]
 8003ed8:	f7ff ff58 	bl	8003d8c <HAL_UART_RxCpltCallback>
}
 8003edc:	bf00      	nop
 8003ede:	3710      	adds	r7, #16
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef0:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d108      	bne.n	8003f0c <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003efe:	085b      	lsrs	r3, r3, #1
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	4619      	mov	r1, r3
 8003f04:	68f8      	ldr	r0, [r7, #12]
 8003f06:	f7ff ff5f 	bl	8003dc8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003f0a:	e002      	b.n	8003f12 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8003f0c:	68f8      	ldr	r0, [r7, #12]
 8003f0e:	f7ff ff47 	bl	8003da0 <HAL_UART_RxHalfCpltCallback>
}
 8003f12:	bf00      	nop
 8003f14:	3710      	adds	r7, #16
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}

08003f1a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003f1a:	b580      	push	{r7, lr}
 8003f1c:	b084      	sub	sp, #16
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003f22:	2300      	movs	r3, #0
 8003f24:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f2a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	695b      	ldr	r3, [r3, #20]
 8003f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f36:	2b80      	cmp	r3, #128	; 0x80
 8003f38:	bf0c      	ite	eq
 8003f3a:	2301      	moveq	r3, #1
 8003f3c:	2300      	movne	r3, #0
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	2b21      	cmp	r3, #33	; 0x21
 8003f4c:	d108      	bne.n	8003f60 <UART_DMAError+0x46>
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d005      	beq.n	8003f60 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	2200      	movs	r2, #0
 8003f58:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003f5a:	68b8      	ldr	r0, [r7, #8]
 8003f5c:	f000 f88c 	bl	8004078 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	695b      	ldr	r3, [r3, #20]
 8003f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f6a:	2b40      	cmp	r3, #64	; 0x40
 8003f6c:	bf0c      	ite	eq
 8003f6e:	2301      	moveq	r3, #1
 8003f70:	2300      	movne	r3, #0
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	2b22      	cmp	r3, #34	; 0x22
 8003f80:	d108      	bne.n	8003f94 <UART_DMAError+0x7a>
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d005      	beq.n	8003f94 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003f8e:	68b8      	ldr	r0, [r7, #8]
 8003f90:	f000 f888 	bl	80040a4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f98:	f043 0210 	orr.w	r2, r3, #16
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003fa0:	68b8      	ldr	r0, [r7, #8]
 8003fa2:	f7ff ff07 	bl	8003db4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003fa6:	bf00      	nop
 8003fa8:	3710      	adds	r7, #16
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
	...

08003fb0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b086      	sub	sp, #24
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	4613      	mov	r3, r2
 8003fbc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003fbe:	68ba      	ldr	r2, [r7, #8]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	88fa      	ldrh	r2, [r7, #6]
 8003fc8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2222      	movs	r2, #34	; 0x22
 8003fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fdc:	4a23      	ldr	r2, [pc, #140]	; (800406c <UART_Start_Receive_DMA+0xbc>)
 8003fde:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe4:	4a22      	ldr	r2, [pc, #136]	; (8004070 <UART_Start_Receive_DMA+0xc0>)
 8003fe6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fec:	4a21      	ldr	r2, [pc, #132]	; (8004074 <UART_Start_Receive_DMA+0xc4>)
 8003fee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003ff8:	f107 0308 	add.w	r3, r7, #8
 8003ffc:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	3304      	adds	r3, #4
 8004008:	4619      	mov	r1, r3
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	88fb      	ldrh	r3, [r7, #6]
 8004010:	f7fd ffd4 	bl	8001fbc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004014:	2300      	movs	r3, #0
 8004016:	613b      	str	r3, [r7, #16]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	613b      	str	r3, [r7, #16]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	613b      	str	r3, [r7, #16]
 8004028:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2200      	movs	r2, #0
 800402e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	68da      	ldr	r2, [r3, #12]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004040:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	695a      	ldr	r2, [r3, #20]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f042 0201 	orr.w	r2, r2, #1
 8004050:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	695a      	ldr	r2, [r3, #20]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004060:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8004062:	2300      	movs	r3, #0
}
 8004064:	4618      	mov	r0, r3
 8004066:	3718      	adds	r7, #24
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}
 800406c:	08003e4f 	.word	0x08003e4f
 8004070:	08003ee5 	.word	0x08003ee5
 8004074:	08003f1b 	.word	0x08003f1b

08004078 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	68da      	ldr	r2, [r3, #12]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800408e:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2220      	movs	r2, #32
 8004094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004098:	bf00      	nop
 800409a:	370c      	adds	r7, #12
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr

080040a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	68da      	ldr	r2, [r3, #12]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80040ba:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	695a      	ldr	r2, [r3, #20]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f022 0201 	bic.w	r2, r2, #1
 80040ca:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d107      	bne.n	80040e4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	68da      	ldr	r2, [r3, #12]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f022 0210 	bic.w	r2, r2, #16
 80040e2:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2220      	movs	r2, #32
 80040e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80040f2:	bf00      	nop
 80040f4:	370c      	adds	r7, #12
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr

080040fe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80040fe:	b580      	push	{r7, lr}
 8004100:	b084      	sub	sp, #16
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800410a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2200      	movs	r2, #0
 8004110:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2200      	movs	r2, #0
 8004116:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004118:	68f8      	ldr	r0, [r7, #12]
 800411a:	f7ff fe4b 	bl	8003db4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800411e:	bf00      	nop
 8004120:	3710      	adds	r7, #16
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}

08004126 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004126:	b480      	push	{r7}
 8004128:	b085      	sub	sp, #20
 800412a:	af00      	add	r7, sp, #0
 800412c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004134:	b2db      	uxtb	r3, r3
 8004136:	2b21      	cmp	r3, #33	; 0x21
 8004138:	d13e      	bne.n	80041b8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004142:	d114      	bne.n	800416e <UART_Transmit_IT+0x48>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	691b      	ldr	r3, [r3, #16]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d110      	bne.n	800416e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6a1b      	ldr	r3, [r3, #32]
 8004150:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	881b      	ldrh	r3, [r3, #0]
 8004156:	461a      	mov	r2, r3
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004160:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a1b      	ldr	r3, [r3, #32]
 8004166:	1c9a      	adds	r2, r3, #2
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	621a      	str	r2, [r3, #32]
 800416c:	e008      	b.n	8004180 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a1b      	ldr	r3, [r3, #32]
 8004172:	1c59      	adds	r1, r3, #1
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	6211      	str	r1, [r2, #32]
 8004178:	781a      	ldrb	r2, [r3, #0]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004184:	b29b      	uxth	r3, r3
 8004186:	3b01      	subs	r3, #1
 8004188:	b29b      	uxth	r3, r3
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	4619      	mov	r1, r3
 800418e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004190:	2b00      	cmp	r3, #0
 8004192:	d10f      	bne.n	80041b4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	68da      	ldr	r2, [r3, #12]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041a2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	68da      	ldr	r2, [r3, #12]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041b2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80041b4:	2300      	movs	r3, #0
 80041b6:	e000      	b.n	80041ba <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80041b8:	2302      	movs	r3, #2
  }
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3714      	adds	r7, #20
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr

080041c6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80041c6:	b580      	push	{r7, lr}
 80041c8:	b082      	sub	sp, #8
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	68da      	ldr	r2, [r3, #12]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041dc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2220      	movs	r2, #32
 80041e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f7fd f822 	bl	8001230 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80041ec:	2300      	movs	r3, #0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3708      	adds	r7, #8
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}

080041f6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80041f6:	b580      	push	{r7, lr}
 80041f8:	b084      	sub	sp, #16
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004204:	b2db      	uxtb	r3, r3
 8004206:	2b22      	cmp	r3, #34	; 0x22
 8004208:	f040 8087 	bne.w	800431a <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004214:	d117      	bne.n	8004246 <UART_Receive_IT+0x50>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	691b      	ldr	r3, [r3, #16]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d113      	bne.n	8004246 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800421e:	2300      	movs	r3, #0
 8004220:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004226:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	b29b      	uxth	r3, r3
 8004230:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004234:	b29a      	uxth	r2, r3
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800423e:	1c9a      	adds	r2, r3, #2
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	629a      	str	r2, [r3, #40]	; 0x28
 8004244:	e026      	b.n	8004294 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800424a:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800424c:	2300      	movs	r3, #0
 800424e:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004258:	d007      	beq.n	800426a <UART_Receive_IT+0x74>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d10a      	bne.n	8004278 <UART_Receive_IT+0x82>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d106      	bne.n	8004278 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	b2da      	uxtb	r2, r3
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	701a      	strb	r2, [r3, #0]
 8004276:	e008      	b.n	800428a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	b2db      	uxtb	r3, r3
 8004280:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004284:	b2da      	uxtb	r2, r3
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800428e:	1c5a      	adds	r2, r3, #1
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004298:	b29b      	uxth	r3, r3
 800429a:	3b01      	subs	r3, #1
 800429c:	b29b      	uxth	r3, r3
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	4619      	mov	r1, r3
 80042a2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d136      	bne.n	8004316 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	68da      	ldr	r2, [r3, #12]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f022 0220 	bic.w	r2, r2, #32
 80042b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	68da      	ldr	r2, [r3, #12]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	695a      	ldr	r2, [r3, #20]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f022 0201 	bic.w	r2, r2, #1
 80042d6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2220      	movs	r2, #32
 80042dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d10e      	bne.n	8004306 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	68da      	ldr	r2, [r3, #12]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f022 0210 	bic.w	r2, r2, #16
 80042f6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80042fc:	4619      	mov	r1, r3
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f7ff fd62 	bl	8003dc8 <HAL_UARTEx_RxEventCallback>
 8004304:	e002      	b.n	800430c <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f7ff fd40 	bl	8003d8c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8004312:	2300      	movs	r3, #0
 8004314:	e002      	b.n	800431c <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8004316:	2300      	movs	r3, #0
 8004318:	e000      	b.n	800431c <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 800431a:	2302      	movs	r3, #2
  }
}
 800431c:	4618      	mov	r0, r3
 800431e:	3710      	adds	r7, #16
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}

08004324 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004328:	b09f      	sub	sp, #124	; 0x7c
 800432a:	af00      	add	r7, sp, #0
 800432c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800432e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	691b      	ldr	r3, [r3, #16]
 8004334:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004338:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800433a:	68d9      	ldr	r1, [r3, #12]
 800433c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	ea40 0301 	orr.w	r3, r0, r1
 8004344:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004346:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004348:	689a      	ldr	r2, [r3, #8]
 800434a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	431a      	orrs	r2, r3
 8004350:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004352:	695b      	ldr	r3, [r3, #20]
 8004354:	431a      	orrs	r2, r3
 8004356:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004358:	69db      	ldr	r3, [r3, #28]
 800435a:	4313      	orrs	r3, r2
 800435c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800435e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004368:	f021 010c 	bic.w	r1, r1, #12
 800436c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004372:	430b      	orrs	r3, r1
 8004374:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004376:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	695b      	ldr	r3, [r3, #20]
 800437c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004380:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004382:	6999      	ldr	r1, [r3, #24]
 8004384:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	ea40 0301 	orr.w	r3, r0, r1
 800438c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800438e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	4bc5      	ldr	r3, [pc, #788]	; (80046a8 <UART_SetConfig+0x384>)
 8004394:	429a      	cmp	r2, r3
 8004396:	d004      	beq.n	80043a2 <UART_SetConfig+0x7e>
 8004398:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	4bc3      	ldr	r3, [pc, #780]	; (80046ac <UART_SetConfig+0x388>)
 800439e:	429a      	cmp	r2, r3
 80043a0:	d103      	bne.n	80043aa <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80043a2:	f7fe ff31 	bl	8003208 <HAL_RCC_GetPCLK2Freq>
 80043a6:	6778      	str	r0, [r7, #116]	; 0x74
 80043a8:	e002      	b.n	80043b0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80043aa:	f7fe ff19 	bl	80031e0 <HAL_RCC_GetPCLK1Freq>
 80043ae:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043b2:	69db      	ldr	r3, [r3, #28]
 80043b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043b8:	f040 80b6 	bne.w	8004528 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80043bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043be:	461c      	mov	r4, r3
 80043c0:	f04f 0500 	mov.w	r5, #0
 80043c4:	4622      	mov	r2, r4
 80043c6:	462b      	mov	r3, r5
 80043c8:	1891      	adds	r1, r2, r2
 80043ca:	6439      	str	r1, [r7, #64]	; 0x40
 80043cc:	415b      	adcs	r3, r3
 80043ce:	647b      	str	r3, [r7, #68]	; 0x44
 80043d0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80043d4:	1912      	adds	r2, r2, r4
 80043d6:	eb45 0303 	adc.w	r3, r5, r3
 80043da:	f04f 0000 	mov.w	r0, #0
 80043de:	f04f 0100 	mov.w	r1, #0
 80043e2:	00d9      	lsls	r1, r3, #3
 80043e4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80043e8:	00d0      	lsls	r0, r2, #3
 80043ea:	4602      	mov	r2, r0
 80043ec:	460b      	mov	r3, r1
 80043ee:	1911      	adds	r1, r2, r4
 80043f0:	6639      	str	r1, [r7, #96]	; 0x60
 80043f2:	416b      	adcs	r3, r5
 80043f4:	667b      	str	r3, [r7, #100]	; 0x64
 80043f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	461a      	mov	r2, r3
 80043fc:	f04f 0300 	mov.w	r3, #0
 8004400:	1891      	adds	r1, r2, r2
 8004402:	63b9      	str	r1, [r7, #56]	; 0x38
 8004404:	415b      	adcs	r3, r3
 8004406:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004408:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800440c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004410:	f7fc fbd2 	bl	8000bb8 <__aeabi_uldivmod>
 8004414:	4602      	mov	r2, r0
 8004416:	460b      	mov	r3, r1
 8004418:	4ba5      	ldr	r3, [pc, #660]	; (80046b0 <UART_SetConfig+0x38c>)
 800441a:	fba3 2302 	umull	r2, r3, r3, r2
 800441e:	095b      	lsrs	r3, r3, #5
 8004420:	011e      	lsls	r6, r3, #4
 8004422:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004424:	461c      	mov	r4, r3
 8004426:	f04f 0500 	mov.w	r5, #0
 800442a:	4622      	mov	r2, r4
 800442c:	462b      	mov	r3, r5
 800442e:	1891      	adds	r1, r2, r2
 8004430:	6339      	str	r1, [r7, #48]	; 0x30
 8004432:	415b      	adcs	r3, r3
 8004434:	637b      	str	r3, [r7, #52]	; 0x34
 8004436:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800443a:	1912      	adds	r2, r2, r4
 800443c:	eb45 0303 	adc.w	r3, r5, r3
 8004440:	f04f 0000 	mov.w	r0, #0
 8004444:	f04f 0100 	mov.w	r1, #0
 8004448:	00d9      	lsls	r1, r3, #3
 800444a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800444e:	00d0      	lsls	r0, r2, #3
 8004450:	4602      	mov	r2, r0
 8004452:	460b      	mov	r3, r1
 8004454:	1911      	adds	r1, r2, r4
 8004456:	65b9      	str	r1, [r7, #88]	; 0x58
 8004458:	416b      	adcs	r3, r5
 800445a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800445c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	461a      	mov	r2, r3
 8004462:	f04f 0300 	mov.w	r3, #0
 8004466:	1891      	adds	r1, r2, r2
 8004468:	62b9      	str	r1, [r7, #40]	; 0x28
 800446a:	415b      	adcs	r3, r3
 800446c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800446e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004472:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004476:	f7fc fb9f 	bl	8000bb8 <__aeabi_uldivmod>
 800447a:	4602      	mov	r2, r0
 800447c:	460b      	mov	r3, r1
 800447e:	4b8c      	ldr	r3, [pc, #560]	; (80046b0 <UART_SetConfig+0x38c>)
 8004480:	fba3 1302 	umull	r1, r3, r3, r2
 8004484:	095b      	lsrs	r3, r3, #5
 8004486:	2164      	movs	r1, #100	; 0x64
 8004488:	fb01 f303 	mul.w	r3, r1, r3
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	00db      	lsls	r3, r3, #3
 8004490:	3332      	adds	r3, #50	; 0x32
 8004492:	4a87      	ldr	r2, [pc, #540]	; (80046b0 <UART_SetConfig+0x38c>)
 8004494:	fba2 2303 	umull	r2, r3, r2, r3
 8004498:	095b      	lsrs	r3, r3, #5
 800449a:	005b      	lsls	r3, r3, #1
 800449c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80044a0:	441e      	add	r6, r3
 80044a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044a4:	4618      	mov	r0, r3
 80044a6:	f04f 0100 	mov.w	r1, #0
 80044aa:	4602      	mov	r2, r0
 80044ac:	460b      	mov	r3, r1
 80044ae:	1894      	adds	r4, r2, r2
 80044b0:	623c      	str	r4, [r7, #32]
 80044b2:	415b      	adcs	r3, r3
 80044b4:	627b      	str	r3, [r7, #36]	; 0x24
 80044b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80044ba:	1812      	adds	r2, r2, r0
 80044bc:	eb41 0303 	adc.w	r3, r1, r3
 80044c0:	f04f 0400 	mov.w	r4, #0
 80044c4:	f04f 0500 	mov.w	r5, #0
 80044c8:	00dd      	lsls	r5, r3, #3
 80044ca:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80044ce:	00d4      	lsls	r4, r2, #3
 80044d0:	4622      	mov	r2, r4
 80044d2:	462b      	mov	r3, r5
 80044d4:	1814      	adds	r4, r2, r0
 80044d6:	653c      	str	r4, [r7, #80]	; 0x50
 80044d8:	414b      	adcs	r3, r1
 80044da:	657b      	str	r3, [r7, #84]	; 0x54
 80044dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	461a      	mov	r2, r3
 80044e2:	f04f 0300 	mov.w	r3, #0
 80044e6:	1891      	adds	r1, r2, r2
 80044e8:	61b9      	str	r1, [r7, #24]
 80044ea:	415b      	adcs	r3, r3
 80044ec:	61fb      	str	r3, [r7, #28]
 80044ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044f2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80044f6:	f7fc fb5f 	bl	8000bb8 <__aeabi_uldivmod>
 80044fa:	4602      	mov	r2, r0
 80044fc:	460b      	mov	r3, r1
 80044fe:	4b6c      	ldr	r3, [pc, #432]	; (80046b0 <UART_SetConfig+0x38c>)
 8004500:	fba3 1302 	umull	r1, r3, r3, r2
 8004504:	095b      	lsrs	r3, r3, #5
 8004506:	2164      	movs	r1, #100	; 0x64
 8004508:	fb01 f303 	mul.w	r3, r1, r3
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	00db      	lsls	r3, r3, #3
 8004510:	3332      	adds	r3, #50	; 0x32
 8004512:	4a67      	ldr	r2, [pc, #412]	; (80046b0 <UART_SetConfig+0x38c>)
 8004514:	fba2 2303 	umull	r2, r3, r2, r3
 8004518:	095b      	lsrs	r3, r3, #5
 800451a:	f003 0207 	and.w	r2, r3, #7
 800451e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4432      	add	r2, r6
 8004524:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004526:	e0b9      	b.n	800469c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004528:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800452a:	461c      	mov	r4, r3
 800452c:	f04f 0500 	mov.w	r5, #0
 8004530:	4622      	mov	r2, r4
 8004532:	462b      	mov	r3, r5
 8004534:	1891      	adds	r1, r2, r2
 8004536:	6139      	str	r1, [r7, #16]
 8004538:	415b      	adcs	r3, r3
 800453a:	617b      	str	r3, [r7, #20]
 800453c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004540:	1912      	adds	r2, r2, r4
 8004542:	eb45 0303 	adc.w	r3, r5, r3
 8004546:	f04f 0000 	mov.w	r0, #0
 800454a:	f04f 0100 	mov.w	r1, #0
 800454e:	00d9      	lsls	r1, r3, #3
 8004550:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004554:	00d0      	lsls	r0, r2, #3
 8004556:	4602      	mov	r2, r0
 8004558:	460b      	mov	r3, r1
 800455a:	eb12 0804 	adds.w	r8, r2, r4
 800455e:	eb43 0905 	adc.w	r9, r3, r5
 8004562:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	4618      	mov	r0, r3
 8004568:	f04f 0100 	mov.w	r1, #0
 800456c:	f04f 0200 	mov.w	r2, #0
 8004570:	f04f 0300 	mov.w	r3, #0
 8004574:	008b      	lsls	r3, r1, #2
 8004576:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800457a:	0082      	lsls	r2, r0, #2
 800457c:	4640      	mov	r0, r8
 800457e:	4649      	mov	r1, r9
 8004580:	f7fc fb1a 	bl	8000bb8 <__aeabi_uldivmod>
 8004584:	4602      	mov	r2, r0
 8004586:	460b      	mov	r3, r1
 8004588:	4b49      	ldr	r3, [pc, #292]	; (80046b0 <UART_SetConfig+0x38c>)
 800458a:	fba3 2302 	umull	r2, r3, r3, r2
 800458e:	095b      	lsrs	r3, r3, #5
 8004590:	011e      	lsls	r6, r3, #4
 8004592:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004594:	4618      	mov	r0, r3
 8004596:	f04f 0100 	mov.w	r1, #0
 800459a:	4602      	mov	r2, r0
 800459c:	460b      	mov	r3, r1
 800459e:	1894      	adds	r4, r2, r2
 80045a0:	60bc      	str	r4, [r7, #8]
 80045a2:	415b      	adcs	r3, r3
 80045a4:	60fb      	str	r3, [r7, #12]
 80045a6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80045aa:	1812      	adds	r2, r2, r0
 80045ac:	eb41 0303 	adc.w	r3, r1, r3
 80045b0:	f04f 0400 	mov.w	r4, #0
 80045b4:	f04f 0500 	mov.w	r5, #0
 80045b8:	00dd      	lsls	r5, r3, #3
 80045ba:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80045be:	00d4      	lsls	r4, r2, #3
 80045c0:	4622      	mov	r2, r4
 80045c2:	462b      	mov	r3, r5
 80045c4:	1814      	adds	r4, r2, r0
 80045c6:	64bc      	str	r4, [r7, #72]	; 0x48
 80045c8:	414b      	adcs	r3, r1
 80045ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	4618      	mov	r0, r3
 80045d2:	f04f 0100 	mov.w	r1, #0
 80045d6:	f04f 0200 	mov.w	r2, #0
 80045da:	f04f 0300 	mov.w	r3, #0
 80045de:	008b      	lsls	r3, r1, #2
 80045e0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80045e4:	0082      	lsls	r2, r0, #2
 80045e6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80045ea:	f7fc fae5 	bl	8000bb8 <__aeabi_uldivmod>
 80045ee:	4602      	mov	r2, r0
 80045f0:	460b      	mov	r3, r1
 80045f2:	4b2f      	ldr	r3, [pc, #188]	; (80046b0 <UART_SetConfig+0x38c>)
 80045f4:	fba3 1302 	umull	r1, r3, r3, r2
 80045f8:	095b      	lsrs	r3, r3, #5
 80045fa:	2164      	movs	r1, #100	; 0x64
 80045fc:	fb01 f303 	mul.w	r3, r1, r3
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	011b      	lsls	r3, r3, #4
 8004604:	3332      	adds	r3, #50	; 0x32
 8004606:	4a2a      	ldr	r2, [pc, #168]	; (80046b0 <UART_SetConfig+0x38c>)
 8004608:	fba2 2303 	umull	r2, r3, r2, r3
 800460c:	095b      	lsrs	r3, r3, #5
 800460e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004612:	441e      	add	r6, r3
 8004614:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004616:	4618      	mov	r0, r3
 8004618:	f04f 0100 	mov.w	r1, #0
 800461c:	4602      	mov	r2, r0
 800461e:	460b      	mov	r3, r1
 8004620:	1894      	adds	r4, r2, r2
 8004622:	603c      	str	r4, [r7, #0]
 8004624:	415b      	adcs	r3, r3
 8004626:	607b      	str	r3, [r7, #4]
 8004628:	e9d7 2300 	ldrd	r2, r3, [r7]
 800462c:	1812      	adds	r2, r2, r0
 800462e:	eb41 0303 	adc.w	r3, r1, r3
 8004632:	f04f 0400 	mov.w	r4, #0
 8004636:	f04f 0500 	mov.w	r5, #0
 800463a:	00dd      	lsls	r5, r3, #3
 800463c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004640:	00d4      	lsls	r4, r2, #3
 8004642:	4622      	mov	r2, r4
 8004644:	462b      	mov	r3, r5
 8004646:	eb12 0a00 	adds.w	sl, r2, r0
 800464a:	eb43 0b01 	adc.w	fp, r3, r1
 800464e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	4618      	mov	r0, r3
 8004654:	f04f 0100 	mov.w	r1, #0
 8004658:	f04f 0200 	mov.w	r2, #0
 800465c:	f04f 0300 	mov.w	r3, #0
 8004660:	008b      	lsls	r3, r1, #2
 8004662:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004666:	0082      	lsls	r2, r0, #2
 8004668:	4650      	mov	r0, sl
 800466a:	4659      	mov	r1, fp
 800466c:	f7fc faa4 	bl	8000bb8 <__aeabi_uldivmod>
 8004670:	4602      	mov	r2, r0
 8004672:	460b      	mov	r3, r1
 8004674:	4b0e      	ldr	r3, [pc, #56]	; (80046b0 <UART_SetConfig+0x38c>)
 8004676:	fba3 1302 	umull	r1, r3, r3, r2
 800467a:	095b      	lsrs	r3, r3, #5
 800467c:	2164      	movs	r1, #100	; 0x64
 800467e:	fb01 f303 	mul.w	r3, r1, r3
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	011b      	lsls	r3, r3, #4
 8004686:	3332      	adds	r3, #50	; 0x32
 8004688:	4a09      	ldr	r2, [pc, #36]	; (80046b0 <UART_SetConfig+0x38c>)
 800468a:	fba2 2303 	umull	r2, r3, r2, r3
 800468e:	095b      	lsrs	r3, r3, #5
 8004690:	f003 020f 	and.w	r2, r3, #15
 8004694:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4432      	add	r2, r6
 800469a:	609a      	str	r2, [r3, #8]
}
 800469c:	bf00      	nop
 800469e:	377c      	adds	r7, #124	; 0x7c
 80046a0:	46bd      	mov	sp, r7
 80046a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046a6:	bf00      	nop
 80046a8:	40011000 	.word	0x40011000
 80046ac:	40011400 	.word	0x40011400
 80046b0:	51eb851f 	.word	0x51eb851f

080046b4 <__NVIC_SetPriority>:
{
 80046b4:	b480      	push	{r7}
 80046b6:	b083      	sub	sp, #12
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	4603      	mov	r3, r0
 80046bc:	6039      	str	r1, [r7, #0]
 80046be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	db0a      	blt.n	80046de <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	b2da      	uxtb	r2, r3
 80046cc:	490c      	ldr	r1, [pc, #48]	; (8004700 <__NVIC_SetPriority+0x4c>)
 80046ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046d2:	0112      	lsls	r2, r2, #4
 80046d4:	b2d2      	uxtb	r2, r2
 80046d6:	440b      	add	r3, r1
 80046d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80046dc:	e00a      	b.n	80046f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	b2da      	uxtb	r2, r3
 80046e2:	4908      	ldr	r1, [pc, #32]	; (8004704 <__NVIC_SetPriority+0x50>)
 80046e4:	79fb      	ldrb	r3, [r7, #7]
 80046e6:	f003 030f 	and.w	r3, r3, #15
 80046ea:	3b04      	subs	r3, #4
 80046ec:	0112      	lsls	r2, r2, #4
 80046ee:	b2d2      	uxtb	r2, r2
 80046f0:	440b      	add	r3, r1
 80046f2:	761a      	strb	r2, [r3, #24]
}
 80046f4:	bf00      	nop
 80046f6:	370c      	adds	r7, #12
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr
 8004700:	e000e100 	.word	0xe000e100
 8004704:	e000ed00 	.word	0xe000ed00

08004708 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004708:	b580      	push	{r7, lr}
 800470a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800470c:	4b05      	ldr	r3, [pc, #20]	; (8004724 <SysTick_Handler+0x1c>)
 800470e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004710:	f002 f93e 	bl	8006990 <xTaskGetSchedulerState>
 8004714:	4603      	mov	r3, r0
 8004716:	2b01      	cmp	r3, #1
 8004718:	d001      	beq.n	800471e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800471a:	f003 f825 	bl	8007768 <xPortSysTickHandler>
  }
}
 800471e:	bf00      	nop
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	e000e010 	.word	0xe000e010

08004728 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004728:	b580      	push	{r7, lr}
 800472a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800472c:	2100      	movs	r1, #0
 800472e:	f06f 0004 	mvn.w	r0, #4
 8004732:	f7ff ffbf 	bl	80046b4 <__NVIC_SetPriority>
#endif
}
 8004736:	bf00      	nop
 8004738:	bd80      	pop	{r7, pc}
	...

0800473c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800473c:	b480      	push	{r7}
 800473e:	b083      	sub	sp, #12
 8004740:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004742:	f3ef 8305 	mrs	r3, IPSR
 8004746:	603b      	str	r3, [r7, #0]
  return(result);
 8004748:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800474a:	2b00      	cmp	r3, #0
 800474c:	d003      	beq.n	8004756 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800474e:	f06f 0305 	mvn.w	r3, #5
 8004752:	607b      	str	r3, [r7, #4]
 8004754:	e00c      	b.n	8004770 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004756:	4b0a      	ldr	r3, [pc, #40]	; (8004780 <osKernelInitialize+0x44>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d105      	bne.n	800476a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800475e:	4b08      	ldr	r3, [pc, #32]	; (8004780 <osKernelInitialize+0x44>)
 8004760:	2201      	movs	r2, #1
 8004762:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004764:	2300      	movs	r3, #0
 8004766:	607b      	str	r3, [r7, #4]
 8004768:	e002      	b.n	8004770 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800476a:	f04f 33ff 	mov.w	r3, #4294967295
 800476e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004770:	687b      	ldr	r3, [r7, #4]
}
 8004772:	4618      	mov	r0, r3
 8004774:	370c      	adds	r7, #12
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop
 8004780:	20000204 	.word	0x20000204

08004784 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004784:	b580      	push	{r7, lr}
 8004786:	b082      	sub	sp, #8
 8004788:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800478a:	f3ef 8305 	mrs	r3, IPSR
 800478e:	603b      	str	r3, [r7, #0]
  return(result);
 8004790:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004792:	2b00      	cmp	r3, #0
 8004794:	d003      	beq.n	800479e <osKernelStart+0x1a>
    stat = osErrorISR;
 8004796:	f06f 0305 	mvn.w	r3, #5
 800479a:	607b      	str	r3, [r7, #4]
 800479c:	e010      	b.n	80047c0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800479e:	4b0b      	ldr	r3, [pc, #44]	; (80047cc <osKernelStart+0x48>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d109      	bne.n	80047ba <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80047a6:	f7ff ffbf 	bl	8004728 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80047aa:	4b08      	ldr	r3, [pc, #32]	; (80047cc <osKernelStart+0x48>)
 80047ac:	2202      	movs	r2, #2
 80047ae:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80047b0:	f001 fca6 	bl	8006100 <vTaskStartScheduler>
      stat = osOK;
 80047b4:	2300      	movs	r3, #0
 80047b6:	607b      	str	r3, [r7, #4]
 80047b8:	e002      	b.n	80047c0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80047ba:	f04f 33ff 	mov.w	r3, #4294967295
 80047be:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80047c0:	687b      	ldr	r3, [r7, #4]
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3708      	adds	r7, #8
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
 80047ca:	bf00      	nop
 80047cc:	20000204 	.word	0x20000204

080047d0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b08e      	sub	sp, #56	; 0x38
 80047d4:	af04      	add	r7, sp, #16
 80047d6:	60f8      	str	r0, [r7, #12]
 80047d8:	60b9      	str	r1, [r7, #8]
 80047da:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80047dc:	2300      	movs	r3, #0
 80047de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80047e0:	f3ef 8305 	mrs	r3, IPSR
 80047e4:	617b      	str	r3, [r7, #20]
  return(result);
 80047e6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d17e      	bne.n	80048ea <osThreadNew+0x11a>
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d07b      	beq.n	80048ea <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80047f2:	2380      	movs	r3, #128	; 0x80
 80047f4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80047f6:	2318      	movs	r3, #24
 80047f8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80047fa:	2300      	movs	r3, #0
 80047fc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80047fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004802:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d045      	beq.n	8004896 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d002      	beq.n	8004818 <osThreadNew+0x48>
        name = attr->name;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	699b      	ldr	r3, [r3, #24]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d002      	beq.n	8004826 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	699b      	ldr	r3, [r3, #24]
 8004824:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004826:	69fb      	ldr	r3, [r7, #28]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d008      	beq.n	800483e <osThreadNew+0x6e>
 800482c:	69fb      	ldr	r3, [r7, #28]
 800482e:	2b38      	cmp	r3, #56	; 0x38
 8004830:	d805      	bhi.n	800483e <osThreadNew+0x6e>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	f003 0301 	and.w	r3, r3, #1
 800483a:	2b00      	cmp	r3, #0
 800483c:	d001      	beq.n	8004842 <osThreadNew+0x72>
        return (NULL);
 800483e:	2300      	movs	r3, #0
 8004840:	e054      	b.n	80048ec <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	695b      	ldr	r3, [r3, #20]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d003      	beq.n	8004852 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	695b      	ldr	r3, [r3, #20]
 800484e:	089b      	lsrs	r3, r3, #2
 8004850:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d00e      	beq.n	8004878 <osThreadNew+0xa8>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	68db      	ldr	r3, [r3, #12]
 800485e:	2b5b      	cmp	r3, #91	; 0x5b
 8004860:	d90a      	bls.n	8004878 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004866:	2b00      	cmp	r3, #0
 8004868:	d006      	beq.n	8004878 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	695b      	ldr	r3, [r3, #20]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d002      	beq.n	8004878 <osThreadNew+0xa8>
        mem = 1;
 8004872:	2301      	movs	r3, #1
 8004874:	61bb      	str	r3, [r7, #24]
 8004876:	e010      	b.n	800489a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d10c      	bne.n	800489a <osThreadNew+0xca>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d108      	bne.n	800489a <osThreadNew+0xca>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	691b      	ldr	r3, [r3, #16]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d104      	bne.n	800489a <osThreadNew+0xca>
          mem = 0;
 8004890:	2300      	movs	r3, #0
 8004892:	61bb      	str	r3, [r7, #24]
 8004894:	e001      	b.n	800489a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004896:	2300      	movs	r3, #0
 8004898:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800489a:	69bb      	ldr	r3, [r7, #24]
 800489c:	2b01      	cmp	r3, #1
 800489e:	d110      	bne.n	80048c2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80048a8:	9202      	str	r2, [sp, #8]
 80048aa:	9301      	str	r3, [sp, #4]
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	9300      	str	r3, [sp, #0]
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	6a3a      	ldr	r2, [r7, #32]
 80048b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80048b6:	68f8      	ldr	r0, [r7, #12]
 80048b8:	f001 fa4c 	bl	8005d54 <xTaskCreateStatic>
 80048bc:	4603      	mov	r3, r0
 80048be:	613b      	str	r3, [r7, #16]
 80048c0:	e013      	b.n	80048ea <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80048c2:	69bb      	ldr	r3, [r7, #24]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d110      	bne.n	80048ea <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80048c8:	6a3b      	ldr	r3, [r7, #32]
 80048ca:	b29a      	uxth	r2, r3
 80048cc:	f107 0310 	add.w	r3, r7, #16
 80048d0:	9301      	str	r3, [sp, #4]
 80048d2:	69fb      	ldr	r3, [r7, #28]
 80048d4:	9300      	str	r3, [sp, #0]
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80048da:	68f8      	ldr	r0, [r7, #12]
 80048dc:	f001 fa97 	bl	8005e0e <xTaskCreate>
 80048e0:	4603      	mov	r3, r0
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d001      	beq.n	80048ea <osThreadNew+0x11a>
            hTask = NULL;
 80048e6:	2300      	movs	r3, #0
 80048e8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80048ea:	693b      	ldr	r3, [r7, #16]
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3728      	adds	r7, #40	; 0x28
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048fc:	f3ef 8305 	mrs	r3, IPSR
 8004900:	60bb      	str	r3, [r7, #8]
  return(result);
 8004902:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004904:	2b00      	cmp	r3, #0
 8004906:	d003      	beq.n	8004910 <osDelay+0x1c>
    stat = osErrorISR;
 8004908:	f06f 0305 	mvn.w	r3, #5
 800490c:	60fb      	str	r3, [r7, #12]
 800490e:	e007      	b.n	8004920 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004910:	2300      	movs	r3, #0
 8004912:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d002      	beq.n	8004920 <osDelay+0x2c>
      vTaskDelay(ticks);
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f001 fbbc 	bl	8006098 <vTaskDelay>
    }
  }

  return (stat);
 8004920:	68fb      	ldr	r3, [r7, #12]
}
 8004922:	4618      	mov	r0, r3
 8004924:	3710      	adds	r7, #16
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}

0800492a <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800492a:	b580      	push	{r7, lr}
 800492c:	b08a      	sub	sp, #40	; 0x28
 800492e:	af02      	add	r7, sp, #8
 8004930:	60f8      	str	r0, [r7, #12]
 8004932:	60b9      	str	r1, [r7, #8]
 8004934:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8004936:	2300      	movs	r3, #0
 8004938:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800493a:	f3ef 8305 	mrs	r3, IPSR
 800493e:	613b      	str	r3, [r7, #16]
  return(result);
 8004940:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8004942:	2b00      	cmp	r3, #0
 8004944:	d175      	bne.n	8004a32 <osSemaphoreNew+0x108>
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d072      	beq.n	8004a32 <osSemaphoreNew+0x108>
 800494c:	68ba      	ldr	r2, [r7, #8]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	429a      	cmp	r2, r3
 8004952:	d86e      	bhi.n	8004a32 <osSemaphoreNew+0x108>
    mem = -1;
 8004954:	f04f 33ff 	mov.w	r3, #4294967295
 8004958:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d015      	beq.n	800498c <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d006      	beq.n	8004976 <osSemaphoreNew+0x4c>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	2b4f      	cmp	r3, #79	; 0x4f
 800496e:	d902      	bls.n	8004976 <osSemaphoreNew+0x4c>
        mem = 1;
 8004970:	2301      	movs	r3, #1
 8004972:	61bb      	str	r3, [r7, #24]
 8004974:	e00c      	b.n	8004990 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d108      	bne.n	8004990 <osSemaphoreNew+0x66>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d104      	bne.n	8004990 <osSemaphoreNew+0x66>
          mem = 0;
 8004986:	2300      	movs	r3, #0
 8004988:	61bb      	str	r3, [r7, #24]
 800498a:	e001      	b.n	8004990 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800498c:	2300      	movs	r3, #0
 800498e:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8004990:	69bb      	ldr	r3, [r7, #24]
 8004992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004996:	d04c      	beq.n	8004a32 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2b01      	cmp	r3, #1
 800499c:	d128      	bne.n	80049f0 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800499e:	69bb      	ldr	r3, [r7, #24]
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d10a      	bne.n	80049ba <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	2203      	movs	r2, #3
 80049aa:	9200      	str	r2, [sp, #0]
 80049ac:	2200      	movs	r2, #0
 80049ae:	2100      	movs	r1, #0
 80049b0:	2001      	movs	r0, #1
 80049b2:	f000 fa79 	bl	8004ea8 <xQueueGenericCreateStatic>
 80049b6:	61f8      	str	r0, [r7, #28]
 80049b8:	e005      	b.n	80049c6 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80049ba:	2203      	movs	r2, #3
 80049bc:	2100      	movs	r1, #0
 80049be:	2001      	movs	r0, #1
 80049c0:	f000 faea 	bl	8004f98 <xQueueGenericCreate>
 80049c4:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d022      	beq.n	8004a12 <osSemaphoreNew+0xe8>
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d01f      	beq.n	8004a12 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80049d2:	2300      	movs	r3, #0
 80049d4:	2200      	movs	r2, #0
 80049d6:	2100      	movs	r1, #0
 80049d8:	69f8      	ldr	r0, [r7, #28]
 80049da:	f000 fba5 	bl	8005128 <xQueueGenericSend>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d016      	beq.n	8004a12 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80049e4:	69f8      	ldr	r0, [r7, #28]
 80049e6:	f000 ffe1 	bl	80059ac <vQueueDelete>
            hSemaphore = NULL;
 80049ea:	2300      	movs	r3, #0
 80049ec:	61fb      	str	r3, [r7, #28]
 80049ee:	e010      	b.n	8004a12 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80049f0:	69bb      	ldr	r3, [r7, #24]
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d108      	bne.n	8004a08 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	461a      	mov	r2, r3
 80049fc:	68b9      	ldr	r1, [r7, #8]
 80049fe:	68f8      	ldr	r0, [r7, #12]
 8004a00:	f000 fb27 	bl	8005052 <xQueueCreateCountingSemaphoreStatic>
 8004a04:	61f8      	str	r0, [r7, #28]
 8004a06:	e004      	b.n	8004a12 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8004a08:	68b9      	ldr	r1, [r7, #8]
 8004a0a:	68f8      	ldr	r0, [r7, #12]
 8004a0c:	f000 fb58 	bl	80050c0 <xQueueCreateCountingSemaphore>
 8004a10:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8004a12:	69fb      	ldr	r3, [r7, #28]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d00c      	beq.n	8004a32 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d003      	beq.n	8004a26 <osSemaphoreNew+0xfc>
          name = attr->name;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	617b      	str	r3, [r7, #20]
 8004a24:	e001      	b.n	8004a2a <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8004a26:	2300      	movs	r3, #0
 8004a28:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8004a2a:	6979      	ldr	r1, [r7, #20]
 8004a2c:	69f8      	ldr	r0, [r7, #28]
 8004a2e:	f001 f909 	bl	8005c44 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8004a32:	69fb      	ldr	r3, [r7, #28]
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3720      	adds	r7, #32
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}

08004a3c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b086      	sub	sp, #24
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d103      	bne.n	8004a5c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8004a54:	f06f 0303 	mvn.w	r3, #3
 8004a58:	617b      	str	r3, [r7, #20]
 8004a5a:	e039      	b.n	8004ad0 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a5c:	f3ef 8305 	mrs	r3, IPSR
 8004a60:	60fb      	str	r3, [r7, #12]
  return(result);
 8004a62:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d022      	beq.n	8004aae <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d003      	beq.n	8004a76 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8004a6e:	f06f 0303 	mvn.w	r3, #3
 8004a72:	617b      	str	r3, [r7, #20]
 8004a74:	e02c      	b.n	8004ad0 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8004a76:	2300      	movs	r3, #0
 8004a78:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8004a7a:	f107 0308 	add.w	r3, r7, #8
 8004a7e:	461a      	mov	r2, r3
 8004a80:	2100      	movs	r1, #0
 8004a82:	6938      	ldr	r0, [r7, #16]
 8004a84:	f000 fed6 	bl	8005834 <xQueueReceiveFromISR>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d003      	beq.n	8004a96 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8004a8e:	f06f 0302 	mvn.w	r3, #2
 8004a92:	617b      	str	r3, [r7, #20]
 8004a94:	e01c      	b.n	8004ad0 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d019      	beq.n	8004ad0 <osSemaphoreAcquire+0x94>
 8004a9c:	4b0f      	ldr	r3, [pc, #60]	; (8004adc <osSemaphoreAcquire+0xa0>)
 8004a9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004aa2:	601a      	str	r2, [r3, #0]
 8004aa4:	f3bf 8f4f 	dsb	sy
 8004aa8:	f3bf 8f6f 	isb	sy
 8004aac:	e010      	b.n	8004ad0 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8004aae:	6839      	ldr	r1, [r7, #0]
 8004ab0:	6938      	ldr	r0, [r7, #16]
 8004ab2:	f000 fdb3 	bl	800561c <xQueueSemaphoreTake>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d009      	beq.n	8004ad0 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d003      	beq.n	8004aca <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8004ac2:	f06f 0301 	mvn.w	r3, #1
 8004ac6:	617b      	str	r3, [r7, #20]
 8004ac8:	e002      	b.n	8004ad0 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8004aca:	f06f 0302 	mvn.w	r3, #2
 8004ace:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8004ad0:	697b      	ldr	r3, [r7, #20]
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3718      	adds	r7, #24
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}
 8004ada:	bf00      	nop
 8004adc:	e000ed04 	.word	0xe000ed04

08004ae0 <osSemaphoreGetCount>:
  }

  return (stat);
}

uint32_t osSemaphoreGetCount (osSemaphoreId_t semaphore_id) {
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b086      	sub	sp, #24
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	613b      	str	r3, [r7, #16]
  uint32_t count;

  if (hSemaphore == NULL) {
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d102      	bne.n	8004af8 <osSemaphoreGetCount+0x18>
    count = 0U;
 8004af2:	2300      	movs	r3, #0
 8004af4:	617b      	str	r3, [r7, #20]
 8004af6:	e00e      	b.n	8004b16 <osSemaphoreGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004af8:	f3ef 8305 	mrs	r3, IPSR
 8004afc:	60fb      	str	r3, [r7, #12]
  return(result);
 8004afe:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d004      	beq.n	8004b0e <osSemaphoreGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hSemaphore);
 8004b04:	6938      	ldr	r0, [r7, #16]
 8004b06:	f000 ff33 	bl	8005970 <uxQueueMessagesWaitingFromISR>
 8004b0a:	6178      	str	r0, [r7, #20]
 8004b0c:	e003      	b.n	8004b16 <osSemaphoreGetCount+0x36>
  } else {
    count = (uint32_t)uxSemaphoreGetCount (hSemaphore);
 8004b0e:	6938      	ldr	r0, [r7, #16]
 8004b10:	f000 ff10 	bl	8005934 <uxQueueMessagesWaiting>
 8004b14:	6178      	str	r0, [r7, #20]
  }

  return (count);
 8004b16:	697b      	ldr	r3, [r7, #20]
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3718      	adds	r7, #24
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}

08004b20 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b08a      	sub	sp, #40	; 0x28
 8004b24:	af02      	add	r7, sp, #8
 8004b26:	60f8      	str	r0, [r7, #12]
 8004b28:	60b9      	str	r1, [r7, #8]
 8004b2a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b30:	f3ef 8305 	mrs	r3, IPSR
 8004b34:	613b      	str	r3, [r7, #16]
  return(result);
 8004b36:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d15f      	bne.n	8004bfc <osMessageQueueNew+0xdc>
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d05c      	beq.n	8004bfc <osMessageQueueNew+0xdc>
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d059      	beq.n	8004bfc <osMessageQueueNew+0xdc>
    mem = -1;
 8004b48:	f04f 33ff 	mov.w	r3, #4294967295
 8004b4c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d029      	beq.n	8004ba8 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d012      	beq.n	8004b82 <osMessageQueueNew+0x62>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	2b4f      	cmp	r3, #79	; 0x4f
 8004b62:	d90e      	bls.n	8004b82 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d00a      	beq.n	8004b82 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	695a      	ldr	r2, [r3, #20]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	68b9      	ldr	r1, [r7, #8]
 8004b74:	fb01 f303 	mul.w	r3, r1, r3
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d302      	bcc.n	8004b82 <osMessageQueueNew+0x62>
        mem = 1;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	61bb      	str	r3, [r7, #24]
 8004b80:	e014      	b.n	8004bac <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d110      	bne.n	8004bac <osMessageQueueNew+0x8c>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d10c      	bne.n	8004bac <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d108      	bne.n	8004bac <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	695b      	ldr	r3, [r3, #20]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d104      	bne.n	8004bac <osMessageQueueNew+0x8c>
          mem = 0;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	61bb      	str	r3, [r7, #24]
 8004ba6:	e001      	b.n	8004bac <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004bac:	69bb      	ldr	r3, [r7, #24]
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d10b      	bne.n	8004bca <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	691a      	ldr	r2, [r3, #16]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	2100      	movs	r1, #0
 8004bbc:	9100      	str	r1, [sp, #0]
 8004bbe:	68b9      	ldr	r1, [r7, #8]
 8004bc0:	68f8      	ldr	r0, [r7, #12]
 8004bc2:	f000 f971 	bl	8004ea8 <xQueueGenericCreateStatic>
 8004bc6:	61f8      	str	r0, [r7, #28]
 8004bc8:	e008      	b.n	8004bdc <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8004bca:	69bb      	ldr	r3, [r7, #24]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d105      	bne.n	8004bdc <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	68b9      	ldr	r1, [r7, #8]
 8004bd4:	68f8      	ldr	r0, [r7, #12]
 8004bd6:	f000 f9df 	bl	8004f98 <xQueueGenericCreate>
 8004bda:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8004bdc:	69fb      	ldr	r3, [r7, #28]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d00c      	beq.n	8004bfc <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d003      	beq.n	8004bf0 <osMessageQueueNew+0xd0>
        name = attr->name;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	617b      	str	r3, [r7, #20]
 8004bee:	e001      	b.n	8004bf4 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8004bf4:	6979      	ldr	r1, [r7, #20]
 8004bf6:	69f8      	ldr	r0, [r7, #28]
 8004bf8:	f001 f824 	bl	8005c44 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8004bfc:	69fb      	ldr	r3, [r7, #28]
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3720      	adds	r7, #32
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
	...

08004c08 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004c08:	b480      	push	{r7}
 8004c0a:	b085      	sub	sp, #20
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	60f8      	str	r0, [r7, #12]
 8004c10:	60b9      	str	r1, [r7, #8]
 8004c12:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	4a07      	ldr	r2, [pc, #28]	; (8004c34 <vApplicationGetIdleTaskMemory+0x2c>)
 8004c18:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	4a06      	ldr	r2, [pc, #24]	; (8004c38 <vApplicationGetIdleTaskMemory+0x30>)
 8004c1e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2280      	movs	r2, #128	; 0x80
 8004c24:	601a      	str	r2, [r3, #0]
}
 8004c26:	bf00      	nop
 8004c28:	3714      	adds	r7, #20
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr
 8004c32:	bf00      	nop
 8004c34:	20000208 	.word	0x20000208
 8004c38:	20000264 	.word	0x20000264

08004c3c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004c3c:	b480      	push	{r7}
 8004c3e:	b085      	sub	sp, #20
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	60f8      	str	r0, [r7, #12]
 8004c44:	60b9      	str	r1, [r7, #8]
 8004c46:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	4a07      	ldr	r2, [pc, #28]	; (8004c68 <vApplicationGetTimerTaskMemory+0x2c>)
 8004c4c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	4a06      	ldr	r2, [pc, #24]	; (8004c6c <vApplicationGetTimerTaskMemory+0x30>)
 8004c52:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004c5a:	601a      	str	r2, [r3, #0]
}
 8004c5c:	bf00      	nop
 8004c5e:	3714      	adds	r7, #20
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr
 8004c68:	20000464 	.word	0x20000464
 8004c6c:	200004c0 	.word	0x200004c0

08004c70 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004c70:	b480      	push	{r7}
 8004c72:	b083      	sub	sp, #12
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f103 0208 	add.w	r2, r3, #8
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f04f 32ff 	mov.w	r2, #4294967295
 8004c88:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f103 0208 	add.w	r2, r3, #8
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f103 0208 	add.w	r2, r3, #8
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004ca4:	bf00      	nop
 8004ca6:	370c      	adds	r7, #12
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr

08004cb0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b083      	sub	sp, #12
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004cbe:	bf00      	nop
 8004cc0:	370c      	adds	r7, #12
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr

08004cca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004cca:	b480      	push	{r7}
 8004ccc:	b085      	sub	sp, #20
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
 8004cd2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	68fa      	ldr	r2, [r7, #12]
 8004cde:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	689a      	ldr	r2, [r3, #8]
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	683a      	ldr	r2, [r7, #0]
 8004cee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	683a      	ldr	r2, [r7, #0]
 8004cf4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	1c5a      	adds	r2, r3, #1
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	601a      	str	r2, [r3, #0]
}
 8004d06:	bf00      	nop
 8004d08:	3714      	adds	r7, #20
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr

08004d12 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004d12:	b480      	push	{r7}
 8004d14:	b085      	sub	sp, #20
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	6078      	str	r0, [r7, #4]
 8004d1a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d28:	d103      	bne.n	8004d32 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	60fb      	str	r3, [r7, #12]
 8004d30:	e00c      	b.n	8004d4c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	3308      	adds	r3, #8
 8004d36:	60fb      	str	r3, [r7, #12]
 8004d38:	e002      	b.n	8004d40 <vListInsert+0x2e>
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	60fb      	str	r3, [r7, #12]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	68ba      	ldr	r2, [r7, #8]
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d2f6      	bcs.n	8004d3a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	685a      	ldr	r2, [r3, #4]
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	683a      	ldr	r2, [r7, #0]
 8004d5a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	68fa      	ldr	r2, [r7, #12]
 8004d60:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	683a      	ldr	r2, [r7, #0]
 8004d66:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	1c5a      	adds	r2, r3, #1
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	601a      	str	r2, [r3, #0]
}
 8004d78:	bf00      	nop
 8004d7a:	3714      	adds	r7, #20
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr

08004d84 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004d84:	b480      	push	{r7}
 8004d86:	b085      	sub	sp, #20
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	691b      	ldr	r3, [r3, #16]
 8004d90:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	6892      	ldr	r2, [r2, #8]
 8004d9a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	6852      	ldr	r2, [r2, #4]
 8004da4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d103      	bne.n	8004db8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	689a      	ldr	r2, [r3, #8]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	1e5a      	subs	r2, r3, #1
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3714      	adds	r7, #20
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d10a      	bne.n	8004e02 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df0:	f383 8811 	msr	BASEPRI, r3
 8004df4:	f3bf 8f6f 	isb	sy
 8004df8:	f3bf 8f4f 	dsb	sy
 8004dfc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004dfe:	bf00      	nop
 8004e00:	e7fe      	b.n	8004e00 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004e02:	f002 fc1f 	bl	8007644 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e0e:	68f9      	ldr	r1, [r7, #12]
 8004e10:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004e12:	fb01 f303 	mul.w	r3, r1, r3
 8004e16:	441a      	add	r2, r3
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e32:	3b01      	subs	r3, #1
 8004e34:	68f9      	ldr	r1, [r7, #12]
 8004e36:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004e38:	fb01 f303 	mul.w	r3, r1, r3
 8004e3c:	441a      	add	r2, r3
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	22ff      	movs	r2, #255	; 0xff
 8004e46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	22ff      	movs	r2, #255	; 0xff
 8004e4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d114      	bne.n	8004e82 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	691b      	ldr	r3, [r3, #16]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d01a      	beq.n	8004e96 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	3310      	adds	r3, #16
 8004e64:	4618      	mov	r0, r3
 8004e66:	f001 fbd5 	bl	8006614 <xTaskRemoveFromEventList>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d012      	beq.n	8004e96 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004e70:	4b0c      	ldr	r3, [pc, #48]	; (8004ea4 <xQueueGenericReset+0xcc>)
 8004e72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e76:	601a      	str	r2, [r3, #0]
 8004e78:	f3bf 8f4f 	dsb	sy
 8004e7c:	f3bf 8f6f 	isb	sy
 8004e80:	e009      	b.n	8004e96 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	3310      	adds	r3, #16
 8004e86:	4618      	mov	r0, r3
 8004e88:	f7ff fef2 	bl	8004c70 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	3324      	adds	r3, #36	; 0x24
 8004e90:	4618      	mov	r0, r3
 8004e92:	f7ff feed 	bl	8004c70 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004e96:	f002 fc05 	bl	80076a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004e9a:	2301      	movs	r3, #1
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3710      	adds	r7, #16
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}
 8004ea4:	e000ed04 	.word	0xe000ed04

08004ea8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b08e      	sub	sp, #56	; 0x38
 8004eac:	af02      	add	r7, sp, #8
 8004eae:	60f8      	str	r0, [r7, #12]
 8004eb0:	60b9      	str	r1, [r7, #8]
 8004eb2:	607a      	str	r2, [r7, #4]
 8004eb4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d10a      	bne.n	8004ed2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec0:	f383 8811 	msr	BASEPRI, r3
 8004ec4:	f3bf 8f6f 	isb	sy
 8004ec8:	f3bf 8f4f 	dsb	sy
 8004ecc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004ece:	bf00      	nop
 8004ed0:	e7fe      	b.n	8004ed0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d10a      	bne.n	8004eee <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004edc:	f383 8811 	msr	BASEPRI, r3
 8004ee0:	f3bf 8f6f 	isb	sy
 8004ee4:	f3bf 8f4f 	dsb	sy
 8004ee8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004eea:	bf00      	nop
 8004eec:	e7fe      	b.n	8004eec <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d002      	beq.n	8004efa <xQueueGenericCreateStatic+0x52>
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d001      	beq.n	8004efe <xQueueGenericCreateStatic+0x56>
 8004efa:	2301      	movs	r3, #1
 8004efc:	e000      	b.n	8004f00 <xQueueGenericCreateStatic+0x58>
 8004efe:	2300      	movs	r3, #0
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d10a      	bne.n	8004f1a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f08:	f383 8811 	msr	BASEPRI, r3
 8004f0c:	f3bf 8f6f 	isb	sy
 8004f10:	f3bf 8f4f 	dsb	sy
 8004f14:	623b      	str	r3, [r7, #32]
}
 8004f16:	bf00      	nop
 8004f18:	e7fe      	b.n	8004f18 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d102      	bne.n	8004f26 <xQueueGenericCreateStatic+0x7e>
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d101      	bne.n	8004f2a <xQueueGenericCreateStatic+0x82>
 8004f26:	2301      	movs	r3, #1
 8004f28:	e000      	b.n	8004f2c <xQueueGenericCreateStatic+0x84>
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d10a      	bne.n	8004f46 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f34:	f383 8811 	msr	BASEPRI, r3
 8004f38:	f3bf 8f6f 	isb	sy
 8004f3c:	f3bf 8f4f 	dsb	sy
 8004f40:	61fb      	str	r3, [r7, #28]
}
 8004f42:	bf00      	nop
 8004f44:	e7fe      	b.n	8004f44 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004f46:	2350      	movs	r3, #80	; 0x50
 8004f48:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	2b50      	cmp	r3, #80	; 0x50
 8004f4e:	d00a      	beq.n	8004f66 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f54:	f383 8811 	msr	BASEPRI, r3
 8004f58:	f3bf 8f6f 	isb	sy
 8004f5c:	f3bf 8f4f 	dsb	sy
 8004f60:	61bb      	str	r3, [r7, #24]
}
 8004f62:	bf00      	nop
 8004f64:	e7fe      	b.n	8004f64 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004f66:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d00d      	beq.n	8004f8e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f74:	2201      	movs	r2, #1
 8004f76:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004f7a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f80:	9300      	str	r3, [sp, #0]
 8004f82:	4613      	mov	r3, r2
 8004f84:	687a      	ldr	r2, [r7, #4]
 8004f86:	68b9      	ldr	r1, [r7, #8]
 8004f88:	68f8      	ldr	r0, [r7, #12]
 8004f8a:	f000 f83f 	bl	800500c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3730      	adds	r7, #48	; 0x30
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}

08004f98 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b08a      	sub	sp, #40	; 0x28
 8004f9c:	af02      	add	r7, sp, #8
 8004f9e:	60f8      	str	r0, [r7, #12]
 8004fa0:	60b9      	str	r1, [r7, #8]
 8004fa2:	4613      	mov	r3, r2
 8004fa4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d10a      	bne.n	8004fc2 <xQueueGenericCreate+0x2a>
	__asm volatile
 8004fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb0:	f383 8811 	msr	BASEPRI, r3
 8004fb4:	f3bf 8f6f 	isb	sy
 8004fb8:	f3bf 8f4f 	dsb	sy
 8004fbc:	613b      	str	r3, [r7, #16]
}
 8004fbe:	bf00      	nop
 8004fc0:	e7fe      	b.n	8004fc0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	68ba      	ldr	r2, [r7, #8]
 8004fc6:	fb02 f303 	mul.w	r3, r2, r3
 8004fca:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	3350      	adds	r3, #80	; 0x50
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f002 fc59 	bl	8007888 <pvPortMalloc>
 8004fd6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004fd8:	69bb      	ldr	r3, [r7, #24]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d011      	beq.n	8005002 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	3350      	adds	r3, #80	; 0x50
 8004fe6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004fe8:	69bb      	ldr	r3, [r7, #24]
 8004fea:	2200      	movs	r2, #0
 8004fec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004ff0:	79fa      	ldrb	r2, [r7, #7]
 8004ff2:	69bb      	ldr	r3, [r7, #24]
 8004ff4:	9300      	str	r3, [sp, #0]
 8004ff6:	4613      	mov	r3, r2
 8004ff8:	697a      	ldr	r2, [r7, #20]
 8004ffa:	68b9      	ldr	r1, [r7, #8]
 8004ffc:	68f8      	ldr	r0, [r7, #12]
 8004ffe:	f000 f805 	bl	800500c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005002:	69bb      	ldr	r3, [r7, #24]
	}
 8005004:	4618      	mov	r0, r3
 8005006:	3720      	adds	r7, #32
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}

0800500c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b084      	sub	sp, #16
 8005010:	af00      	add	r7, sp, #0
 8005012:	60f8      	str	r0, [r7, #12]
 8005014:	60b9      	str	r1, [r7, #8]
 8005016:	607a      	str	r2, [r7, #4]
 8005018:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d103      	bne.n	8005028 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	69ba      	ldr	r2, [r7, #24]
 8005024:	601a      	str	r2, [r3, #0]
 8005026:	e002      	b.n	800502e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005028:	69bb      	ldr	r3, [r7, #24]
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800502e:	69bb      	ldr	r3, [r7, #24]
 8005030:	68fa      	ldr	r2, [r7, #12]
 8005032:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005034:	69bb      	ldr	r3, [r7, #24]
 8005036:	68ba      	ldr	r2, [r7, #8]
 8005038:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800503a:	2101      	movs	r1, #1
 800503c:	69b8      	ldr	r0, [r7, #24]
 800503e:	f7ff fecb 	bl	8004dd8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005042:	69bb      	ldr	r3, [r7, #24]
 8005044:	78fa      	ldrb	r2, [r7, #3]
 8005046:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800504a:	bf00      	nop
 800504c:	3710      	adds	r7, #16
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}

08005052 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8005052:	b580      	push	{r7, lr}
 8005054:	b08a      	sub	sp, #40	; 0x28
 8005056:	af02      	add	r7, sp, #8
 8005058:	60f8      	str	r0, [r7, #12]
 800505a:	60b9      	str	r1, [r7, #8]
 800505c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d10a      	bne.n	800507a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8005064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005068:	f383 8811 	msr	BASEPRI, r3
 800506c:	f3bf 8f6f 	isb	sy
 8005070:	f3bf 8f4f 	dsb	sy
 8005074:	61bb      	str	r3, [r7, #24]
}
 8005076:	bf00      	nop
 8005078:	e7fe      	b.n	8005078 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800507a:	68ba      	ldr	r2, [r7, #8]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	429a      	cmp	r2, r3
 8005080:	d90a      	bls.n	8005098 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8005082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005086:	f383 8811 	msr	BASEPRI, r3
 800508a:	f3bf 8f6f 	isb	sy
 800508e:	f3bf 8f4f 	dsb	sy
 8005092:	617b      	str	r3, [r7, #20]
}
 8005094:	bf00      	nop
 8005096:	e7fe      	b.n	8005096 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005098:	2302      	movs	r3, #2
 800509a:	9300      	str	r3, [sp, #0]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2200      	movs	r2, #0
 80050a0:	2100      	movs	r1, #0
 80050a2:	68f8      	ldr	r0, [r7, #12]
 80050a4:	f7ff ff00 	bl	8004ea8 <xQueueGenericCreateStatic>
 80050a8:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80050aa:	69fb      	ldr	r3, [r7, #28]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d002      	beq.n	80050b6 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	68ba      	ldr	r2, [r7, #8]
 80050b4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80050b6:	69fb      	ldr	r3, [r7, #28]
	}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3720      	adds	r7, #32
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}

080050c0 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b086      	sub	sp, #24
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d10a      	bne.n	80050e6 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80050d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050d4:	f383 8811 	msr	BASEPRI, r3
 80050d8:	f3bf 8f6f 	isb	sy
 80050dc:	f3bf 8f4f 	dsb	sy
 80050e0:	613b      	str	r3, [r7, #16]
}
 80050e2:	bf00      	nop
 80050e4:	e7fe      	b.n	80050e4 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80050e6:	683a      	ldr	r2, [r7, #0]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d90a      	bls.n	8005104 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80050ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f2:	f383 8811 	msr	BASEPRI, r3
 80050f6:	f3bf 8f6f 	isb	sy
 80050fa:	f3bf 8f4f 	dsb	sy
 80050fe:	60fb      	str	r3, [r7, #12]
}
 8005100:	bf00      	nop
 8005102:	e7fe      	b.n	8005102 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005104:	2202      	movs	r2, #2
 8005106:	2100      	movs	r1, #0
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f7ff ff45 	bl	8004f98 <xQueueGenericCreate>
 800510e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d002      	beq.n	800511c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	683a      	ldr	r2, [r7, #0]
 800511a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800511c:	697b      	ldr	r3, [r7, #20]
	}
 800511e:	4618      	mov	r0, r3
 8005120:	3718      	adds	r7, #24
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
	...

08005128 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b08e      	sub	sp, #56	; 0x38
 800512c:	af00      	add	r7, sp, #0
 800512e:	60f8      	str	r0, [r7, #12]
 8005130:	60b9      	str	r1, [r7, #8]
 8005132:	607a      	str	r2, [r7, #4]
 8005134:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005136:	2300      	movs	r3, #0
 8005138:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800513e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005140:	2b00      	cmp	r3, #0
 8005142:	d10a      	bne.n	800515a <xQueueGenericSend+0x32>
	__asm volatile
 8005144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005148:	f383 8811 	msr	BASEPRI, r3
 800514c:	f3bf 8f6f 	isb	sy
 8005150:	f3bf 8f4f 	dsb	sy
 8005154:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005156:	bf00      	nop
 8005158:	e7fe      	b.n	8005158 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d103      	bne.n	8005168 <xQueueGenericSend+0x40>
 8005160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005164:	2b00      	cmp	r3, #0
 8005166:	d101      	bne.n	800516c <xQueueGenericSend+0x44>
 8005168:	2301      	movs	r3, #1
 800516a:	e000      	b.n	800516e <xQueueGenericSend+0x46>
 800516c:	2300      	movs	r3, #0
 800516e:	2b00      	cmp	r3, #0
 8005170:	d10a      	bne.n	8005188 <xQueueGenericSend+0x60>
	__asm volatile
 8005172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005176:	f383 8811 	msr	BASEPRI, r3
 800517a:	f3bf 8f6f 	isb	sy
 800517e:	f3bf 8f4f 	dsb	sy
 8005182:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005184:	bf00      	nop
 8005186:	e7fe      	b.n	8005186 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	2b02      	cmp	r3, #2
 800518c:	d103      	bne.n	8005196 <xQueueGenericSend+0x6e>
 800518e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005192:	2b01      	cmp	r3, #1
 8005194:	d101      	bne.n	800519a <xQueueGenericSend+0x72>
 8005196:	2301      	movs	r3, #1
 8005198:	e000      	b.n	800519c <xQueueGenericSend+0x74>
 800519a:	2300      	movs	r3, #0
 800519c:	2b00      	cmp	r3, #0
 800519e:	d10a      	bne.n	80051b6 <xQueueGenericSend+0x8e>
	__asm volatile
 80051a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a4:	f383 8811 	msr	BASEPRI, r3
 80051a8:	f3bf 8f6f 	isb	sy
 80051ac:	f3bf 8f4f 	dsb	sy
 80051b0:	623b      	str	r3, [r7, #32]
}
 80051b2:	bf00      	nop
 80051b4:	e7fe      	b.n	80051b4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80051b6:	f001 fbeb 	bl	8006990 <xTaskGetSchedulerState>
 80051ba:	4603      	mov	r3, r0
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d102      	bne.n	80051c6 <xQueueGenericSend+0x9e>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d101      	bne.n	80051ca <xQueueGenericSend+0xa2>
 80051c6:	2301      	movs	r3, #1
 80051c8:	e000      	b.n	80051cc <xQueueGenericSend+0xa4>
 80051ca:	2300      	movs	r3, #0
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d10a      	bne.n	80051e6 <xQueueGenericSend+0xbe>
	__asm volatile
 80051d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d4:	f383 8811 	msr	BASEPRI, r3
 80051d8:	f3bf 8f6f 	isb	sy
 80051dc:	f3bf 8f4f 	dsb	sy
 80051e0:	61fb      	str	r3, [r7, #28]
}
 80051e2:	bf00      	nop
 80051e4:	e7fe      	b.n	80051e4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80051e6:	f002 fa2d 	bl	8007644 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80051ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d302      	bcc.n	80051fc <xQueueGenericSend+0xd4>
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	2b02      	cmp	r3, #2
 80051fa:	d129      	bne.n	8005250 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80051fc:	683a      	ldr	r2, [r7, #0]
 80051fe:	68b9      	ldr	r1, [r7, #8]
 8005200:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005202:	f000 fc0e 	bl	8005a22 <prvCopyDataToQueue>
 8005206:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800520a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520c:	2b00      	cmp	r3, #0
 800520e:	d010      	beq.n	8005232 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005212:	3324      	adds	r3, #36	; 0x24
 8005214:	4618      	mov	r0, r3
 8005216:	f001 f9fd 	bl	8006614 <xTaskRemoveFromEventList>
 800521a:	4603      	mov	r3, r0
 800521c:	2b00      	cmp	r3, #0
 800521e:	d013      	beq.n	8005248 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005220:	4b3f      	ldr	r3, [pc, #252]	; (8005320 <xQueueGenericSend+0x1f8>)
 8005222:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005226:	601a      	str	r2, [r3, #0]
 8005228:	f3bf 8f4f 	dsb	sy
 800522c:	f3bf 8f6f 	isb	sy
 8005230:	e00a      	b.n	8005248 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005234:	2b00      	cmp	r3, #0
 8005236:	d007      	beq.n	8005248 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005238:	4b39      	ldr	r3, [pc, #228]	; (8005320 <xQueueGenericSend+0x1f8>)
 800523a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800523e:	601a      	str	r2, [r3, #0]
 8005240:	f3bf 8f4f 	dsb	sy
 8005244:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005248:	f002 fa2c 	bl	80076a4 <vPortExitCritical>
				return pdPASS;
 800524c:	2301      	movs	r3, #1
 800524e:	e063      	b.n	8005318 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d103      	bne.n	800525e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005256:	f002 fa25 	bl	80076a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800525a:	2300      	movs	r3, #0
 800525c:	e05c      	b.n	8005318 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800525e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005260:	2b00      	cmp	r3, #0
 8005262:	d106      	bne.n	8005272 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005264:	f107 0314 	add.w	r3, r7, #20
 8005268:	4618      	mov	r0, r3
 800526a:	f001 fa37 	bl	80066dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800526e:	2301      	movs	r3, #1
 8005270:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005272:	f002 fa17 	bl	80076a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005276:	f000 ffa9 	bl	80061cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800527a:	f002 f9e3 	bl	8007644 <vPortEnterCritical>
 800527e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005280:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005284:	b25b      	sxtb	r3, r3
 8005286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800528a:	d103      	bne.n	8005294 <xQueueGenericSend+0x16c>
 800528c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800528e:	2200      	movs	r2, #0
 8005290:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005296:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800529a:	b25b      	sxtb	r3, r3
 800529c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052a0:	d103      	bne.n	80052aa <xQueueGenericSend+0x182>
 80052a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a4:	2200      	movs	r2, #0
 80052a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80052aa:	f002 f9fb 	bl	80076a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80052ae:	1d3a      	adds	r2, r7, #4
 80052b0:	f107 0314 	add.w	r3, r7, #20
 80052b4:	4611      	mov	r1, r2
 80052b6:	4618      	mov	r0, r3
 80052b8:	f001 fa26 	bl	8006708 <xTaskCheckForTimeOut>
 80052bc:	4603      	mov	r3, r0
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d124      	bne.n	800530c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80052c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80052c4:	f000 fca5 	bl	8005c12 <prvIsQueueFull>
 80052c8:	4603      	mov	r3, r0
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d018      	beq.n	8005300 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80052ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d0:	3310      	adds	r3, #16
 80052d2:	687a      	ldr	r2, [r7, #4]
 80052d4:	4611      	mov	r1, r2
 80052d6:	4618      	mov	r0, r3
 80052d8:	f001 f94c 	bl	8006574 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80052dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80052de:	f000 fc30 	bl	8005b42 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80052e2:	f000 ff81 	bl	80061e8 <xTaskResumeAll>
 80052e6:	4603      	mov	r3, r0
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	f47f af7c 	bne.w	80051e6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80052ee:	4b0c      	ldr	r3, [pc, #48]	; (8005320 <xQueueGenericSend+0x1f8>)
 80052f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052f4:	601a      	str	r2, [r3, #0]
 80052f6:	f3bf 8f4f 	dsb	sy
 80052fa:	f3bf 8f6f 	isb	sy
 80052fe:	e772      	b.n	80051e6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005300:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005302:	f000 fc1e 	bl	8005b42 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005306:	f000 ff6f 	bl	80061e8 <xTaskResumeAll>
 800530a:	e76c      	b.n	80051e6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800530c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800530e:	f000 fc18 	bl	8005b42 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005312:	f000 ff69 	bl	80061e8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005316:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005318:	4618      	mov	r0, r3
 800531a:	3738      	adds	r7, #56	; 0x38
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}
 8005320:	e000ed04 	.word	0xe000ed04

08005324 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b090      	sub	sp, #64	; 0x40
 8005328:	af00      	add	r7, sp, #0
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	60b9      	str	r1, [r7, #8]
 800532e:	607a      	str	r2, [r7, #4]
 8005330:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005338:	2b00      	cmp	r3, #0
 800533a:	d10a      	bne.n	8005352 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800533c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005340:	f383 8811 	msr	BASEPRI, r3
 8005344:	f3bf 8f6f 	isb	sy
 8005348:	f3bf 8f4f 	dsb	sy
 800534c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800534e:	bf00      	nop
 8005350:	e7fe      	b.n	8005350 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d103      	bne.n	8005360 <xQueueGenericSendFromISR+0x3c>
 8005358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800535a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800535c:	2b00      	cmp	r3, #0
 800535e:	d101      	bne.n	8005364 <xQueueGenericSendFromISR+0x40>
 8005360:	2301      	movs	r3, #1
 8005362:	e000      	b.n	8005366 <xQueueGenericSendFromISR+0x42>
 8005364:	2300      	movs	r3, #0
 8005366:	2b00      	cmp	r3, #0
 8005368:	d10a      	bne.n	8005380 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800536a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800536e:	f383 8811 	msr	BASEPRI, r3
 8005372:	f3bf 8f6f 	isb	sy
 8005376:	f3bf 8f4f 	dsb	sy
 800537a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800537c:	bf00      	nop
 800537e:	e7fe      	b.n	800537e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	2b02      	cmp	r3, #2
 8005384:	d103      	bne.n	800538e <xQueueGenericSendFromISR+0x6a>
 8005386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800538a:	2b01      	cmp	r3, #1
 800538c:	d101      	bne.n	8005392 <xQueueGenericSendFromISR+0x6e>
 800538e:	2301      	movs	r3, #1
 8005390:	e000      	b.n	8005394 <xQueueGenericSendFromISR+0x70>
 8005392:	2300      	movs	r3, #0
 8005394:	2b00      	cmp	r3, #0
 8005396:	d10a      	bne.n	80053ae <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800539c:	f383 8811 	msr	BASEPRI, r3
 80053a0:	f3bf 8f6f 	isb	sy
 80053a4:	f3bf 8f4f 	dsb	sy
 80053a8:	623b      	str	r3, [r7, #32]
}
 80053aa:	bf00      	nop
 80053ac:	e7fe      	b.n	80053ac <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80053ae:	f002 fa2b 	bl	8007808 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80053b2:	f3ef 8211 	mrs	r2, BASEPRI
 80053b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ba:	f383 8811 	msr	BASEPRI, r3
 80053be:	f3bf 8f6f 	isb	sy
 80053c2:	f3bf 8f4f 	dsb	sy
 80053c6:	61fa      	str	r2, [r7, #28]
 80053c8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80053ca:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80053cc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80053ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d302      	bcc.n	80053e0 <xQueueGenericSendFromISR+0xbc>
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	2b02      	cmp	r3, #2
 80053de:	d12f      	bne.n	8005440 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80053e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80053e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80053ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ee:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80053f0:	683a      	ldr	r2, [r7, #0]
 80053f2:	68b9      	ldr	r1, [r7, #8]
 80053f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80053f6:	f000 fb14 	bl	8005a22 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80053fa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80053fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005402:	d112      	bne.n	800542a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005408:	2b00      	cmp	r3, #0
 800540a:	d016      	beq.n	800543a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800540c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800540e:	3324      	adds	r3, #36	; 0x24
 8005410:	4618      	mov	r0, r3
 8005412:	f001 f8ff 	bl	8006614 <xTaskRemoveFromEventList>
 8005416:	4603      	mov	r3, r0
 8005418:	2b00      	cmp	r3, #0
 800541a:	d00e      	beq.n	800543a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d00b      	beq.n	800543a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2201      	movs	r2, #1
 8005426:	601a      	str	r2, [r3, #0]
 8005428:	e007      	b.n	800543a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800542a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800542e:	3301      	adds	r3, #1
 8005430:	b2db      	uxtb	r3, r3
 8005432:	b25a      	sxtb	r2, r3
 8005434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005436:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800543a:	2301      	movs	r3, #1
 800543c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800543e:	e001      	b.n	8005444 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005440:	2300      	movs	r3, #0
 8005442:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005446:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800544e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005450:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005452:	4618      	mov	r0, r3
 8005454:	3740      	adds	r7, #64	; 0x40
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}
	...

0800545c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b08c      	sub	sp, #48	; 0x30
 8005460:	af00      	add	r7, sp, #0
 8005462:	60f8      	str	r0, [r7, #12]
 8005464:	60b9      	str	r1, [r7, #8]
 8005466:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005468:	2300      	movs	r3, #0
 800546a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005472:	2b00      	cmp	r3, #0
 8005474:	d10a      	bne.n	800548c <xQueueReceive+0x30>
	__asm volatile
 8005476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800547a:	f383 8811 	msr	BASEPRI, r3
 800547e:	f3bf 8f6f 	isb	sy
 8005482:	f3bf 8f4f 	dsb	sy
 8005486:	623b      	str	r3, [r7, #32]
}
 8005488:	bf00      	nop
 800548a:	e7fe      	b.n	800548a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d103      	bne.n	800549a <xQueueReceive+0x3e>
 8005492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005496:	2b00      	cmp	r3, #0
 8005498:	d101      	bne.n	800549e <xQueueReceive+0x42>
 800549a:	2301      	movs	r3, #1
 800549c:	e000      	b.n	80054a0 <xQueueReceive+0x44>
 800549e:	2300      	movs	r3, #0
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d10a      	bne.n	80054ba <xQueueReceive+0x5e>
	__asm volatile
 80054a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a8:	f383 8811 	msr	BASEPRI, r3
 80054ac:	f3bf 8f6f 	isb	sy
 80054b0:	f3bf 8f4f 	dsb	sy
 80054b4:	61fb      	str	r3, [r7, #28]
}
 80054b6:	bf00      	nop
 80054b8:	e7fe      	b.n	80054b8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80054ba:	f001 fa69 	bl	8006990 <xTaskGetSchedulerState>
 80054be:	4603      	mov	r3, r0
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d102      	bne.n	80054ca <xQueueReceive+0x6e>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d101      	bne.n	80054ce <xQueueReceive+0x72>
 80054ca:	2301      	movs	r3, #1
 80054cc:	e000      	b.n	80054d0 <xQueueReceive+0x74>
 80054ce:	2300      	movs	r3, #0
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d10a      	bne.n	80054ea <xQueueReceive+0x8e>
	__asm volatile
 80054d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d8:	f383 8811 	msr	BASEPRI, r3
 80054dc:	f3bf 8f6f 	isb	sy
 80054e0:	f3bf 8f4f 	dsb	sy
 80054e4:	61bb      	str	r3, [r7, #24]
}
 80054e6:	bf00      	nop
 80054e8:	e7fe      	b.n	80054e8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80054ea:	f002 f8ab 	bl	8007644 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80054ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054f2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80054f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d01f      	beq.n	800553a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80054fa:	68b9      	ldr	r1, [r7, #8]
 80054fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054fe:	f000 fafa 	bl	8005af6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005504:	1e5a      	subs	r2, r3, #1
 8005506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005508:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800550a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800550c:	691b      	ldr	r3, [r3, #16]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d00f      	beq.n	8005532 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005514:	3310      	adds	r3, #16
 8005516:	4618      	mov	r0, r3
 8005518:	f001 f87c 	bl	8006614 <xTaskRemoveFromEventList>
 800551c:	4603      	mov	r3, r0
 800551e:	2b00      	cmp	r3, #0
 8005520:	d007      	beq.n	8005532 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005522:	4b3d      	ldr	r3, [pc, #244]	; (8005618 <xQueueReceive+0x1bc>)
 8005524:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005528:	601a      	str	r2, [r3, #0]
 800552a:	f3bf 8f4f 	dsb	sy
 800552e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005532:	f002 f8b7 	bl	80076a4 <vPortExitCritical>
				return pdPASS;
 8005536:	2301      	movs	r3, #1
 8005538:	e069      	b.n	800560e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d103      	bne.n	8005548 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005540:	f002 f8b0 	bl	80076a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005544:	2300      	movs	r3, #0
 8005546:	e062      	b.n	800560e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800554a:	2b00      	cmp	r3, #0
 800554c:	d106      	bne.n	800555c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800554e:	f107 0310 	add.w	r3, r7, #16
 8005552:	4618      	mov	r0, r3
 8005554:	f001 f8c2 	bl	80066dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005558:	2301      	movs	r3, #1
 800555a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800555c:	f002 f8a2 	bl	80076a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005560:	f000 fe34 	bl	80061cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005564:	f002 f86e 	bl	8007644 <vPortEnterCritical>
 8005568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800556a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800556e:	b25b      	sxtb	r3, r3
 8005570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005574:	d103      	bne.n	800557e <xQueueReceive+0x122>
 8005576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005578:	2200      	movs	r2, #0
 800557a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800557e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005580:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005584:	b25b      	sxtb	r3, r3
 8005586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800558a:	d103      	bne.n	8005594 <xQueueReceive+0x138>
 800558c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800558e:	2200      	movs	r2, #0
 8005590:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005594:	f002 f886 	bl	80076a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005598:	1d3a      	adds	r2, r7, #4
 800559a:	f107 0310 	add.w	r3, r7, #16
 800559e:	4611      	mov	r1, r2
 80055a0:	4618      	mov	r0, r3
 80055a2:	f001 f8b1 	bl	8006708 <xTaskCheckForTimeOut>
 80055a6:	4603      	mov	r3, r0
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d123      	bne.n	80055f4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80055ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055ae:	f000 fb1a 	bl	8005be6 <prvIsQueueEmpty>
 80055b2:	4603      	mov	r3, r0
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d017      	beq.n	80055e8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80055b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ba:	3324      	adds	r3, #36	; 0x24
 80055bc:	687a      	ldr	r2, [r7, #4]
 80055be:	4611      	mov	r1, r2
 80055c0:	4618      	mov	r0, r3
 80055c2:	f000 ffd7 	bl	8006574 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80055c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055c8:	f000 fabb 	bl	8005b42 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80055cc:	f000 fe0c 	bl	80061e8 <xTaskResumeAll>
 80055d0:	4603      	mov	r3, r0
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d189      	bne.n	80054ea <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80055d6:	4b10      	ldr	r3, [pc, #64]	; (8005618 <xQueueReceive+0x1bc>)
 80055d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055dc:	601a      	str	r2, [r3, #0]
 80055de:	f3bf 8f4f 	dsb	sy
 80055e2:	f3bf 8f6f 	isb	sy
 80055e6:	e780      	b.n	80054ea <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80055e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055ea:	f000 faaa 	bl	8005b42 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80055ee:	f000 fdfb 	bl	80061e8 <xTaskResumeAll>
 80055f2:	e77a      	b.n	80054ea <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80055f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055f6:	f000 faa4 	bl	8005b42 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80055fa:	f000 fdf5 	bl	80061e8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80055fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005600:	f000 faf1 	bl	8005be6 <prvIsQueueEmpty>
 8005604:	4603      	mov	r3, r0
 8005606:	2b00      	cmp	r3, #0
 8005608:	f43f af6f 	beq.w	80054ea <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800560c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800560e:	4618      	mov	r0, r3
 8005610:	3730      	adds	r7, #48	; 0x30
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
 8005616:	bf00      	nop
 8005618:	e000ed04 	.word	0xe000ed04

0800561c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b08e      	sub	sp, #56	; 0x38
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005626:	2300      	movs	r3, #0
 8005628:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800562e:	2300      	movs	r3, #0
 8005630:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005634:	2b00      	cmp	r3, #0
 8005636:	d10a      	bne.n	800564e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8005638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800563c:	f383 8811 	msr	BASEPRI, r3
 8005640:	f3bf 8f6f 	isb	sy
 8005644:	f3bf 8f4f 	dsb	sy
 8005648:	623b      	str	r3, [r7, #32]
}
 800564a:	bf00      	nop
 800564c:	e7fe      	b.n	800564c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800564e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005652:	2b00      	cmp	r3, #0
 8005654:	d00a      	beq.n	800566c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8005656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800565a:	f383 8811 	msr	BASEPRI, r3
 800565e:	f3bf 8f6f 	isb	sy
 8005662:	f3bf 8f4f 	dsb	sy
 8005666:	61fb      	str	r3, [r7, #28]
}
 8005668:	bf00      	nop
 800566a:	e7fe      	b.n	800566a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800566c:	f001 f990 	bl	8006990 <xTaskGetSchedulerState>
 8005670:	4603      	mov	r3, r0
 8005672:	2b00      	cmp	r3, #0
 8005674:	d102      	bne.n	800567c <xQueueSemaphoreTake+0x60>
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d101      	bne.n	8005680 <xQueueSemaphoreTake+0x64>
 800567c:	2301      	movs	r3, #1
 800567e:	e000      	b.n	8005682 <xQueueSemaphoreTake+0x66>
 8005680:	2300      	movs	r3, #0
 8005682:	2b00      	cmp	r3, #0
 8005684:	d10a      	bne.n	800569c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8005686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800568a:	f383 8811 	msr	BASEPRI, r3
 800568e:	f3bf 8f6f 	isb	sy
 8005692:	f3bf 8f4f 	dsb	sy
 8005696:	61bb      	str	r3, [r7, #24]
}
 8005698:	bf00      	nop
 800569a:	e7fe      	b.n	800569a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800569c:	f001 ffd2 	bl	8007644 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80056a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80056a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d024      	beq.n	80056f6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80056ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ae:	1e5a      	subs	r2, r3, #1
 80056b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056b2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80056b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d104      	bne.n	80056c6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80056bc:	f001 fade 	bl	8006c7c <pvTaskIncrementMutexHeldCount>
 80056c0:	4602      	mov	r2, r0
 80056c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056c4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80056c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056c8:	691b      	ldr	r3, [r3, #16]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d00f      	beq.n	80056ee <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80056ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056d0:	3310      	adds	r3, #16
 80056d2:	4618      	mov	r0, r3
 80056d4:	f000 ff9e 	bl	8006614 <xTaskRemoveFromEventList>
 80056d8:	4603      	mov	r3, r0
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d007      	beq.n	80056ee <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80056de:	4b54      	ldr	r3, [pc, #336]	; (8005830 <xQueueSemaphoreTake+0x214>)
 80056e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056e4:	601a      	str	r2, [r3, #0]
 80056e6:	f3bf 8f4f 	dsb	sy
 80056ea:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80056ee:	f001 ffd9 	bl	80076a4 <vPortExitCritical>
				return pdPASS;
 80056f2:	2301      	movs	r3, #1
 80056f4:	e097      	b.n	8005826 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d111      	bne.n	8005720 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80056fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d00a      	beq.n	8005718 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8005702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005706:	f383 8811 	msr	BASEPRI, r3
 800570a:	f3bf 8f6f 	isb	sy
 800570e:	f3bf 8f4f 	dsb	sy
 8005712:	617b      	str	r3, [r7, #20]
}
 8005714:	bf00      	nop
 8005716:	e7fe      	b.n	8005716 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005718:	f001 ffc4 	bl	80076a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800571c:	2300      	movs	r3, #0
 800571e:	e082      	b.n	8005826 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005722:	2b00      	cmp	r3, #0
 8005724:	d106      	bne.n	8005734 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005726:	f107 030c 	add.w	r3, r7, #12
 800572a:	4618      	mov	r0, r3
 800572c:	f000 ffd6 	bl	80066dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005730:	2301      	movs	r3, #1
 8005732:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005734:	f001 ffb6 	bl	80076a4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005738:	f000 fd48 	bl	80061cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800573c:	f001 ff82 	bl	8007644 <vPortEnterCritical>
 8005740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005742:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005746:	b25b      	sxtb	r3, r3
 8005748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800574c:	d103      	bne.n	8005756 <xQueueSemaphoreTake+0x13a>
 800574e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005750:	2200      	movs	r2, #0
 8005752:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005758:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800575c:	b25b      	sxtb	r3, r3
 800575e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005762:	d103      	bne.n	800576c <xQueueSemaphoreTake+0x150>
 8005764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005766:	2200      	movs	r2, #0
 8005768:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800576c:	f001 ff9a 	bl	80076a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005770:	463a      	mov	r2, r7
 8005772:	f107 030c 	add.w	r3, r7, #12
 8005776:	4611      	mov	r1, r2
 8005778:	4618      	mov	r0, r3
 800577a:	f000 ffc5 	bl	8006708 <xTaskCheckForTimeOut>
 800577e:	4603      	mov	r3, r0
 8005780:	2b00      	cmp	r3, #0
 8005782:	d132      	bne.n	80057ea <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005784:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005786:	f000 fa2e 	bl	8005be6 <prvIsQueueEmpty>
 800578a:	4603      	mov	r3, r0
 800578c:	2b00      	cmp	r3, #0
 800578e:	d026      	beq.n	80057de <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d109      	bne.n	80057ac <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8005798:	f001 ff54 	bl	8007644 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800579c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	4618      	mov	r0, r3
 80057a2:	f001 f913 	bl	80069cc <xTaskPriorityInherit>
 80057a6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80057a8:	f001 ff7c 	bl	80076a4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80057ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057ae:	3324      	adds	r3, #36	; 0x24
 80057b0:	683a      	ldr	r2, [r7, #0]
 80057b2:	4611      	mov	r1, r2
 80057b4:	4618      	mov	r0, r3
 80057b6:	f000 fedd 	bl	8006574 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80057ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80057bc:	f000 f9c1 	bl	8005b42 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80057c0:	f000 fd12 	bl	80061e8 <xTaskResumeAll>
 80057c4:	4603      	mov	r3, r0
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	f47f af68 	bne.w	800569c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80057cc:	4b18      	ldr	r3, [pc, #96]	; (8005830 <xQueueSemaphoreTake+0x214>)
 80057ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057d2:	601a      	str	r2, [r3, #0]
 80057d4:	f3bf 8f4f 	dsb	sy
 80057d8:	f3bf 8f6f 	isb	sy
 80057dc:	e75e      	b.n	800569c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80057de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80057e0:	f000 f9af 	bl	8005b42 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80057e4:	f000 fd00 	bl	80061e8 <xTaskResumeAll>
 80057e8:	e758      	b.n	800569c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80057ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80057ec:	f000 f9a9 	bl	8005b42 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80057f0:	f000 fcfa 	bl	80061e8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80057f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80057f6:	f000 f9f6 	bl	8005be6 <prvIsQueueEmpty>
 80057fa:	4603      	mov	r3, r0
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	f43f af4d 	beq.w	800569c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005804:	2b00      	cmp	r3, #0
 8005806:	d00d      	beq.n	8005824 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8005808:	f001 ff1c 	bl	8007644 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800580c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800580e:	f000 f8f0 	bl	80059f2 <prvGetDisinheritPriorityAfterTimeout>
 8005812:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800581a:	4618      	mov	r0, r3
 800581c:	f001 f9ac 	bl	8006b78 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005820:	f001 ff40 	bl	80076a4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005824:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005826:	4618      	mov	r0, r3
 8005828:	3738      	adds	r7, #56	; 0x38
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
 800582e:	bf00      	nop
 8005830:	e000ed04 	.word	0xe000ed04

08005834 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b08e      	sub	sp, #56	; 0x38
 8005838:	af00      	add	r7, sp, #0
 800583a:	60f8      	str	r0, [r7, #12]
 800583c:	60b9      	str	r1, [r7, #8]
 800583e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005846:	2b00      	cmp	r3, #0
 8005848:	d10a      	bne.n	8005860 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800584a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800584e:	f383 8811 	msr	BASEPRI, r3
 8005852:	f3bf 8f6f 	isb	sy
 8005856:	f3bf 8f4f 	dsb	sy
 800585a:	623b      	str	r3, [r7, #32]
}
 800585c:	bf00      	nop
 800585e:	e7fe      	b.n	800585e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d103      	bne.n	800586e <xQueueReceiveFromISR+0x3a>
 8005866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800586a:	2b00      	cmp	r3, #0
 800586c:	d101      	bne.n	8005872 <xQueueReceiveFromISR+0x3e>
 800586e:	2301      	movs	r3, #1
 8005870:	e000      	b.n	8005874 <xQueueReceiveFromISR+0x40>
 8005872:	2300      	movs	r3, #0
 8005874:	2b00      	cmp	r3, #0
 8005876:	d10a      	bne.n	800588e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8005878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800587c:	f383 8811 	msr	BASEPRI, r3
 8005880:	f3bf 8f6f 	isb	sy
 8005884:	f3bf 8f4f 	dsb	sy
 8005888:	61fb      	str	r3, [r7, #28]
}
 800588a:	bf00      	nop
 800588c:	e7fe      	b.n	800588c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800588e:	f001 ffbb 	bl	8007808 <vPortValidateInterruptPriority>
	__asm volatile
 8005892:	f3ef 8211 	mrs	r2, BASEPRI
 8005896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800589a:	f383 8811 	msr	BASEPRI, r3
 800589e:	f3bf 8f6f 	isb	sy
 80058a2:	f3bf 8f4f 	dsb	sy
 80058a6:	61ba      	str	r2, [r7, #24]
 80058a8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80058aa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80058ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80058ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058b2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80058b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d02f      	beq.n	800591a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80058ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80058c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80058c4:	68b9      	ldr	r1, [r7, #8]
 80058c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80058c8:	f000 f915 	bl	8005af6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80058cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ce:	1e5a      	subs	r2, r3, #1
 80058d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80058d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80058d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058dc:	d112      	bne.n	8005904 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80058de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e0:	691b      	ldr	r3, [r3, #16]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d016      	beq.n	8005914 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80058e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e8:	3310      	adds	r3, #16
 80058ea:	4618      	mov	r0, r3
 80058ec:	f000 fe92 	bl	8006614 <xTaskRemoveFromEventList>
 80058f0:	4603      	mov	r3, r0
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d00e      	beq.n	8005914 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d00b      	beq.n	8005914 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2201      	movs	r2, #1
 8005900:	601a      	str	r2, [r3, #0]
 8005902:	e007      	b.n	8005914 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005904:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005908:	3301      	adds	r3, #1
 800590a:	b2db      	uxtb	r3, r3
 800590c:	b25a      	sxtb	r2, r3
 800590e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005910:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005914:	2301      	movs	r3, #1
 8005916:	637b      	str	r3, [r7, #52]	; 0x34
 8005918:	e001      	b.n	800591e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800591a:	2300      	movs	r3, #0
 800591c:	637b      	str	r3, [r7, #52]	; 0x34
 800591e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005920:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	f383 8811 	msr	BASEPRI, r3
}
 8005928:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800592a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800592c:	4618      	mov	r0, r3
 800592e:	3738      	adds	r7, #56	; 0x38
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}

08005934 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b084      	sub	sp, #16
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d10a      	bne.n	8005958 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8005942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005946:	f383 8811 	msr	BASEPRI, r3
 800594a:	f3bf 8f6f 	isb	sy
 800594e:	f3bf 8f4f 	dsb	sy
 8005952:	60bb      	str	r3, [r7, #8]
}
 8005954:	bf00      	nop
 8005956:	e7fe      	b.n	8005956 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8005958:	f001 fe74 	bl	8007644 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005960:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8005962:	f001 fe9f 	bl	80076a4 <vPortExitCritical>

	return uxReturn;
 8005966:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005968:	4618      	mov	r0, r3
 800596a:	3710      	adds	r7, #16
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}

08005970 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8005970:	b480      	push	{r7}
 8005972:	b087      	sub	sp, #28
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d10a      	bne.n	8005998 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8005982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005986:	f383 8811 	msr	BASEPRI, r3
 800598a:	f3bf 8f6f 	isb	sy
 800598e:	f3bf 8f4f 	dsb	sy
 8005992:	60fb      	str	r3, [r7, #12]
}
 8005994:	bf00      	nop
 8005996:	e7fe      	b.n	8005996 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800599c:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800599e:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80059a0:	4618      	mov	r0, r3
 80059a2:	371c      	adds	r7, #28
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr

080059ac <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b084      	sub	sp, #16
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d10a      	bne.n	80059d4 <vQueueDelete+0x28>
	__asm volatile
 80059be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c2:	f383 8811 	msr	BASEPRI, r3
 80059c6:	f3bf 8f6f 	isb	sy
 80059ca:	f3bf 8f4f 	dsb	sy
 80059ce:	60bb      	str	r3, [r7, #8]
}
 80059d0:	bf00      	nop
 80059d2:	e7fe      	b.n	80059d2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80059d4:	68f8      	ldr	r0, [r7, #12]
 80059d6:	f000 f95f 	bl	8005c98 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d102      	bne.n	80059ea <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80059e4:	68f8      	ldr	r0, [r7, #12]
 80059e6:	f002 f81b 	bl	8007a20 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80059ea:	bf00      	nop
 80059ec:	3710      	adds	r7, #16
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}

080059f2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80059f2:	b480      	push	{r7}
 80059f4:	b085      	sub	sp, #20
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d006      	beq.n	8005a10 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8005a0c:	60fb      	str	r3, [r7, #12]
 8005a0e:	e001      	b.n	8005a14 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005a10:	2300      	movs	r3, #0
 8005a12:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005a14:	68fb      	ldr	r3, [r7, #12]
	}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3714      	adds	r7, #20
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr

08005a22 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005a22:	b580      	push	{r7, lr}
 8005a24:	b086      	sub	sp, #24
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	60f8      	str	r0, [r7, #12]
 8005a2a:	60b9      	str	r1, [r7, #8]
 8005a2c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a36:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d10d      	bne.n	8005a5c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d14d      	bne.n	8005ae4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f001 f825 	bl	8006a9c <xTaskPriorityDisinherit>
 8005a52:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2200      	movs	r2, #0
 8005a58:	609a      	str	r2, [r3, #8]
 8005a5a:	e043      	b.n	8005ae4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d119      	bne.n	8005a96 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	6858      	ldr	r0, [r3, #4]
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	68b9      	ldr	r1, [r7, #8]
 8005a6e:	f002 f91f 	bl	8007cb0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	685a      	ldr	r2, [r3, #4]
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a7a:	441a      	add	r2, r3
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	685a      	ldr	r2, [r3, #4]
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d32b      	bcc.n	8005ae4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	605a      	str	r2, [r3, #4]
 8005a94:	e026      	b.n	8005ae4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	68d8      	ldr	r0, [r3, #12]
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	68b9      	ldr	r1, [r7, #8]
 8005aa2:	f002 f905 	bl	8007cb0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	68da      	ldr	r2, [r3, #12]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aae:	425b      	negs	r3, r3
 8005ab0:	441a      	add	r2, r3
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	68da      	ldr	r2, [r3, #12]
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d207      	bcs.n	8005ad2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	689a      	ldr	r2, [r3, #8]
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aca:	425b      	negs	r3, r3
 8005acc:	441a      	add	r2, r3
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2b02      	cmp	r3, #2
 8005ad6:	d105      	bne.n	8005ae4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d002      	beq.n	8005ae4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	3b01      	subs	r3, #1
 8005ae2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	1c5a      	adds	r2, r3, #1
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005aec:	697b      	ldr	r3, [r7, #20]
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3718      	adds	r7, #24
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}

08005af6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005af6:	b580      	push	{r7, lr}
 8005af8:	b082      	sub	sp, #8
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	6078      	str	r0, [r7, #4]
 8005afe:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d018      	beq.n	8005b3a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	68da      	ldr	r2, [r3, #12]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b10:	441a      	add	r2, r3
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	68da      	ldr	r2, [r3, #12]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d303      	bcc.n	8005b2a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	68d9      	ldr	r1, [r3, #12]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b32:	461a      	mov	r2, r3
 8005b34:	6838      	ldr	r0, [r7, #0]
 8005b36:	f002 f8bb 	bl	8007cb0 <memcpy>
	}
}
 8005b3a:	bf00      	nop
 8005b3c:	3708      	adds	r7, #8
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}

08005b42 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005b42:	b580      	push	{r7, lr}
 8005b44:	b084      	sub	sp, #16
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005b4a:	f001 fd7b 	bl	8007644 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b54:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005b56:	e011      	b.n	8005b7c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d012      	beq.n	8005b86 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	3324      	adds	r3, #36	; 0x24
 8005b64:	4618      	mov	r0, r3
 8005b66:	f000 fd55 	bl	8006614 <xTaskRemoveFromEventList>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d001      	beq.n	8005b74 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005b70:	f000 fe2c 	bl	80067cc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005b74:	7bfb      	ldrb	r3, [r7, #15]
 8005b76:	3b01      	subs	r3, #1
 8005b78:	b2db      	uxtb	r3, r3
 8005b7a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005b7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	dce9      	bgt.n	8005b58 <prvUnlockQueue+0x16>
 8005b84:	e000      	b.n	8005b88 <prvUnlockQueue+0x46>
					break;
 8005b86:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	22ff      	movs	r2, #255	; 0xff
 8005b8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005b90:	f001 fd88 	bl	80076a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005b94:	f001 fd56 	bl	8007644 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b9e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005ba0:	e011      	b.n	8005bc6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	691b      	ldr	r3, [r3, #16]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d012      	beq.n	8005bd0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	3310      	adds	r3, #16
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f000 fd30 	bl	8006614 <xTaskRemoveFromEventList>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d001      	beq.n	8005bbe <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005bba:	f000 fe07 	bl	80067cc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005bbe:	7bbb      	ldrb	r3, [r7, #14]
 8005bc0:	3b01      	subs	r3, #1
 8005bc2:	b2db      	uxtb	r3, r3
 8005bc4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005bc6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	dce9      	bgt.n	8005ba2 <prvUnlockQueue+0x60>
 8005bce:	e000      	b.n	8005bd2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005bd0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	22ff      	movs	r2, #255	; 0xff
 8005bd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005bda:	f001 fd63 	bl	80076a4 <vPortExitCritical>
}
 8005bde:	bf00      	nop
 8005be0:	3710      	adds	r7, #16
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}

08005be6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005be6:	b580      	push	{r7, lr}
 8005be8:	b084      	sub	sp, #16
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005bee:	f001 fd29 	bl	8007644 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d102      	bne.n	8005c00 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	60fb      	str	r3, [r7, #12]
 8005bfe:	e001      	b.n	8005c04 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005c00:	2300      	movs	r3, #0
 8005c02:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005c04:	f001 fd4e 	bl	80076a4 <vPortExitCritical>

	return xReturn;
 8005c08:	68fb      	ldr	r3, [r7, #12]
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3710      	adds	r7, #16
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}

08005c12 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005c12:	b580      	push	{r7, lr}
 8005c14:	b084      	sub	sp, #16
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005c1a:	f001 fd13 	bl	8007644 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c26:	429a      	cmp	r2, r3
 8005c28:	d102      	bne.n	8005c30 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	60fb      	str	r3, [r7, #12]
 8005c2e:	e001      	b.n	8005c34 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005c30:	2300      	movs	r3, #0
 8005c32:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005c34:	f001 fd36 	bl	80076a4 <vPortExitCritical>

	return xReturn;
 8005c38:	68fb      	ldr	r3, [r7, #12]
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3710      	adds	r7, #16
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
	...

08005c44 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005c44:	b480      	push	{r7}
 8005c46:	b085      	sub	sp, #20
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005c4e:	2300      	movs	r3, #0
 8005c50:	60fb      	str	r3, [r7, #12]
 8005c52:	e014      	b.n	8005c7e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005c54:	4a0f      	ldr	r2, [pc, #60]	; (8005c94 <vQueueAddToRegistry+0x50>)
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d10b      	bne.n	8005c78 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005c60:	490c      	ldr	r1, [pc, #48]	; (8005c94 <vQueueAddToRegistry+0x50>)
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	683a      	ldr	r2, [r7, #0]
 8005c66:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005c6a:	4a0a      	ldr	r2, [pc, #40]	; (8005c94 <vQueueAddToRegistry+0x50>)
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	00db      	lsls	r3, r3, #3
 8005c70:	4413      	add	r3, r2
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005c76:	e006      	b.n	8005c86 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	3301      	adds	r3, #1
 8005c7c:	60fb      	str	r3, [r7, #12]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2b07      	cmp	r3, #7
 8005c82:	d9e7      	bls.n	8005c54 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005c84:	bf00      	nop
 8005c86:	bf00      	nop
 8005c88:	3714      	adds	r7, #20
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c90:	4770      	bx	lr
 8005c92:	bf00      	nop
 8005c94:	200051e0 	.word	0x200051e0

08005c98 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8005c98:	b480      	push	{r7}
 8005c9a:	b085      	sub	sp, #20
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	60fb      	str	r3, [r7, #12]
 8005ca4:	e016      	b.n	8005cd4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8005ca6:	4a10      	ldr	r2, [pc, #64]	; (8005ce8 <vQueueUnregisterQueue+0x50>)
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	00db      	lsls	r3, r3, #3
 8005cac:	4413      	add	r3, r2
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	687a      	ldr	r2, [r7, #4]
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d10b      	bne.n	8005cce <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8005cb6:	4a0c      	ldr	r2, [pc, #48]	; (8005ce8 <vQueueUnregisterQueue+0x50>)
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2100      	movs	r1, #0
 8005cbc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8005cc0:	4a09      	ldr	r2, [pc, #36]	; (8005ce8 <vQueueUnregisterQueue+0x50>)
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	00db      	lsls	r3, r3, #3
 8005cc6:	4413      	add	r3, r2
 8005cc8:	2200      	movs	r2, #0
 8005cca:	605a      	str	r2, [r3, #4]
				break;
 8005ccc:	e006      	b.n	8005cdc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	3301      	adds	r3, #1
 8005cd2:	60fb      	str	r3, [r7, #12]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2b07      	cmp	r3, #7
 8005cd8:	d9e5      	bls.n	8005ca6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005cda:	bf00      	nop
 8005cdc:	bf00      	nop
 8005cde:	3714      	adds	r7, #20
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr
 8005ce8:	200051e0 	.word	0x200051e0

08005cec <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b086      	sub	sp, #24
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	60f8      	str	r0, [r7, #12]
 8005cf4:	60b9      	str	r1, [r7, #8]
 8005cf6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005cfc:	f001 fca2 	bl	8007644 <vPortEnterCritical>
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d06:	b25b      	sxtb	r3, r3
 8005d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d0c:	d103      	bne.n	8005d16 <vQueueWaitForMessageRestricted+0x2a>
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	2200      	movs	r2, #0
 8005d12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d1c:	b25b      	sxtb	r3, r3
 8005d1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d22:	d103      	bne.n	8005d2c <vQueueWaitForMessageRestricted+0x40>
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	2200      	movs	r2, #0
 8005d28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d2c:	f001 fcba 	bl	80076a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d106      	bne.n	8005d46 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	3324      	adds	r3, #36	; 0x24
 8005d3c:	687a      	ldr	r2, [r7, #4]
 8005d3e:	68b9      	ldr	r1, [r7, #8]
 8005d40:	4618      	mov	r0, r3
 8005d42:	f000 fc3b 	bl	80065bc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005d46:	6978      	ldr	r0, [r7, #20]
 8005d48:	f7ff fefb 	bl	8005b42 <prvUnlockQueue>
	}
 8005d4c:	bf00      	nop
 8005d4e:	3718      	adds	r7, #24
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}

08005d54 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b08e      	sub	sp, #56	; 0x38
 8005d58:	af04      	add	r7, sp, #16
 8005d5a:	60f8      	str	r0, [r7, #12]
 8005d5c:	60b9      	str	r1, [r7, #8]
 8005d5e:	607a      	str	r2, [r7, #4]
 8005d60:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d10a      	bne.n	8005d7e <xTaskCreateStatic+0x2a>
	__asm volatile
 8005d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d6c:	f383 8811 	msr	BASEPRI, r3
 8005d70:	f3bf 8f6f 	isb	sy
 8005d74:	f3bf 8f4f 	dsb	sy
 8005d78:	623b      	str	r3, [r7, #32]
}
 8005d7a:	bf00      	nop
 8005d7c:	e7fe      	b.n	8005d7c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d10a      	bne.n	8005d9a <xTaskCreateStatic+0x46>
	__asm volatile
 8005d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d88:	f383 8811 	msr	BASEPRI, r3
 8005d8c:	f3bf 8f6f 	isb	sy
 8005d90:	f3bf 8f4f 	dsb	sy
 8005d94:	61fb      	str	r3, [r7, #28]
}
 8005d96:	bf00      	nop
 8005d98:	e7fe      	b.n	8005d98 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005d9a:	235c      	movs	r3, #92	; 0x5c
 8005d9c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	2b5c      	cmp	r3, #92	; 0x5c
 8005da2:	d00a      	beq.n	8005dba <xTaskCreateStatic+0x66>
	__asm volatile
 8005da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da8:	f383 8811 	msr	BASEPRI, r3
 8005dac:	f3bf 8f6f 	isb	sy
 8005db0:	f3bf 8f4f 	dsb	sy
 8005db4:	61bb      	str	r3, [r7, #24]
}
 8005db6:	bf00      	nop
 8005db8:	e7fe      	b.n	8005db8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005dba:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d01e      	beq.n	8005e00 <xTaskCreateStatic+0xac>
 8005dc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d01b      	beq.n	8005e00 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dca:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005dd0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd4:	2202      	movs	r2, #2
 8005dd6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005dda:	2300      	movs	r3, #0
 8005ddc:	9303      	str	r3, [sp, #12]
 8005dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de0:	9302      	str	r3, [sp, #8]
 8005de2:	f107 0314 	add.w	r3, r7, #20
 8005de6:	9301      	str	r3, [sp, #4]
 8005de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dea:	9300      	str	r3, [sp, #0]
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	687a      	ldr	r2, [r7, #4]
 8005df0:	68b9      	ldr	r1, [r7, #8]
 8005df2:	68f8      	ldr	r0, [r7, #12]
 8005df4:	f000 f850 	bl	8005e98 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005df8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005dfa:	f000 f8dd 	bl	8005fb8 <prvAddNewTaskToReadyList>
 8005dfe:	e001      	b.n	8005e04 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005e00:	2300      	movs	r3, #0
 8005e02:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005e04:	697b      	ldr	r3, [r7, #20]
	}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3728      	adds	r7, #40	; 0x28
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}

08005e0e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005e0e:	b580      	push	{r7, lr}
 8005e10:	b08c      	sub	sp, #48	; 0x30
 8005e12:	af04      	add	r7, sp, #16
 8005e14:	60f8      	str	r0, [r7, #12]
 8005e16:	60b9      	str	r1, [r7, #8]
 8005e18:	603b      	str	r3, [r7, #0]
 8005e1a:	4613      	mov	r3, r2
 8005e1c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005e1e:	88fb      	ldrh	r3, [r7, #6]
 8005e20:	009b      	lsls	r3, r3, #2
 8005e22:	4618      	mov	r0, r3
 8005e24:	f001 fd30 	bl	8007888 <pvPortMalloc>
 8005e28:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d00e      	beq.n	8005e4e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005e30:	205c      	movs	r0, #92	; 0x5c
 8005e32:	f001 fd29 	bl	8007888 <pvPortMalloc>
 8005e36:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005e38:	69fb      	ldr	r3, [r7, #28]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d003      	beq.n	8005e46 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005e3e:	69fb      	ldr	r3, [r7, #28]
 8005e40:	697a      	ldr	r2, [r7, #20]
 8005e42:	631a      	str	r2, [r3, #48]	; 0x30
 8005e44:	e005      	b.n	8005e52 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005e46:	6978      	ldr	r0, [r7, #20]
 8005e48:	f001 fdea 	bl	8007a20 <vPortFree>
 8005e4c:	e001      	b.n	8005e52 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005e52:	69fb      	ldr	r3, [r7, #28]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d017      	beq.n	8005e88 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005e58:	69fb      	ldr	r3, [r7, #28]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005e60:	88fa      	ldrh	r2, [r7, #6]
 8005e62:	2300      	movs	r3, #0
 8005e64:	9303      	str	r3, [sp, #12]
 8005e66:	69fb      	ldr	r3, [r7, #28]
 8005e68:	9302      	str	r3, [sp, #8]
 8005e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e6c:	9301      	str	r3, [sp, #4]
 8005e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e70:	9300      	str	r3, [sp, #0]
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	68b9      	ldr	r1, [r7, #8]
 8005e76:	68f8      	ldr	r0, [r7, #12]
 8005e78:	f000 f80e 	bl	8005e98 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005e7c:	69f8      	ldr	r0, [r7, #28]
 8005e7e:	f000 f89b 	bl	8005fb8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005e82:	2301      	movs	r3, #1
 8005e84:	61bb      	str	r3, [r7, #24]
 8005e86:	e002      	b.n	8005e8e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005e88:	f04f 33ff 	mov.w	r3, #4294967295
 8005e8c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005e8e:	69bb      	ldr	r3, [r7, #24]
	}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3720      	adds	r7, #32
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}

08005e98 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b088      	sub	sp, #32
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	60f8      	str	r0, [r7, #12]
 8005ea0:	60b9      	str	r1, [r7, #8]
 8005ea2:	607a      	str	r2, [r7, #4]
 8005ea4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	009b      	lsls	r3, r3, #2
 8005eae:	461a      	mov	r2, r3
 8005eb0:	21a5      	movs	r1, #165	; 0xa5
 8005eb2:	f001 ff0b 	bl	8007ccc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005ec0:	3b01      	subs	r3, #1
 8005ec2:	009b      	lsls	r3, r3, #2
 8005ec4:	4413      	add	r3, r2
 8005ec6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005ec8:	69bb      	ldr	r3, [r7, #24]
 8005eca:	f023 0307 	bic.w	r3, r3, #7
 8005ece:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005ed0:	69bb      	ldr	r3, [r7, #24]
 8005ed2:	f003 0307 	and.w	r3, r3, #7
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d00a      	beq.n	8005ef0 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ede:	f383 8811 	msr	BASEPRI, r3
 8005ee2:	f3bf 8f6f 	isb	sy
 8005ee6:	f3bf 8f4f 	dsb	sy
 8005eea:	617b      	str	r3, [r7, #20]
}
 8005eec:	bf00      	nop
 8005eee:	e7fe      	b.n	8005eee <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d01f      	beq.n	8005f36 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	61fb      	str	r3, [r7, #28]
 8005efa:	e012      	b.n	8005f22 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005efc:	68ba      	ldr	r2, [r7, #8]
 8005efe:	69fb      	ldr	r3, [r7, #28]
 8005f00:	4413      	add	r3, r2
 8005f02:	7819      	ldrb	r1, [r3, #0]
 8005f04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f06:	69fb      	ldr	r3, [r7, #28]
 8005f08:	4413      	add	r3, r2
 8005f0a:	3334      	adds	r3, #52	; 0x34
 8005f0c:	460a      	mov	r2, r1
 8005f0e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005f10:	68ba      	ldr	r2, [r7, #8]
 8005f12:	69fb      	ldr	r3, [r7, #28]
 8005f14:	4413      	add	r3, r2
 8005f16:	781b      	ldrb	r3, [r3, #0]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d006      	beq.n	8005f2a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f1c:	69fb      	ldr	r3, [r7, #28]
 8005f1e:	3301      	adds	r3, #1
 8005f20:	61fb      	str	r3, [r7, #28]
 8005f22:	69fb      	ldr	r3, [r7, #28]
 8005f24:	2b0f      	cmp	r3, #15
 8005f26:	d9e9      	bls.n	8005efc <prvInitialiseNewTask+0x64>
 8005f28:	e000      	b.n	8005f2c <prvInitialiseNewTask+0x94>
			{
				break;
 8005f2a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f2e:	2200      	movs	r2, #0
 8005f30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f34:	e003      	b.n	8005f3e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f38:	2200      	movs	r2, #0
 8005f3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f40:	2b37      	cmp	r3, #55	; 0x37
 8005f42:	d901      	bls.n	8005f48 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005f44:	2337      	movs	r3, #55	; 0x37
 8005f46:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f4c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f52:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f56:	2200      	movs	r2, #0
 8005f58:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f5c:	3304      	adds	r3, #4
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f7fe fea6 	bl	8004cb0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f66:	3318      	adds	r3, #24
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f7fe fea1 	bl	8004cb0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f72:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f76:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f7c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f82:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f86:	2200      	movs	r2, #0
 8005f88:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005f92:	683a      	ldr	r2, [r7, #0]
 8005f94:	68f9      	ldr	r1, [r7, #12]
 8005f96:	69b8      	ldr	r0, [r7, #24]
 8005f98:	f001 fa26 	bl	80073e8 <pxPortInitialiseStack>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d002      	beq.n	8005fae <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005faa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005fae:	bf00      	nop
 8005fb0:	3720      	adds	r7, #32
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}
	...

08005fb8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b082      	sub	sp, #8
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005fc0:	f001 fb40 	bl	8007644 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005fc4:	4b2d      	ldr	r3, [pc, #180]	; (800607c <prvAddNewTaskToReadyList+0xc4>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	3301      	adds	r3, #1
 8005fca:	4a2c      	ldr	r2, [pc, #176]	; (800607c <prvAddNewTaskToReadyList+0xc4>)
 8005fcc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005fce:	4b2c      	ldr	r3, [pc, #176]	; (8006080 <prvAddNewTaskToReadyList+0xc8>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d109      	bne.n	8005fea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005fd6:	4a2a      	ldr	r2, [pc, #168]	; (8006080 <prvAddNewTaskToReadyList+0xc8>)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005fdc:	4b27      	ldr	r3, [pc, #156]	; (800607c <prvAddNewTaskToReadyList+0xc4>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d110      	bne.n	8006006 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005fe4:	f000 fc16 	bl	8006814 <prvInitialiseTaskLists>
 8005fe8:	e00d      	b.n	8006006 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005fea:	4b26      	ldr	r3, [pc, #152]	; (8006084 <prvAddNewTaskToReadyList+0xcc>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d109      	bne.n	8006006 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005ff2:	4b23      	ldr	r3, [pc, #140]	; (8006080 <prvAddNewTaskToReadyList+0xc8>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d802      	bhi.n	8006006 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006000:	4a1f      	ldr	r2, [pc, #124]	; (8006080 <prvAddNewTaskToReadyList+0xc8>)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006006:	4b20      	ldr	r3, [pc, #128]	; (8006088 <prvAddNewTaskToReadyList+0xd0>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	3301      	adds	r3, #1
 800600c:	4a1e      	ldr	r2, [pc, #120]	; (8006088 <prvAddNewTaskToReadyList+0xd0>)
 800600e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006010:	4b1d      	ldr	r3, [pc, #116]	; (8006088 <prvAddNewTaskToReadyList+0xd0>)
 8006012:	681a      	ldr	r2, [r3, #0]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800601c:	4b1b      	ldr	r3, [pc, #108]	; (800608c <prvAddNewTaskToReadyList+0xd4>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	429a      	cmp	r2, r3
 8006022:	d903      	bls.n	800602c <prvAddNewTaskToReadyList+0x74>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006028:	4a18      	ldr	r2, [pc, #96]	; (800608c <prvAddNewTaskToReadyList+0xd4>)
 800602a:	6013      	str	r3, [r2, #0]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006030:	4613      	mov	r3, r2
 8006032:	009b      	lsls	r3, r3, #2
 8006034:	4413      	add	r3, r2
 8006036:	009b      	lsls	r3, r3, #2
 8006038:	4a15      	ldr	r2, [pc, #84]	; (8006090 <prvAddNewTaskToReadyList+0xd8>)
 800603a:	441a      	add	r2, r3
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	3304      	adds	r3, #4
 8006040:	4619      	mov	r1, r3
 8006042:	4610      	mov	r0, r2
 8006044:	f7fe fe41 	bl	8004cca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006048:	f001 fb2c 	bl	80076a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800604c:	4b0d      	ldr	r3, [pc, #52]	; (8006084 <prvAddNewTaskToReadyList+0xcc>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d00e      	beq.n	8006072 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006054:	4b0a      	ldr	r3, [pc, #40]	; (8006080 <prvAddNewTaskToReadyList+0xc8>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800605e:	429a      	cmp	r2, r3
 8006060:	d207      	bcs.n	8006072 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006062:	4b0c      	ldr	r3, [pc, #48]	; (8006094 <prvAddNewTaskToReadyList+0xdc>)
 8006064:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006068:	601a      	str	r2, [r3, #0]
 800606a:	f3bf 8f4f 	dsb	sy
 800606e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006072:	bf00      	nop
 8006074:	3708      	adds	r7, #8
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}
 800607a:	bf00      	nop
 800607c:	20000d94 	.word	0x20000d94
 8006080:	200008c0 	.word	0x200008c0
 8006084:	20000da0 	.word	0x20000da0
 8006088:	20000db0 	.word	0x20000db0
 800608c:	20000d9c 	.word	0x20000d9c
 8006090:	200008c4 	.word	0x200008c4
 8006094:	e000ed04 	.word	0xe000ed04

08006098 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006098:	b580      	push	{r7, lr}
 800609a:	b084      	sub	sp, #16
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80060a0:	2300      	movs	r3, #0
 80060a2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d017      	beq.n	80060da <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80060aa:	4b13      	ldr	r3, [pc, #76]	; (80060f8 <vTaskDelay+0x60>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d00a      	beq.n	80060c8 <vTaskDelay+0x30>
	__asm volatile
 80060b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b6:	f383 8811 	msr	BASEPRI, r3
 80060ba:	f3bf 8f6f 	isb	sy
 80060be:	f3bf 8f4f 	dsb	sy
 80060c2:	60bb      	str	r3, [r7, #8]
}
 80060c4:	bf00      	nop
 80060c6:	e7fe      	b.n	80060c6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80060c8:	f000 f880 	bl	80061cc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80060cc:	2100      	movs	r1, #0
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f000 fde8 	bl	8006ca4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80060d4:	f000 f888 	bl	80061e8 <xTaskResumeAll>
 80060d8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d107      	bne.n	80060f0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80060e0:	4b06      	ldr	r3, [pc, #24]	; (80060fc <vTaskDelay+0x64>)
 80060e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060e6:	601a      	str	r2, [r3, #0]
 80060e8:	f3bf 8f4f 	dsb	sy
 80060ec:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80060f0:	bf00      	nop
 80060f2:	3710      	adds	r7, #16
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}
 80060f8:	20000dbc 	.word	0x20000dbc
 80060fc:	e000ed04 	.word	0xe000ed04

08006100 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b08a      	sub	sp, #40	; 0x28
 8006104:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006106:	2300      	movs	r3, #0
 8006108:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800610a:	2300      	movs	r3, #0
 800610c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800610e:	463a      	mov	r2, r7
 8006110:	1d39      	adds	r1, r7, #4
 8006112:	f107 0308 	add.w	r3, r7, #8
 8006116:	4618      	mov	r0, r3
 8006118:	f7fe fd76 	bl	8004c08 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800611c:	6839      	ldr	r1, [r7, #0]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	68ba      	ldr	r2, [r7, #8]
 8006122:	9202      	str	r2, [sp, #8]
 8006124:	9301      	str	r3, [sp, #4]
 8006126:	2300      	movs	r3, #0
 8006128:	9300      	str	r3, [sp, #0]
 800612a:	2300      	movs	r3, #0
 800612c:	460a      	mov	r2, r1
 800612e:	4921      	ldr	r1, [pc, #132]	; (80061b4 <vTaskStartScheduler+0xb4>)
 8006130:	4821      	ldr	r0, [pc, #132]	; (80061b8 <vTaskStartScheduler+0xb8>)
 8006132:	f7ff fe0f 	bl	8005d54 <xTaskCreateStatic>
 8006136:	4603      	mov	r3, r0
 8006138:	4a20      	ldr	r2, [pc, #128]	; (80061bc <vTaskStartScheduler+0xbc>)
 800613a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800613c:	4b1f      	ldr	r3, [pc, #124]	; (80061bc <vTaskStartScheduler+0xbc>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d002      	beq.n	800614a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006144:	2301      	movs	r3, #1
 8006146:	617b      	str	r3, [r7, #20]
 8006148:	e001      	b.n	800614e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800614a:	2300      	movs	r3, #0
 800614c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	2b01      	cmp	r3, #1
 8006152:	d102      	bne.n	800615a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006154:	f000 fdfa 	bl	8006d4c <xTimerCreateTimerTask>
 8006158:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	2b01      	cmp	r3, #1
 800615e:	d116      	bne.n	800618e <vTaskStartScheduler+0x8e>
	__asm volatile
 8006160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006164:	f383 8811 	msr	BASEPRI, r3
 8006168:	f3bf 8f6f 	isb	sy
 800616c:	f3bf 8f4f 	dsb	sy
 8006170:	613b      	str	r3, [r7, #16]
}
 8006172:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006174:	4b12      	ldr	r3, [pc, #72]	; (80061c0 <vTaskStartScheduler+0xc0>)
 8006176:	f04f 32ff 	mov.w	r2, #4294967295
 800617a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800617c:	4b11      	ldr	r3, [pc, #68]	; (80061c4 <vTaskStartScheduler+0xc4>)
 800617e:	2201      	movs	r2, #1
 8006180:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006182:	4b11      	ldr	r3, [pc, #68]	; (80061c8 <vTaskStartScheduler+0xc8>)
 8006184:	2200      	movs	r2, #0
 8006186:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006188:	f001 f9ba 	bl	8007500 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800618c:	e00e      	b.n	80061ac <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006194:	d10a      	bne.n	80061ac <vTaskStartScheduler+0xac>
	__asm volatile
 8006196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800619a:	f383 8811 	msr	BASEPRI, r3
 800619e:	f3bf 8f6f 	isb	sy
 80061a2:	f3bf 8f4f 	dsb	sy
 80061a6:	60fb      	str	r3, [r7, #12]
}
 80061a8:	bf00      	nop
 80061aa:	e7fe      	b.n	80061aa <vTaskStartScheduler+0xaa>
}
 80061ac:	bf00      	nop
 80061ae:	3718      	adds	r7, #24
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}
 80061b4:	0800a828 	.word	0x0800a828
 80061b8:	080067e5 	.word	0x080067e5
 80061bc:	20000db8 	.word	0x20000db8
 80061c0:	20000db4 	.word	0x20000db4
 80061c4:	20000da0 	.word	0x20000da0
 80061c8:	20000d98 	.word	0x20000d98

080061cc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80061cc:	b480      	push	{r7}
 80061ce:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80061d0:	4b04      	ldr	r3, [pc, #16]	; (80061e4 <vTaskSuspendAll+0x18>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	3301      	adds	r3, #1
 80061d6:	4a03      	ldr	r2, [pc, #12]	; (80061e4 <vTaskSuspendAll+0x18>)
 80061d8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80061da:	bf00      	nop
 80061dc:	46bd      	mov	sp, r7
 80061de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e2:	4770      	bx	lr
 80061e4:	20000dbc 	.word	0x20000dbc

080061e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b084      	sub	sp, #16
 80061ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80061ee:	2300      	movs	r3, #0
 80061f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80061f2:	2300      	movs	r3, #0
 80061f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80061f6:	4b42      	ldr	r3, [pc, #264]	; (8006300 <xTaskResumeAll+0x118>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d10a      	bne.n	8006214 <xTaskResumeAll+0x2c>
	__asm volatile
 80061fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006202:	f383 8811 	msr	BASEPRI, r3
 8006206:	f3bf 8f6f 	isb	sy
 800620a:	f3bf 8f4f 	dsb	sy
 800620e:	603b      	str	r3, [r7, #0]
}
 8006210:	bf00      	nop
 8006212:	e7fe      	b.n	8006212 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006214:	f001 fa16 	bl	8007644 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006218:	4b39      	ldr	r3, [pc, #228]	; (8006300 <xTaskResumeAll+0x118>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	3b01      	subs	r3, #1
 800621e:	4a38      	ldr	r2, [pc, #224]	; (8006300 <xTaskResumeAll+0x118>)
 8006220:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006222:	4b37      	ldr	r3, [pc, #220]	; (8006300 <xTaskResumeAll+0x118>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d162      	bne.n	80062f0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800622a:	4b36      	ldr	r3, [pc, #216]	; (8006304 <xTaskResumeAll+0x11c>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d05e      	beq.n	80062f0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006232:	e02f      	b.n	8006294 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006234:	4b34      	ldr	r3, [pc, #208]	; (8006308 <xTaskResumeAll+0x120>)
 8006236:	68db      	ldr	r3, [r3, #12]
 8006238:	68db      	ldr	r3, [r3, #12]
 800623a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	3318      	adds	r3, #24
 8006240:	4618      	mov	r0, r3
 8006242:	f7fe fd9f 	bl	8004d84 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	3304      	adds	r3, #4
 800624a:	4618      	mov	r0, r3
 800624c:	f7fe fd9a 	bl	8004d84 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006254:	4b2d      	ldr	r3, [pc, #180]	; (800630c <xTaskResumeAll+0x124>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	429a      	cmp	r2, r3
 800625a:	d903      	bls.n	8006264 <xTaskResumeAll+0x7c>
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006260:	4a2a      	ldr	r2, [pc, #168]	; (800630c <xTaskResumeAll+0x124>)
 8006262:	6013      	str	r3, [r2, #0]
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006268:	4613      	mov	r3, r2
 800626a:	009b      	lsls	r3, r3, #2
 800626c:	4413      	add	r3, r2
 800626e:	009b      	lsls	r3, r3, #2
 8006270:	4a27      	ldr	r2, [pc, #156]	; (8006310 <xTaskResumeAll+0x128>)
 8006272:	441a      	add	r2, r3
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	3304      	adds	r3, #4
 8006278:	4619      	mov	r1, r3
 800627a:	4610      	mov	r0, r2
 800627c:	f7fe fd25 	bl	8004cca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006284:	4b23      	ldr	r3, [pc, #140]	; (8006314 <xTaskResumeAll+0x12c>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800628a:	429a      	cmp	r2, r3
 800628c:	d302      	bcc.n	8006294 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800628e:	4b22      	ldr	r3, [pc, #136]	; (8006318 <xTaskResumeAll+0x130>)
 8006290:	2201      	movs	r2, #1
 8006292:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006294:	4b1c      	ldr	r3, [pc, #112]	; (8006308 <xTaskResumeAll+0x120>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d1cb      	bne.n	8006234 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d001      	beq.n	80062a6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80062a2:	f000 fb55 	bl	8006950 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80062a6:	4b1d      	ldr	r3, [pc, #116]	; (800631c <xTaskResumeAll+0x134>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d010      	beq.n	80062d4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80062b2:	f000 f847 	bl	8006344 <xTaskIncrementTick>
 80062b6:	4603      	mov	r3, r0
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d002      	beq.n	80062c2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80062bc:	4b16      	ldr	r3, [pc, #88]	; (8006318 <xTaskResumeAll+0x130>)
 80062be:	2201      	movs	r2, #1
 80062c0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	3b01      	subs	r3, #1
 80062c6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d1f1      	bne.n	80062b2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80062ce:	4b13      	ldr	r3, [pc, #76]	; (800631c <xTaskResumeAll+0x134>)
 80062d0:	2200      	movs	r2, #0
 80062d2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80062d4:	4b10      	ldr	r3, [pc, #64]	; (8006318 <xTaskResumeAll+0x130>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d009      	beq.n	80062f0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80062dc:	2301      	movs	r3, #1
 80062de:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80062e0:	4b0f      	ldr	r3, [pc, #60]	; (8006320 <xTaskResumeAll+0x138>)
 80062e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062e6:	601a      	str	r2, [r3, #0]
 80062e8:	f3bf 8f4f 	dsb	sy
 80062ec:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80062f0:	f001 f9d8 	bl	80076a4 <vPortExitCritical>

	return xAlreadyYielded;
 80062f4:	68bb      	ldr	r3, [r7, #8]
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3710      	adds	r7, #16
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}
 80062fe:	bf00      	nop
 8006300:	20000dbc 	.word	0x20000dbc
 8006304:	20000d94 	.word	0x20000d94
 8006308:	20000d54 	.word	0x20000d54
 800630c:	20000d9c 	.word	0x20000d9c
 8006310:	200008c4 	.word	0x200008c4
 8006314:	200008c0 	.word	0x200008c0
 8006318:	20000da8 	.word	0x20000da8
 800631c:	20000da4 	.word	0x20000da4
 8006320:	e000ed04 	.word	0xe000ed04

08006324 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006324:	b480      	push	{r7}
 8006326:	b083      	sub	sp, #12
 8006328:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800632a:	4b05      	ldr	r3, [pc, #20]	; (8006340 <xTaskGetTickCount+0x1c>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006330:	687b      	ldr	r3, [r7, #4]
}
 8006332:	4618      	mov	r0, r3
 8006334:	370c      	adds	r7, #12
 8006336:	46bd      	mov	sp, r7
 8006338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633c:	4770      	bx	lr
 800633e:	bf00      	nop
 8006340:	20000d98 	.word	0x20000d98

08006344 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b086      	sub	sp, #24
 8006348:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800634a:	2300      	movs	r3, #0
 800634c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800634e:	4b4f      	ldr	r3, [pc, #316]	; (800648c <xTaskIncrementTick+0x148>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	2b00      	cmp	r3, #0
 8006354:	f040 808f 	bne.w	8006476 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006358:	4b4d      	ldr	r3, [pc, #308]	; (8006490 <xTaskIncrementTick+0x14c>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	3301      	adds	r3, #1
 800635e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006360:	4a4b      	ldr	r2, [pc, #300]	; (8006490 <xTaskIncrementTick+0x14c>)
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d120      	bne.n	80063ae <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800636c:	4b49      	ldr	r3, [pc, #292]	; (8006494 <xTaskIncrementTick+0x150>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d00a      	beq.n	800638c <xTaskIncrementTick+0x48>
	__asm volatile
 8006376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800637a:	f383 8811 	msr	BASEPRI, r3
 800637e:	f3bf 8f6f 	isb	sy
 8006382:	f3bf 8f4f 	dsb	sy
 8006386:	603b      	str	r3, [r7, #0]
}
 8006388:	bf00      	nop
 800638a:	e7fe      	b.n	800638a <xTaskIncrementTick+0x46>
 800638c:	4b41      	ldr	r3, [pc, #260]	; (8006494 <xTaskIncrementTick+0x150>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	60fb      	str	r3, [r7, #12]
 8006392:	4b41      	ldr	r3, [pc, #260]	; (8006498 <xTaskIncrementTick+0x154>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a3f      	ldr	r2, [pc, #252]	; (8006494 <xTaskIncrementTick+0x150>)
 8006398:	6013      	str	r3, [r2, #0]
 800639a:	4a3f      	ldr	r2, [pc, #252]	; (8006498 <xTaskIncrementTick+0x154>)
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	6013      	str	r3, [r2, #0]
 80063a0:	4b3e      	ldr	r3, [pc, #248]	; (800649c <xTaskIncrementTick+0x158>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	3301      	adds	r3, #1
 80063a6:	4a3d      	ldr	r2, [pc, #244]	; (800649c <xTaskIncrementTick+0x158>)
 80063a8:	6013      	str	r3, [r2, #0]
 80063aa:	f000 fad1 	bl	8006950 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80063ae:	4b3c      	ldr	r3, [pc, #240]	; (80064a0 <xTaskIncrementTick+0x15c>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	693a      	ldr	r2, [r7, #16]
 80063b4:	429a      	cmp	r2, r3
 80063b6:	d349      	bcc.n	800644c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80063b8:	4b36      	ldr	r3, [pc, #216]	; (8006494 <xTaskIncrementTick+0x150>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d104      	bne.n	80063cc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063c2:	4b37      	ldr	r3, [pc, #220]	; (80064a0 <xTaskIncrementTick+0x15c>)
 80063c4:	f04f 32ff 	mov.w	r2, #4294967295
 80063c8:	601a      	str	r2, [r3, #0]
					break;
 80063ca:	e03f      	b.n	800644c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063cc:	4b31      	ldr	r3, [pc, #196]	; (8006494 <xTaskIncrementTick+0x150>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	68db      	ldr	r3, [r3, #12]
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80063dc:	693a      	ldr	r2, [r7, #16]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	429a      	cmp	r2, r3
 80063e2:	d203      	bcs.n	80063ec <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80063e4:	4a2e      	ldr	r2, [pc, #184]	; (80064a0 <xTaskIncrementTick+0x15c>)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80063ea:	e02f      	b.n	800644c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	3304      	adds	r3, #4
 80063f0:	4618      	mov	r0, r3
 80063f2:	f7fe fcc7 	bl	8004d84 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d004      	beq.n	8006408 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	3318      	adds	r3, #24
 8006402:	4618      	mov	r0, r3
 8006404:	f7fe fcbe 	bl	8004d84 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800640c:	4b25      	ldr	r3, [pc, #148]	; (80064a4 <xTaskIncrementTick+0x160>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	429a      	cmp	r2, r3
 8006412:	d903      	bls.n	800641c <xTaskIncrementTick+0xd8>
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006418:	4a22      	ldr	r2, [pc, #136]	; (80064a4 <xTaskIncrementTick+0x160>)
 800641a:	6013      	str	r3, [r2, #0]
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006420:	4613      	mov	r3, r2
 8006422:	009b      	lsls	r3, r3, #2
 8006424:	4413      	add	r3, r2
 8006426:	009b      	lsls	r3, r3, #2
 8006428:	4a1f      	ldr	r2, [pc, #124]	; (80064a8 <xTaskIncrementTick+0x164>)
 800642a:	441a      	add	r2, r3
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	3304      	adds	r3, #4
 8006430:	4619      	mov	r1, r3
 8006432:	4610      	mov	r0, r2
 8006434:	f7fe fc49 	bl	8004cca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800643c:	4b1b      	ldr	r3, [pc, #108]	; (80064ac <xTaskIncrementTick+0x168>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006442:	429a      	cmp	r2, r3
 8006444:	d3b8      	bcc.n	80063b8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006446:	2301      	movs	r3, #1
 8006448:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800644a:	e7b5      	b.n	80063b8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800644c:	4b17      	ldr	r3, [pc, #92]	; (80064ac <xTaskIncrementTick+0x168>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006452:	4915      	ldr	r1, [pc, #84]	; (80064a8 <xTaskIncrementTick+0x164>)
 8006454:	4613      	mov	r3, r2
 8006456:	009b      	lsls	r3, r3, #2
 8006458:	4413      	add	r3, r2
 800645a:	009b      	lsls	r3, r3, #2
 800645c:	440b      	add	r3, r1
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	2b01      	cmp	r3, #1
 8006462:	d901      	bls.n	8006468 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006464:	2301      	movs	r3, #1
 8006466:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006468:	4b11      	ldr	r3, [pc, #68]	; (80064b0 <xTaskIncrementTick+0x16c>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d007      	beq.n	8006480 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006470:	2301      	movs	r3, #1
 8006472:	617b      	str	r3, [r7, #20]
 8006474:	e004      	b.n	8006480 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006476:	4b0f      	ldr	r3, [pc, #60]	; (80064b4 <xTaskIncrementTick+0x170>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	3301      	adds	r3, #1
 800647c:	4a0d      	ldr	r2, [pc, #52]	; (80064b4 <xTaskIncrementTick+0x170>)
 800647e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006480:	697b      	ldr	r3, [r7, #20]
}
 8006482:	4618      	mov	r0, r3
 8006484:	3718      	adds	r7, #24
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}
 800648a:	bf00      	nop
 800648c:	20000dbc 	.word	0x20000dbc
 8006490:	20000d98 	.word	0x20000d98
 8006494:	20000d4c 	.word	0x20000d4c
 8006498:	20000d50 	.word	0x20000d50
 800649c:	20000dac 	.word	0x20000dac
 80064a0:	20000db4 	.word	0x20000db4
 80064a4:	20000d9c 	.word	0x20000d9c
 80064a8:	200008c4 	.word	0x200008c4
 80064ac:	200008c0 	.word	0x200008c0
 80064b0:	20000da8 	.word	0x20000da8
 80064b4:	20000da4 	.word	0x20000da4

080064b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80064b8:	b480      	push	{r7}
 80064ba:	b085      	sub	sp, #20
 80064bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80064be:	4b28      	ldr	r3, [pc, #160]	; (8006560 <vTaskSwitchContext+0xa8>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d003      	beq.n	80064ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80064c6:	4b27      	ldr	r3, [pc, #156]	; (8006564 <vTaskSwitchContext+0xac>)
 80064c8:	2201      	movs	r2, #1
 80064ca:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80064cc:	e041      	b.n	8006552 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80064ce:	4b25      	ldr	r3, [pc, #148]	; (8006564 <vTaskSwitchContext+0xac>)
 80064d0:	2200      	movs	r2, #0
 80064d2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064d4:	4b24      	ldr	r3, [pc, #144]	; (8006568 <vTaskSwitchContext+0xb0>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	60fb      	str	r3, [r7, #12]
 80064da:	e010      	b.n	80064fe <vTaskSwitchContext+0x46>
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d10a      	bne.n	80064f8 <vTaskSwitchContext+0x40>
	__asm volatile
 80064e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e6:	f383 8811 	msr	BASEPRI, r3
 80064ea:	f3bf 8f6f 	isb	sy
 80064ee:	f3bf 8f4f 	dsb	sy
 80064f2:	607b      	str	r3, [r7, #4]
}
 80064f4:	bf00      	nop
 80064f6:	e7fe      	b.n	80064f6 <vTaskSwitchContext+0x3e>
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	3b01      	subs	r3, #1
 80064fc:	60fb      	str	r3, [r7, #12]
 80064fe:	491b      	ldr	r1, [pc, #108]	; (800656c <vTaskSwitchContext+0xb4>)
 8006500:	68fa      	ldr	r2, [r7, #12]
 8006502:	4613      	mov	r3, r2
 8006504:	009b      	lsls	r3, r3, #2
 8006506:	4413      	add	r3, r2
 8006508:	009b      	lsls	r3, r3, #2
 800650a:	440b      	add	r3, r1
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d0e4      	beq.n	80064dc <vTaskSwitchContext+0x24>
 8006512:	68fa      	ldr	r2, [r7, #12]
 8006514:	4613      	mov	r3, r2
 8006516:	009b      	lsls	r3, r3, #2
 8006518:	4413      	add	r3, r2
 800651a:	009b      	lsls	r3, r3, #2
 800651c:	4a13      	ldr	r2, [pc, #76]	; (800656c <vTaskSwitchContext+0xb4>)
 800651e:	4413      	add	r3, r2
 8006520:	60bb      	str	r3, [r7, #8]
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	685b      	ldr	r3, [r3, #4]
 8006526:	685a      	ldr	r2, [r3, #4]
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	605a      	str	r2, [r3, #4]
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	685a      	ldr	r2, [r3, #4]
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	3308      	adds	r3, #8
 8006534:	429a      	cmp	r2, r3
 8006536:	d104      	bne.n	8006542 <vTaskSwitchContext+0x8a>
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	685a      	ldr	r2, [r3, #4]
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	605a      	str	r2, [r3, #4]
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	68db      	ldr	r3, [r3, #12]
 8006548:	4a09      	ldr	r2, [pc, #36]	; (8006570 <vTaskSwitchContext+0xb8>)
 800654a:	6013      	str	r3, [r2, #0]
 800654c:	4a06      	ldr	r2, [pc, #24]	; (8006568 <vTaskSwitchContext+0xb0>)
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	6013      	str	r3, [r2, #0]
}
 8006552:	bf00      	nop
 8006554:	3714      	adds	r7, #20
 8006556:	46bd      	mov	sp, r7
 8006558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655c:	4770      	bx	lr
 800655e:	bf00      	nop
 8006560:	20000dbc 	.word	0x20000dbc
 8006564:	20000da8 	.word	0x20000da8
 8006568:	20000d9c 	.word	0x20000d9c
 800656c:	200008c4 	.word	0x200008c4
 8006570:	200008c0 	.word	0x200008c0

08006574 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b084      	sub	sp, #16
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d10a      	bne.n	800659a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006588:	f383 8811 	msr	BASEPRI, r3
 800658c:	f3bf 8f6f 	isb	sy
 8006590:	f3bf 8f4f 	dsb	sy
 8006594:	60fb      	str	r3, [r7, #12]
}
 8006596:	bf00      	nop
 8006598:	e7fe      	b.n	8006598 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800659a:	4b07      	ldr	r3, [pc, #28]	; (80065b8 <vTaskPlaceOnEventList+0x44>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	3318      	adds	r3, #24
 80065a0:	4619      	mov	r1, r3
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f7fe fbb5 	bl	8004d12 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80065a8:	2101      	movs	r1, #1
 80065aa:	6838      	ldr	r0, [r7, #0]
 80065ac:	f000 fb7a 	bl	8006ca4 <prvAddCurrentTaskToDelayedList>
}
 80065b0:	bf00      	nop
 80065b2:	3710      	adds	r7, #16
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}
 80065b8:	200008c0 	.word	0x200008c0

080065bc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b086      	sub	sp, #24
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	60f8      	str	r0, [r7, #12]
 80065c4:	60b9      	str	r1, [r7, #8]
 80065c6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d10a      	bne.n	80065e4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80065ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d2:	f383 8811 	msr	BASEPRI, r3
 80065d6:	f3bf 8f6f 	isb	sy
 80065da:	f3bf 8f4f 	dsb	sy
 80065de:	617b      	str	r3, [r7, #20]
}
 80065e0:	bf00      	nop
 80065e2:	e7fe      	b.n	80065e2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80065e4:	4b0a      	ldr	r3, [pc, #40]	; (8006610 <vTaskPlaceOnEventListRestricted+0x54>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	3318      	adds	r3, #24
 80065ea:	4619      	mov	r1, r3
 80065ec:	68f8      	ldr	r0, [r7, #12]
 80065ee:	f7fe fb6c 	bl	8004cca <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d002      	beq.n	80065fe <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80065f8:	f04f 33ff 	mov.w	r3, #4294967295
 80065fc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80065fe:	6879      	ldr	r1, [r7, #4]
 8006600:	68b8      	ldr	r0, [r7, #8]
 8006602:	f000 fb4f 	bl	8006ca4 <prvAddCurrentTaskToDelayedList>
	}
 8006606:	bf00      	nop
 8006608:	3718      	adds	r7, #24
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}
 800660e:	bf00      	nop
 8006610:	200008c0 	.word	0x200008c0

08006614 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b086      	sub	sp, #24
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	68db      	ldr	r3, [r3, #12]
 8006620:	68db      	ldr	r3, [r3, #12]
 8006622:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d10a      	bne.n	8006640 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800662a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800662e:	f383 8811 	msr	BASEPRI, r3
 8006632:	f3bf 8f6f 	isb	sy
 8006636:	f3bf 8f4f 	dsb	sy
 800663a:	60fb      	str	r3, [r7, #12]
}
 800663c:	bf00      	nop
 800663e:	e7fe      	b.n	800663e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	3318      	adds	r3, #24
 8006644:	4618      	mov	r0, r3
 8006646:	f7fe fb9d 	bl	8004d84 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800664a:	4b1e      	ldr	r3, [pc, #120]	; (80066c4 <xTaskRemoveFromEventList+0xb0>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d11d      	bne.n	800668e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	3304      	adds	r3, #4
 8006656:	4618      	mov	r0, r3
 8006658:	f7fe fb94 	bl	8004d84 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006660:	4b19      	ldr	r3, [pc, #100]	; (80066c8 <xTaskRemoveFromEventList+0xb4>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	429a      	cmp	r2, r3
 8006666:	d903      	bls.n	8006670 <xTaskRemoveFromEventList+0x5c>
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800666c:	4a16      	ldr	r2, [pc, #88]	; (80066c8 <xTaskRemoveFromEventList+0xb4>)
 800666e:	6013      	str	r3, [r2, #0]
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006674:	4613      	mov	r3, r2
 8006676:	009b      	lsls	r3, r3, #2
 8006678:	4413      	add	r3, r2
 800667a:	009b      	lsls	r3, r3, #2
 800667c:	4a13      	ldr	r2, [pc, #76]	; (80066cc <xTaskRemoveFromEventList+0xb8>)
 800667e:	441a      	add	r2, r3
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	3304      	adds	r3, #4
 8006684:	4619      	mov	r1, r3
 8006686:	4610      	mov	r0, r2
 8006688:	f7fe fb1f 	bl	8004cca <vListInsertEnd>
 800668c:	e005      	b.n	800669a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	3318      	adds	r3, #24
 8006692:	4619      	mov	r1, r3
 8006694:	480e      	ldr	r0, [pc, #56]	; (80066d0 <xTaskRemoveFromEventList+0xbc>)
 8006696:	f7fe fb18 	bl	8004cca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800669e:	4b0d      	ldr	r3, [pc, #52]	; (80066d4 <xTaskRemoveFromEventList+0xc0>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d905      	bls.n	80066b4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80066a8:	2301      	movs	r3, #1
 80066aa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80066ac:	4b0a      	ldr	r3, [pc, #40]	; (80066d8 <xTaskRemoveFromEventList+0xc4>)
 80066ae:	2201      	movs	r2, #1
 80066b0:	601a      	str	r2, [r3, #0]
 80066b2:	e001      	b.n	80066b8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80066b4:	2300      	movs	r3, #0
 80066b6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80066b8:	697b      	ldr	r3, [r7, #20]
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3718      	adds	r7, #24
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
 80066c2:	bf00      	nop
 80066c4:	20000dbc 	.word	0x20000dbc
 80066c8:	20000d9c 	.word	0x20000d9c
 80066cc:	200008c4 	.word	0x200008c4
 80066d0:	20000d54 	.word	0x20000d54
 80066d4:	200008c0 	.word	0x200008c0
 80066d8:	20000da8 	.word	0x20000da8

080066dc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80066dc:	b480      	push	{r7}
 80066de:	b083      	sub	sp, #12
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80066e4:	4b06      	ldr	r3, [pc, #24]	; (8006700 <vTaskInternalSetTimeOutState+0x24>)
 80066e6:	681a      	ldr	r2, [r3, #0]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80066ec:	4b05      	ldr	r3, [pc, #20]	; (8006704 <vTaskInternalSetTimeOutState+0x28>)
 80066ee:	681a      	ldr	r2, [r3, #0]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	605a      	str	r2, [r3, #4]
}
 80066f4:	bf00      	nop
 80066f6:	370c      	adds	r7, #12
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr
 8006700:	20000dac 	.word	0x20000dac
 8006704:	20000d98 	.word	0x20000d98

08006708 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b088      	sub	sp, #32
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
 8006710:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d10a      	bne.n	800672e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800671c:	f383 8811 	msr	BASEPRI, r3
 8006720:	f3bf 8f6f 	isb	sy
 8006724:	f3bf 8f4f 	dsb	sy
 8006728:	613b      	str	r3, [r7, #16]
}
 800672a:	bf00      	nop
 800672c:	e7fe      	b.n	800672c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d10a      	bne.n	800674a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006738:	f383 8811 	msr	BASEPRI, r3
 800673c:	f3bf 8f6f 	isb	sy
 8006740:	f3bf 8f4f 	dsb	sy
 8006744:	60fb      	str	r3, [r7, #12]
}
 8006746:	bf00      	nop
 8006748:	e7fe      	b.n	8006748 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800674a:	f000 ff7b 	bl	8007644 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800674e:	4b1d      	ldr	r3, [pc, #116]	; (80067c4 <xTaskCheckForTimeOut+0xbc>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	69ba      	ldr	r2, [r7, #24]
 800675a:	1ad3      	subs	r3, r2, r3
 800675c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006766:	d102      	bne.n	800676e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006768:	2300      	movs	r3, #0
 800676a:	61fb      	str	r3, [r7, #28]
 800676c:	e023      	b.n	80067b6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	4b15      	ldr	r3, [pc, #84]	; (80067c8 <xTaskCheckForTimeOut+0xc0>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	429a      	cmp	r2, r3
 8006778:	d007      	beq.n	800678a <xTaskCheckForTimeOut+0x82>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	69ba      	ldr	r2, [r7, #24]
 8006780:	429a      	cmp	r2, r3
 8006782:	d302      	bcc.n	800678a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006784:	2301      	movs	r3, #1
 8006786:	61fb      	str	r3, [r7, #28]
 8006788:	e015      	b.n	80067b6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	697a      	ldr	r2, [r7, #20]
 8006790:	429a      	cmp	r2, r3
 8006792:	d20b      	bcs.n	80067ac <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	681a      	ldr	r2, [r3, #0]
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	1ad2      	subs	r2, r2, r3
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f7ff ff9b 	bl	80066dc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80067a6:	2300      	movs	r3, #0
 80067a8:	61fb      	str	r3, [r7, #28]
 80067aa:	e004      	b.n	80067b6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	2200      	movs	r2, #0
 80067b0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80067b2:	2301      	movs	r3, #1
 80067b4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80067b6:	f000 ff75 	bl	80076a4 <vPortExitCritical>

	return xReturn;
 80067ba:	69fb      	ldr	r3, [r7, #28]
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3720      	adds	r7, #32
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}
 80067c4:	20000d98 	.word	0x20000d98
 80067c8:	20000dac 	.word	0x20000dac

080067cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80067cc:	b480      	push	{r7}
 80067ce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80067d0:	4b03      	ldr	r3, [pc, #12]	; (80067e0 <vTaskMissedYield+0x14>)
 80067d2:	2201      	movs	r2, #1
 80067d4:	601a      	str	r2, [r3, #0]
}
 80067d6:	bf00      	nop
 80067d8:	46bd      	mov	sp, r7
 80067da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067de:	4770      	bx	lr
 80067e0:	20000da8 	.word	0x20000da8

080067e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b082      	sub	sp, #8
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80067ec:	f000 f852 	bl	8006894 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80067f0:	4b06      	ldr	r3, [pc, #24]	; (800680c <prvIdleTask+0x28>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	2b01      	cmp	r3, #1
 80067f6:	d9f9      	bls.n	80067ec <prvIdleTask+0x8>
			{
				taskYIELD();
 80067f8:	4b05      	ldr	r3, [pc, #20]	; (8006810 <prvIdleTask+0x2c>)
 80067fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067fe:	601a      	str	r2, [r3, #0]
 8006800:	f3bf 8f4f 	dsb	sy
 8006804:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006808:	e7f0      	b.n	80067ec <prvIdleTask+0x8>
 800680a:	bf00      	nop
 800680c:	200008c4 	.word	0x200008c4
 8006810:	e000ed04 	.word	0xe000ed04

08006814 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b082      	sub	sp, #8
 8006818:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800681a:	2300      	movs	r3, #0
 800681c:	607b      	str	r3, [r7, #4]
 800681e:	e00c      	b.n	800683a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006820:	687a      	ldr	r2, [r7, #4]
 8006822:	4613      	mov	r3, r2
 8006824:	009b      	lsls	r3, r3, #2
 8006826:	4413      	add	r3, r2
 8006828:	009b      	lsls	r3, r3, #2
 800682a:	4a12      	ldr	r2, [pc, #72]	; (8006874 <prvInitialiseTaskLists+0x60>)
 800682c:	4413      	add	r3, r2
 800682e:	4618      	mov	r0, r3
 8006830:	f7fe fa1e 	bl	8004c70 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	3301      	adds	r3, #1
 8006838:	607b      	str	r3, [r7, #4]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2b37      	cmp	r3, #55	; 0x37
 800683e:	d9ef      	bls.n	8006820 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006840:	480d      	ldr	r0, [pc, #52]	; (8006878 <prvInitialiseTaskLists+0x64>)
 8006842:	f7fe fa15 	bl	8004c70 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006846:	480d      	ldr	r0, [pc, #52]	; (800687c <prvInitialiseTaskLists+0x68>)
 8006848:	f7fe fa12 	bl	8004c70 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800684c:	480c      	ldr	r0, [pc, #48]	; (8006880 <prvInitialiseTaskLists+0x6c>)
 800684e:	f7fe fa0f 	bl	8004c70 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006852:	480c      	ldr	r0, [pc, #48]	; (8006884 <prvInitialiseTaskLists+0x70>)
 8006854:	f7fe fa0c 	bl	8004c70 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006858:	480b      	ldr	r0, [pc, #44]	; (8006888 <prvInitialiseTaskLists+0x74>)
 800685a:	f7fe fa09 	bl	8004c70 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800685e:	4b0b      	ldr	r3, [pc, #44]	; (800688c <prvInitialiseTaskLists+0x78>)
 8006860:	4a05      	ldr	r2, [pc, #20]	; (8006878 <prvInitialiseTaskLists+0x64>)
 8006862:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006864:	4b0a      	ldr	r3, [pc, #40]	; (8006890 <prvInitialiseTaskLists+0x7c>)
 8006866:	4a05      	ldr	r2, [pc, #20]	; (800687c <prvInitialiseTaskLists+0x68>)
 8006868:	601a      	str	r2, [r3, #0]
}
 800686a:	bf00      	nop
 800686c:	3708      	adds	r7, #8
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}
 8006872:	bf00      	nop
 8006874:	200008c4 	.word	0x200008c4
 8006878:	20000d24 	.word	0x20000d24
 800687c:	20000d38 	.word	0x20000d38
 8006880:	20000d54 	.word	0x20000d54
 8006884:	20000d68 	.word	0x20000d68
 8006888:	20000d80 	.word	0x20000d80
 800688c:	20000d4c 	.word	0x20000d4c
 8006890:	20000d50 	.word	0x20000d50

08006894 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b082      	sub	sp, #8
 8006898:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800689a:	e019      	b.n	80068d0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800689c:	f000 fed2 	bl	8007644 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068a0:	4b10      	ldr	r3, [pc, #64]	; (80068e4 <prvCheckTasksWaitingTermination+0x50>)
 80068a2:	68db      	ldr	r3, [r3, #12]
 80068a4:	68db      	ldr	r3, [r3, #12]
 80068a6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	3304      	adds	r3, #4
 80068ac:	4618      	mov	r0, r3
 80068ae:	f7fe fa69 	bl	8004d84 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80068b2:	4b0d      	ldr	r3, [pc, #52]	; (80068e8 <prvCheckTasksWaitingTermination+0x54>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	3b01      	subs	r3, #1
 80068b8:	4a0b      	ldr	r2, [pc, #44]	; (80068e8 <prvCheckTasksWaitingTermination+0x54>)
 80068ba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80068bc:	4b0b      	ldr	r3, [pc, #44]	; (80068ec <prvCheckTasksWaitingTermination+0x58>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	3b01      	subs	r3, #1
 80068c2:	4a0a      	ldr	r2, [pc, #40]	; (80068ec <prvCheckTasksWaitingTermination+0x58>)
 80068c4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80068c6:	f000 feed 	bl	80076a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f000 f810 	bl	80068f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80068d0:	4b06      	ldr	r3, [pc, #24]	; (80068ec <prvCheckTasksWaitingTermination+0x58>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d1e1      	bne.n	800689c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80068d8:	bf00      	nop
 80068da:	bf00      	nop
 80068dc:	3708      	adds	r7, #8
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}
 80068e2:	bf00      	nop
 80068e4:	20000d68 	.word	0x20000d68
 80068e8:	20000d94 	.word	0x20000d94
 80068ec:	20000d7c 	.word	0x20000d7c

080068f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b084      	sub	sp, #16
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d108      	bne.n	8006914 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006906:	4618      	mov	r0, r3
 8006908:	f001 f88a 	bl	8007a20 <vPortFree>
				vPortFree( pxTCB );
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f001 f887 	bl	8007a20 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006912:	e018      	b.n	8006946 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800691a:	2b01      	cmp	r3, #1
 800691c:	d103      	bne.n	8006926 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f001 f87e 	bl	8007a20 <vPortFree>
	}
 8006924:	e00f      	b.n	8006946 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800692c:	2b02      	cmp	r3, #2
 800692e:	d00a      	beq.n	8006946 <prvDeleteTCB+0x56>
	__asm volatile
 8006930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006934:	f383 8811 	msr	BASEPRI, r3
 8006938:	f3bf 8f6f 	isb	sy
 800693c:	f3bf 8f4f 	dsb	sy
 8006940:	60fb      	str	r3, [r7, #12]
}
 8006942:	bf00      	nop
 8006944:	e7fe      	b.n	8006944 <prvDeleteTCB+0x54>
	}
 8006946:	bf00      	nop
 8006948:	3710      	adds	r7, #16
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}
	...

08006950 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006950:	b480      	push	{r7}
 8006952:	b083      	sub	sp, #12
 8006954:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006956:	4b0c      	ldr	r3, [pc, #48]	; (8006988 <prvResetNextTaskUnblockTime+0x38>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d104      	bne.n	800696a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006960:	4b0a      	ldr	r3, [pc, #40]	; (800698c <prvResetNextTaskUnblockTime+0x3c>)
 8006962:	f04f 32ff 	mov.w	r2, #4294967295
 8006966:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006968:	e008      	b.n	800697c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800696a:	4b07      	ldr	r3, [pc, #28]	; (8006988 <prvResetNextTaskUnblockTime+0x38>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	68db      	ldr	r3, [r3, #12]
 8006970:	68db      	ldr	r3, [r3, #12]
 8006972:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	4a04      	ldr	r2, [pc, #16]	; (800698c <prvResetNextTaskUnblockTime+0x3c>)
 800697a:	6013      	str	r3, [r2, #0]
}
 800697c:	bf00      	nop
 800697e:	370c      	adds	r7, #12
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr
 8006988:	20000d4c 	.word	0x20000d4c
 800698c:	20000db4 	.word	0x20000db4

08006990 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006990:	b480      	push	{r7}
 8006992:	b083      	sub	sp, #12
 8006994:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006996:	4b0b      	ldr	r3, [pc, #44]	; (80069c4 <xTaskGetSchedulerState+0x34>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d102      	bne.n	80069a4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800699e:	2301      	movs	r3, #1
 80069a0:	607b      	str	r3, [r7, #4]
 80069a2:	e008      	b.n	80069b6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069a4:	4b08      	ldr	r3, [pc, #32]	; (80069c8 <xTaskGetSchedulerState+0x38>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d102      	bne.n	80069b2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80069ac:	2302      	movs	r3, #2
 80069ae:	607b      	str	r3, [r7, #4]
 80069b0:	e001      	b.n	80069b6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80069b2:	2300      	movs	r3, #0
 80069b4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80069b6:	687b      	ldr	r3, [r7, #4]
	}
 80069b8:	4618      	mov	r0, r3
 80069ba:	370c      	adds	r7, #12
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr
 80069c4:	20000da0 	.word	0x20000da0
 80069c8:	20000dbc 	.word	0x20000dbc

080069cc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b084      	sub	sp, #16
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80069d8:	2300      	movs	r3, #0
 80069da:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d051      	beq.n	8006a86 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069e6:	4b2a      	ldr	r3, [pc, #168]	; (8006a90 <xTaskPriorityInherit+0xc4>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ec:	429a      	cmp	r2, r3
 80069ee:	d241      	bcs.n	8006a74 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	699b      	ldr	r3, [r3, #24]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	db06      	blt.n	8006a06 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069f8:	4b25      	ldr	r3, [pc, #148]	; (8006a90 <xTaskPriorityInherit+0xc4>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069fe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	6959      	ldr	r1, [r3, #20]
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a0e:	4613      	mov	r3, r2
 8006a10:	009b      	lsls	r3, r3, #2
 8006a12:	4413      	add	r3, r2
 8006a14:	009b      	lsls	r3, r3, #2
 8006a16:	4a1f      	ldr	r2, [pc, #124]	; (8006a94 <xTaskPriorityInherit+0xc8>)
 8006a18:	4413      	add	r3, r2
 8006a1a:	4299      	cmp	r1, r3
 8006a1c:	d122      	bne.n	8006a64 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	3304      	adds	r3, #4
 8006a22:	4618      	mov	r0, r3
 8006a24:	f7fe f9ae 	bl	8004d84 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006a28:	4b19      	ldr	r3, [pc, #100]	; (8006a90 <xTaskPriorityInherit+0xc4>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a36:	4b18      	ldr	r3, [pc, #96]	; (8006a98 <xTaskPriorityInherit+0xcc>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	d903      	bls.n	8006a46 <xTaskPriorityInherit+0x7a>
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a42:	4a15      	ldr	r2, [pc, #84]	; (8006a98 <xTaskPriorityInherit+0xcc>)
 8006a44:	6013      	str	r3, [r2, #0]
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a4a:	4613      	mov	r3, r2
 8006a4c:	009b      	lsls	r3, r3, #2
 8006a4e:	4413      	add	r3, r2
 8006a50:	009b      	lsls	r3, r3, #2
 8006a52:	4a10      	ldr	r2, [pc, #64]	; (8006a94 <xTaskPriorityInherit+0xc8>)
 8006a54:	441a      	add	r2, r3
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	3304      	adds	r3, #4
 8006a5a:	4619      	mov	r1, r3
 8006a5c:	4610      	mov	r0, r2
 8006a5e:	f7fe f934 	bl	8004cca <vListInsertEnd>
 8006a62:	e004      	b.n	8006a6e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006a64:	4b0a      	ldr	r3, [pc, #40]	; (8006a90 <xTaskPriorityInherit+0xc4>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	60fb      	str	r3, [r7, #12]
 8006a72:	e008      	b.n	8006a86 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006a78:	4b05      	ldr	r3, [pc, #20]	; (8006a90 <xTaskPriorityInherit+0xc4>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a7e:	429a      	cmp	r2, r3
 8006a80:	d201      	bcs.n	8006a86 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006a82:	2301      	movs	r3, #1
 8006a84:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006a86:	68fb      	ldr	r3, [r7, #12]
	}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3710      	adds	r7, #16
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}
 8006a90:	200008c0 	.word	0x200008c0
 8006a94:	200008c4 	.word	0x200008c4
 8006a98:	20000d9c 	.word	0x20000d9c

08006a9c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b086      	sub	sp, #24
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d056      	beq.n	8006b60 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006ab2:	4b2e      	ldr	r3, [pc, #184]	; (8006b6c <xTaskPriorityDisinherit+0xd0>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	693a      	ldr	r2, [r7, #16]
 8006ab8:	429a      	cmp	r2, r3
 8006aba:	d00a      	beq.n	8006ad2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac0:	f383 8811 	msr	BASEPRI, r3
 8006ac4:	f3bf 8f6f 	isb	sy
 8006ac8:	f3bf 8f4f 	dsb	sy
 8006acc:	60fb      	str	r3, [r7, #12]
}
 8006ace:	bf00      	nop
 8006ad0:	e7fe      	b.n	8006ad0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d10a      	bne.n	8006af0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ade:	f383 8811 	msr	BASEPRI, r3
 8006ae2:	f3bf 8f6f 	isb	sy
 8006ae6:	f3bf 8f4f 	dsb	sy
 8006aea:	60bb      	str	r3, [r7, #8]
}
 8006aec:	bf00      	nop
 8006aee:	e7fe      	b.n	8006aee <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006af4:	1e5a      	subs	r2, r3, #1
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b02:	429a      	cmp	r2, r3
 8006b04:	d02c      	beq.n	8006b60 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d128      	bne.n	8006b60 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	3304      	adds	r3, #4
 8006b12:	4618      	mov	r0, r3
 8006b14:	f7fe f936 	bl	8004d84 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b24:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b30:	4b0f      	ldr	r3, [pc, #60]	; (8006b70 <xTaskPriorityDisinherit+0xd4>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d903      	bls.n	8006b40 <xTaskPriorityDisinherit+0xa4>
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b3c:	4a0c      	ldr	r2, [pc, #48]	; (8006b70 <xTaskPriorityDisinherit+0xd4>)
 8006b3e:	6013      	str	r3, [r2, #0]
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b44:	4613      	mov	r3, r2
 8006b46:	009b      	lsls	r3, r3, #2
 8006b48:	4413      	add	r3, r2
 8006b4a:	009b      	lsls	r3, r3, #2
 8006b4c:	4a09      	ldr	r2, [pc, #36]	; (8006b74 <xTaskPriorityDisinherit+0xd8>)
 8006b4e:	441a      	add	r2, r3
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	3304      	adds	r3, #4
 8006b54:	4619      	mov	r1, r3
 8006b56:	4610      	mov	r0, r2
 8006b58:	f7fe f8b7 	bl	8004cca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006b60:	697b      	ldr	r3, [r7, #20]
	}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3718      	adds	r7, #24
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}
 8006b6a:	bf00      	nop
 8006b6c:	200008c0 	.word	0x200008c0
 8006b70:	20000d9c 	.word	0x20000d9c
 8006b74:	200008c4 	.word	0x200008c4

08006b78 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b088      	sub	sp, #32
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
 8006b80:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006b86:	2301      	movs	r3, #1
 8006b88:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d06a      	beq.n	8006c66 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006b90:	69bb      	ldr	r3, [r7, #24]
 8006b92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d10a      	bne.n	8006bae <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8006b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b9c:	f383 8811 	msr	BASEPRI, r3
 8006ba0:	f3bf 8f6f 	isb	sy
 8006ba4:	f3bf 8f4f 	dsb	sy
 8006ba8:	60fb      	str	r3, [r7, #12]
}
 8006baa:	bf00      	nop
 8006bac:	e7fe      	b.n	8006bac <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006bae:	69bb      	ldr	r3, [r7, #24]
 8006bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bb2:	683a      	ldr	r2, [r7, #0]
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	d902      	bls.n	8006bbe <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	61fb      	str	r3, [r7, #28]
 8006bbc:	e002      	b.n	8006bc4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006bbe:	69bb      	ldr	r3, [r7, #24]
 8006bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bc2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006bc4:	69bb      	ldr	r3, [r7, #24]
 8006bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc8:	69fa      	ldr	r2, [r7, #28]
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	d04b      	beq.n	8006c66 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006bce:	69bb      	ldr	r3, [r7, #24]
 8006bd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bd2:	697a      	ldr	r2, [r7, #20]
 8006bd4:	429a      	cmp	r2, r3
 8006bd6:	d146      	bne.n	8006c66 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006bd8:	4b25      	ldr	r3, [pc, #148]	; (8006c70 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	69ba      	ldr	r2, [r7, #24]
 8006bde:	429a      	cmp	r2, r3
 8006be0:	d10a      	bne.n	8006bf8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8006be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be6:	f383 8811 	msr	BASEPRI, r3
 8006bea:	f3bf 8f6f 	isb	sy
 8006bee:	f3bf 8f4f 	dsb	sy
 8006bf2:	60bb      	str	r3, [r7, #8]
}
 8006bf4:	bf00      	nop
 8006bf6:	e7fe      	b.n	8006bf6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006bf8:	69bb      	ldr	r3, [r7, #24]
 8006bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bfc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006bfe:	69bb      	ldr	r3, [r7, #24]
 8006c00:	69fa      	ldr	r2, [r7, #28]
 8006c02:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006c04:	69bb      	ldr	r3, [r7, #24]
 8006c06:	699b      	ldr	r3, [r3, #24]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	db04      	blt.n	8006c16 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c0c:	69fb      	ldr	r3, [r7, #28]
 8006c0e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006c12:	69bb      	ldr	r3, [r7, #24]
 8006c14:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006c16:	69bb      	ldr	r3, [r7, #24]
 8006c18:	6959      	ldr	r1, [r3, #20]
 8006c1a:	693a      	ldr	r2, [r7, #16]
 8006c1c:	4613      	mov	r3, r2
 8006c1e:	009b      	lsls	r3, r3, #2
 8006c20:	4413      	add	r3, r2
 8006c22:	009b      	lsls	r3, r3, #2
 8006c24:	4a13      	ldr	r2, [pc, #76]	; (8006c74 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006c26:	4413      	add	r3, r2
 8006c28:	4299      	cmp	r1, r3
 8006c2a:	d11c      	bne.n	8006c66 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c2c:	69bb      	ldr	r3, [r7, #24]
 8006c2e:	3304      	adds	r3, #4
 8006c30:	4618      	mov	r0, r3
 8006c32:	f7fe f8a7 	bl	8004d84 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006c36:	69bb      	ldr	r3, [r7, #24]
 8006c38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c3a:	4b0f      	ldr	r3, [pc, #60]	; (8006c78 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	429a      	cmp	r2, r3
 8006c40:	d903      	bls.n	8006c4a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8006c42:	69bb      	ldr	r3, [r7, #24]
 8006c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c46:	4a0c      	ldr	r2, [pc, #48]	; (8006c78 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006c48:	6013      	str	r3, [r2, #0]
 8006c4a:	69bb      	ldr	r3, [r7, #24]
 8006c4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c4e:	4613      	mov	r3, r2
 8006c50:	009b      	lsls	r3, r3, #2
 8006c52:	4413      	add	r3, r2
 8006c54:	009b      	lsls	r3, r3, #2
 8006c56:	4a07      	ldr	r2, [pc, #28]	; (8006c74 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006c58:	441a      	add	r2, r3
 8006c5a:	69bb      	ldr	r3, [r7, #24]
 8006c5c:	3304      	adds	r3, #4
 8006c5e:	4619      	mov	r1, r3
 8006c60:	4610      	mov	r0, r2
 8006c62:	f7fe f832 	bl	8004cca <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006c66:	bf00      	nop
 8006c68:	3720      	adds	r7, #32
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}
 8006c6e:	bf00      	nop
 8006c70:	200008c0 	.word	0x200008c0
 8006c74:	200008c4 	.word	0x200008c4
 8006c78:	20000d9c 	.word	0x20000d9c

08006c7c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006c7c:	b480      	push	{r7}
 8006c7e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006c80:	4b07      	ldr	r3, [pc, #28]	; (8006ca0 <pvTaskIncrementMutexHeldCount+0x24>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d004      	beq.n	8006c92 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006c88:	4b05      	ldr	r3, [pc, #20]	; (8006ca0 <pvTaskIncrementMutexHeldCount+0x24>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006c8e:	3201      	adds	r2, #1
 8006c90:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8006c92:	4b03      	ldr	r3, [pc, #12]	; (8006ca0 <pvTaskIncrementMutexHeldCount+0x24>)
 8006c94:	681b      	ldr	r3, [r3, #0]
	}
 8006c96:	4618      	mov	r0, r3
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr
 8006ca0:	200008c0 	.word	0x200008c0

08006ca4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b084      	sub	sp, #16
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
 8006cac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006cae:	4b21      	ldr	r3, [pc, #132]	; (8006d34 <prvAddCurrentTaskToDelayedList+0x90>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006cb4:	4b20      	ldr	r3, [pc, #128]	; (8006d38 <prvAddCurrentTaskToDelayedList+0x94>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	3304      	adds	r3, #4
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f7fe f862 	bl	8004d84 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cc6:	d10a      	bne.n	8006cde <prvAddCurrentTaskToDelayedList+0x3a>
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d007      	beq.n	8006cde <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006cce:	4b1a      	ldr	r3, [pc, #104]	; (8006d38 <prvAddCurrentTaskToDelayedList+0x94>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	3304      	adds	r3, #4
 8006cd4:	4619      	mov	r1, r3
 8006cd6:	4819      	ldr	r0, [pc, #100]	; (8006d3c <prvAddCurrentTaskToDelayedList+0x98>)
 8006cd8:	f7fd fff7 	bl	8004cca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006cdc:	e026      	b.n	8006d2c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006cde:	68fa      	ldr	r2, [r7, #12]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	4413      	add	r3, r2
 8006ce4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006ce6:	4b14      	ldr	r3, [pc, #80]	; (8006d38 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	68ba      	ldr	r2, [r7, #8]
 8006cec:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006cee:	68ba      	ldr	r2, [r7, #8]
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	429a      	cmp	r2, r3
 8006cf4:	d209      	bcs.n	8006d0a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006cf6:	4b12      	ldr	r3, [pc, #72]	; (8006d40 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006cf8:	681a      	ldr	r2, [r3, #0]
 8006cfa:	4b0f      	ldr	r3, [pc, #60]	; (8006d38 <prvAddCurrentTaskToDelayedList+0x94>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	3304      	adds	r3, #4
 8006d00:	4619      	mov	r1, r3
 8006d02:	4610      	mov	r0, r2
 8006d04:	f7fe f805 	bl	8004d12 <vListInsert>
}
 8006d08:	e010      	b.n	8006d2c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d0a:	4b0e      	ldr	r3, [pc, #56]	; (8006d44 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006d0c:	681a      	ldr	r2, [r3, #0]
 8006d0e:	4b0a      	ldr	r3, [pc, #40]	; (8006d38 <prvAddCurrentTaskToDelayedList+0x94>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	3304      	adds	r3, #4
 8006d14:	4619      	mov	r1, r3
 8006d16:	4610      	mov	r0, r2
 8006d18:	f7fd fffb 	bl	8004d12 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006d1c:	4b0a      	ldr	r3, [pc, #40]	; (8006d48 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	68ba      	ldr	r2, [r7, #8]
 8006d22:	429a      	cmp	r2, r3
 8006d24:	d202      	bcs.n	8006d2c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006d26:	4a08      	ldr	r2, [pc, #32]	; (8006d48 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	6013      	str	r3, [r2, #0]
}
 8006d2c:	bf00      	nop
 8006d2e:	3710      	adds	r7, #16
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}
 8006d34:	20000d98 	.word	0x20000d98
 8006d38:	200008c0 	.word	0x200008c0
 8006d3c:	20000d80 	.word	0x20000d80
 8006d40:	20000d50 	.word	0x20000d50
 8006d44:	20000d4c 	.word	0x20000d4c
 8006d48:	20000db4 	.word	0x20000db4

08006d4c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b08a      	sub	sp, #40	; 0x28
 8006d50:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006d52:	2300      	movs	r3, #0
 8006d54:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006d56:	f000 fb07 	bl	8007368 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006d5a:	4b1c      	ldr	r3, [pc, #112]	; (8006dcc <xTimerCreateTimerTask+0x80>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d021      	beq.n	8006da6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006d62:	2300      	movs	r3, #0
 8006d64:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006d66:	2300      	movs	r3, #0
 8006d68:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006d6a:	1d3a      	adds	r2, r7, #4
 8006d6c:	f107 0108 	add.w	r1, r7, #8
 8006d70:	f107 030c 	add.w	r3, r7, #12
 8006d74:	4618      	mov	r0, r3
 8006d76:	f7fd ff61 	bl	8004c3c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006d7a:	6879      	ldr	r1, [r7, #4]
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	68fa      	ldr	r2, [r7, #12]
 8006d80:	9202      	str	r2, [sp, #8]
 8006d82:	9301      	str	r3, [sp, #4]
 8006d84:	2302      	movs	r3, #2
 8006d86:	9300      	str	r3, [sp, #0]
 8006d88:	2300      	movs	r3, #0
 8006d8a:	460a      	mov	r2, r1
 8006d8c:	4910      	ldr	r1, [pc, #64]	; (8006dd0 <xTimerCreateTimerTask+0x84>)
 8006d8e:	4811      	ldr	r0, [pc, #68]	; (8006dd4 <xTimerCreateTimerTask+0x88>)
 8006d90:	f7fe ffe0 	bl	8005d54 <xTaskCreateStatic>
 8006d94:	4603      	mov	r3, r0
 8006d96:	4a10      	ldr	r2, [pc, #64]	; (8006dd8 <xTimerCreateTimerTask+0x8c>)
 8006d98:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006d9a:	4b0f      	ldr	r3, [pc, #60]	; (8006dd8 <xTimerCreateTimerTask+0x8c>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d001      	beq.n	8006da6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006da2:	2301      	movs	r3, #1
 8006da4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d10a      	bne.n	8006dc2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006db0:	f383 8811 	msr	BASEPRI, r3
 8006db4:	f3bf 8f6f 	isb	sy
 8006db8:	f3bf 8f4f 	dsb	sy
 8006dbc:	613b      	str	r3, [r7, #16]
}
 8006dbe:	bf00      	nop
 8006dc0:	e7fe      	b.n	8006dc0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006dc2:	697b      	ldr	r3, [r7, #20]
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	3718      	adds	r7, #24
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}
 8006dcc:	20000df0 	.word	0x20000df0
 8006dd0:	0800a830 	.word	0x0800a830
 8006dd4:	08006f11 	.word	0x08006f11
 8006dd8:	20000df4 	.word	0x20000df4

08006ddc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b08a      	sub	sp, #40	; 0x28
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	60f8      	str	r0, [r7, #12]
 8006de4:	60b9      	str	r1, [r7, #8]
 8006de6:	607a      	str	r2, [r7, #4]
 8006de8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006dea:	2300      	movs	r3, #0
 8006dec:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d10a      	bne.n	8006e0a <xTimerGenericCommand+0x2e>
	__asm volatile
 8006df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df8:	f383 8811 	msr	BASEPRI, r3
 8006dfc:	f3bf 8f6f 	isb	sy
 8006e00:	f3bf 8f4f 	dsb	sy
 8006e04:	623b      	str	r3, [r7, #32]
}
 8006e06:	bf00      	nop
 8006e08:	e7fe      	b.n	8006e08 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006e0a:	4b1a      	ldr	r3, [pc, #104]	; (8006e74 <xTimerGenericCommand+0x98>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d02a      	beq.n	8006e68 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	2b05      	cmp	r3, #5
 8006e22:	dc18      	bgt.n	8006e56 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006e24:	f7ff fdb4 	bl	8006990 <xTaskGetSchedulerState>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	2b02      	cmp	r3, #2
 8006e2c:	d109      	bne.n	8006e42 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006e2e:	4b11      	ldr	r3, [pc, #68]	; (8006e74 <xTimerGenericCommand+0x98>)
 8006e30:	6818      	ldr	r0, [r3, #0]
 8006e32:	f107 0110 	add.w	r1, r7, #16
 8006e36:	2300      	movs	r3, #0
 8006e38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e3a:	f7fe f975 	bl	8005128 <xQueueGenericSend>
 8006e3e:	6278      	str	r0, [r7, #36]	; 0x24
 8006e40:	e012      	b.n	8006e68 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006e42:	4b0c      	ldr	r3, [pc, #48]	; (8006e74 <xTimerGenericCommand+0x98>)
 8006e44:	6818      	ldr	r0, [r3, #0]
 8006e46:	f107 0110 	add.w	r1, r7, #16
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	f7fe f96b 	bl	8005128 <xQueueGenericSend>
 8006e52:	6278      	str	r0, [r7, #36]	; 0x24
 8006e54:	e008      	b.n	8006e68 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006e56:	4b07      	ldr	r3, [pc, #28]	; (8006e74 <xTimerGenericCommand+0x98>)
 8006e58:	6818      	ldr	r0, [r3, #0]
 8006e5a:	f107 0110 	add.w	r1, r7, #16
 8006e5e:	2300      	movs	r3, #0
 8006e60:	683a      	ldr	r2, [r7, #0]
 8006e62:	f7fe fa5f 	bl	8005324 <xQueueGenericSendFromISR>
 8006e66:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	3728      	adds	r7, #40	; 0x28
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}
 8006e72:	bf00      	nop
 8006e74:	20000df0 	.word	0x20000df0

08006e78 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b088      	sub	sp, #32
 8006e7c:	af02      	add	r7, sp, #8
 8006e7e:	6078      	str	r0, [r7, #4]
 8006e80:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e82:	4b22      	ldr	r3, [pc, #136]	; (8006f0c <prvProcessExpiredTimer+0x94>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	68db      	ldr	r3, [r3, #12]
 8006e88:	68db      	ldr	r3, [r3, #12]
 8006e8a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	3304      	adds	r3, #4
 8006e90:	4618      	mov	r0, r3
 8006e92:	f7fd ff77 	bl	8004d84 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e9c:	f003 0304 	and.w	r3, r3, #4
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d022      	beq.n	8006eea <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	699a      	ldr	r2, [r3, #24]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	18d1      	adds	r1, r2, r3
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	683a      	ldr	r2, [r7, #0]
 8006eb0:	6978      	ldr	r0, [r7, #20]
 8006eb2:	f000 f8d1 	bl	8007058 <prvInsertTimerInActiveList>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d01f      	beq.n	8006efc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	9300      	str	r3, [sp, #0]
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	687a      	ldr	r2, [r7, #4]
 8006ec4:	2100      	movs	r1, #0
 8006ec6:	6978      	ldr	r0, [r7, #20]
 8006ec8:	f7ff ff88 	bl	8006ddc <xTimerGenericCommand>
 8006ecc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d113      	bne.n	8006efc <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ed8:	f383 8811 	msr	BASEPRI, r3
 8006edc:	f3bf 8f6f 	isb	sy
 8006ee0:	f3bf 8f4f 	dsb	sy
 8006ee4:	60fb      	str	r3, [r7, #12]
}
 8006ee6:	bf00      	nop
 8006ee8:	e7fe      	b.n	8006ee8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ef0:	f023 0301 	bic.w	r3, r3, #1
 8006ef4:	b2da      	uxtb	r2, r3
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	6a1b      	ldr	r3, [r3, #32]
 8006f00:	6978      	ldr	r0, [r7, #20]
 8006f02:	4798      	blx	r3
}
 8006f04:	bf00      	nop
 8006f06:	3718      	adds	r7, #24
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}
 8006f0c:	20000de8 	.word	0x20000de8

08006f10 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b084      	sub	sp, #16
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006f18:	f107 0308 	add.w	r3, r7, #8
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	f000 f857 	bl	8006fd0 <prvGetNextExpireTime>
 8006f22:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	4619      	mov	r1, r3
 8006f28:	68f8      	ldr	r0, [r7, #12]
 8006f2a:	f000 f803 	bl	8006f34 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006f2e:	f000 f8d5 	bl	80070dc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006f32:	e7f1      	b.n	8006f18 <prvTimerTask+0x8>

08006f34 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b084      	sub	sp, #16
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
 8006f3c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006f3e:	f7ff f945 	bl	80061cc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006f42:	f107 0308 	add.w	r3, r7, #8
 8006f46:	4618      	mov	r0, r3
 8006f48:	f000 f866 	bl	8007018 <prvSampleTimeNow>
 8006f4c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d130      	bne.n	8006fb6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d10a      	bne.n	8006f70 <prvProcessTimerOrBlockTask+0x3c>
 8006f5a:	687a      	ldr	r2, [r7, #4]
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	429a      	cmp	r2, r3
 8006f60:	d806      	bhi.n	8006f70 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006f62:	f7ff f941 	bl	80061e8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006f66:	68f9      	ldr	r1, [r7, #12]
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f7ff ff85 	bl	8006e78 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006f6e:	e024      	b.n	8006fba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d008      	beq.n	8006f88 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006f76:	4b13      	ldr	r3, [pc, #76]	; (8006fc4 <prvProcessTimerOrBlockTask+0x90>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d101      	bne.n	8006f84 <prvProcessTimerOrBlockTask+0x50>
 8006f80:	2301      	movs	r3, #1
 8006f82:	e000      	b.n	8006f86 <prvProcessTimerOrBlockTask+0x52>
 8006f84:	2300      	movs	r3, #0
 8006f86:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006f88:	4b0f      	ldr	r3, [pc, #60]	; (8006fc8 <prvProcessTimerOrBlockTask+0x94>)
 8006f8a:	6818      	ldr	r0, [r3, #0]
 8006f8c:	687a      	ldr	r2, [r7, #4]
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	1ad3      	subs	r3, r2, r3
 8006f92:	683a      	ldr	r2, [r7, #0]
 8006f94:	4619      	mov	r1, r3
 8006f96:	f7fe fea9 	bl	8005cec <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006f9a:	f7ff f925 	bl	80061e8 <xTaskResumeAll>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d10a      	bne.n	8006fba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006fa4:	4b09      	ldr	r3, [pc, #36]	; (8006fcc <prvProcessTimerOrBlockTask+0x98>)
 8006fa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006faa:	601a      	str	r2, [r3, #0]
 8006fac:	f3bf 8f4f 	dsb	sy
 8006fb0:	f3bf 8f6f 	isb	sy
}
 8006fb4:	e001      	b.n	8006fba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006fb6:	f7ff f917 	bl	80061e8 <xTaskResumeAll>
}
 8006fba:	bf00      	nop
 8006fbc:	3710      	adds	r7, #16
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}
 8006fc2:	bf00      	nop
 8006fc4:	20000dec 	.word	0x20000dec
 8006fc8:	20000df0 	.word	0x20000df0
 8006fcc:	e000ed04 	.word	0xe000ed04

08006fd0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b085      	sub	sp, #20
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006fd8:	4b0e      	ldr	r3, [pc, #56]	; (8007014 <prvGetNextExpireTime+0x44>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d101      	bne.n	8006fe6 <prvGetNextExpireTime+0x16>
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	e000      	b.n	8006fe8 <prvGetNextExpireTime+0x18>
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d105      	bne.n	8007000 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006ff4:	4b07      	ldr	r3, [pc, #28]	; (8007014 <prvGetNextExpireTime+0x44>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	68db      	ldr	r3, [r3, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	60fb      	str	r3, [r7, #12]
 8006ffe:	e001      	b.n	8007004 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007000:	2300      	movs	r3, #0
 8007002:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007004:	68fb      	ldr	r3, [r7, #12]
}
 8007006:	4618      	mov	r0, r3
 8007008:	3714      	adds	r7, #20
 800700a:	46bd      	mov	sp, r7
 800700c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007010:	4770      	bx	lr
 8007012:	bf00      	nop
 8007014:	20000de8 	.word	0x20000de8

08007018 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b084      	sub	sp, #16
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007020:	f7ff f980 	bl	8006324 <xTaskGetTickCount>
 8007024:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007026:	4b0b      	ldr	r3, [pc, #44]	; (8007054 <prvSampleTimeNow+0x3c>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	68fa      	ldr	r2, [r7, #12]
 800702c:	429a      	cmp	r2, r3
 800702e:	d205      	bcs.n	800703c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007030:	f000 f936 	bl	80072a0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2201      	movs	r2, #1
 8007038:	601a      	str	r2, [r3, #0]
 800703a:	e002      	b.n	8007042 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2200      	movs	r2, #0
 8007040:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007042:	4a04      	ldr	r2, [pc, #16]	; (8007054 <prvSampleTimeNow+0x3c>)
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007048:	68fb      	ldr	r3, [r7, #12]
}
 800704a:	4618      	mov	r0, r3
 800704c:	3710      	adds	r7, #16
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}
 8007052:	bf00      	nop
 8007054:	20000df8 	.word	0x20000df8

08007058 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b086      	sub	sp, #24
 800705c:	af00      	add	r7, sp, #0
 800705e:	60f8      	str	r0, [r7, #12]
 8007060:	60b9      	str	r1, [r7, #8]
 8007062:	607a      	str	r2, [r7, #4]
 8007064:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007066:	2300      	movs	r3, #0
 8007068:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	68ba      	ldr	r2, [r7, #8]
 800706e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	68fa      	ldr	r2, [r7, #12]
 8007074:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007076:	68ba      	ldr	r2, [r7, #8]
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	429a      	cmp	r2, r3
 800707c:	d812      	bhi.n	80070a4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800707e:	687a      	ldr	r2, [r7, #4]
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	1ad2      	subs	r2, r2, r3
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	699b      	ldr	r3, [r3, #24]
 8007088:	429a      	cmp	r2, r3
 800708a:	d302      	bcc.n	8007092 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800708c:	2301      	movs	r3, #1
 800708e:	617b      	str	r3, [r7, #20]
 8007090:	e01b      	b.n	80070ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007092:	4b10      	ldr	r3, [pc, #64]	; (80070d4 <prvInsertTimerInActiveList+0x7c>)
 8007094:	681a      	ldr	r2, [r3, #0]
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	3304      	adds	r3, #4
 800709a:	4619      	mov	r1, r3
 800709c:	4610      	mov	r0, r2
 800709e:	f7fd fe38 	bl	8004d12 <vListInsert>
 80070a2:	e012      	b.n	80070ca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80070a4:	687a      	ldr	r2, [r7, #4]
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	429a      	cmp	r2, r3
 80070aa:	d206      	bcs.n	80070ba <prvInsertTimerInActiveList+0x62>
 80070ac:	68ba      	ldr	r2, [r7, #8]
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	429a      	cmp	r2, r3
 80070b2:	d302      	bcc.n	80070ba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80070b4:	2301      	movs	r3, #1
 80070b6:	617b      	str	r3, [r7, #20]
 80070b8:	e007      	b.n	80070ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80070ba:	4b07      	ldr	r3, [pc, #28]	; (80070d8 <prvInsertTimerInActiveList+0x80>)
 80070bc:	681a      	ldr	r2, [r3, #0]
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	3304      	adds	r3, #4
 80070c2:	4619      	mov	r1, r3
 80070c4:	4610      	mov	r0, r2
 80070c6:	f7fd fe24 	bl	8004d12 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80070ca:	697b      	ldr	r3, [r7, #20]
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3718      	adds	r7, #24
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}
 80070d4:	20000dec 	.word	0x20000dec
 80070d8:	20000de8 	.word	0x20000de8

080070dc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b08e      	sub	sp, #56	; 0x38
 80070e0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80070e2:	e0ca      	b.n	800727a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	da18      	bge.n	800711c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80070ea:	1d3b      	adds	r3, r7, #4
 80070ec:	3304      	adds	r3, #4
 80070ee:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80070f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d10a      	bne.n	800710c <prvProcessReceivedCommands+0x30>
	__asm volatile
 80070f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070fa:	f383 8811 	msr	BASEPRI, r3
 80070fe:	f3bf 8f6f 	isb	sy
 8007102:	f3bf 8f4f 	dsb	sy
 8007106:	61fb      	str	r3, [r7, #28]
}
 8007108:	bf00      	nop
 800710a:	e7fe      	b.n	800710a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800710c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007112:	6850      	ldr	r0, [r2, #4]
 8007114:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007116:	6892      	ldr	r2, [r2, #8]
 8007118:	4611      	mov	r1, r2
 800711a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2b00      	cmp	r3, #0
 8007120:	f2c0 80aa 	blt.w	8007278 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800712a:	695b      	ldr	r3, [r3, #20]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d004      	beq.n	800713a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007132:	3304      	adds	r3, #4
 8007134:	4618      	mov	r0, r3
 8007136:	f7fd fe25 	bl	8004d84 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800713a:	463b      	mov	r3, r7
 800713c:	4618      	mov	r0, r3
 800713e:	f7ff ff6b 	bl	8007018 <prvSampleTimeNow>
 8007142:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2b09      	cmp	r3, #9
 8007148:	f200 8097 	bhi.w	800727a <prvProcessReceivedCommands+0x19e>
 800714c:	a201      	add	r2, pc, #4	; (adr r2, 8007154 <prvProcessReceivedCommands+0x78>)
 800714e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007152:	bf00      	nop
 8007154:	0800717d 	.word	0x0800717d
 8007158:	0800717d 	.word	0x0800717d
 800715c:	0800717d 	.word	0x0800717d
 8007160:	080071f1 	.word	0x080071f1
 8007164:	08007205 	.word	0x08007205
 8007168:	0800724f 	.word	0x0800724f
 800716c:	0800717d 	.word	0x0800717d
 8007170:	0800717d 	.word	0x0800717d
 8007174:	080071f1 	.word	0x080071f1
 8007178:	08007205 	.word	0x08007205
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800717c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800717e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007182:	f043 0301 	orr.w	r3, r3, #1
 8007186:	b2da      	uxtb	r2, r3
 8007188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800718a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800718e:	68ba      	ldr	r2, [r7, #8]
 8007190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007192:	699b      	ldr	r3, [r3, #24]
 8007194:	18d1      	adds	r1, r2, r3
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800719a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800719c:	f7ff ff5c 	bl	8007058 <prvInsertTimerInActiveList>
 80071a0:	4603      	mov	r3, r0
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d069      	beq.n	800727a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80071a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071a8:	6a1b      	ldr	r3, [r3, #32]
 80071aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071ac:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80071ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80071b4:	f003 0304 	and.w	r3, r3, #4
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d05e      	beq.n	800727a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80071bc:	68ba      	ldr	r2, [r7, #8]
 80071be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071c0:	699b      	ldr	r3, [r3, #24]
 80071c2:	441a      	add	r2, r3
 80071c4:	2300      	movs	r3, #0
 80071c6:	9300      	str	r3, [sp, #0]
 80071c8:	2300      	movs	r3, #0
 80071ca:	2100      	movs	r1, #0
 80071cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071ce:	f7ff fe05 	bl	8006ddc <xTimerGenericCommand>
 80071d2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80071d4:	6a3b      	ldr	r3, [r7, #32]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d14f      	bne.n	800727a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80071da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071de:	f383 8811 	msr	BASEPRI, r3
 80071e2:	f3bf 8f6f 	isb	sy
 80071e6:	f3bf 8f4f 	dsb	sy
 80071ea:	61bb      	str	r3, [r7, #24]
}
 80071ec:	bf00      	nop
 80071ee:	e7fe      	b.n	80071ee <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80071f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80071f6:	f023 0301 	bic.w	r3, r3, #1
 80071fa:	b2da      	uxtb	r2, r3
 80071fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007202:	e03a      	b.n	800727a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007206:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800720a:	f043 0301 	orr.w	r3, r3, #1
 800720e:	b2da      	uxtb	r2, r3
 8007210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007212:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007216:	68ba      	ldr	r2, [r7, #8]
 8007218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800721a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800721c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800721e:	699b      	ldr	r3, [r3, #24]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d10a      	bne.n	800723a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007228:	f383 8811 	msr	BASEPRI, r3
 800722c:	f3bf 8f6f 	isb	sy
 8007230:	f3bf 8f4f 	dsb	sy
 8007234:	617b      	str	r3, [r7, #20]
}
 8007236:	bf00      	nop
 8007238:	e7fe      	b.n	8007238 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800723a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800723c:	699a      	ldr	r2, [r3, #24]
 800723e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007240:	18d1      	adds	r1, r2, r3
 8007242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007244:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007246:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007248:	f7ff ff06 	bl	8007058 <prvInsertTimerInActiveList>
					break;
 800724c:	e015      	b.n	800727a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800724e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007250:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007254:	f003 0302 	and.w	r3, r3, #2
 8007258:	2b00      	cmp	r3, #0
 800725a:	d103      	bne.n	8007264 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800725c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800725e:	f000 fbdf 	bl	8007a20 <vPortFree>
 8007262:	e00a      	b.n	800727a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007266:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800726a:	f023 0301 	bic.w	r3, r3, #1
 800726e:	b2da      	uxtb	r2, r3
 8007270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007272:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007276:	e000      	b.n	800727a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007278:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800727a:	4b08      	ldr	r3, [pc, #32]	; (800729c <prvProcessReceivedCommands+0x1c0>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	1d39      	adds	r1, r7, #4
 8007280:	2200      	movs	r2, #0
 8007282:	4618      	mov	r0, r3
 8007284:	f7fe f8ea 	bl	800545c <xQueueReceive>
 8007288:	4603      	mov	r3, r0
 800728a:	2b00      	cmp	r3, #0
 800728c:	f47f af2a 	bne.w	80070e4 <prvProcessReceivedCommands+0x8>
	}
}
 8007290:	bf00      	nop
 8007292:	bf00      	nop
 8007294:	3730      	adds	r7, #48	; 0x30
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}
 800729a:	bf00      	nop
 800729c:	20000df0 	.word	0x20000df0

080072a0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b088      	sub	sp, #32
 80072a4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80072a6:	e048      	b.n	800733a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80072a8:	4b2d      	ldr	r3, [pc, #180]	; (8007360 <prvSwitchTimerLists+0xc0>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	68db      	ldr	r3, [r3, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072b2:	4b2b      	ldr	r3, [pc, #172]	; (8007360 <prvSwitchTimerLists+0xc0>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	68db      	ldr	r3, [r3, #12]
 80072b8:	68db      	ldr	r3, [r3, #12]
 80072ba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	3304      	adds	r3, #4
 80072c0:	4618      	mov	r0, r3
 80072c2:	f7fd fd5f 	bl	8004d84 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	6a1b      	ldr	r3, [r3, #32]
 80072ca:	68f8      	ldr	r0, [r7, #12]
 80072cc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80072d4:	f003 0304 	and.w	r3, r3, #4
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d02e      	beq.n	800733a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	699b      	ldr	r3, [r3, #24]
 80072e0:	693a      	ldr	r2, [r7, #16]
 80072e2:	4413      	add	r3, r2
 80072e4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80072e6:	68ba      	ldr	r2, [r7, #8]
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	429a      	cmp	r2, r3
 80072ec:	d90e      	bls.n	800730c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	68ba      	ldr	r2, [r7, #8]
 80072f2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	68fa      	ldr	r2, [r7, #12]
 80072f8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80072fa:	4b19      	ldr	r3, [pc, #100]	; (8007360 <prvSwitchTimerLists+0xc0>)
 80072fc:	681a      	ldr	r2, [r3, #0]
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	3304      	adds	r3, #4
 8007302:	4619      	mov	r1, r3
 8007304:	4610      	mov	r0, r2
 8007306:	f7fd fd04 	bl	8004d12 <vListInsert>
 800730a:	e016      	b.n	800733a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800730c:	2300      	movs	r3, #0
 800730e:	9300      	str	r3, [sp, #0]
 8007310:	2300      	movs	r3, #0
 8007312:	693a      	ldr	r2, [r7, #16]
 8007314:	2100      	movs	r1, #0
 8007316:	68f8      	ldr	r0, [r7, #12]
 8007318:	f7ff fd60 	bl	8006ddc <xTimerGenericCommand>
 800731c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d10a      	bne.n	800733a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007328:	f383 8811 	msr	BASEPRI, r3
 800732c:	f3bf 8f6f 	isb	sy
 8007330:	f3bf 8f4f 	dsb	sy
 8007334:	603b      	str	r3, [r7, #0]
}
 8007336:	bf00      	nop
 8007338:	e7fe      	b.n	8007338 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800733a:	4b09      	ldr	r3, [pc, #36]	; (8007360 <prvSwitchTimerLists+0xc0>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d1b1      	bne.n	80072a8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007344:	4b06      	ldr	r3, [pc, #24]	; (8007360 <prvSwitchTimerLists+0xc0>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800734a:	4b06      	ldr	r3, [pc, #24]	; (8007364 <prvSwitchTimerLists+0xc4>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a04      	ldr	r2, [pc, #16]	; (8007360 <prvSwitchTimerLists+0xc0>)
 8007350:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007352:	4a04      	ldr	r2, [pc, #16]	; (8007364 <prvSwitchTimerLists+0xc4>)
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	6013      	str	r3, [r2, #0]
}
 8007358:	bf00      	nop
 800735a:	3718      	adds	r7, #24
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}
 8007360:	20000de8 	.word	0x20000de8
 8007364:	20000dec 	.word	0x20000dec

08007368 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b082      	sub	sp, #8
 800736c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800736e:	f000 f969 	bl	8007644 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007372:	4b15      	ldr	r3, [pc, #84]	; (80073c8 <prvCheckForValidListAndQueue+0x60>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d120      	bne.n	80073bc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800737a:	4814      	ldr	r0, [pc, #80]	; (80073cc <prvCheckForValidListAndQueue+0x64>)
 800737c:	f7fd fc78 	bl	8004c70 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007380:	4813      	ldr	r0, [pc, #76]	; (80073d0 <prvCheckForValidListAndQueue+0x68>)
 8007382:	f7fd fc75 	bl	8004c70 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007386:	4b13      	ldr	r3, [pc, #76]	; (80073d4 <prvCheckForValidListAndQueue+0x6c>)
 8007388:	4a10      	ldr	r2, [pc, #64]	; (80073cc <prvCheckForValidListAndQueue+0x64>)
 800738a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800738c:	4b12      	ldr	r3, [pc, #72]	; (80073d8 <prvCheckForValidListAndQueue+0x70>)
 800738e:	4a10      	ldr	r2, [pc, #64]	; (80073d0 <prvCheckForValidListAndQueue+0x68>)
 8007390:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007392:	2300      	movs	r3, #0
 8007394:	9300      	str	r3, [sp, #0]
 8007396:	4b11      	ldr	r3, [pc, #68]	; (80073dc <prvCheckForValidListAndQueue+0x74>)
 8007398:	4a11      	ldr	r2, [pc, #68]	; (80073e0 <prvCheckForValidListAndQueue+0x78>)
 800739a:	2110      	movs	r1, #16
 800739c:	200a      	movs	r0, #10
 800739e:	f7fd fd83 	bl	8004ea8 <xQueueGenericCreateStatic>
 80073a2:	4603      	mov	r3, r0
 80073a4:	4a08      	ldr	r2, [pc, #32]	; (80073c8 <prvCheckForValidListAndQueue+0x60>)
 80073a6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80073a8:	4b07      	ldr	r3, [pc, #28]	; (80073c8 <prvCheckForValidListAndQueue+0x60>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d005      	beq.n	80073bc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80073b0:	4b05      	ldr	r3, [pc, #20]	; (80073c8 <prvCheckForValidListAndQueue+0x60>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	490b      	ldr	r1, [pc, #44]	; (80073e4 <prvCheckForValidListAndQueue+0x7c>)
 80073b6:	4618      	mov	r0, r3
 80073b8:	f7fe fc44 	bl	8005c44 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80073bc:	f000 f972 	bl	80076a4 <vPortExitCritical>
}
 80073c0:	bf00      	nop
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}
 80073c6:	bf00      	nop
 80073c8:	20000df0 	.word	0x20000df0
 80073cc:	20000dc0 	.word	0x20000dc0
 80073d0:	20000dd4 	.word	0x20000dd4
 80073d4:	20000de8 	.word	0x20000de8
 80073d8:	20000dec 	.word	0x20000dec
 80073dc:	20000e9c 	.word	0x20000e9c
 80073e0:	20000dfc 	.word	0x20000dfc
 80073e4:	0800a838 	.word	0x0800a838

080073e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80073e8:	b480      	push	{r7}
 80073ea:	b085      	sub	sp, #20
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	60f8      	str	r0, [r7, #12]
 80073f0:	60b9      	str	r1, [r7, #8]
 80073f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	3b04      	subs	r3, #4
 80073f8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007400:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	3b04      	subs	r3, #4
 8007406:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	f023 0201 	bic.w	r2, r3, #1
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	3b04      	subs	r3, #4
 8007416:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007418:	4a0c      	ldr	r2, [pc, #48]	; (800744c <pxPortInitialiseStack+0x64>)
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	3b14      	subs	r3, #20
 8007422:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007424:	687a      	ldr	r2, [r7, #4]
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	3b04      	subs	r3, #4
 800742e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f06f 0202 	mvn.w	r2, #2
 8007436:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	3b20      	subs	r3, #32
 800743c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800743e:	68fb      	ldr	r3, [r7, #12]
}
 8007440:	4618      	mov	r0, r3
 8007442:	3714      	adds	r7, #20
 8007444:	46bd      	mov	sp, r7
 8007446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744a:	4770      	bx	lr
 800744c:	08007451 	.word	0x08007451

08007450 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007450:	b480      	push	{r7}
 8007452:	b085      	sub	sp, #20
 8007454:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007456:	2300      	movs	r3, #0
 8007458:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800745a:	4b12      	ldr	r3, [pc, #72]	; (80074a4 <prvTaskExitError+0x54>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007462:	d00a      	beq.n	800747a <prvTaskExitError+0x2a>
	__asm volatile
 8007464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007468:	f383 8811 	msr	BASEPRI, r3
 800746c:	f3bf 8f6f 	isb	sy
 8007470:	f3bf 8f4f 	dsb	sy
 8007474:	60fb      	str	r3, [r7, #12]
}
 8007476:	bf00      	nop
 8007478:	e7fe      	b.n	8007478 <prvTaskExitError+0x28>
	__asm volatile
 800747a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800747e:	f383 8811 	msr	BASEPRI, r3
 8007482:	f3bf 8f6f 	isb	sy
 8007486:	f3bf 8f4f 	dsb	sy
 800748a:	60bb      	str	r3, [r7, #8]
}
 800748c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800748e:	bf00      	nop
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d0fc      	beq.n	8007490 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007496:	bf00      	nop
 8007498:	bf00      	nop
 800749a:	3714      	adds	r7, #20
 800749c:	46bd      	mov	sp, r7
 800749e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a2:	4770      	bx	lr
 80074a4:	2000000c 	.word	0x2000000c
	...

080074b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80074b0:	4b07      	ldr	r3, [pc, #28]	; (80074d0 <pxCurrentTCBConst2>)
 80074b2:	6819      	ldr	r1, [r3, #0]
 80074b4:	6808      	ldr	r0, [r1, #0]
 80074b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074ba:	f380 8809 	msr	PSP, r0
 80074be:	f3bf 8f6f 	isb	sy
 80074c2:	f04f 0000 	mov.w	r0, #0
 80074c6:	f380 8811 	msr	BASEPRI, r0
 80074ca:	4770      	bx	lr
 80074cc:	f3af 8000 	nop.w

080074d0 <pxCurrentTCBConst2>:
 80074d0:	200008c0 	.word	0x200008c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80074d4:	bf00      	nop
 80074d6:	bf00      	nop

080074d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80074d8:	4808      	ldr	r0, [pc, #32]	; (80074fc <prvPortStartFirstTask+0x24>)
 80074da:	6800      	ldr	r0, [r0, #0]
 80074dc:	6800      	ldr	r0, [r0, #0]
 80074de:	f380 8808 	msr	MSP, r0
 80074e2:	f04f 0000 	mov.w	r0, #0
 80074e6:	f380 8814 	msr	CONTROL, r0
 80074ea:	b662      	cpsie	i
 80074ec:	b661      	cpsie	f
 80074ee:	f3bf 8f4f 	dsb	sy
 80074f2:	f3bf 8f6f 	isb	sy
 80074f6:	df00      	svc	0
 80074f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80074fa:	bf00      	nop
 80074fc:	e000ed08 	.word	0xe000ed08

08007500 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b086      	sub	sp, #24
 8007504:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007506:	4b46      	ldr	r3, [pc, #280]	; (8007620 <xPortStartScheduler+0x120>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4a46      	ldr	r2, [pc, #280]	; (8007624 <xPortStartScheduler+0x124>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d10a      	bne.n	8007526 <xPortStartScheduler+0x26>
	__asm volatile
 8007510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007514:	f383 8811 	msr	BASEPRI, r3
 8007518:	f3bf 8f6f 	isb	sy
 800751c:	f3bf 8f4f 	dsb	sy
 8007520:	613b      	str	r3, [r7, #16]
}
 8007522:	bf00      	nop
 8007524:	e7fe      	b.n	8007524 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007526:	4b3e      	ldr	r3, [pc, #248]	; (8007620 <xPortStartScheduler+0x120>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4a3f      	ldr	r2, [pc, #252]	; (8007628 <xPortStartScheduler+0x128>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d10a      	bne.n	8007546 <xPortStartScheduler+0x46>
	__asm volatile
 8007530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007534:	f383 8811 	msr	BASEPRI, r3
 8007538:	f3bf 8f6f 	isb	sy
 800753c:	f3bf 8f4f 	dsb	sy
 8007540:	60fb      	str	r3, [r7, #12]
}
 8007542:	bf00      	nop
 8007544:	e7fe      	b.n	8007544 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007546:	4b39      	ldr	r3, [pc, #228]	; (800762c <xPortStartScheduler+0x12c>)
 8007548:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	781b      	ldrb	r3, [r3, #0]
 800754e:	b2db      	uxtb	r3, r3
 8007550:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	22ff      	movs	r2, #255	; 0xff
 8007556:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007558:	697b      	ldr	r3, [r7, #20]
 800755a:	781b      	ldrb	r3, [r3, #0]
 800755c:	b2db      	uxtb	r3, r3
 800755e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007560:	78fb      	ldrb	r3, [r7, #3]
 8007562:	b2db      	uxtb	r3, r3
 8007564:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007568:	b2da      	uxtb	r2, r3
 800756a:	4b31      	ldr	r3, [pc, #196]	; (8007630 <xPortStartScheduler+0x130>)
 800756c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800756e:	4b31      	ldr	r3, [pc, #196]	; (8007634 <xPortStartScheduler+0x134>)
 8007570:	2207      	movs	r2, #7
 8007572:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007574:	e009      	b.n	800758a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007576:	4b2f      	ldr	r3, [pc, #188]	; (8007634 <xPortStartScheduler+0x134>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	3b01      	subs	r3, #1
 800757c:	4a2d      	ldr	r2, [pc, #180]	; (8007634 <xPortStartScheduler+0x134>)
 800757e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007580:	78fb      	ldrb	r3, [r7, #3]
 8007582:	b2db      	uxtb	r3, r3
 8007584:	005b      	lsls	r3, r3, #1
 8007586:	b2db      	uxtb	r3, r3
 8007588:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800758a:	78fb      	ldrb	r3, [r7, #3]
 800758c:	b2db      	uxtb	r3, r3
 800758e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007592:	2b80      	cmp	r3, #128	; 0x80
 8007594:	d0ef      	beq.n	8007576 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007596:	4b27      	ldr	r3, [pc, #156]	; (8007634 <xPortStartScheduler+0x134>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f1c3 0307 	rsb	r3, r3, #7
 800759e:	2b04      	cmp	r3, #4
 80075a0:	d00a      	beq.n	80075b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80075a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075a6:	f383 8811 	msr	BASEPRI, r3
 80075aa:	f3bf 8f6f 	isb	sy
 80075ae:	f3bf 8f4f 	dsb	sy
 80075b2:	60bb      	str	r3, [r7, #8]
}
 80075b4:	bf00      	nop
 80075b6:	e7fe      	b.n	80075b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80075b8:	4b1e      	ldr	r3, [pc, #120]	; (8007634 <xPortStartScheduler+0x134>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	021b      	lsls	r3, r3, #8
 80075be:	4a1d      	ldr	r2, [pc, #116]	; (8007634 <xPortStartScheduler+0x134>)
 80075c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80075c2:	4b1c      	ldr	r3, [pc, #112]	; (8007634 <xPortStartScheduler+0x134>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80075ca:	4a1a      	ldr	r2, [pc, #104]	; (8007634 <xPortStartScheduler+0x134>)
 80075cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	b2da      	uxtb	r2, r3
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80075d6:	4b18      	ldr	r3, [pc, #96]	; (8007638 <xPortStartScheduler+0x138>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a17      	ldr	r2, [pc, #92]	; (8007638 <xPortStartScheduler+0x138>)
 80075dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80075e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80075e2:	4b15      	ldr	r3, [pc, #84]	; (8007638 <xPortStartScheduler+0x138>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a14      	ldr	r2, [pc, #80]	; (8007638 <xPortStartScheduler+0x138>)
 80075e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80075ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80075ee:	f000 f8dd 	bl	80077ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80075f2:	4b12      	ldr	r3, [pc, #72]	; (800763c <xPortStartScheduler+0x13c>)
 80075f4:	2200      	movs	r2, #0
 80075f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80075f8:	f000 f8fc 	bl	80077f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80075fc:	4b10      	ldr	r3, [pc, #64]	; (8007640 <xPortStartScheduler+0x140>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a0f      	ldr	r2, [pc, #60]	; (8007640 <xPortStartScheduler+0x140>)
 8007602:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007606:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007608:	f7ff ff66 	bl	80074d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800760c:	f7fe ff54 	bl	80064b8 <vTaskSwitchContext>
	prvTaskExitError();
 8007610:	f7ff ff1e 	bl	8007450 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007614:	2300      	movs	r3, #0
}
 8007616:	4618      	mov	r0, r3
 8007618:	3718      	adds	r7, #24
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}
 800761e:	bf00      	nop
 8007620:	e000ed00 	.word	0xe000ed00
 8007624:	410fc271 	.word	0x410fc271
 8007628:	410fc270 	.word	0x410fc270
 800762c:	e000e400 	.word	0xe000e400
 8007630:	20000eec 	.word	0x20000eec
 8007634:	20000ef0 	.word	0x20000ef0
 8007638:	e000ed20 	.word	0xe000ed20
 800763c:	2000000c 	.word	0x2000000c
 8007640:	e000ef34 	.word	0xe000ef34

08007644 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007644:	b480      	push	{r7}
 8007646:	b083      	sub	sp, #12
 8007648:	af00      	add	r7, sp, #0
	__asm volatile
 800764a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800764e:	f383 8811 	msr	BASEPRI, r3
 8007652:	f3bf 8f6f 	isb	sy
 8007656:	f3bf 8f4f 	dsb	sy
 800765a:	607b      	str	r3, [r7, #4]
}
 800765c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800765e:	4b0f      	ldr	r3, [pc, #60]	; (800769c <vPortEnterCritical+0x58>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	3301      	adds	r3, #1
 8007664:	4a0d      	ldr	r2, [pc, #52]	; (800769c <vPortEnterCritical+0x58>)
 8007666:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007668:	4b0c      	ldr	r3, [pc, #48]	; (800769c <vPortEnterCritical+0x58>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	2b01      	cmp	r3, #1
 800766e:	d10f      	bne.n	8007690 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007670:	4b0b      	ldr	r3, [pc, #44]	; (80076a0 <vPortEnterCritical+0x5c>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	b2db      	uxtb	r3, r3
 8007676:	2b00      	cmp	r3, #0
 8007678:	d00a      	beq.n	8007690 <vPortEnterCritical+0x4c>
	__asm volatile
 800767a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800767e:	f383 8811 	msr	BASEPRI, r3
 8007682:	f3bf 8f6f 	isb	sy
 8007686:	f3bf 8f4f 	dsb	sy
 800768a:	603b      	str	r3, [r7, #0]
}
 800768c:	bf00      	nop
 800768e:	e7fe      	b.n	800768e <vPortEnterCritical+0x4a>
	}
}
 8007690:	bf00      	nop
 8007692:	370c      	adds	r7, #12
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr
 800769c:	2000000c 	.word	0x2000000c
 80076a0:	e000ed04 	.word	0xe000ed04

080076a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80076a4:	b480      	push	{r7}
 80076a6:	b083      	sub	sp, #12
 80076a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80076aa:	4b12      	ldr	r3, [pc, #72]	; (80076f4 <vPortExitCritical+0x50>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d10a      	bne.n	80076c8 <vPortExitCritical+0x24>
	__asm volatile
 80076b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076b6:	f383 8811 	msr	BASEPRI, r3
 80076ba:	f3bf 8f6f 	isb	sy
 80076be:	f3bf 8f4f 	dsb	sy
 80076c2:	607b      	str	r3, [r7, #4]
}
 80076c4:	bf00      	nop
 80076c6:	e7fe      	b.n	80076c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80076c8:	4b0a      	ldr	r3, [pc, #40]	; (80076f4 <vPortExitCritical+0x50>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	3b01      	subs	r3, #1
 80076ce:	4a09      	ldr	r2, [pc, #36]	; (80076f4 <vPortExitCritical+0x50>)
 80076d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80076d2:	4b08      	ldr	r3, [pc, #32]	; (80076f4 <vPortExitCritical+0x50>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d105      	bne.n	80076e6 <vPortExitCritical+0x42>
 80076da:	2300      	movs	r3, #0
 80076dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	f383 8811 	msr	BASEPRI, r3
}
 80076e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80076e6:	bf00      	nop
 80076e8:	370c      	adds	r7, #12
 80076ea:	46bd      	mov	sp, r7
 80076ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f0:	4770      	bx	lr
 80076f2:	bf00      	nop
 80076f4:	2000000c 	.word	0x2000000c
	...

08007700 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007700:	f3ef 8009 	mrs	r0, PSP
 8007704:	f3bf 8f6f 	isb	sy
 8007708:	4b15      	ldr	r3, [pc, #84]	; (8007760 <pxCurrentTCBConst>)
 800770a:	681a      	ldr	r2, [r3, #0]
 800770c:	f01e 0f10 	tst.w	lr, #16
 8007710:	bf08      	it	eq
 8007712:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007716:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800771a:	6010      	str	r0, [r2, #0]
 800771c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007720:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007724:	f380 8811 	msr	BASEPRI, r0
 8007728:	f3bf 8f4f 	dsb	sy
 800772c:	f3bf 8f6f 	isb	sy
 8007730:	f7fe fec2 	bl	80064b8 <vTaskSwitchContext>
 8007734:	f04f 0000 	mov.w	r0, #0
 8007738:	f380 8811 	msr	BASEPRI, r0
 800773c:	bc09      	pop	{r0, r3}
 800773e:	6819      	ldr	r1, [r3, #0]
 8007740:	6808      	ldr	r0, [r1, #0]
 8007742:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007746:	f01e 0f10 	tst.w	lr, #16
 800774a:	bf08      	it	eq
 800774c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007750:	f380 8809 	msr	PSP, r0
 8007754:	f3bf 8f6f 	isb	sy
 8007758:	4770      	bx	lr
 800775a:	bf00      	nop
 800775c:	f3af 8000 	nop.w

08007760 <pxCurrentTCBConst>:
 8007760:	200008c0 	.word	0x200008c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007764:	bf00      	nop
 8007766:	bf00      	nop

08007768 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b082      	sub	sp, #8
 800776c:	af00      	add	r7, sp, #0
	__asm volatile
 800776e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007772:	f383 8811 	msr	BASEPRI, r3
 8007776:	f3bf 8f6f 	isb	sy
 800777a:	f3bf 8f4f 	dsb	sy
 800777e:	607b      	str	r3, [r7, #4]
}
 8007780:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007782:	f7fe fddf 	bl	8006344 <xTaskIncrementTick>
 8007786:	4603      	mov	r3, r0
 8007788:	2b00      	cmp	r3, #0
 800778a:	d003      	beq.n	8007794 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800778c:	4b06      	ldr	r3, [pc, #24]	; (80077a8 <xPortSysTickHandler+0x40>)
 800778e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007792:	601a      	str	r2, [r3, #0]
 8007794:	2300      	movs	r3, #0
 8007796:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	f383 8811 	msr	BASEPRI, r3
}
 800779e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80077a0:	bf00      	nop
 80077a2:	3708      	adds	r7, #8
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}
 80077a8:	e000ed04 	.word	0xe000ed04

080077ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80077ac:	b480      	push	{r7}
 80077ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80077b0:	4b0b      	ldr	r3, [pc, #44]	; (80077e0 <vPortSetupTimerInterrupt+0x34>)
 80077b2:	2200      	movs	r2, #0
 80077b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80077b6:	4b0b      	ldr	r3, [pc, #44]	; (80077e4 <vPortSetupTimerInterrupt+0x38>)
 80077b8:	2200      	movs	r2, #0
 80077ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80077bc:	4b0a      	ldr	r3, [pc, #40]	; (80077e8 <vPortSetupTimerInterrupt+0x3c>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a0a      	ldr	r2, [pc, #40]	; (80077ec <vPortSetupTimerInterrupt+0x40>)
 80077c2:	fba2 2303 	umull	r2, r3, r2, r3
 80077c6:	099b      	lsrs	r3, r3, #6
 80077c8:	4a09      	ldr	r2, [pc, #36]	; (80077f0 <vPortSetupTimerInterrupt+0x44>)
 80077ca:	3b01      	subs	r3, #1
 80077cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80077ce:	4b04      	ldr	r3, [pc, #16]	; (80077e0 <vPortSetupTimerInterrupt+0x34>)
 80077d0:	2207      	movs	r2, #7
 80077d2:	601a      	str	r2, [r3, #0]
}
 80077d4:	bf00      	nop
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr
 80077de:	bf00      	nop
 80077e0:	e000e010 	.word	0xe000e010
 80077e4:	e000e018 	.word	0xe000e018
 80077e8:	20000000 	.word	0x20000000
 80077ec:	10624dd3 	.word	0x10624dd3
 80077f0:	e000e014 	.word	0xe000e014

080077f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80077f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007804 <vPortEnableVFP+0x10>
 80077f8:	6801      	ldr	r1, [r0, #0]
 80077fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80077fe:	6001      	str	r1, [r0, #0]
 8007800:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007802:	bf00      	nop
 8007804:	e000ed88 	.word	0xe000ed88

08007808 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007808:	b480      	push	{r7}
 800780a:	b085      	sub	sp, #20
 800780c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800780e:	f3ef 8305 	mrs	r3, IPSR
 8007812:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2b0f      	cmp	r3, #15
 8007818:	d914      	bls.n	8007844 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800781a:	4a17      	ldr	r2, [pc, #92]	; (8007878 <vPortValidateInterruptPriority+0x70>)
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	4413      	add	r3, r2
 8007820:	781b      	ldrb	r3, [r3, #0]
 8007822:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007824:	4b15      	ldr	r3, [pc, #84]	; (800787c <vPortValidateInterruptPriority+0x74>)
 8007826:	781b      	ldrb	r3, [r3, #0]
 8007828:	7afa      	ldrb	r2, [r7, #11]
 800782a:	429a      	cmp	r2, r3
 800782c:	d20a      	bcs.n	8007844 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800782e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007832:	f383 8811 	msr	BASEPRI, r3
 8007836:	f3bf 8f6f 	isb	sy
 800783a:	f3bf 8f4f 	dsb	sy
 800783e:	607b      	str	r3, [r7, #4]
}
 8007840:	bf00      	nop
 8007842:	e7fe      	b.n	8007842 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007844:	4b0e      	ldr	r3, [pc, #56]	; (8007880 <vPortValidateInterruptPriority+0x78>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800784c:	4b0d      	ldr	r3, [pc, #52]	; (8007884 <vPortValidateInterruptPriority+0x7c>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	429a      	cmp	r2, r3
 8007852:	d90a      	bls.n	800786a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007858:	f383 8811 	msr	BASEPRI, r3
 800785c:	f3bf 8f6f 	isb	sy
 8007860:	f3bf 8f4f 	dsb	sy
 8007864:	603b      	str	r3, [r7, #0]
}
 8007866:	bf00      	nop
 8007868:	e7fe      	b.n	8007868 <vPortValidateInterruptPriority+0x60>
	}
 800786a:	bf00      	nop
 800786c:	3714      	adds	r7, #20
 800786e:	46bd      	mov	sp, r7
 8007870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007874:	4770      	bx	lr
 8007876:	bf00      	nop
 8007878:	e000e3f0 	.word	0xe000e3f0
 800787c:	20000eec 	.word	0x20000eec
 8007880:	e000ed0c 	.word	0xe000ed0c
 8007884:	20000ef0 	.word	0x20000ef0

08007888 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b08a      	sub	sp, #40	; 0x28
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007890:	2300      	movs	r3, #0
 8007892:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007894:	f7fe fc9a 	bl	80061cc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007898:	4b5b      	ldr	r3, [pc, #364]	; (8007a08 <pvPortMalloc+0x180>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d101      	bne.n	80078a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80078a0:	f000 f920 	bl	8007ae4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80078a4:	4b59      	ldr	r3, [pc, #356]	; (8007a0c <pvPortMalloc+0x184>)
 80078a6:	681a      	ldr	r2, [r3, #0]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	4013      	ands	r3, r2
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	f040 8093 	bne.w	80079d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d01d      	beq.n	80078f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80078b8:	2208      	movs	r2, #8
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	4413      	add	r3, r2
 80078be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f003 0307 	and.w	r3, r3, #7
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d014      	beq.n	80078f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f023 0307 	bic.w	r3, r3, #7
 80078d0:	3308      	adds	r3, #8
 80078d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f003 0307 	and.w	r3, r3, #7
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d00a      	beq.n	80078f4 <pvPortMalloc+0x6c>
	__asm volatile
 80078de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078e2:	f383 8811 	msr	BASEPRI, r3
 80078e6:	f3bf 8f6f 	isb	sy
 80078ea:	f3bf 8f4f 	dsb	sy
 80078ee:	617b      	str	r3, [r7, #20]
}
 80078f0:	bf00      	nop
 80078f2:	e7fe      	b.n	80078f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d06e      	beq.n	80079d8 <pvPortMalloc+0x150>
 80078fa:	4b45      	ldr	r3, [pc, #276]	; (8007a10 <pvPortMalloc+0x188>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	687a      	ldr	r2, [r7, #4]
 8007900:	429a      	cmp	r2, r3
 8007902:	d869      	bhi.n	80079d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007904:	4b43      	ldr	r3, [pc, #268]	; (8007a14 <pvPortMalloc+0x18c>)
 8007906:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007908:	4b42      	ldr	r3, [pc, #264]	; (8007a14 <pvPortMalloc+0x18c>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800790e:	e004      	b.n	800791a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007912:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800791a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800791c:	685b      	ldr	r3, [r3, #4]
 800791e:	687a      	ldr	r2, [r7, #4]
 8007920:	429a      	cmp	r2, r3
 8007922:	d903      	bls.n	800792c <pvPortMalloc+0xa4>
 8007924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d1f1      	bne.n	8007910 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800792c:	4b36      	ldr	r3, [pc, #216]	; (8007a08 <pvPortMalloc+0x180>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007932:	429a      	cmp	r2, r3
 8007934:	d050      	beq.n	80079d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007936:	6a3b      	ldr	r3, [r7, #32]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	2208      	movs	r2, #8
 800793c:	4413      	add	r3, r2
 800793e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007942:	681a      	ldr	r2, [r3, #0]
 8007944:	6a3b      	ldr	r3, [r7, #32]
 8007946:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800794a:	685a      	ldr	r2, [r3, #4]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	1ad2      	subs	r2, r2, r3
 8007950:	2308      	movs	r3, #8
 8007952:	005b      	lsls	r3, r3, #1
 8007954:	429a      	cmp	r2, r3
 8007956:	d91f      	bls.n	8007998 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007958:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	4413      	add	r3, r2
 800795e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007960:	69bb      	ldr	r3, [r7, #24]
 8007962:	f003 0307 	and.w	r3, r3, #7
 8007966:	2b00      	cmp	r3, #0
 8007968:	d00a      	beq.n	8007980 <pvPortMalloc+0xf8>
	__asm volatile
 800796a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800796e:	f383 8811 	msr	BASEPRI, r3
 8007972:	f3bf 8f6f 	isb	sy
 8007976:	f3bf 8f4f 	dsb	sy
 800797a:	613b      	str	r3, [r7, #16]
}
 800797c:	bf00      	nop
 800797e:	e7fe      	b.n	800797e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007982:	685a      	ldr	r2, [r3, #4]
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	1ad2      	subs	r2, r2, r3
 8007988:	69bb      	ldr	r3, [r7, #24]
 800798a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800798c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800798e:	687a      	ldr	r2, [r7, #4]
 8007990:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007992:	69b8      	ldr	r0, [r7, #24]
 8007994:	f000 f908 	bl	8007ba8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007998:	4b1d      	ldr	r3, [pc, #116]	; (8007a10 <pvPortMalloc+0x188>)
 800799a:	681a      	ldr	r2, [r3, #0]
 800799c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	1ad3      	subs	r3, r2, r3
 80079a2:	4a1b      	ldr	r2, [pc, #108]	; (8007a10 <pvPortMalloc+0x188>)
 80079a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80079a6:	4b1a      	ldr	r3, [pc, #104]	; (8007a10 <pvPortMalloc+0x188>)
 80079a8:	681a      	ldr	r2, [r3, #0]
 80079aa:	4b1b      	ldr	r3, [pc, #108]	; (8007a18 <pvPortMalloc+0x190>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	429a      	cmp	r2, r3
 80079b0:	d203      	bcs.n	80079ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80079b2:	4b17      	ldr	r3, [pc, #92]	; (8007a10 <pvPortMalloc+0x188>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4a18      	ldr	r2, [pc, #96]	; (8007a18 <pvPortMalloc+0x190>)
 80079b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80079ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079bc:	685a      	ldr	r2, [r3, #4]
 80079be:	4b13      	ldr	r3, [pc, #76]	; (8007a0c <pvPortMalloc+0x184>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	431a      	orrs	r2, r3
 80079c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80079c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ca:	2200      	movs	r2, #0
 80079cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80079ce:	4b13      	ldr	r3, [pc, #76]	; (8007a1c <pvPortMalloc+0x194>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	3301      	adds	r3, #1
 80079d4:	4a11      	ldr	r2, [pc, #68]	; (8007a1c <pvPortMalloc+0x194>)
 80079d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80079d8:	f7fe fc06 	bl	80061e8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80079dc:	69fb      	ldr	r3, [r7, #28]
 80079de:	f003 0307 	and.w	r3, r3, #7
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d00a      	beq.n	80079fc <pvPortMalloc+0x174>
	__asm volatile
 80079e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ea:	f383 8811 	msr	BASEPRI, r3
 80079ee:	f3bf 8f6f 	isb	sy
 80079f2:	f3bf 8f4f 	dsb	sy
 80079f6:	60fb      	str	r3, [r7, #12]
}
 80079f8:	bf00      	nop
 80079fa:	e7fe      	b.n	80079fa <pvPortMalloc+0x172>
	return pvReturn;
 80079fc:	69fb      	ldr	r3, [r7, #28]
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3728      	adds	r7, #40	; 0x28
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}
 8007a06:	bf00      	nop
 8007a08:	20004d7c 	.word	0x20004d7c
 8007a0c:	20004d90 	.word	0x20004d90
 8007a10:	20004d80 	.word	0x20004d80
 8007a14:	20004d74 	.word	0x20004d74
 8007a18:	20004d84 	.word	0x20004d84
 8007a1c:	20004d88 	.word	0x20004d88

08007a20 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b086      	sub	sp, #24
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d04d      	beq.n	8007ace <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007a32:	2308      	movs	r3, #8
 8007a34:	425b      	negs	r3, r3
 8007a36:	697a      	ldr	r2, [r7, #20]
 8007a38:	4413      	add	r3, r2
 8007a3a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007a3c:	697b      	ldr	r3, [r7, #20]
 8007a3e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007a40:	693b      	ldr	r3, [r7, #16]
 8007a42:	685a      	ldr	r2, [r3, #4]
 8007a44:	4b24      	ldr	r3, [pc, #144]	; (8007ad8 <vPortFree+0xb8>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4013      	ands	r3, r2
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d10a      	bne.n	8007a64 <vPortFree+0x44>
	__asm volatile
 8007a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a52:	f383 8811 	msr	BASEPRI, r3
 8007a56:	f3bf 8f6f 	isb	sy
 8007a5a:	f3bf 8f4f 	dsb	sy
 8007a5e:	60fb      	str	r3, [r7, #12]
}
 8007a60:	bf00      	nop
 8007a62:	e7fe      	b.n	8007a62 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d00a      	beq.n	8007a82 <vPortFree+0x62>
	__asm volatile
 8007a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a70:	f383 8811 	msr	BASEPRI, r3
 8007a74:	f3bf 8f6f 	isb	sy
 8007a78:	f3bf 8f4f 	dsb	sy
 8007a7c:	60bb      	str	r3, [r7, #8]
}
 8007a7e:	bf00      	nop
 8007a80:	e7fe      	b.n	8007a80 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007a82:	693b      	ldr	r3, [r7, #16]
 8007a84:	685a      	ldr	r2, [r3, #4]
 8007a86:	4b14      	ldr	r3, [pc, #80]	; (8007ad8 <vPortFree+0xb8>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	4013      	ands	r3, r2
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d01e      	beq.n	8007ace <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007a90:	693b      	ldr	r3, [r7, #16]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d11a      	bne.n	8007ace <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	685a      	ldr	r2, [r3, #4]
 8007a9c:	4b0e      	ldr	r3, [pc, #56]	; (8007ad8 <vPortFree+0xb8>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	43db      	mvns	r3, r3
 8007aa2:	401a      	ands	r2, r3
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007aa8:	f7fe fb90 	bl	80061cc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007aac:	693b      	ldr	r3, [r7, #16]
 8007aae:	685a      	ldr	r2, [r3, #4]
 8007ab0:	4b0a      	ldr	r3, [pc, #40]	; (8007adc <vPortFree+0xbc>)
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4413      	add	r3, r2
 8007ab6:	4a09      	ldr	r2, [pc, #36]	; (8007adc <vPortFree+0xbc>)
 8007ab8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007aba:	6938      	ldr	r0, [r7, #16]
 8007abc:	f000 f874 	bl	8007ba8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007ac0:	4b07      	ldr	r3, [pc, #28]	; (8007ae0 <vPortFree+0xc0>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	3301      	adds	r3, #1
 8007ac6:	4a06      	ldr	r2, [pc, #24]	; (8007ae0 <vPortFree+0xc0>)
 8007ac8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007aca:	f7fe fb8d 	bl	80061e8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007ace:	bf00      	nop
 8007ad0:	3718      	adds	r7, #24
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}
 8007ad6:	bf00      	nop
 8007ad8:	20004d90 	.word	0x20004d90
 8007adc:	20004d80 	.word	0x20004d80
 8007ae0:	20004d8c 	.word	0x20004d8c

08007ae4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b085      	sub	sp, #20
 8007ae8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007aea:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 8007aee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007af0:	4b27      	ldr	r3, [pc, #156]	; (8007b90 <prvHeapInit+0xac>)
 8007af2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	f003 0307 	and.w	r3, r3, #7
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d00c      	beq.n	8007b18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	3307      	adds	r3, #7
 8007b02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f023 0307 	bic.w	r3, r3, #7
 8007b0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007b0c:	68ba      	ldr	r2, [r7, #8]
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	1ad3      	subs	r3, r2, r3
 8007b12:	4a1f      	ldr	r2, [pc, #124]	; (8007b90 <prvHeapInit+0xac>)
 8007b14:	4413      	add	r3, r2
 8007b16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007b1c:	4a1d      	ldr	r2, [pc, #116]	; (8007b94 <prvHeapInit+0xb0>)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007b22:	4b1c      	ldr	r3, [pc, #112]	; (8007b94 <prvHeapInit+0xb0>)
 8007b24:	2200      	movs	r2, #0
 8007b26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	68ba      	ldr	r2, [r7, #8]
 8007b2c:	4413      	add	r3, r2
 8007b2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007b30:	2208      	movs	r2, #8
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	1a9b      	subs	r3, r3, r2
 8007b36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	f023 0307 	bic.w	r3, r3, #7
 8007b3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	4a15      	ldr	r2, [pc, #84]	; (8007b98 <prvHeapInit+0xb4>)
 8007b44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007b46:	4b14      	ldr	r3, [pc, #80]	; (8007b98 <prvHeapInit+0xb4>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007b4e:	4b12      	ldr	r3, [pc, #72]	; (8007b98 <prvHeapInit+0xb4>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	2200      	movs	r2, #0
 8007b54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	68fa      	ldr	r2, [r7, #12]
 8007b5e:	1ad2      	subs	r2, r2, r3
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007b64:	4b0c      	ldr	r3, [pc, #48]	; (8007b98 <prvHeapInit+0xb4>)
 8007b66:	681a      	ldr	r2, [r3, #0]
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	685b      	ldr	r3, [r3, #4]
 8007b70:	4a0a      	ldr	r2, [pc, #40]	; (8007b9c <prvHeapInit+0xb8>)
 8007b72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	685b      	ldr	r3, [r3, #4]
 8007b78:	4a09      	ldr	r2, [pc, #36]	; (8007ba0 <prvHeapInit+0xbc>)
 8007b7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007b7c:	4b09      	ldr	r3, [pc, #36]	; (8007ba4 <prvHeapInit+0xc0>)
 8007b7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007b82:	601a      	str	r2, [r3, #0]
}
 8007b84:	bf00      	nop
 8007b86:	3714      	adds	r7, #20
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8e:	4770      	bx	lr
 8007b90:	20000ef4 	.word	0x20000ef4
 8007b94:	20004d74 	.word	0x20004d74
 8007b98:	20004d7c 	.word	0x20004d7c
 8007b9c:	20004d84 	.word	0x20004d84
 8007ba0:	20004d80 	.word	0x20004d80
 8007ba4:	20004d90 	.word	0x20004d90

08007ba8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007ba8:	b480      	push	{r7}
 8007baa:	b085      	sub	sp, #20
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007bb0:	4b28      	ldr	r3, [pc, #160]	; (8007c54 <prvInsertBlockIntoFreeList+0xac>)
 8007bb2:	60fb      	str	r3, [r7, #12]
 8007bb4:	e002      	b.n	8007bbc <prvInsertBlockIntoFreeList+0x14>
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	60fb      	str	r3, [r7, #12]
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	687a      	ldr	r2, [r7, #4]
 8007bc2:	429a      	cmp	r2, r3
 8007bc4:	d8f7      	bhi.n	8007bb6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	685b      	ldr	r3, [r3, #4]
 8007bce:	68ba      	ldr	r2, [r7, #8]
 8007bd0:	4413      	add	r3, r2
 8007bd2:	687a      	ldr	r2, [r7, #4]
 8007bd4:	429a      	cmp	r2, r3
 8007bd6:	d108      	bne.n	8007bea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	685a      	ldr	r2, [r3, #4]
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	685b      	ldr	r3, [r3, #4]
 8007be0:	441a      	add	r2, r3
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	685b      	ldr	r3, [r3, #4]
 8007bf2:	68ba      	ldr	r2, [r7, #8]
 8007bf4:	441a      	add	r2, r3
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	429a      	cmp	r2, r3
 8007bfc:	d118      	bne.n	8007c30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681a      	ldr	r2, [r3, #0]
 8007c02:	4b15      	ldr	r3, [pc, #84]	; (8007c58 <prvInsertBlockIntoFreeList+0xb0>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	429a      	cmp	r2, r3
 8007c08:	d00d      	beq.n	8007c26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	685a      	ldr	r2, [r3, #4]
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	685b      	ldr	r3, [r3, #4]
 8007c14:	441a      	add	r2, r3
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	681a      	ldr	r2, [r3, #0]
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	601a      	str	r2, [r3, #0]
 8007c24:	e008      	b.n	8007c38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007c26:	4b0c      	ldr	r3, [pc, #48]	; (8007c58 <prvInsertBlockIntoFreeList+0xb0>)
 8007c28:	681a      	ldr	r2, [r3, #0]
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	601a      	str	r2, [r3, #0]
 8007c2e:	e003      	b.n	8007c38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681a      	ldr	r2, [r3, #0]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007c38:	68fa      	ldr	r2, [r7, #12]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	429a      	cmp	r2, r3
 8007c3e:	d002      	beq.n	8007c46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	687a      	ldr	r2, [r7, #4]
 8007c44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c46:	bf00      	nop
 8007c48:	3714      	adds	r7, #20
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c50:	4770      	bx	lr
 8007c52:	bf00      	nop
 8007c54:	20004d74 	.word	0x20004d74
 8007c58:	20004d7c 	.word	0x20004d7c

08007c5c <__errno>:
 8007c5c:	4b01      	ldr	r3, [pc, #4]	; (8007c64 <__errno+0x8>)
 8007c5e:	6818      	ldr	r0, [r3, #0]
 8007c60:	4770      	bx	lr
 8007c62:	bf00      	nop
 8007c64:	20000010 	.word	0x20000010

08007c68 <__libc_init_array>:
 8007c68:	b570      	push	{r4, r5, r6, lr}
 8007c6a:	4d0d      	ldr	r5, [pc, #52]	; (8007ca0 <__libc_init_array+0x38>)
 8007c6c:	4c0d      	ldr	r4, [pc, #52]	; (8007ca4 <__libc_init_array+0x3c>)
 8007c6e:	1b64      	subs	r4, r4, r5
 8007c70:	10a4      	asrs	r4, r4, #2
 8007c72:	2600      	movs	r6, #0
 8007c74:	42a6      	cmp	r6, r4
 8007c76:	d109      	bne.n	8007c8c <__libc_init_array+0x24>
 8007c78:	4d0b      	ldr	r5, [pc, #44]	; (8007ca8 <__libc_init_array+0x40>)
 8007c7a:	4c0c      	ldr	r4, [pc, #48]	; (8007cac <__libc_init_array+0x44>)
 8007c7c:	f002 fd80 	bl	800a780 <_init>
 8007c80:	1b64      	subs	r4, r4, r5
 8007c82:	10a4      	asrs	r4, r4, #2
 8007c84:	2600      	movs	r6, #0
 8007c86:	42a6      	cmp	r6, r4
 8007c88:	d105      	bne.n	8007c96 <__libc_init_array+0x2e>
 8007c8a:	bd70      	pop	{r4, r5, r6, pc}
 8007c8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c90:	4798      	blx	r3
 8007c92:	3601      	adds	r6, #1
 8007c94:	e7ee      	b.n	8007c74 <__libc_init_array+0xc>
 8007c96:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c9a:	4798      	blx	r3
 8007c9c:	3601      	adds	r6, #1
 8007c9e:	e7f2      	b.n	8007c86 <__libc_init_array+0x1e>
 8007ca0:	0800aeac 	.word	0x0800aeac
 8007ca4:	0800aeac 	.word	0x0800aeac
 8007ca8:	0800aeac 	.word	0x0800aeac
 8007cac:	0800aeb0 	.word	0x0800aeb0

08007cb0 <memcpy>:
 8007cb0:	440a      	add	r2, r1
 8007cb2:	4291      	cmp	r1, r2
 8007cb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8007cb8:	d100      	bne.n	8007cbc <memcpy+0xc>
 8007cba:	4770      	bx	lr
 8007cbc:	b510      	push	{r4, lr}
 8007cbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007cc2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007cc6:	4291      	cmp	r1, r2
 8007cc8:	d1f9      	bne.n	8007cbe <memcpy+0xe>
 8007cca:	bd10      	pop	{r4, pc}

08007ccc <memset>:
 8007ccc:	4402      	add	r2, r0
 8007cce:	4603      	mov	r3, r0
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d100      	bne.n	8007cd6 <memset+0xa>
 8007cd4:	4770      	bx	lr
 8007cd6:	f803 1b01 	strb.w	r1, [r3], #1
 8007cda:	e7f9      	b.n	8007cd0 <memset+0x4>

08007cdc <__cvt>:
 8007cdc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ce0:	ec55 4b10 	vmov	r4, r5, d0
 8007ce4:	2d00      	cmp	r5, #0
 8007ce6:	460e      	mov	r6, r1
 8007ce8:	4619      	mov	r1, r3
 8007cea:	462b      	mov	r3, r5
 8007cec:	bfbb      	ittet	lt
 8007cee:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007cf2:	461d      	movlt	r5, r3
 8007cf4:	2300      	movge	r3, #0
 8007cf6:	232d      	movlt	r3, #45	; 0x2d
 8007cf8:	700b      	strb	r3, [r1, #0]
 8007cfa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007cfc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007d00:	4691      	mov	r9, r2
 8007d02:	f023 0820 	bic.w	r8, r3, #32
 8007d06:	bfbc      	itt	lt
 8007d08:	4622      	movlt	r2, r4
 8007d0a:	4614      	movlt	r4, r2
 8007d0c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007d10:	d005      	beq.n	8007d1e <__cvt+0x42>
 8007d12:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007d16:	d100      	bne.n	8007d1a <__cvt+0x3e>
 8007d18:	3601      	adds	r6, #1
 8007d1a:	2102      	movs	r1, #2
 8007d1c:	e000      	b.n	8007d20 <__cvt+0x44>
 8007d1e:	2103      	movs	r1, #3
 8007d20:	ab03      	add	r3, sp, #12
 8007d22:	9301      	str	r3, [sp, #4]
 8007d24:	ab02      	add	r3, sp, #8
 8007d26:	9300      	str	r3, [sp, #0]
 8007d28:	ec45 4b10 	vmov	d0, r4, r5
 8007d2c:	4653      	mov	r3, sl
 8007d2e:	4632      	mov	r2, r6
 8007d30:	f000 fe1a 	bl	8008968 <_dtoa_r>
 8007d34:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007d38:	4607      	mov	r7, r0
 8007d3a:	d102      	bne.n	8007d42 <__cvt+0x66>
 8007d3c:	f019 0f01 	tst.w	r9, #1
 8007d40:	d022      	beq.n	8007d88 <__cvt+0xac>
 8007d42:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007d46:	eb07 0906 	add.w	r9, r7, r6
 8007d4a:	d110      	bne.n	8007d6e <__cvt+0x92>
 8007d4c:	783b      	ldrb	r3, [r7, #0]
 8007d4e:	2b30      	cmp	r3, #48	; 0x30
 8007d50:	d10a      	bne.n	8007d68 <__cvt+0x8c>
 8007d52:	2200      	movs	r2, #0
 8007d54:	2300      	movs	r3, #0
 8007d56:	4620      	mov	r0, r4
 8007d58:	4629      	mov	r1, r5
 8007d5a:	f7f8 febd 	bl	8000ad8 <__aeabi_dcmpeq>
 8007d5e:	b918      	cbnz	r0, 8007d68 <__cvt+0x8c>
 8007d60:	f1c6 0601 	rsb	r6, r6, #1
 8007d64:	f8ca 6000 	str.w	r6, [sl]
 8007d68:	f8da 3000 	ldr.w	r3, [sl]
 8007d6c:	4499      	add	r9, r3
 8007d6e:	2200      	movs	r2, #0
 8007d70:	2300      	movs	r3, #0
 8007d72:	4620      	mov	r0, r4
 8007d74:	4629      	mov	r1, r5
 8007d76:	f7f8 feaf 	bl	8000ad8 <__aeabi_dcmpeq>
 8007d7a:	b108      	cbz	r0, 8007d80 <__cvt+0xa4>
 8007d7c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007d80:	2230      	movs	r2, #48	; 0x30
 8007d82:	9b03      	ldr	r3, [sp, #12]
 8007d84:	454b      	cmp	r3, r9
 8007d86:	d307      	bcc.n	8007d98 <__cvt+0xbc>
 8007d88:	9b03      	ldr	r3, [sp, #12]
 8007d8a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007d8c:	1bdb      	subs	r3, r3, r7
 8007d8e:	4638      	mov	r0, r7
 8007d90:	6013      	str	r3, [r2, #0]
 8007d92:	b004      	add	sp, #16
 8007d94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d98:	1c59      	adds	r1, r3, #1
 8007d9a:	9103      	str	r1, [sp, #12]
 8007d9c:	701a      	strb	r2, [r3, #0]
 8007d9e:	e7f0      	b.n	8007d82 <__cvt+0xa6>

08007da0 <__exponent>:
 8007da0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007da2:	4603      	mov	r3, r0
 8007da4:	2900      	cmp	r1, #0
 8007da6:	bfb8      	it	lt
 8007da8:	4249      	neglt	r1, r1
 8007daa:	f803 2b02 	strb.w	r2, [r3], #2
 8007dae:	bfb4      	ite	lt
 8007db0:	222d      	movlt	r2, #45	; 0x2d
 8007db2:	222b      	movge	r2, #43	; 0x2b
 8007db4:	2909      	cmp	r1, #9
 8007db6:	7042      	strb	r2, [r0, #1]
 8007db8:	dd2a      	ble.n	8007e10 <__exponent+0x70>
 8007dba:	f10d 0407 	add.w	r4, sp, #7
 8007dbe:	46a4      	mov	ip, r4
 8007dc0:	270a      	movs	r7, #10
 8007dc2:	46a6      	mov	lr, r4
 8007dc4:	460a      	mov	r2, r1
 8007dc6:	fb91 f6f7 	sdiv	r6, r1, r7
 8007dca:	fb07 1516 	mls	r5, r7, r6, r1
 8007dce:	3530      	adds	r5, #48	; 0x30
 8007dd0:	2a63      	cmp	r2, #99	; 0x63
 8007dd2:	f104 34ff 	add.w	r4, r4, #4294967295
 8007dd6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007dda:	4631      	mov	r1, r6
 8007ddc:	dcf1      	bgt.n	8007dc2 <__exponent+0x22>
 8007dde:	3130      	adds	r1, #48	; 0x30
 8007de0:	f1ae 0502 	sub.w	r5, lr, #2
 8007de4:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007de8:	1c44      	adds	r4, r0, #1
 8007dea:	4629      	mov	r1, r5
 8007dec:	4561      	cmp	r1, ip
 8007dee:	d30a      	bcc.n	8007e06 <__exponent+0x66>
 8007df0:	f10d 0209 	add.w	r2, sp, #9
 8007df4:	eba2 020e 	sub.w	r2, r2, lr
 8007df8:	4565      	cmp	r5, ip
 8007dfa:	bf88      	it	hi
 8007dfc:	2200      	movhi	r2, #0
 8007dfe:	4413      	add	r3, r2
 8007e00:	1a18      	subs	r0, r3, r0
 8007e02:	b003      	add	sp, #12
 8007e04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e06:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007e0a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007e0e:	e7ed      	b.n	8007dec <__exponent+0x4c>
 8007e10:	2330      	movs	r3, #48	; 0x30
 8007e12:	3130      	adds	r1, #48	; 0x30
 8007e14:	7083      	strb	r3, [r0, #2]
 8007e16:	70c1      	strb	r1, [r0, #3]
 8007e18:	1d03      	adds	r3, r0, #4
 8007e1a:	e7f1      	b.n	8007e00 <__exponent+0x60>

08007e1c <_printf_float>:
 8007e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e20:	ed2d 8b02 	vpush	{d8}
 8007e24:	b08d      	sub	sp, #52	; 0x34
 8007e26:	460c      	mov	r4, r1
 8007e28:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007e2c:	4616      	mov	r6, r2
 8007e2e:	461f      	mov	r7, r3
 8007e30:	4605      	mov	r5, r0
 8007e32:	f001 fd3d 	bl	80098b0 <_localeconv_r>
 8007e36:	f8d0 a000 	ldr.w	sl, [r0]
 8007e3a:	4650      	mov	r0, sl
 8007e3c:	f7f8 f9d0 	bl	80001e0 <strlen>
 8007e40:	2300      	movs	r3, #0
 8007e42:	930a      	str	r3, [sp, #40]	; 0x28
 8007e44:	6823      	ldr	r3, [r4, #0]
 8007e46:	9305      	str	r3, [sp, #20]
 8007e48:	f8d8 3000 	ldr.w	r3, [r8]
 8007e4c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007e50:	3307      	adds	r3, #7
 8007e52:	f023 0307 	bic.w	r3, r3, #7
 8007e56:	f103 0208 	add.w	r2, r3, #8
 8007e5a:	f8c8 2000 	str.w	r2, [r8]
 8007e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e62:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007e66:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007e6a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007e6e:	9307      	str	r3, [sp, #28]
 8007e70:	f8cd 8018 	str.w	r8, [sp, #24]
 8007e74:	ee08 0a10 	vmov	s16, r0
 8007e78:	4b9f      	ldr	r3, [pc, #636]	; (80080f8 <_printf_float+0x2dc>)
 8007e7a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007e7e:	f04f 32ff 	mov.w	r2, #4294967295
 8007e82:	f7f8 fe5b 	bl	8000b3c <__aeabi_dcmpun>
 8007e86:	bb88      	cbnz	r0, 8007eec <_printf_float+0xd0>
 8007e88:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007e8c:	4b9a      	ldr	r3, [pc, #616]	; (80080f8 <_printf_float+0x2dc>)
 8007e8e:	f04f 32ff 	mov.w	r2, #4294967295
 8007e92:	f7f8 fe35 	bl	8000b00 <__aeabi_dcmple>
 8007e96:	bb48      	cbnz	r0, 8007eec <_printf_float+0xd0>
 8007e98:	2200      	movs	r2, #0
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	4640      	mov	r0, r8
 8007e9e:	4649      	mov	r1, r9
 8007ea0:	f7f8 fe24 	bl	8000aec <__aeabi_dcmplt>
 8007ea4:	b110      	cbz	r0, 8007eac <_printf_float+0x90>
 8007ea6:	232d      	movs	r3, #45	; 0x2d
 8007ea8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007eac:	4b93      	ldr	r3, [pc, #588]	; (80080fc <_printf_float+0x2e0>)
 8007eae:	4894      	ldr	r0, [pc, #592]	; (8008100 <_printf_float+0x2e4>)
 8007eb0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007eb4:	bf94      	ite	ls
 8007eb6:	4698      	movls	r8, r3
 8007eb8:	4680      	movhi	r8, r0
 8007eba:	2303      	movs	r3, #3
 8007ebc:	6123      	str	r3, [r4, #16]
 8007ebe:	9b05      	ldr	r3, [sp, #20]
 8007ec0:	f023 0204 	bic.w	r2, r3, #4
 8007ec4:	6022      	str	r2, [r4, #0]
 8007ec6:	f04f 0900 	mov.w	r9, #0
 8007eca:	9700      	str	r7, [sp, #0]
 8007ecc:	4633      	mov	r3, r6
 8007ece:	aa0b      	add	r2, sp, #44	; 0x2c
 8007ed0:	4621      	mov	r1, r4
 8007ed2:	4628      	mov	r0, r5
 8007ed4:	f000 f9d8 	bl	8008288 <_printf_common>
 8007ed8:	3001      	adds	r0, #1
 8007eda:	f040 8090 	bne.w	8007ffe <_printf_float+0x1e2>
 8007ede:	f04f 30ff 	mov.w	r0, #4294967295
 8007ee2:	b00d      	add	sp, #52	; 0x34
 8007ee4:	ecbd 8b02 	vpop	{d8}
 8007ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007eec:	4642      	mov	r2, r8
 8007eee:	464b      	mov	r3, r9
 8007ef0:	4640      	mov	r0, r8
 8007ef2:	4649      	mov	r1, r9
 8007ef4:	f7f8 fe22 	bl	8000b3c <__aeabi_dcmpun>
 8007ef8:	b140      	cbz	r0, 8007f0c <_printf_float+0xf0>
 8007efa:	464b      	mov	r3, r9
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	bfbc      	itt	lt
 8007f00:	232d      	movlt	r3, #45	; 0x2d
 8007f02:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007f06:	487f      	ldr	r0, [pc, #508]	; (8008104 <_printf_float+0x2e8>)
 8007f08:	4b7f      	ldr	r3, [pc, #508]	; (8008108 <_printf_float+0x2ec>)
 8007f0a:	e7d1      	b.n	8007eb0 <_printf_float+0x94>
 8007f0c:	6863      	ldr	r3, [r4, #4]
 8007f0e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007f12:	9206      	str	r2, [sp, #24]
 8007f14:	1c5a      	adds	r2, r3, #1
 8007f16:	d13f      	bne.n	8007f98 <_printf_float+0x17c>
 8007f18:	2306      	movs	r3, #6
 8007f1a:	6063      	str	r3, [r4, #4]
 8007f1c:	9b05      	ldr	r3, [sp, #20]
 8007f1e:	6861      	ldr	r1, [r4, #4]
 8007f20:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007f24:	2300      	movs	r3, #0
 8007f26:	9303      	str	r3, [sp, #12]
 8007f28:	ab0a      	add	r3, sp, #40	; 0x28
 8007f2a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007f2e:	ab09      	add	r3, sp, #36	; 0x24
 8007f30:	ec49 8b10 	vmov	d0, r8, r9
 8007f34:	9300      	str	r3, [sp, #0]
 8007f36:	6022      	str	r2, [r4, #0]
 8007f38:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007f3c:	4628      	mov	r0, r5
 8007f3e:	f7ff fecd 	bl	8007cdc <__cvt>
 8007f42:	9b06      	ldr	r3, [sp, #24]
 8007f44:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007f46:	2b47      	cmp	r3, #71	; 0x47
 8007f48:	4680      	mov	r8, r0
 8007f4a:	d108      	bne.n	8007f5e <_printf_float+0x142>
 8007f4c:	1cc8      	adds	r0, r1, #3
 8007f4e:	db02      	blt.n	8007f56 <_printf_float+0x13a>
 8007f50:	6863      	ldr	r3, [r4, #4]
 8007f52:	4299      	cmp	r1, r3
 8007f54:	dd41      	ble.n	8007fda <_printf_float+0x1be>
 8007f56:	f1ab 0b02 	sub.w	fp, fp, #2
 8007f5a:	fa5f fb8b 	uxtb.w	fp, fp
 8007f5e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007f62:	d820      	bhi.n	8007fa6 <_printf_float+0x18a>
 8007f64:	3901      	subs	r1, #1
 8007f66:	465a      	mov	r2, fp
 8007f68:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007f6c:	9109      	str	r1, [sp, #36]	; 0x24
 8007f6e:	f7ff ff17 	bl	8007da0 <__exponent>
 8007f72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f74:	1813      	adds	r3, r2, r0
 8007f76:	2a01      	cmp	r2, #1
 8007f78:	4681      	mov	r9, r0
 8007f7a:	6123      	str	r3, [r4, #16]
 8007f7c:	dc02      	bgt.n	8007f84 <_printf_float+0x168>
 8007f7e:	6822      	ldr	r2, [r4, #0]
 8007f80:	07d2      	lsls	r2, r2, #31
 8007f82:	d501      	bpl.n	8007f88 <_printf_float+0x16c>
 8007f84:	3301      	adds	r3, #1
 8007f86:	6123      	str	r3, [r4, #16]
 8007f88:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d09c      	beq.n	8007eca <_printf_float+0xae>
 8007f90:	232d      	movs	r3, #45	; 0x2d
 8007f92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f96:	e798      	b.n	8007eca <_printf_float+0xae>
 8007f98:	9a06      	ldr	r2, [sp, #24]
 8007f9a:	2a47      	cmp	r2, #71	; 0x47
 8007f9c:	d1be      	bne.n	8007f1c <_printf_float+0x100>
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d1bc      	bne.n	8007f1c <_printf_float+0x100>
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	e7b9      	b.n	8007f1a <_printf_float+0xfe>
 8007fa6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007faa:	d118      	bne.n	8007fde <_printf_float+0x1c2>
 8007fac:	2900      	cmp	r1, #0
 8007fae:	6863      	ldr	r3, [r4, #4]
 8007fb0:	dd0b      	ble.n	8007fca <_printf_float+0x1ae>
 8007fb2:	6121      	str	r1, [r4, #16]
 8007fb4:	b913      	cbnz	r3, 8007fbc <_printf_float+0x1a0>
 8007fb6:	6822      	ldr	r2, [r4, #0]
 8007fb8:	07d0      	lsls	r0, r2, #31
 8007fba:	d502      	bpl.n	8007fc2 <_printf_float+0x1a6>
 8007fbc:	3301      	adds	r3, #1
 8007fbe:	440b      	add	r3, r1
 8007fc0:	6123      	str	r3, [r4, #16]
 8007fc2:	65a1      	str	r1, [r4, #88]	; 0x58
 8007fc4:	f04f 0900 	mov.w	r9, #0
 8007fc8:	e7de      	b.n	8007f88 <_printf_float+0x16c>
 8007fca:	b913      	cbnz	r3, 8007fd2 <_printf_float+0x1b6>
 8007fcc:	6822      	ldr	r2, [r4, #0]
 8007fce:	07d2      	lsls	r2, r2, #31
 8007fd0:	d501      	bpl.n	8007fd6 <_printf_float+0x1ba>
 8007fd2:	3302      	adds	r3, #2
 8007fd4:	e7f4      	b.n	8007fc0 <_printf_float+0x1a4>
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	e7f2      	b.n	8007fc0 <_printf_float+0x1a4>
 8007fda:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007fde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fe0:	4299      	cmp	r1, r3
 8007fe2:	db05      	blt.n	8007ff0 <_printf_float+0x1d4>
 8007fe4:	6823      	ldr	r3, [r4, #0]
 8007fe6:	6121      	str	r1, [r4, #16]
 8007fe8:	07d8      	lsls	r0, r3, #31
 8007fea:	d5ea      	bpl.n	8007fc2 <_printf_float+0x1a6>
 8007fec:	1c4b      	adds	r3, r1, #1
 8007fee:	e7e7      	b.n	8007fc0 <_printf_float+0x1a4>
 8007ff0:	2900      	cmp	r1, #0
 8007ff2:	bfd4      	ite	le
 8007ff4:	f1c1 0202 	rsble	r2, r1, #2
 8007ff8:	2201      	movgt	r2, #1
 8007ffa:	4413      	add	r3, r2
 8007ffc:	e7e0      	b.n	8007fc0 <_printf_float+0x1a4>
 8007ffe:	6823      	ldr	r3, [r4, #0]
 8008000:	055a      	lsls	r2, r3, #21
 8008002:	d407      	bmi.n	8008014 <_printf_float+0x1f8>
 8008004:	6923      	ldr	r3, [r4, #16]
 8008006:	4642      	mov	r2, r8
 8008008:	4631      	mov	r1, r6
 800800a:	4628      	mov	r0, r5
 800800c:	47b8      	blx	r7
 800800e:	3001      	adds	r0, #1
 8008010:	d12c      	bne.n	800806c <_printf_float+0x250>
 8008012:	e764      	b.n	8007ede <_printf_float+0xc2>
 8008014:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008018:	f240 80e0 	bls.w	80081dc <_printf_float+0x3c0>
 800801c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008020:	2200      	movs	r2, #0
 8008022:	2300      	movs	r3, #0
 8008024:	f7f8 fd58 	bl	8000ad8 <__aeabi_dcmpeq>
 8008028:	2800      	cmp	r0, #0
 800802a:	d034      	beq.n	8008096 <_printf_float+0x27a>
 800802c:	4a37      	ldr	r2, [pc, #220]	; (800810c <_printf_float+0x2f0>)
 800802e:	2301      	movs	r3, #1
 8008030:	4631      	mov	r1, r6
 8008032:	4628      	mov	r0, r5
 8008034:	47b8      	blx	r7
 8008036:	3001      	adds	r0, #1
 8008038:	f43f af51 	beq.w	8007ede <_printf_float+0xc2>
 800803c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008040:	429a      	cmp	r2, r3
 8008042:	db02      	blt.n	800804a <_printf_float+0x22e>
 8008044:	6823      	ldr	r3, [r4, #0]
 8008046:	07d8      	lsls	r0, r3, #31
 8008048:	d510      	bpl.n	800806c <_printf_float+0x250>
 800804a:	ee18 3a10 	vmov	r3, s16
 800804e:	4652      	mov	r2, sl
 8008050:	4631      	mov	r1, r6
 8008052:	4628      	mov	r0, r5
 8008054:	47b8      	blx	r7
 8008056:	3001      	adds	r0, #1
 8008058:	f43f af41 	beq.w	8007ede <_printf_float+0xc2>
 800805c:	f04f 0800 	mov.w	r8, #0
 8008060:	f104 091a 	add.w	r9, r4, #26
 8008064:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008066:	3b01      	subs	r3, #1
 8008068:	4543      	cmp	r3, r8
 800806a:	dc09      	bgt.n	8008080 <_printf_float+0x264>
 800806c:	6823      	ldr	r3, [r4, #0]
 800806e:	079b      	lsls	r3, r3, #30
 8008070:	f100 8105 	bmi.w	800827e <_printf_float+0x462>
 8008074:	68e0      	ldr	r0, [r4, #12]
 8008076:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008078:	4298      	cmp	r0, r3
 800807a:	bfb8      	it	lt
 800807c:	4618      	movlt	r0, r3
 800807e:	e730      	b.n	8007ee2 <_printf_float+0xc6>
 8008080:	2301      	movs	r3, #1
 8008082:	464a      	mov	r2, r9
 8008084:	4631      	mov	r1, r6
 8008086:	4628      	mov	r0, r5
 8008088:	47b8      	blx	r7
 800808a:	3001      	adds	r0, #1
 800808c:	f43f af27 	beq.w	8007ede <_printf_float+0xc2>
 8008090:	f108 0801 	add.w	r8, r8, #1
 8008094:	e7e6      	b.n	8008064 <_printf_float+0x248>
 8008096:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008098:	2b00      	cmp	r3, #0
 800809a:	dc39      	bgt.n	8008110 <_printf_float+0x2f4>
 800809c:	4a1b      	ldr	r2, [pc, #108]	; (800810c <_printf_float+0x2f0>)
 800809e:	2301      	movs	r3, #1
 80080a0:	4631      	mov	r1, r6
 80080a2:	4628      	mov	r0, r5
 80080a4:	47b8      	blx	r7
 80080a6:	3001      	adds	r0, #1
 80080a8:	f43f af19 	beq.w	8007ede <_printf_float+0xc2>
 80080ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80080b0:	4313      	orrs	r3, r2
 80080b2:	d102      	bne.n	80080ba <_printf_float+0x29e>
 80080b4:	6823      	ldr	r3, [r4, #0]
 80080b6:	07d9      	lsls	r1, r3, #31
 80080b8:	d5d8      	bpl.n	800806c <_printf_float+0x250>
 80080ba:	ee18 3a10 	vmov	r3, s16
 80080be:	4652      	mov	r2, sl
 80080c0:	4631      	mov	r1, r6
 80080c2:	4628      	mov	r0, r5
 80080c4:	47b8      	blx	r7
 80080c6:	3001      	adds	r0, #1
 80080c8:	f43f af09 	beq.w	8007ede <_printf_float+0xc2>
 80080cc:	f04f 0900 	mov.w	r9, #0
 80080d0:	f104 0a1a 	add.w	sl, r4, #26
 80080d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080d6:	425b      	negs	r3, r3
 80080d8:	454b      	cmp	r3, r9
 80080da:	dc01      	bgt.n	80080e0 <_printf_float+0x2c4>
 80080dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080de:	e792      	b.n	8008006 <_printf_float+0x1ea>
 80080e0:	2301      	movs	r3, #1
 80080e2:	4652      	mov	r2, sl
 80080e4:	4631      	mov	r1, r6
 80080e6:	4628      	mov	r0, r5
 80080e8:	47b8      	blx	r7
 80080ea:	3001      	adds	r0, #1
 80080ec:	f43f aef7 	beq.w	8007ede <_printf_float+0xc2>
 80080f0:	f109 0901 	add.w	r9, r9, #1
 80080f4:	e7ee      	b.n	80080d4 <_printf_float+0x2b8>
 80080f6:	bf00      	nop
 80080f8:	7fefffff 	.word	0x7fefffff
 80080fc:	0800aac4 	.word	0x0800aac4
 8008100:	0800aac8 	.word	0x0800aac8
 8008104:	0800aad0 	.word	0x0800aad0
 8008108:	0800aacc 	.word	0x0800aacc
 800810c:	0800aad4 	.word	0x0800aad4
 8008110:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008112:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008114:	429a      	cmp	r2, r3
 8008116:	bfa8      	it	ge
 8008118:	461a      	movge	r2, r3
 800811a:	2a00      	cmp	r2, #0
 800811c:	4691      	mov	r9, r2
 800811e:	dc37      	bgt.n	8008190 <_printf_float+0x374>
 8008120:	f04f 0b00 	mov.w	fp, #0
 8008124:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008128:	f104 021a 	add.w	r2, r4, #26
 800812c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800812e:	9305      	str	r3, [sp, #20]
 8008130:	eba3 0309 	sub.w	r3, r3, r9
 8008134:	455b      	cmp	r3, fp
 8008136:	dc33      	bgt.n	80081a0 <_printf_float+0x384>
 8008138:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800813c:	429a      	cmp	r2, r3
 800813e:	db3b      	blt.n	80081b8 <_printf_float+0x39c>
 8008140:	6823      	ldr	r3, [r4, #0]
 8008142:	07da      	lsls	r2, r3, #31
 8008144:	d438      	bmi.n	80081b8 <_printf_float+0x39c>
 8008146:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008148:	9b05      	ldr	r3, [sp, #20]
 800814a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800814c:	1ad3      	subs	r3, r2, r3
 800814e:	eba2 0901 	sub.w	r9, r2, r1
 8008152:	4599      	cmp	r9, r3
 8008154:	bfa8      	it	ge
 8008156:	4699      	movge	r9, r3
 8008158:	f1b9 0f00 	cmp.w	r9, #0
 800815c:	dc35      	bgt.n	80081ca <_printf_float+0x3ae>
 800815e:	f04f 0800 	mov.w	r8, #0
 8008162:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008166:	f104 0a1a 	add.w	sl, r4, #26
 800816a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800816e:	1a9b      	subs	r3, r3, r2
 8008170:	eba3 0309 	sub.w	r3, r3, r9
 8008174:	4543      	cmp	r3, r8
 8008176:	f77f af79 	ble.w	800806c <_printf_float+0x250>
 800817a:	2301      	movs	r3, #1
 800817c:	4652      	mov	r2, sl
 800817e:	4631      	mov	r1, r6
 8008180:	4628      	mov	r0, r5
 8008182:	47b8      	blx	r7
 8008184:	3001      	adds	r0, #1
 8008186:	f43f aeaa 	beq.w	8007ede <_printf_float+0xc2>
 800818a:	f108 0801 	add.w	r8, r8, #1
 800818e:	e7ec      	b.n	800816a <_printf_float+0x34e>
 8008190:	4613      	mov	r3, r2
 8008192:	4631      	mov	r1, r6
 8008194:	4642      	mov	r2, r8
 8008196:	4628      	mov	r0, r5
 8008198:	47b8      	blx	r7
 800819a:	3001      	adds	r0, #1
 800819c:	d1c0      	bne.n	8008120 <_printf_float+0x304>
 800819e:	e69e      	b.n	8007ede <_printf_float+0xc2>
 80081a0:	2301      	movs	r3, #1
 80081a2:	4631      	mov	r1, r6
 80081a4:	4628      	mov	r0, r5
 80081a6:	9205      	str	r2, [sp, #20]
 80081a8:	47b8      	blx	r7
 80081aa:	3001      	adds	r0, #1
 80081ac:	f43f ae97 	beq.w	8007ede <_printf_float+0xc2>
 80081b0:	9a05      	ldr	r2, [sp, #20]
 80081b2:	f10b 0b01 	add.w	fp, fp, #1
 80081b6:	e7b9      	b.n	800812c <_printf_float+0x310>
 80081b8:	ee18 3a10 	vmov	r3, s16
 80081bc:	4652      	mov	r2, sl
 80081be:	4631      	mov	r1, r6
 80081c0:	4628      	mov	r0, r5
 80081c2:	47b8      	blx	r7
 80081c4:	3001      	adds	r0, #1
 80081c6:	d1be      	bne.n	8008146 <_printf_float+0x32a>
 80081c8:	e689      	b.n	8007ede <_printf_float+0xc2>
 80081ca:	9a05      	ldr	r2, [sp, #20]
 80081cc:	464b      	mov	r3, r9
 80081ce:	4442      	add	r2, r8
 80081d0:	4631      	mov	r1, r6
 80081d2:	4628      	mov	r0, r5
 80081d4:	47b8      	blx	r7
 80081d6:	3001      	adds	r0, #1
 80081d8:	d1c1      	bne.n	800815e <_printf_float+0x342>
 80081da:	e680      	b.n	8007ede <_printf_float+0xc2>
 80081dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80081de:	2a01      	cmp	r2, #1
 80081e0:	dc01      	bgt.n	80081e6 <_printf_float+0x3ca>
 80081e2:	07db      	lsls	r3, r3, #31
 80081e4:	d538      	bpl.n	8008258 <_printf_float+0x43c>
 80081e6:	2301      	movs	r3, #1
 80081e8:	4642      	mov	r2, r8
 80081ea:	4631      	mov	r1, r6
 80081ec:	4628      	mov	r0, r5
 80081ee:	47b8      	blx	r7
 80081f0:	3001      	adds	r0, #1
 80081f2:	f43f ae74 	beq.w	8007ede <_printf_float+0xc2>
 80081f6:	ee18 3a10 	vmov	r3, s16
 80081fa:	4652      	mov	r2, sl
 80081fc:	4631      	mov	r1, r6
 80081fe:	4628      	mov	r0, r5
 8008200:	47b8      	blx	r7
 8008202:	3001      	adds	r0, #1
 8008204:	f43f ae6b 	beq.w	8007ede <_printf_float+0xc2>
 8008208:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800820c:	2200      	movs	r2, #0
 800820e:	2300      	movs	r3, #0
 8008210:	f7f8 fc62 	bl	8000ad8 <__aeabi_dcmpeq>
 8008214:	b9d8      	cbnz	r0, 800824e <_printf_float+0x432>
 8008216:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008218:	f108 0201 	add.w	r2, r8, #1
 800821c:	3b01      	subs	r3, #1
 800821e:	4631      	mov	r1, r6
 8008220:	4628      	mov	r0, r5
 8008222:	47b8      	blx	r7
 8008224:	3001      	adds	r0, #1
 8008226:	d10e      	bne.n	8008246 <_printf_float+0x42a>
 8008228:	e659      	b.n	8007ede <_printf_float+0xc2>
 800822a:	2301      	movs	r3, #1
 800822c:	4652      	mov	r2, sl
 800822e:	4631      	mov	r1, r6
 8008230:	4628      	mov	r0, r5
 8008232:	47b8      	blx	r7
 8008234:	3001      	adds	r0, #1
 8008236:	f43f ae52 	beq.w	8007ede <_printf_float+0xc2>
 800823a:	f108 0801 	add.w	r8, r8, #1
 800823e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008240:	3b01      	subs	r3, #1
 8008242:	4543      	cmp	r3, r8
 8008244:	dcf1      	bgt.n	800822a <_printf_float+0x40e>
 8008246:	464b      	mov	r3, r9
 8008248:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800824c:	e6dc      	b.n	8008008 <_printf_float+0x1ec>
 800824e:	f04f 0800 	mov.w	r8, #0
 8008252:	f104 0a1a 	add.w	sl, r4, #26
 8008256:	e7f2      	b.n	800823e <_printf_float+0x422>
 8008258:	2301      	movs	r3, #1
 800825a:	4642      	mov	r2, r8
 800825c:	e7df      	b.n	800821e <_printf_float+0x402>
 800825e:	2301      	movs	r3, #1
 8008260:	464a      	mov	r2, r9
 8008262:	4631      	mov	r1, r6
 8008264:	4628      	mov	r0, r5
 8008266:	47b8      	blx	r7
 8008268:	3001      	adds	r0, #1
 800826a:	f43f ae38 	beq.w	8007ede <_printf_float+0xc2>
 800826e:	f108 0801 	add.w	r8, r8, #1
 8008272:	68e3      	ldr	r3, [r4, #12]
 8008274:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008276:	1a5b      	subs	r3, r3, r1
 8008278:	4543      	cmp	r3, r8
 800827a:	dcf0      	bgt.n	800825e <_printf_float+0x442>
 800827c:	e6fa      	b.n	8008074 <_printf_float+0x258>
 800827e:	f04f 0800 	mov.w	r8, #0
 8008282:	f104 0919 	add.w	r9, r4, #25
 8008286:	e7f4      	b.n	8008272 <_printf_float+0x456>

08008288 <_printf_common>:
 8008288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800828c:	4616      	mov	r6, r2
 800828e:	4699      	mov	r9, r3
 8008290:	688a      	ldr	r2, [r1, #8]
 8008292:	690b      	ldr	r3, [r1, #16]
 8008294:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008298:	4293      	cmp	r3, r2
 800829a:	bfb8      	it	lt
 800829c:	4613      	movlt	r3, r2
 800829e:	6033      	str	r3, [r6, #0]
 80082a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80082a4:	4607      	mov	r7, r0
 80082a6:	460c      	mov	r4, r1
 80082a8:	b10a      	cbz	r2, 80082ae <_printf_common+0x26>
 80082aa:	3301      	adds	r3, #1
 80082ac:	6033      	str	r3, [r6, #0]
 80082ae:	6823      	ldr	r3, [r4, #0]
 80082b0:	0699      	lsls	r1, r3, #26
 80082b2:	bf42      	ittt	mi
 80082b4:	6833      	ldrmi	r3, [r6, #0]
 80082b6:	3302      	addmi	r3, #2
 80082b8:	6033      	strmi	r3, [r6, #0]
 80082ba:	6825      	ldr	r5, [r4, #0]
 80082bc:	f015 0506 	ands.w	r5, r5, #6
 80082c0:	d106      	bne.n	80082d0 <_printf_common+0x48>
 80082c2:	f104 0a19 	add.w	sl, r4, #25
 80082c6:	68e3      	ldr	r3, [r4, #12]
 80082c8:	6832      	ldr	r2, [r6, #0]
 80082ca:	1a9b      	subs	r3, r3, r2
 80082cc:	42ab      	cmp	r3, r5
 80082ce:	dc26      	bgt.n	800831e <_printf_common+0x96>
 80082d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80082d4:	1e13      	subs	r3, r2, #0
 80082d6:	6822      	ldr	r2, [r4, #0]
 80082d8:	bf18      	it	ne
 80082da:	2301      	movne	r3, #1
 80082dc:	0692      	lsls	r2, r2, #26
 80082de:	d42b      	bmi.n	8008338 <_printf_common+0xb0>
 80082e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80082e4:	4649      	mov	r1, r9
 80082e6:	4638      	mov	r0, r7
 80082e8:	47c0      	blx	r8
 80082ea:	3001      	adds	r0, #1
 80082ec:	d01e      	beq.n	800832c <_printf_common+0xa4>
 80082ee:	6823      	ldr	r3, [r4, #0]
 80082f0:	68e5      	ldr	r5, [r4, #12]
 80082f2:	6832      	ldr	r2, [r6, #0]
 80082f4:	f003 0306 	and.w	r3, r3, #6
 80082f8:	2b04      	cmp	r3, #4
 80082fa:	bf08      	it	eq
 80082fc:	1aad      	subeq	r5, r5, r2
 80082fe:	68a3      	ldr	r3, [r4, #8]
 8008300:	6922      	ldr	r2, [r4, #16]
 8008302:	bf0c      	ite	eq
 8008304:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008308:	2500      	movne	r5, #0
 800830a:	4293      	cmp	r3, r2
 800830c:	bfc4      	itt	gt
 800830e:	1a9b      	subgt	r3, r3, r2
 8008310:	18ed      	addgt	r5, r5, r3
 8008312:	2600      	movs	r6, #0
 8008314:	341a      	adds	r4, #26
 8008316:	42b5      	cmp	r5, r6
 8008318:	d11a      	bne.n	8008350 <_printf_common+0xc8>
 800831a:	2000      	movs	r0, #0
 800831c:	e008      	b.n	8008330 <_printf_common+0xa8>
 800831e:	2301      	movs	r3, #1
 8008320:	4652      	mov	r2, sl
 8008322:	4649      	mov	r1, r9
 8008324:	4638      	mov	r0, r7
 8008326:	47c0      	blx	r8
 8008328:	3001      	adds	r0, #1
 800832a:	d103      	bne.n	8008334 <_printf_common+0xac>
 800832c:	f04f 30ff 	mov.w	r0, #4294967295
 8008330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008334:	3501      	adds	r5, #1
 8008336:	e7c6      	b.n	80082c6 <_printf_common+0x3e>
 8008338:	18e1      	adds	r1, r4, r3
 800833a:	1c5a      	adds	r2, r3, #1
 800833c:	2030      	movs	r0, #48	; 0x30
 800833e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008342:	4422      	add	r2, r4
 8008344:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008348:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800834c:	3302      	adds	r3, #2
 800834e:	e7c7      	b.n	80082e0 <_printf_common+0x58>
 8008350:	2301      	movs	r3, #1
 8008352:	4622      	mov	r2, r4
 8008354:	4649      	mov	r1, r9
 8008356:	4638      	mov	r0, r7
 8008358:	47c0      	blx	r8
 800835a:	3001      	adds	r0, #1
 800835c:	d0e6      	beq.n	800832c <_printf_common+0xa4>
 800835e:	3601      	adds	r6, #1
 8008360:	e7d9      	b.n	8008316 <_printf_common+0x8e>
	...

08008364 <_printf_i>:
 8008364:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008368:	460c      	mov	r4, r1
 800836a:	4691      	mov	r9, r2
 800836c:	7e27      	ldrb	r7, [r4, #24]
 800836e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008370:	2f78      	cmp	r7, #120	; 0x78
 8008372:	4680      	mov	r8, r0
 8008374:	469a      	mov	sl, r3
 8008376:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800837a:	d807      	bhi.n	800838c <_printf_i+0x28>
 800837c:	2f62      	cmp	r7, #98	; 0x62
 800837e:	d80a      	bhi.n	8008396 <_printf_i+0x32>
 8008380:	2f00      	cmp	r7, #0
 8008382:	f000 80d8 	beq.w	8008536 <_printf_i+0x1d2>
 8008386:	2f58      	cmp	r7, #88	; 0x58
 8008388:	f000 80a3 	beq.w	80084d2 <_printf_i+0x16e>
 800838c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008390:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008394:	e03a      	b.n	800840c <_printf_i+0xa8>
 8008396:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800839a:	2b15      	cmp	r3, #21
 800839c:	d8f6      	bhi.n	800838c <_printf_i+0x28>
 800839e:	a001      	add	r0, pc, #4	; (adr r0, 80083a4 <_printf_i+0x40>)
 80083a0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80083a4:	080083fd 	.word	0x080083fd
 80083a8:	08008411 	.word	0x08008411
 80083ac:	0800838d 	.word	0x0800838d
 80083b0:	0800838d 	.word	0x0800838d
 80083b4:	0800838d 	.word	0x0800838d
 80083b8:	0800838d 	.word	0x0800838d
 80083bc:	08008411 	.word	0x08008411
 80083c0:	0800838d 	.word	0x0800838d
 80083c4:	0800838d 	.word	0x0800838d
 80083c8:	0800838d 	.word	0x0800838d
 80083cc:	0800838d 	.word	0x0800838d
 80083d0:	0800851d 	.word	0x0800851d
 80083d4:	08008441 	.word	0x08008441
 80083d8:	080084ff 	.word	0x080084ff
 80083dc:	0800838d 	.word	0x0800838d
 80083e0:	0800838d 	.word	0x0800838d
 80083e4:	0800853f 	.word	0x0800853f
 80083e8:	0800838d 	.word	0x0800838d
 80083ec:	08008441 	.word	0x08008441
 80083f0:	0800838d 	.word	0x0800838d
 80083f4:	0800838d 	.word	0x0800838d
 80083f8:	08008507 	.word	0x08008507
 80083fc:	680b      	ldr	r3, [r1, #0]
 80083fe:	1d1a      	adds	r2, r3, #4
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	600a      	str	r2, [r1, #0]
 8008404:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008408:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800840c:	2301      	movs	r3, #1
 800840e:	e0a3      	b.n	8008558 <_printf_i+0x1f4>
 8008410:	6825      	ldr	r5, [r4, #0]
 8008412:	6808      	ldr	r0, [r1, #0]
 8008414:	062e      	lsls	r6, r5, #24
 8008416:	f100 0304 	add.w	r3, r0, #4
 800841a:	d50a      	bpl.n	8008432 <_printf_i+0xce>
 800841c:	6805      	ldr	r5, [r0, #0]
 800841e:	600b      	str	r3, [r1, #0]
 8008420:	2d00      	cmp	r5, #0
 8008422:	da03      	bge.n	800842c <_printf_i+0xc8>
 8008424:	232d      	movs	r3, #45	; 0x2d
 8008426:	426d      	negs	r5, r5
 8008428:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800842c:	485e      	ldr	r0, [pc, #376]	; (80085a8 <_printf_i+0x244>)
 800842e:	230a      	movs	r3, #10
 8008430:	e019      	b.n	8008466 <_printf_i+0x102>
 8008432:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008436:	6805      	ldr	r5, [r0, #0]
 8008438:	600b      	str	r3, [r1, #0]
 800843a:	bf18      	it	ne
 800843c:	b22d      	sxthne	r5, r5
 800843e:	e7ef      	b.n	8008420 <_printf_i+0xbc>
 8008440:	680b      	ldr	r3, [r1, #0]
 8008442:	6825      	ldr	r5, [r4, #0]
 8008444:	1d18      	adds	r0, r3, #4
 8008446:	6008      	str	r0, [r1, #0]
 8008448:	0628      	lsls	r0, r5, #24
 800844a:	d501      	bpl.n	8008450 <_printf_i+0xec>
 800844c:	681d      	ldr	r5, [r3, #0]
 800844e:	e002      	b.n	8008456 <_printf_i+0xf2>
 8008450:	0669      	lsls	r1, r5, #25
 8008452:	d5fb      	bpl.n	800844c <_printf_i+0xe8>
 8008454:	881d      	ldrh	r5, [r3, #0]
 8008456:	4854      	ldr	r0, [pc, #336]	; (80085a8 <_printf_i+0x244>)
 8008458:	2f6f      	cmp	r7, #111	; 0x6f
 800845a:	bf0c      	ite	eq
 800845c:	2308      	moveq	r3, #8
 800845e:	230a      	movne	r3, #10
 8008460:	2100      	movs	r1, #0
 8008462:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008466:	6866      	ldr	r6, [r4, #4]
 8008468:	60a6      	str	r6, [r4, #8]
 800846a:	2e00      	cmp	r6, #0
 800846c:	bfa2      	ittt	ge
 800846e:	6821      	ldrge	r1, [r4, #0]
 8008470:	f021 0104 	bicge.w	r1, r1, #4
 8008474:	6021      	strge	r1, [r4, #0]
 8008476:	b90d      	cbnz	r5, 800847c <_printf_i+0x118>
 8008478:	2e00      	cmp	r6, #0
 800847a:	d04d      	beq.n	8008518 <_printf_i+0x1b4>
 800847c:	4616      	mov	r6, r2
 800847e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008482:	fb03 5711 	mls	r7, r3, r1, r5
 8008486:	5dc7      	ldrb	r7, [r0, r7]
 8008488:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800848c:	462f      	mov	r7, r5
 800848e:	42bb      	cmp	r3, r7
 8008490:	460d      	mov	r5, r1
 8008492:	d9f4      	bls.n	800847e <_printf_i+0x11a>
 8008494:	2b08      	cmp	r3, #8
 8008496:	d10b      	bne.n	80084b0 <_printf_i+0x14c>
 8008498:	6823      	ldr	r3, [r4, #0]
 800849a:	07df      	lsls	r7, r3, #31
 800849c:	d508      	bpl.n	80084b0 <_printf_i+0x14c>
 800849e:	6923      	ldr	r3, [r4, #16]
 80084a0:	6861      	ldr	r1, [r4, #4]
 80084a2:	4299      	cmp	r1, r3
 80084a4:	bfde      	ittt	le
 80084a6:	2330      	movle	r3, #48	; 0x30
 80084a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80084ac:	f106 36ff 	addle.w	r6, r6, #4294967295
 80084b0:	1b92      	subs	r2, r2, r6
 80084b2:	6122      	str	r2, [r4, #16]
 80084b4:	f8cd a000 	str.w	sl, [sp]
 80084b8:	464b      	mov	r3, r9
 80084ba:	aa03      	add	r2, sp, #12
 80084bc:	4621      	mov	r1, r4
 80084be:	4640      	mov	r0, r8
 80084c0:	f7ff fee2 	bl	8008288 <_printf_common>
 80084c4:	3001      	adds	r0, #1
 80084c6:	d14c      	bne.n	8008562 <_printf_i+0x1fe>
 80084c8:	f04f 30ff 	mov.w	r0, #4294967295
 80084cc:	b004      	add	sp, #16
 80084ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084d2:	4835      	ldr	r0, [pc, #212]	; (80085a8 <_printf_i+0x244>)
 80084d4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80084d8:	6823      	ldr	r3, [r4, #0]
 80084da:	680e      	ldr	r6, [r1, #0]
 80084dc:	061f      	lsls	r7, r3, #24
 80084de:	f856 5b04 	ldr.w	r5, [r6], #4
 80084e2:	600e      	str	r6, [r1, #0]
 80084e4:	d514      	bpl.n	8008510 <_printf_i+0x1ac>
 80084e6:	07d9      	lsls	r1, r3, #31
 80084e8:	bf44      	itt	mi
 80084ea:	f043 0320 	orrmi.w	r3, r3, #32
 80084ee:	6023      	strmi	r3, [r4, #0]
 80084f0:	b91d      	cbnz	r5, 80084fa <_printf_i+0x196>
 80084f2:	6823      	ldr	r3, [r4, #0]
 80084f4:	f023 0320 	bic.w	r3, r3, #32
 80084f8:	6023      	str	r3, [r4, #0]
 80084fa:	2310      	movs	r3, #16
 80084fc:	e7b0      	b.n	8008460 <_printf_i+0xfc>
 80084fe:	6823      	ldr	r3, [r4, #0]
 8008500:	f043 0320 	orr.w	r3, r3, #32
 8008504:	6023      	str	r3, [r4, #0]
 8008506:	2378      	movs	r3, #120	; 0x78
 8008508:	4828      	ldr	r0, [pc, #160]	; (80085ac <_printf_i+0x248>)
 800850a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800850e:	e7e3      	b.n	80084d8 <_printf_i+0x174>
 8008510:	065e      	lsls	r6, r3, #25
 8008512:	bf48      	it	mi
 8008514:	b2ad      	uxthmi	r5, r5
 8008516:	e7e6      	b.n	80084e6 <_printf_i+0x182>
 8008518:	4616      	mov	r6, r2
 800851a:	e7bb      	b.n	8008494 <_printf_i+0x130>
 800851c:	680b      	ldr	r3, [r1, #0]
 800851e:	6826      	ldr	r6, [r4, #0]
 8008520:	6960      	ldr	r0, [r4, #20]
 8008522:	1d1d      	adds	r5, r3, #4
 8008524:	600d      	str	r5, [r1, #0]
 8008526:	0635      	lsls	r5, r6, #24
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	d501      	bpl.n	8008530 <_printf_i+0x1cc>
 800852c:	6018      	str	r0, [r3, #0]
 800852e:	e002      	b.n	8008536 <_printf_i+0x1d2>
 8008530:	0671      	lsls	r1, r6, #25
 8008532:	d5fb      	bpl.n	800852c <_printf_i+0x1c8>
 8008534:	8018      	strh	r0, [r3, #0]
 8008536:	2300      	movs	r3, #0
 8008538:	6123      	str	r3, [r4, #16]
 800853a:	4616      	mov	r6, r2
 800853c:	e7ba      	b.n	80084b4 <_printf_i+0x150>
 800853e:	680b      	ldr	r3, [r1, #0]
 8008540:	1d1a      	adds	r2, r3, #4
 8008542:	600a      	str	r2, [r1, #0]
 8008544:	681e      	ldr	r6, [r3, #0]
 8008546:	6862      	ldr	r2, [r4, #4]
 8008548:	2100      	movs	r1, #0
 800854a:	4630      	mov	r0, r6
 800854c:	f7f7 fe50 	bl	80001f0 <memchr>
 8008550:	b108      	cbz	r0, 8008556 <_printf_i+0x1f2>
 8008552:	1b80      	subs	r0, r0, r6
 8008554:	6060      	str	r0, [r4, #4]
 8008556:	6863      	ldr	r3, [r4, #4]
 8008558:	6123      	str	r3, [r4, #16]
 800855a:	2300      	movs	r3, #0
 800855c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008560:	e7a8      	b.n	80084b4 <_printf_i+0x150>
 8008562:	6923      	ldr	r3, [r4, #16]
 8008564:	4632      	mov	r2, r6
 8008566:	4649      	mov	r1, r9
 8008568:	4640      	mov	r0, r8
 800856a:	47d0      	blx	sl
 800856c:	3001      	adds	r0, #1
 800856e:	d0ab      	beq.n	80084c8 <_printf_i+0x164>
 8008570:	6823      	ldr	r3, [r4, #0]
 8008572:	079b      	lsls	r3, r3, #30
 8008574:	d413      	bmi.n	800859e <_printf_i+0x23a>
 8008576:	68e0      	ldr	r0, [r4, #12]
 8008578:	9b03      	ldr	r3, [sp, #12]
 800857a:	4298      	cmp	r0, r3
 800857c:	bfb8      	it	lt
 800857e:	4618      	movlt	r0, r3
 8008580:	e7a4      	b.n	80084cc <_printf_i+0x168>
 8008582:	2301      	movs	r3, #1
 8008584:	4632      	mov	r2, r6
 8008586:	4649      	mov	r1, r9
 8008588:	4640      	mov	r0, r8
 800858a:	47d0      	blx	sl
 800858c:	3001      	adds	r0, #1
 800858e:	d09b      	beq.n	80084c8 <_printf_i+0x164>
 8008590:	3501      	adds	r5, #1
 8008592:	68e3      	ldr	r3, [r4, #12]
 8008594:	9903      	ldr	r1, [sp, #12]
 8008596:	1a5b      	subs	r3, r3, r1
 8008598:	42ab      	cmp	r3, r5
 800859a:	dcf2      	bgt.n	8008582 <_printf_i+0x21e>
 800859c:	e7eb      	b.n	8008576 <_printf_i+0x212>
 800859e:	2500      	movs	r5, #0
 80085a0:	f104 0619 	add.w	r6, r4, #25
 80085a4:	e7f5      	b.n	8008592 <_printf_i+0x22e>
 80085a6:	bf00      	nop
 80085a8:	0800aad6 	.word	0x0800aad6
 80085ac:	0800aae7 	.word	0x0800aae7

080085b0 <iprintf>:
 80085b0:	b40f      	push	{r0, r1, r2, r3}
 80085b2:	4b0a      	ldr	r3, [pc, #40]	; (80085dc <iprintf+0x2c>)
 80085b4:	b513      	push	{r0, r1, r4, lr}
 80085b6:	681c      	ldr	r4, [r3, #0]
 80085b8:	b124      	cbz	r4, 80085c4 <iprintf+0x14>
 80085ba:	69a3      	ldr	r3, [r4, #24]
 80085bc:	b913      	cbnz	r3, 80085c4 <iprintf+0x14>
 80085be:	4620      	mov	r0, r4
 80085c0:	f001 f8d8 	bl	8009774 <__sinit>
 80085c4:	ab05      	add	r3, sp, #20
 80085c6:	9a04      	ldr	r2, [sp, #16]
 80085c8:	68a1      	ldr	r1, [r4, #8]
 80085ca:	9301      	str	r3, [sp, #4]
 80085cc:	4620      	mov	r0, r4
 80085ce:	f001 fe45 	bl	800a25c <_vfiprintf_r>
 80085d2:	b002      	add	sp, #8
 80085d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085d8:	b004      	add	sp, #16
 80085da:	4770      	bx	lr
 80085dc:	20000010 	.word	0x20000010

080085e0 <_puts_r>:
 80085e0:	b570      	push	{r4, r5, r6, lr}
 80085e2:	460e      	mov	r6, r1
 80085e4:	4605      	mov	r5, r0
 80085e6:	b118      	cbz	r0, 80085f0 <_puts_r+0x10>
 80085e8:	6983      	ldr	r3, [r0, #24]
 80085ea:	b90b      	cbnz	r3, 80085f0 <_puts_r+0x10>
 80085ec:	f001 f8c2 	bl	8009774 <__sinit>
 80085f0:	69ab      	ldr	r3, [r5, #24]
 80085f2:	68ac      	ldr	r4, [r5, #8]
 80085f4:	b913      	cbnz	r3, 80085fc <_puts_r+0x1c>
 80085f6:	4628      	mov	r0, r5
 80085f8:	f001 f8bc 	bl	8009774 <__sinit>
 80085fc:	4b2c      	ldr	r3, [pc, #176]	; (80086b0 <_puts_r+0xd0>)
 80085fe:	429c      	cmp	r4, r3
 8008600:	d120      	bne.n	8008644 <_puts_r+0x64>
 8008602:	686c      	ldr	r4, [r5, #4]
 8008604:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008606:	07db      	lsls	r3, r3, #31
 8008608:	d405      	bmi.n	8008616 <_puts_r+0x36>
 800860a:	89a3      	ldrh	r3, [r4, #12]
 800860c:	0598      	lsls	r0, r3, #22
 800860e:	d402      	bmi.n	8008616 <_puts_r+0x36>
 8008610:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008612:	f001 f952 	bl	80098ba <__retarget_lock_acquire_recursive>
 8008616:	89a3      	ldrh	r3, [r4, #12]
 8008618:	0719      	lsls	r1, r3, #28
 800861a:	d51d      	bpl.n	8008658 <_puts_r+0x78>
 800861c:	6923      	ldr	r3, [r4, #16]
 800861e:	b1db      	cbz	r3, 8008658 <_puts_r+0x78>
 8008620:	3e01      	subs	r6, #1
 8008622:	68a3      	ldr	r3, [r4, #8]
 8008624:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008628:	3b01      	subs	r3, #1
 800862a:	60a3      	str	r3, [r4, #8]
 800862c:	bb39      	cbnz	r1, 800867e <_puts_r+0x9e>
 800862e:	2b00      	cmp	r3, #0
 8008630:	da38      	bge.n	80086a4 <_puts_r+0xc4>
 8008632:	4622      	mov	r2, r4
 8008634:	210a      	movs	r1, #10
 8008636:	4628      	mov	r0, r5
 8008638:	f000 f848 	bl	80086cc <__swbuf_r>
 800863c:	3001      	adds	r0, #1
 800863e:	d011      	beq.n	8008664 <_puts_r+0x84>
 8008640:	250a      	movs	r5, #10
 8008642:	e011      	b.n	8008668 <_puts_r+0x88>
 8008644:	4b1b      	ldr	r3, [pc, #108]	; (80086b4 <_puts_r+0xd4>)
 8008646:	429c      	cmp	r4, r3
 8008648:	d101      	bne.n	800864e <_puts_r+0x6e>
 800864a:	68ac      	ldr	r4, [r5, #8]
 800864c:	e7da      	b.n	8008604 <_puts_r+0x24>
 800864e:	4b1a      	ldr	r3, [pc, #104]	; (80086b8 <_puts_r+0xd8>)
 8008650:	429c      	cmp	r4, r3
 8008652:	bf08      	it	eq
 8008654:	68ec      	ldreq	r4, [r5, #12]
 8008656:	e7d5      	b.n	8008604 <_puts_r+0x24>
 8008658:	4621      	mov	r1, r4
 800865a:	4628      	mov	r0, r5
 800865c:	f000 f888 	bl	8008770 <__swsetup_r>
 8008660:	2800      	cmp	r0, #0
 8008662:	d0dd      	beq.n	8008620 <_puts_r+0x40>
 8008664:	f04f 35ff 	mov.w	r5, #4294967295
 8008668:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800866a:	07da      	lsls	r2, r3, #31
 800866c:	d405      	bmi.n	800867a <_puts_r+0x9a>
 800866e:	89a3      	ldrh	r3, [r4, #12]
 8008670:	059b      	lsls	r3, r3, #22
 8008672:	d402      	bmi.n	800867a <_puts_r+0x9a>
 8008674:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008676:	f001 f921 	bl	80098bc <__retarget_lock_release_recursive>
 800867a:	4628      	mov	r0, r5
 800867c:	bd70      	pop	{r4, r5, r6, pc}
 800867e:	2b00      	cmp	r3, #0
 8008680:	da04      	bge.n	800868c <_puts_r+0xac>
 8008682:	69a2      	ldr	r2, [r4, #24]
 8008684:	429a      	cmp	r2, r3
 8008686:	dc06      	bgt.n	8008696 <_puts_r+0xb6>
 8008688:	290a      	cmp	r1, #10
 800868a:	d004      	beq.n	8008696 <_puts_r+0xb6>
 800868c:	6823      	ldr	r3, [r4, #0]
 800868e:	1c5a      	adds	r2, r3, #1
 8008690:	6022      	str	r2, [r4, #0]
 8008692:	7019      	strb	r1, [r3, #0]
 8008694:	e7c5      	b.n	8008622 <_puts_r+0x42>
 8008696:	4622      	mov	r2, r4
 8008698:	4628      	mov	r0, r5
 800869a:	f000 f817 	bl	80086cc <__swbuf_r>
 800869e:	3001      	adds	r0, #1
 80086a0:	d1bf      	bne.n	8008622 <_puts_r+0x42>
 80086a2:	e7df      	b.n	8008664 <_puts_r+0x84>
 80086a4:	6823      	ldr	r3, [r4, #0]
 80086a6:	250a      	movs	r5, #10
 80086a8:	1c5a      	adds	r2, r3, #1
 80086aa:	6022      	str	r2, [r4, #0]
 80086ac:	701d      	strb	r5, [r3, #0]
 80086ae:	e7db      	b.n	8008668 <_puts_r+0x88>
 80086b0:	0800abac 	.word	0x0800abac
 80086b4:	0800abcc 	.word	0x0800abcc
 80086b8:	0800ab8c 	.word	0x0800ab8c

080086bc <puts>:
 80086bc:	4b02      	ldr	r3, [pc, #8]	; (80086c8 <puts+0xc>)
 80086be:	4601      	mov	r1, r0
 80086c0:	6818      	ldr	r0, [r3, #0]
 80086c2:	f7ff bf8d 	b.w	80085e0 <_puts_r>
 80086c6:	bf00      	nop
 80086c8:	20000010 	.word	0x20000010

080086cc <__swbuf_r>:
 80086cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086ce:	460e      	mov	r6, r1
 80086d0:	4614      	mov	r4, r2
 80086d2:	4605      	mov	r5, r0
 80086d4:	b118      	cbz	r0, 80086de <__swbuf_r+0x12>
 80086d6:	6983      	ldr	r3, [r0, #24]
 80086d8:	b90b      	cbnz	r3, 80086de <__swbuf_r+0x12>
 80086da:	f001 f84b 	bl	8009774 <__sinit>
 80086de:	4b21      	ldr	r3, [pc, #132]	; (8008764 <__swbuf_r+0x98>)
 80086e0:	429c      	cmp	r4, r3
 80086e2:	d12b      	bne.n	800873c <__swbuf_r+0x70>
 80086e4:	686c      	ldr	r4, [r5, #4]
 80086e6:	69a3      	ldr	r3, [r4, #24]
 80086e8:	60a3      	str	r3, [r4, #8]
 80086ea:	89a3      	ldrh	r3, [r4, #12]
 80086ec:	071a      	lsls	r2, r3, #28
 80086ee:	d52f      	bpl.n	8008750 <__swbuf_r+0x84>
 80086f0:	6923      	ldr	r3, [r4, #16]
 80086f2:	b36b      	cbz	r3, 8008750 <__swbuf_r+0x84>
 80086f4:	6923      	ldr	r3, [r4, #16]
 80086f6:	6820      	ldr	r0, [r4, #0]
 80086f8:	1ac0      	subs	r0, r0, r3
 80086fa:	6963      	ldr	r3, [r4, #20]
 80086fc:	b2f6      	uxtb	r6, r6
 80086fe:	4283      	cmp	r3, r0
 8008700:	4637      	mov	r7, r6
 8008702:	dc04      	bgt.n	800870e <__swbuf_r+0x42>
 8008704:	4621      	mov	r1, r4
 8008706:	4628      	mov	r0, r5
 8008708:	f000 ffa0 	bl	800964c <_fflush_r>
 800870c:	bb30      	cbnz	r0, 800875c <__swbuf_r+0x90>
 800870e:	68a3      	ldr	r3, [r4, #8]
 8008710:	3b01      	subs	r3, #1
 8008712:	60a3      	str	r3, [r4, #8]
 8008714:	6823      	ldr	r3, [r4, #0]
 8008716:	1c5a      	adds	r2, r3, #1
 8008718:	6022      	str	r2, [r4, #0]
 800871a:	701e      	strb	r6, [r3, #0]
 800871c:	6963      	ldr	r3, [r4, #20]
 800871e:	3001      	adds	r0, #1
 8008720:	4283      	cmp	r3, r0
 8008722:	d004      	beq.n	800872e <__swbuf_r+0x62>
 8008724:	89a3      	ldrh	r3, [r4, #12]
 8008726:	07db      	lsls	r3, r3, #31
 8008728:	d506      	bpl.n	8008738 <__swbuf_r+0x6c>
 800872a:	2e0a      	cmp	r6, #10
 800872c:	d104      	bne.n	8008738 <__swbuf_r+0x6c>
 800872e:	4621      	mov	r1, r4
 8008730:	4628      	mov	r0, r5
 8008732:	f000 ff8b 	bl	800964c <_fflush_r>
 8008736:	b988      	cbnz	r0, 800875c <__swbuf_r+0x90>
 8008738:	4638      	mov	r0, r7
 800873a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800873c:	4b0a      	ldr	r3, [pc, #40]	; (8008768 <__swbuf_r+0x9c>)
 800873e:	429c      	cmp	r4, r3
 8008740:	d101      	bne.n	8008746 <__swbuf_r+0x7a>
 8008742:	68ac      	ldr	r4, [r5, #8]
 8008744:	e7cf      	b.n	80086e6 <__swbuf_r+0x1a>
 8008746:	4b09      	ldr	r3, [pc, #36]	; (800876c <__swbuf_r+0xa0>)
 8008748:	429c      	cmp	r4, r3
 800874a:	bf08      	it	eq
 800874c:	68ec      	ldreq	r4, [r5, #12]
 800874e:	e7ca      	b.n	80086e6 <__swbuf_r+0x1a>
 8008750:	4621      	mov	r1, r4
 8008752:	4628      	mov	r0, r5
 8008754:	f000 f80c 	bl	8008770 <__swsetup_r>
 8008758:	2800      	cmp	r0, #0
 800875a:	d0cb      	beq.n	80086f4 <__swbuf_r+0x28>
 800875c:	f04f 37ff 	mov.w	r7, #4294967295
 8008760:	e7ea      	b.n	8008738 <__swbuf_r+0x6c>
 8008762:	bf00      	nop
 8008764:	0800abac 	.word	0x0800abac
 8008768:	0800abcc 	.word	0x0800abcc
 800876c:	0800ab8c 	.word	0x0800ab8c

08008770 <__swsetup_r>:
 8008770:	4b32      	ldr	r3, [pc, #200]	; (800883c <__swsetup_r+0xcc>)
 8008772:	b570      	push	{r4, r5, r6, lr}
 8008774:	681d      	ldr	r5, [r3, #0]
 8008776:	4606      	mov	r6, r0
 8008778:	460c      	mov	r4, r1
 800877a:	b125      	cbz	r5, 8008786 <__swsetup_r+0x16>
 800877c:	69ab      	ldr	r3, [r5, #24]
 800877e:	b913      	cbnz	r3, 8008786 <__swsetup_r+0x16>
 8008780:	4628      	mov	r0, r5
 8008782:	f000 fff7 	bl	8009774 <__sinit>
 8008786:	4b2e      	ldr	r3, [pc, #184]	; (8008840 <__swsetup_r+0xd0>)
 8008788:	429c      	cmp	r4, r3
 800878a:	d10f      	bne.n	80087ac <__swsetup_r+0x3c>
 800878c:	686c      	ldr	r4, [r5, #4]
 800878e:	89a3      	ldrh	r3, [r4, #12]
 8008790:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008794:	0719      	lsls	r1, r3, #28
 8008796:	d42c      	bmi.n	80087f2 <__swsetup_r+0x82>
 8008798:	06dd      	lsls	r5, r3, #27
 800879a:	d411      	bmi.n	80087c0 <__swsetup_r+0x50>
 800879c:	2309      	movs	r3, #9
 800879e:	6033      	str	r3, [r6, #0]
 80087a0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80087a4:	81a3      	strh	r3, [r4, #12]
 80087a6:	f04f 30ff 	mov.w	r0, #4294967295
 80087aa:	e03e      	b.n	800882a <__swsetup_r+0xba>
 80087ac:	4b25      	ldr	r3, [pc, #148]	; (8008844 <__swsetup_r+0xd4>)
 80087ae:	429c      	cmp	r4, r3
 80087b0:	d101      	bne.n	80087b6 <__swsetup_r+0x46>
 80087b2:	68ac      	ldr	r4, [r5, #8]
 80087b4:	e7eb      	b.n	800878e <__swsetup_r+0x1e>
 80087b6:	4b24      	ldr	r3, [pc, #144]	; (8008848 <__swsetup_r+0xd8>)
 80087b8:	429c      	cmp	r4, r3
 80087ba:	bf08      	it	eq
 80087bc:	68ec      	ldreq	r4, [r5, #12]
 80087be:	e7e6      	b.n	800878e <__swsetup_r+0x1e>
 80087c0:	0758      	lsls	r0, r3, #29
 80087c2:	d512      	bpl.n	80087ea <__swsetup_r+0x7a>
 80087c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80087c6:	b141      	cbz	r1, 80087da <__swsetup_r+0x6a>
 80087c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80087cc:	4299      	cmp	r1, r3
 80087ce:	d002      	beq.n	80087d6 <__swsetup_r+0x66>
 80087d0:	4630      	mov	r0, r6
 80087d2:	f001 fc6f 	bl	800a0b4 <_free_r>
 80087d6:	2300      	movs	r3, #0
 80087d8:	6363      	str	r3, [r4, #52]	; 0x34
 80087da:	89a3      	ldrh	r3, [r4, #12]
 80087dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80087e0:	81a3      	strh	r3, [r4, #12]
 80087e2:	2300      	movs	r3, #0
 80087e4:	6063      	str	r3, [r4, #4]
 80087e6:	6923      	ldr	r3, [r4, #16]
 80087e8:	6023      	str	r3, [r4, #0]
 80087ea:	89a3      	ldrh	r3, [r4, #12]
 80087ec:	f043 0308 	orr.w	r3, r3, #8
 80087f0:	81a3      	strh	r3, [r4, #12]
 80087f2:	6923      	ldr	r3, [r4, #16]
 80087f4:	b94b      	cbnz	r3, 800880a <__swsetup_r+0x9a>
 80087f6:	89a3      	ldrh	r3, [r4, #12]
 80087f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80087fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008800:	d003      	beq.n	800880a <__swsetup_r+0x9a>
 8008802:	4621      	mov	r1, r4
 8008804:	4630      	mov	r0, r6
 8008806:	f001 f87f 	bl	8009908 <__smakebuf_r>
 800880a:	89a0      	ldrh	r0, [r4, #12]
 800880c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008810:	f010 0301 	ands.w	r3, r0, #1
 8008814:	d00a      	beq.n	800882c <__swsetup_r+0xbc>
 8008816:	2300      	movs	r3, #0
 8008818:	60a3      	str	r3, [r4, #8]
 800881a:	6963      	ldr	r3, [r4, #20]
 800881c:	425b      	negs	r3, r3
 800881e:	61a3      	str	r3, [r4, #24]
 8008820:	6923      	ldr	r3, [r4, #16]
 8008822:	b943      	cbnz	r3, 8008836 <__swsetup_r+0xc6>
 8008824:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008828:	d1ba      	bne.n	80087a0 <__swsetup_r+0x30>
 800882a:	bd70      	pop	{r4, r5, r6, pc}
 800882c:	0781      	lsls	r1, r0, #30
 800882e:	bf58      	it	pl
 8008830:	6963      	ldrpl	r3, [r4, #20]
 8008832:	60a3      	str	r3, [r4, #8]
 8008834:	e7f4      	b.n	8008820 <__swsetup_r+0xb0>
 8008836:	2000      	movs	r0, #0
 8008838:	e7f7      	b.n	800882a <__swsetup_r+0xba>
 800883a:	bf00      	nop
 800883c:	20000010 	.word	0x20000010
 8008840:	0800abac 	.word	0x0800abac
 8008844:	0800abcc 	.word	0x0800abcc
 8008848:	0800ab8c 	.word	0x0800ab8c

0800884c <quorem>:
 800884c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008850:	6903      	ldr	r3, [r0, #16]
 8008852:	690c      	ldr	r4, [r1, #16]
 8008854:	42a3      	cmp	r3, r4
 8008856:	4607      	mov	r7, r0
 8008858:	f2c0 8081 	blt.w	800895e <quorem+0x112>
 800885c:	3c01      	subs	r4, #1
 800885e:	f101 0814 	add.w	r8, r1, #20
 8008862:	f100 0514 	add.w	r5, r0, #20
 8008866:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800886a:	9301      	str	r3, [sp, #4]
 800886c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008870:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008874:	3301      	adds	r3, #1
 8008876:	429a      	cmp	r2, r3
 8008878:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800887c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008880:	fbb2 f6f3 	udiv	r6, r2, r3
 8008884:	d331      	bcc.n	80088ea <quorem+0x9e>
 8008886:	f04f 0e00 	mov.w	lr, #0
 800888a:	4640      	mov	r0, r8
 800888c:	46ac      	mov	ip, r5
 800888e:	46f2      	mov	sl, lr
 8008890:	f850 2b04 	ldr.w	r2, [r0], #4
 8008894:	b293      	uxth	r3, r2
 8008896:	fb06 e303 	mla	r3, r6, r3, lr
 800889a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800889e:	b29b      	uxth	r3, r3
 80088a0:	ebaa 0303 	sub.w	r3, sl, r3
 80088a4:	0c12      	lsrs	r2, r2, #16
 80088a6:	f8dc a000 	ldr.w	sl, [ip]
 80088aa:	fb06 e202 	mla	r2, r6, r2, lr
 80088ae:	fa13 f38a 	uxtah	r3, r3, sl
 80088b2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80088b6:	fa1f fa82 	uxth.w	sl, r2
 80088ba:	f8dc 2000 	ldr.w	r2, [ip]
 80088be:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80088c2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80088c6:	b29b      	uxth	r3, r3
 80088c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80088cc:	4581      	cmp	r9, r0
 80088ce:	f84c 3b04 	str.w	r3, [ip], #4
 80088d2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80088d6:	d2db      	bcs.n	8008890 <quorem+0x44>
 80088d8:	f855 300b 	ldr.w	r3, [r5, fp]
 80088dc:	b92b      	cbnz	r3, 80088ea <quorem+0x9e>
 80088de:	9b01      	ldr	r3, [sp, #4]
 80088e0:	3b04      	subs	r3, #4
 80088e2:	429d      	cmp	r5, r3
 80088e4:	461a      	mov	r2, r3
 80088e6:	d32e      	bcc.n	8008946 <quorem+0xfa>
 80088e8:	613c      	str	r4, [r7, #16]
 80088ea:	4638      	mov	r0, r7
 80088ec:	f001 fad2 	bl	8009e94 <__mcmp>
 80088f0:	2800      	cmp	r0, #0
 80088f2:	db24      	blt.n	800893e <quorem+0xf2>
 80088f4:	3601      	adds	r6, #1
 80088f6:	4628      	mov	r0, r5
 80088f8:	f04f 0c00 	mov.w	ip, #0
 80088fc:	f858 2b04 	ldr.w	r2, [r8], #4
 8008900:	f8d0 e000 	ldr.w	lr, [r0]
 8008904:	b293      	uxth	r3, r2
 8008906:	ebac 0303 	sub.w	r3, ip, r3
 800890a:	0c12      	lsrs	r2, r2, #16
 800890c:	fa13 f38e 	uxtah	r3, r3, lr
 8008910:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008914:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008918:	b29b      	uxth	r3, r3
 800891a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800891e:	45c1      	cmp	r9, r8
 8008920:	f840 3b04 	str.w	r3, [r0], #4
 8008924:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008928:	d2e8      	bcs.n	80088fc <quorem+0xb0>
 800892a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800892e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008932:	b922      	cbnz	r2, 800893e <quorem+0xf2>
 8008934:	3b04      	subs	r3, #4
 8008936:	429d      	cmp	r5, r3
 8008938:	461a      	mov	r2, r3
 800893a:	d30a      	bcc.n	8008952 <quorem+0x106>
 800893c:	613c      	str	r4, [r7, #16]
 800893e:	4630      	mov	r0, r6
 8008940:	b003      	add	sp, #12
 8008942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008946:	6812      	ldr	r2, [r2, #0]
 8008948:	3b04      	subs	r3, #4
 800894a:	2a00      	cmp	r2, #0
 800894c:	d1cc      	bne.n	80088e8 <quorem+0x9c>
 800894e:	3c01      	subs	r4, #1
 8008950:	e7c7      	b.n	80088e2 <quorem+0x96>
 8008952:	6812      	ldr	r2, [r2, #0]
 8008954:	3b04      	subs	r3, #4
 8008956:	2a00      	cmp	r2, #0
 8008958:	d1f0      	bne.n	800893c <quorem+0xf0>
 800895a:	3c01      	subs	r4, #1
 800895c:	e7eb      	b.n	8008936 <quorem+0xea>
 800895e:	2000      	movs	r0, #0
 8008960:	e7ee      	b.n	8008940 <quorem+0xf4>
 8008962:	0000      	movs	r0, r0
 8008964:	0000      	movs	r0, r0
	...

08008968 <_dtoa_r>:
 8008968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800896c:	ed2d 8b02 	vpush	{d8}
 8008970:	ec57 6b10 	vmov	r6, r7, d0
 8008974:	b095      	sub	sp, #84	; 0x54
 8008976:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008978:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800897c:	9105      	str	r1, [sp, #20]
 800897e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8008982:	4604      	mov	r4, r0
 8008984:	9209      	str	r2, [sp, #36]	; 0x24
 8008986:	930f      	str	r3, [sp, #60]	; 0x3c
 8008988:	b975      	cbnz	r5, 80089a8 <_dtoa_r+0x40>
 800898a:	2010      	movs	r0, #16
 800898c:	f000 fffc 	bl	8009988 <malloc>
 8008990:	4602      	mov	r2, r0
 8008992:	6260      	str	r0, [r4, #36]	; 0x24
 8008994:	b920      	cbnz	r0, 80089a0 <_dtoa_r+0x38>
 8008996:	4bb2      	ldr	r3, [pc, #712]	; (8008c60 <_dtoa_r+0x2f8>)
 8008998:	21ea      	movs	r1, #234	; 0xea
 800899a:	48b2      	ldr	r0, [pc, #712]	; (8008c64 <_dtoa_r+0x2fc>)
 800899c:	f001 fdf4 	bl	800a588 <__assert_func>
 80089a0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80089a4:	6005      	str	r5, [r0, #0]
 80089a6:	60c5      	str	r5, [r0, #12]
 80089a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80089aa:	6819      	ldr	r1, [r3, #0]
 80089ac:	b151      	cbz	r1, 80089c4 <_dtoa_r+0x5c>
 80089ae:	685a      	ldr	r2, [r3, #4]
 80089b0:	604a      	str	r2, [r1, #4]
 80089b2:	2301      	movs	r3, #1
 80089b4:	4093      	lsls	r3, r2
 80089b6:	608b      	str	r3, [r1, #8]
 80089b8:	4620      	mov	r0, r4
 80089ba:	f001 f82d 	bl	8009a18 <_Bfree>
 80089be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80089c0:	2200      	movs	r2, #0
 80089c2:	601a      	str	r2, [r3, #0]
 80089c4:	1e3b      	subs	r3, r7, #0
 80089c6:	bfb9      	ittee	lt
 80089c8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80089cc:	9303      	strlt	r3, [sp, #12]
 80089ce:	2300      	movge	r3, #0
 80089d0:	f8c8 3000 	strge.w	r3, [r8]
 80089d4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80089d8:	4ba3      	ldr	r3, [pc, #652]	; (8008c68 <_dtoa_r+0x300>)
 80089da:	bfbc      	itt	lt
 80089dc:	2201      	movlt	r2, #1
 80089de:	f8c8 2000 	strlt.w	r2, [r8]
 80089e2:	ea33 0309 	bics.w	r3, r3, r9
 80089e6:	d11b      	bne.n	8008a20 <_dtoa_r+0xb8>
 80089e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80089ea:	f242 730f 	movw	r3, #9999	; 0x270f
 80089ee:	6013      	str	r3, [r2, #0]
 80089f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80089f4:	4333      	orrs	r3, r6
 80089f6:	f000 857a 	beq.w	80094ee <_dtoa_r+0xb86>
 80089fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80089fc:	b963      	cbnz	r3, 8008a18 <_dtoa_r+0xb0>
 80089fe:	4b9b      	ldr	r3, [pc, #620]	; (8008c6c <_dtoa_r+0x304>)
 8008a00:	e024      	b.n	8008a4c <_dtoa_r+0xe4>
 8008a02:	4b9b      	ldr	r3, [pc, #620]	; (8008c70 <_dtoa_r+0x308>)
 8008a04:	9300      	str	r3, [sp, #0]
 8008a06:	3308      	adds	r3, #8
 8008a08:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008a0a:	6013      	str	r3, [r2, #0]
 8008a0c:	9800      	ldr	r0, [sp, #0]
 8008a0e:	b015      	add	sp, #84	; 0x54
 8008a10:	ecbd 8b02 	vpop	{d8}
 8008a14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a18:	4b94      	ldr	r3, [pc, #592]	; (8008c6c <_dtoa_r+0x304>)
 8008a1a:	9300      	str	r3, [sp, #0]
 8008a1c:	3303      	adds	r3, #3
 8008a1e:	e7f3      	b.n	8008a08 <_dtoa_r+0xa0>
 8008a20:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008a24:	2200      	movs	r2, #0
 8008a26:	ec51 0b17 	vmov	r0, r1, d7
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008a30:	f7f8 f852 	bl	8000ad8 <__aeabi_dcmpeq>
 8008a34:	4680      	mov	r8, r0
 8008a36:	b158      	cbz	r0, 8008a50 <_dtoa_r+0xe8>
 8008a38:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	6013      	str	r3, [r2, #0]
 8008a3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	f000 8551 	beq.w	80094e8 <_dtoa_r+0xb80>
 8008a46:	488b      	ldr	r0, [pc, #556]	; (8008c74 <_dtoa_r+0x30c>)
 8008a48:	6018      	str	r0, [r3, #0]
 8008a4a:	1e43      	subs	r3, r0, #1
 8008a4c:	9300      	str	r3, [sp, #0]
 8008a4e:	e7dd      	b.n	8008a0c <_dtoa_r+0xa4>
 8008a50:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8008a54:	aa12      	add	r2, sp, #72	; 0x48
 8008a56:	a913      	add	r1, sp, #76	; 0x4c
 8008a58:	4620      	mov	r0, r4
 8008a5a:	f001 fabf 	bl	8009fdc <__d2b>
 8008a5e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008a62:	4683      	mov	fp, r0
 8008a64:	2d00      	cmp	r5, #0
 8008a66:	d07c      	beq.n	8008b62 <_dtoa_r+0x1fa>
 8008a68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a6a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8008a6e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a72:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8008a76:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008a7a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008a7e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008a82:	4b7d      	ldr	r3, [pc, #500]	; (8008c78 <_dtoa_r+0x310>)
 8008a84:	2200      	movs	r2, #0
 8008a86:	4630      	mov	r0, r6
 8008a88:	4639      	mov	r1, r7
 8008a8a:	f7f7 fc05 	bl	8000298 <__aeabi_dsub>
 8008a8e:	a36e      	add	r3, pc, #440	; (adr r3, 8008c48 <_dtoa_r+0x2e0>)
 8008a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a94:	f7f7 fdb8 	bl	8000608 <__aeabi_dmul>
 8008a98:	a36d      	add	r3, pc, #436	; (adr r3, 8008c50 <_dtoa_r+0x2e8>)
 8008a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a9e:	f7f7 fbfd 	bl	800029c <__adddf3>
 8008aa2:	4606      	mov	r6, r0
 8008aa4:	4628      	mov	r0, r5
 8008aa6:	460f      	mov	r7, r1
 8008aa8:	f7f7 fd44 	bl	8000534 <__aeabi_i2d>
 8008aac:	a36a      	add	r3, pc, #424	; (adr r3, 8008c58 <_dtoa_r+0x2f0>)
 8008aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ab2:	f7f7 fda9 	bl	8000608 <__aeabi_dmul>
 8008ab6:	4602      	mov	r2, r0
 8008ab8:	460b      	mov	r3, r1
 8008aba:	4630      	mov	r0, r6
 8008abc:	4639      	mov	r1, r7
 8008abe:	f7f7 fbed 	bl	800029c <__adddf3>
 8008ac2:	4606      	mov	r6, r0
 8008ac4:	460f      	mov	r7, r1
 8008ac6:	f7f8 f84f 	bl	8000b68 <__aeabi_d2iz>
 8008aca:	2200      	movs	r2, #0
 8008acc:	4682      	mov	sl, r0
 8008ace:	2300      	movs	r3, #0
 8008ad0:	4630      	mov	r0, r6
 8008ad2:	4639      	mov	r1, r7
 8008ad4:	f7f8 f80a 	bl	8000aec <__aeabi_dcmplt>
 8008ad8:	b148      	cbz	r0, 8008aee <_dtoa_r+0x186>
 8008ada:	4650      	mov	r0, sl
 8008adc:	f7f7 fd2a 	bl	8000534 <__aeabi_i2d>
 8008ae0:	4632      	mov	r2, r6
 8008ae2:	463b      	mov	r3, r7
 8008ae4:	f7f7 fff8 	bl	8000ad8 <__aeabi_dcmpeq>
 8008ae8:	b908      	cbnz	r0, 8008aee <_dtoa_r+0x186>
 8008aea:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008aee:	f1ba 0f16 	cmp.w	sl, #22
 8008af2:	d854      	bhi.n	8008b9e <_dtoa_r+0x236>
 8008af4:	4b61      	ldr	r3, [pc, #388]	; (8008c7c <_dtoa_r+0x314>)
 8008af6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008afe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008b02:	f7f7 fff3 	bl	8000aec <__aeabi_dcmplt>
 8008b06:	2800      	cmp	r0, #0
 8008b08:	d04b      	beq.n	8008ba2 <_dtoa_r+0x23a>
 8008b0a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008b0e:	2300      	movs	r3, #0
 8008b10:	930e      	str	r3, [sp, #56]	; 0x38
 8008b12:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008b14:	1b5d      	subs	r5, r3, r5
 8008b16:	1e6b      	subs	r3, r5, #1
 8008b18:	9304      	str	r3, [sp, #16]
 8008b1a:	bf43      	ittte	mi
 8008b1c:	2300      	movmi	r3, #0
 8008b1e:	f1c5 0801 	rsbmi	r8, r5, #1
 8008b22:	9304      	strmi	r3, [sp, #16]
 8008b24:	f04f 0800 	movpl.w	r8, #0
 8008b28:	f1ba 0f00 	cmp.w	sl, #0
 8008b2c:	db3b      	blt.n	8008ba6 <_dtoa_r+0x23e>
 8008b2e:	9b04      	ldr	r3, [sp, #16]
 8008b30:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8008b34:	4453      	add	r3, sl
 8008b36:	9304      	str	r3, [sp, #16]
 8008b38:	2300      	movs	r3, #0
 8008b3a:	9306      	str	r3, [sp, #24]
 8008b3c:	9b05      	ldr	r3, [sp, #20]
 8008b3e:	2b09      	cmp	r3, #9
 8008b40:	d869      	bhi.n	8008c16 <_dtoa_r+0x2ae>
 8008b42:	2b05      	cmp	r3, #5
 8008b44:	bfc4      	itt	gt
 8008b46:	3b04      	subgt	r3, #4
 8008b48:	9305      	strgt	r3, [sp, #20]
 8008b4a:	9b05      	ldr	r3, [sp, #20]
 8008b4c:	f1a3 0302 	sub.w	r3, r3, #2
 8008b50:	bfcc      	ite	gt
 8008b52:	2500      	movgt	r5, #0
 8008b54:	2501      	movle	r5, #1
 8008b56:	2b03      	cmp	r3, #3
 8008b58:	d869      	bhi.n	8008c2e <_dtoa_r+0x2c6>
 8008b5a:	e8df f003 	tbb	[pc, r3]
 8008b5e:	4e2c      	.short	0x4e2c
 8008b60:	5a4c      	.short	0x5a4c
 8008b62:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8008b66:	441d      	add	r5, r3
 8008b68:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008b6c:	2b20      	cmp	r3, #32
 8008b6e:	bfc1      	itttt	gt
 8008b70:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008b74:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008b78:	fa09 f303 	lslgt.w	r3, r9, r3
 8008b7c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008b80:	bfda      	itte	le
 8008b82:	f1c3 0320 	rsble	r3, r3, #32
 8008b86:	fa06 f003 	lslle.w	r0, r6, r3
 8008b8a:	4318      	orrgt	r0, r3
 8008b8c:	f7f7 fcc2 	bl	8000514 <__aeabi_ui2d>
 8008b90:	2301      	movs	r3, #1
 8008b92:	4606      	mov	r6, r0
 8008b94:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008b98:	3d01      	subs	r5, #1
 8008b9a:	9310      	str	r3, [sp, #64]	; 0x40
 8008b9c:	e771      	b.n	8008a82 <_dtoa_r+0x11a>
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	e7b6      	b.n	8008b10 <_dtoa_r+0x1a8>
 8008ba2:	900e      	str	r0, [sp, #56]	; 0x38
 8008ba4:	e7b5      	b.n	8008b12 <_dtoa_r+0x1aa>
 8008ba6:	f1ca 0300 	rsb	r3, sl, #0
 8008baa:	9306      	str	r3, [sp, #24]
 8008bac:	2300      	movs	r3, #0
 8008bae:	eba8 080a 	sub.w	r8, r8, sl
 8008bb2:	930d      	str	r3, [sp, #52]	; 0x34
 8008bb4:	e7c2      	b.n	8008b3c <_dtoa_r+0x1d4>
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	9308      	str	r3, [sp, #32]
 8008bba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	dc39      	bgt.n	8008c34 <_dtoa_r+0x2cc>
 8008bc0:	f04f 0901 	mov.w	r9, #1
 8008bc4:	f8cd 9004 	str.w	r9, [sp, #4]
 8008bc8:	464b      	mov	r3, r9
 8008bca:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008bce:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	6042      	str	r2, [r0, #4]
 8008bd4:	2204      	movs	r2, #4
 8008bd6:	f102 0614 	add.w	r6, r2, #20
 8008bda:	429e      	cmp	r6, r3
 8008bdc:	6841      	ldr	r1, [r0, #4]
 8008bde:	d92f      	bls.n	8008c40 <_dtoa_r+0x2d8>
 8008be0:	4620      	mov	r0, r4
 8008be2:	f000 fed9 	bl	8009998 <_Balloc>
 8008be6:	9000      	str	r0, [sp, #0]
 8008be8:	2800      	cmp	r0, #0
 8008bea:	d14b      	bne.n	8008c84 <_dtoa_r+0x31c>
 8008bec:	4b24      	ldr	r3, [pc, #144]	; (8008c80 <_dtoa_r+0x318>)
 8008bee:	4602      	mov	r2, r0
 8008bf0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008bf4:	e6d1      	b.n	800899a <_dtoa_r+0x32>
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	e7de      	b.n	8008bb8 <_dtoa_r+0x250>
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	9308      	str	r3, [sp, #32]
 8008bfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c00:	eb0a 0903 	add.w	r9, sl, r3
 8008c04:	f109 0301 	add.w	r3, r9, #1
 8008c08:	2b01      	cmp	r3, #1
 8008c0a:	9301      	str	r3, [sp, #4]
 8008c0c:	bfb8      	it	lt
 8008c0e:	2301      	movlt	r3, #1
 8008c10:	e7dd      	b.n	8008bce <_dtoa_r+0x266>
 8008c12:	2301      	movs	r3, #1
 8008c14:	e7f2      	b.n	8008bfc <_dtoa_r+0x294>
 8008c16:	2501      	movs	r5, #1
 8008c18:	2300      	movs	r3, #0
 8008c1a:	9305      	str	r3, [sp, #20]
 8008c1c:	9508      	str	r5, [sp, #32]
 8008c1e:	f04f 39ff 	mov.w	r9, #4294967295
 8008c22:	2200      	movs	r2, #0
 8008c24:	f8cd 9004 	str.w	r9, [sp, #4]
 8008c28:	2312      	movs	r3, #18
 8008c2a:	9209      	str	r2, [sp, #36]	; 0x24
 8008c2c:	e7cf      	b.n	8008bce <_dtoa_r+0x266>
 8008c2e:	2301      	movs	r3, #1
 8008c30:	9308      	str	r3, [sp, #32]
 8008c32:	e7f4      	b.n	8008c1e <_dtoa_r+0x2b6>
 8008c34:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008c38:	f8cd 9004 	str.w	r9, [sp, #4]
 8008c3c:	464b      	mov	r3, r9
 8008c3e:	e7c6      	b.n	8008bce <_dtoa_r+0x266>
 8008c40:	3101      	adds	r1, #1
 8008c42:	6041      	str	r1, [r0, #4]
 8008c44:	0052      	lsls	r2, r2, #1
 8008c46:	e7c6      	b.n	8008bd6 <_dtoa_r+0x26e>
 8008c48:	636f4361 	.word	0x636f4361
 8008c4c:	3fd287a7 	.word	0x3fd287a7
 8008c50:	8b60c8b3 	.word	0x8b60c8b3
 8008c54:	3fc68a28 	.word	0x3fc68a28
 8008c58:	509f79fb 	.word	0x509f79fb
 8008c5c:	3fd34413 	.word	0x3fd34413
 8008c60:	0800ab05 	.word	0x0800ab05
 8008c64:	0800ab1c 	.word	0x0800ab1c
 8008c68:	7ff00000 	.word	0x7ff00000
 8008c6c:	0800ab01 	.word	0x0800ab01
 8008c70:	0800aaf8 	.word	0x0800aaf8
 8008c74:	0800aad5 	.word	0x0800aad5
 8008c78:	3ff80000 	.word	0x3ff80000
 8008c7c:	0800ac78 	.word	0x0800ac78
 8008c80:	0800ab7b 	.word	0x0800ab7b
 8008c84:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c86:	9a00      	ldr	r2, [sp, #0]
 8008c88:	601a      	str	r2, [r3, #0]
 8008c8a:	9b01      	ldr	r3, [sp, #4]
 8008c8c:	2b0e      	cmp	r3, #14
 8008c8e:	f200 80ad 	bhi.w	8008dec <_dtoa_r+0x484>
 8008c92:	2d00      	cmp	r5, #0
 8008c94:	f000 80aa 	beq.w	8008dec <_dtoa_r+0x484>
 8008c98:	f1ba 0f00 	cmp.w	sl, #0
 8008c9c:	dd36      	ble.n	8008d0c <_dtoa_r+0x3a4>
 8008c9e:	4ac3      	ldr	r2, [pc, #780]	; (8008fac <_dtoa_r+0x644>)
 8008ca0:	f00a 030f 	and.w	r3, sl, #15
 8008ca4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008ca8:	ed93 7b00 	vldr	d7, [r3]
 8008cac:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008cb0:	ea4f 172a 	mov.w	r7, sl, asr #4
 8008cb4:	eeb0 8a47 	vmov.f32	s16, s14
 8008cb8:	eef0 8a67 	vmov.f32	s17, s15
 8008cbc:	d016      	beq.n	8008cec <_dtoa_r+0x384>
 8008cbe:	4bbc      	ldr	r3, [pc, #752]	; (8008fb0 <_dtoa_r+0x648>)
 8008cc0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008cc4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008cc8:	f7f7 fdc8 	bl	800085c <__aeabi_ddiv>
 8008ccc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008cd0:	f007 070f 	and.w	r7, r7, #15
 8008cd4:	2503      	movs	r5, #3
 8008cd6:	4eb6      	ldr	r6, [pc, #728]	; (8008fb0 <_dtoa_r+0x648>)
 8008cd8:	b957      	cbnz	r7, 8008cf0 <_dtoa_r+0x388>
 8008cda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008cde:	ec53 2b18 	vmov	r2, r3, d8
 8008ce2:	f7f7 fdbb 	bl	800085c <__aeabi_ddiv>
 8008ce6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008cea:	e029      	b.n	8008d40 <_dtoa_r+0x3d8>
 8008cec:	2502      	movs	r5, #2
 8008cee:	e7f2      	b.n	8008cd6 <_dtoa_r+0x36e>
 8008cf0:	07f9      	lsls	r1, r7, #31
 8008cf2:	d508      	bpl.n	8008d06 <_dtoa_r+0x39e>
 8008cf4:	ec51 0b18 	vmov	r0, r1, d8
 8008cf8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008cfc:	f7f7 fc84 	bl	8000608 <__aeabi_dmul>
 8008d00:	ec41 0b18 	vmov	d8, r0, r1
 8008d04:	3501      	adds	r5, #1
 8008d06:	107f      	asrs	r7, r7, #1
 8008d08:	3608      	adds	r6, #8
 8008d0a:	e7e5      	b.n	8008cd8 <_dtoa_r+0x370>
 8008d0c:	f000 80a6 	beq.w	8008e5c <_dtoa_r+0x4f4>
 8008d10:	f1ca 0600 	rsb	r6, sl, #0
 8008d14:	4ba5      	ldr	r3, [pc, #660]	; (8008fac <_dtoa_r+0x644>)
 8008d16:	4fa6      	ldr	r7, [pc, #664]	; (8008fb0 <_dtoa_r+0x648>)
 8008d18:	f006 020f 	and.w	r2, r6, #15
 8008d1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d24:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008d28:	f7f7 fc6e 	bl	8000608 <__aeabi_dmul>
 8008d2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d30:	1136      	asrs	r6, r6, #4
 8008d32:	2300      	movs	r3, #0
 8008d34:	2502      	movs	r5, #2
 8008d36:	2e00      	cmp	r6, #0
 8008d38:	f040 8085 	bne.w	8008e46 <_dtoa_r+0x4de>
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d1d2      	bne.n	8008ce6 <_dtoa_r+0x37e>
 8008d40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	f000 808c 	beq.w	8008e60 <_dtoa_r+0x4f8>
 8008d48:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008d4c:	4b99      	ldr	r3, [pc, #612]	; (8008fb4 <_dtoa_r+0x64c>)
 8008d4e:	2200      	movs	r2, #0
 8008d50:	4630      	mov	r0, r6
 8008d52:	4639      	mov	r1, r7
 8008d54:	f7f7 feca 	bl	8000aec <__aeabi_dcmplt>
 8008d58:	2800      	cmp	r0, #0
 8008d5a:	f000 8081 	beq.w	8008e60 <_dtoa_r+0x4f8>
 8008d5e:	9b01      	ldr	r3, [sp, #4]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d07d      	beq.n	8008e60 <_dtoa_r+0x4f8>
 8008d64:	f1b9 0f00 	cmp.w	r9, #0
 8008d68:	dd3c      	ble.n	8008de4 <_dtoa_r+0x47c>
 8008d6a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008d6e:	9307      	str	r3, [sp, #28]
 8008d70:	2200      	movs	r2, #0
 8008d72:	4b91      	ldr	r3, [pc, #580]	; (8008fb8 <_dtoa_r+0x650>)
 8008d74:	4630      	mov	r0, r6
 8008d76:	4639      	mov	r1, r7
 8008d78:	f7f7 fc46 	bl	8000608 <__aeabi_dmul>
 8008d7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d80:	3501      	adds	r5, #1
 8008d82:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8008d86:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008d8a:	4628      	mov	r0, r5
 8008d8c:	f7f7 fbd2 	bl	8000534 <__aeabi_i2d>
 8008d90:	4632      	mov	r2, r6
 8008d92:	463b      	mov	r3, r7
 8008d94:	f7f7 fc38 	bl	8000608 <__aeabi_dmul>
 8008d98:	4b88      	ldr	r3, [pc, #544]	; (8008fbc <_dtoa_r+0x654>)
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	f7f7 fa7e 	bl	800029c <__adddf3>
 8008da0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008da4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008da8:	9303      	str	r3, [sp, #12]
 8008daa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d15c      	bne.n	8008e6a <_dtoa_r+0x502>
 8008db0:	4b83      	ldr	r3, [pc, #524]	; (8008fc0 <_dtoa_r+0x658>)
 8008db2:	2200      	movs	r2, #0
 8008db4:	4630      	mov	r0, r6
 8008db6:	4639      	mov	r1, r7
 8008db8:	f7f7 fa6e 	bl	8000298 <__aeabi_dsub>
 8008dbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008dc0:	4606      	mov	r6, r0
 8008dc2:	460f      	mov	r7, r1
 8008dc4:	f7f7 feb0 	bl	8000b28 <__aeabi_dcmpgt>
 8008dc8:	2800      	cmp	r0, #0
 8008dca:	f040 8296 	bne.w	80092fa <_dtoa_r+0x992>
 8008dce:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008dd2:	4630      	mov	r0, r6
 8008dd4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008dd8:	4639      	mov	r1, r7
 8008dda:	f7f7 fe87 	bl	8000aec <__aeabi_dcmplt>
 8008dde:	2800      	cmp	r0, #0
 8008de0:	f040 8288 	bne.w	80092f4 <_dtoa_r+0x98c>
 8008de4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008de8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008dec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	f2c0 8158 	blt.w	80090a4 <_dtoa_r+0x73c>
 8008df4:	f1ba 0f0e 	cmp.w	sl, #14
 8008df8:	f300 8154 	bgt.w	80090a4 <_dtoa_r+0x73c>
 8008dfc:	4b6b      	ldr	r3, [pc, #428]	; (8008fac <_dtoa_r+0x644>)
 8008dfe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008e02:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008e06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	f280 80e3 	bge.w	8008fd4 <_dtoa_r+0x66c>
 8008e0e:	9b01      	ldr	r3, [sp, #4]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	f300 80df 	bgt.w	8008fd4 <_dtoa_r+0x66c>
 8008e16:	f040 826d 	bne.w	80092f4 <_dtoa_r+0x98c>
 8008e1a:	4b69      	ldr	r3, [pc, #420]	; (8008fc0 <_dtoa_r+0x658>)
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	4640      	mov	r0, r8
 8008e20:	4649      	mov	r1, r9
 8008e22:	f7f7 fbf1 	bl	8000608 <__aeabi_dmul>
 8008e26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008e2a:	f7f7 fe73 	bl	8000b14 <__aeabi_dcmpge>
 8008e2e:	9e01      	ldr	r6, [sp, #4]
 8008e30:	4637      	mov	r7, r6
 8008e32:	2800      	cmp	r0, #0
 8008e34:	f040 8243 	bne.w	80092be <_dtoa_r+0x956>
 8008e38:	9d00      	ldr	r5, [sp, #0]
 8008e3a:	2331      	movs	r3, #49	; 0x31
 8008e3c:	f805 3b01 	strb.w	r3, [r5], #1
 8008e40:	f10a 0a01 	add.w	sl, sl, #1
 8008e44:	e23f      	b.n	80092c6 <_dtoa_r+0x95e>
 8008e46:	07f2      	lsls	r2, r6, #31
 8008e48:	d505      	bpl.n	8008e56 <_dtoa_r+0x4ee>
 8008e4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e4e:	f7f7 fbdb 	bl	8000608 <__aeabi_dmul>
 8008e52:	3501      	adds	r5, #1
 8008e54:	2301      	movs	r3, #1
 8008e56:	1076      	asrs	r6, r6, #1
 8008e58:	3708      	adds	r7, #8
 8008e5a:	e76c      	b.n	8008d36 <_dtoa_r+0x3ce>
 8008e5c:	2502      	movs	r5, #2
 8008e5e:	e76f      	b.n	8008d40 <_dtoa_r+0x3d8>
 8008e60:	9b01      	ldr	r3, [sp, #4]
 8008e62:	f8cd a01c 	str.w	sl, [sp, #28]
 8008e66:	930c      	str	r3, [sp, #48]	; 0x30
 8008e68:	e78d      	b.n	8008d86 <_dtoa_r+0x41e>
 8008e6a:	9900      	ldr	r1, [sp, #0]
 8008e6c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008e6e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008e70:	4b4e      	ldr	r3, [pc, #312]	; (8008fac <_dtoa_r+0x644>)
 8008e72:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008e76:	4401      	add	r1, r0
 8008e78:	9102      	str	r1, [sp, #8]
 8008e7a:	9908      	ldr	r1, [sp, #32]
 8008e7c:	eeb0 8a47 	vmov.f32	s16, s14
 8008e80:	eef0 8a67 	vmov.f32	s17, s15
 8008e84:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e88:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008e8c:	2900      	cmp	r1, #0
 8008e8e:	d045      	beq.n	8008f1c <_dtoa_r+0x5b4>
 8008e90:	494c      	ldr	r1, [pc, #304]	; (8008fc4 <_dtoa_r+0x65c>)
 8008e92:	2000      	movs	r0, #0
 8008e94:	f7f7 fce2 	bl	800085c <__aeabi_ddiv>
 8008e98:	ec53 2b18 	vmov	r2, r3, d8
 8008e9c:	f7f7 f9fc 	bl	8000298 <__aeabi_dsub>
 8008ea0:	9d00      	ldr	r5, [sp, #0]
 8008ea2:	ec41 0b18 	vmov	d8, r0, r1
 8008ea6:	4639      	mov	r1, r7
 8008ea8:	4630      	mov	r0, r6
 8008eaa:	f7f7 fe5d 	bl	8000b68 <__aeabi_d2iz>
 8008eae:	900c      	str	r0, [sp, #48]	; 0x30
 8008eb0:	f7f7 fb40 	bl	8000534 <__aeabi_i2d>
 8008eb4:	4602      	mov	r2, r0
 8008eb6:	460b      	mov	r3, r1
 8008eb8:	4630      	mov	r0, r6
 8008eba:	4639      	mov	r1, r7
 8008ebc:	f7f7 f9ec 	bl	8000298 <__aeabi_dsub>
 8008ec0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008ec2:	3330      	adds	r3, #48	; 0x30
 8008ec4:	f805 3b01 	strb.w	r3, [r5], #1
 8008ec8:	ec53 2b18 	vmov	r2, r3, d8
 8008ecc:	4606      	mov	r6, r0
 8008ece:	460f      	mov	r7, r1
 8008ed0:	f7f7 fe0c 	bl	8000aec <__aeabi_dcmplt>
 8008ed4:	2800      	cmp	r0, #0
 8008ed6:	d165      	bne.n	8008fa4 <_dtoa_r+0x63c>
 8008ed8:	4632      	mov	r2, r6
 8008eda:	463b      	mov	r3, r7
 8008edc:	4935      	ldr	r1, [pc, #212]	; (8008fb4 <_dtoa_r+0x64c>)
 8008ede:	2000      	movs	r0, #0
 8008ee0:	f7f7 f9da 	bl	8000298 <__aeabi_dsub>
 8008ee4:	ec53 2b18 	vmov	r2, r3, d8
 8008ee8:	f7f7 fe00 	bl	8000aec <__aeabi_dcmplt>
 8008eec:	2800      	cmp	r0, #0
 8008eee:	f040 80b9 	bne.w	8009064 <_dtoa_r+0x6fc>
 8008ef2:	9b02      	ldr	r3, [sp, #8]
 8008ef4:	429d      	cmp	r5, r3
 8008ef6:	f43f af75 	beq.w	8008de4 <_dtoa_r+0x47c>
 8008efa:	4b2f      	ldr	r3, [pc, #188]	; (8008fb8 <_dtoa_r+0x650>)
 8008efc:	ec51 0b18 	vmov	r0, r1, d8
 8008f00:	2200      	movs	r2, #0
 8008f02:	f7f7 fb81 	bl	8000608 <__aeabi_dmul>
 8008f06:	4b2c      	ldr	r3, [pc, #176]	; (8008fb8 <_dtoa_r+0x650>)
 8008f08:	ec41 0b18 	vmov	d8, r0, r1
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	4630      	mov	r0, r6
 8008f10:	4639      	mov	r1, r7
 8008f12:	f7f7 fb79 	bl	8000608 <__aeabi_dmul>
 8008f16:	4606      	mov	r6, r0
 8008f18:	460f      	mov	r7, r1
 8008f1a:	e7c4      	b.n	8008ea6 <_dtoa_r+0x53e>
 8008f1c:	ec51 0b17 	vmov	r0, r1, d7
 8008f20:	f7f7 fb72 	bl	8000608 <__aeabi_dmul>
 8008f24:	9b02      	ldr	r3, [sp, #8]
 8008f26:	9d00      	ldr	r5, [sp, #0]
 8008f28:	930c      	str	r3, [sp, #48]	; 0x30
 8008f2a:	ec41 0b18 	vmov	d8, r0, r1
 8008f2e:	4639      	mov	r1, r7
 8008f30:	4630      	mov	r0, r6
 8008f32:	f7f7 fe19 	bl	8000b68 <__aeabi_d2iz>
 8008f36:	9011      	str	r0, [sp, #68]	; 0x44
 8008f38:	f7f7 fafc 	bl	8000534 <__aeabi_i2d>
 8008f3c:	4602      	mov	r2, r0
 8008f3e:	460b      	mov	r3, r1
 8008f40:	4630      	mov	r0, r6
 8008f42:	4639      	mov	r1, r7
 8008f44:	f7f7 f9a8 	bl	8000298 <__aeabi_dsub>
 8008f48:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008f4a:	3330      	adds	r3, #48	; 0x30
 8008f4c:	f805 3b01 	strb.w	r3, [r5], #1
 8008f50:	9b02      	ldr	r3, [sp, #8]
 8008f52:	429d      	cmp	r5, r3
 8008f54:	4606      	mov	r6, r0
 8008f56:	460f      	mov	r7, r1
 8008f58:	f04f 0200 	mov.w	r2, #0
 8008f5c:	d134      	bne.n	8008fc8 <_dtoa_r+0x660>
 8008f5e:	4b19      	ldr	r3, [pc, #100]	; (8008fc4 <_dtoa_r+0x65c>)
 8008f60:	ec51 0b18 	vmov	r0, r1, d8
 8008f64:	f7f7 f99a 	bl	800029c <__adddf3>
 8008f68:	4602      	mov	r2, r0
 8008f6a:	460b      	mov	r3, r1
 8008f6c:	4630      	mov	r0, r6
 8008f6e:	4639      	mov	r1, r7
 8008f70:	f7f7 fdda 	bl	8000b28 <__aeabi_dcmpgt>
 8008f74:	2800      	cmp	r0, #0
 8008f76:	d175      	bne.n	8009064 <_dtoa_r+0x6fc>
 8008f78:	ec53 2b18 	vmov	r2, r3, d8
 8008f7c:	4911      	ldr	r1, [pc, #68]	; (8008fc4 <_dtoa_r+0x65c>)
 8008f7e:	2000      	movs	r0, #0
 8008f80:	f7f7 f98a 	bl	8000298 <__aeabi_dsub>
 8008f84:	4602      	mov	r2, r0
 8008f86:	460b      	mov	r3, r1
 8008f88:	4630      	mov	r0, r6
 8008f8a:	4639      	mov	r1, r7
 8008f8c:	f7f7 fdae 	bl	8000aec <__aeabi_dcmplt>
 8008f90:	2800      	cmp	r0, #0
 8008f92:	f43f af27 	beq.w	8008de4 <_dtoa_r+0x47c>
 8008f96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008f98:	1e6b      	subs	r3, r5, #1
 8008f9a:	930c      	str	r3, [sp, #48]	; 0x30
 8008f9c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008fa0:	2b30      	cmp	r3, #48	; 0x30
 8008fa2:	d0f8      	beq.n	8008f96 <_dtoa_r+0x62e>
 8008fa4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008fa8:	e04a      	b.n	8009040 <_dtoa_r+0x6d8>
 8008faa:	bf00      	nop
 8008fac:	0800ac78 	.word	0x0800ac78
 8008fb0:	0800ac50 	.word	0x0800ac50
 8008fb4:	3ff00000 	.word	0x3ff00000
 8008fb8:	40240000 	.word	0x40240000
 8008fbc:	401c0000 	.word	0x401c0000
 8008fc0:	40140000 	.word	0x40140000
 8008fc4:	3fe00000 	.word	0x3fe00000
 8008fc8:	4baf      	ldr	r3, [pc, #700]	; (8009288 <_dtoa_r+0x920>)
 8008fca:	f7f7 fb1d 	bl	8000608 <__aeabi_dmul>
 8008fce:	4606      	mov	r6, r0
 8008fd0:	460f      	mov	r7, r1
 8008fd2:	e7ac      	b.n	8008f2e <_dtoa_r+0x5c6>
 8008fd4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008fd8:	9d00      	ldr	r5, [sp, #0]
 8008fda:	4642      	mov	r2, r8
 8008fdc:	464b      	mov	r3, r9
 8008fde:	4630      	mov	r0, r6
 8008fe0:	4639      	mov	r1, r7
 8008fe2:	f7f7 fc3b 	bl	800085c <__aeabi_ddiv>
 8008fe6:	f7f7 fdbf 	bl	8000b68 <__aeabi_d2iz>
 8008fea:	9002      	str	r0, [sp, #8]
 8008fec:	f7f7 faa2 	bl	8000534 <__aeabi_i2d>
 8008ff0:	4642      	mov	r2, r8
 8008ff2:	464b      	mov	r3, r9
 8008ff4:	f7f7 fb08 	bl	8000608 <__aeabi_dmul>
 8008ff8:	4602      	mov	r2, r0
 8008ffa:	460b      	mov	r3, r1
 8008ffc:	4630      	mov	r0, r6
 8008ffe:	4639      	mov	r1, r7
 8009000:	f7f7 f94a 	bl	8000298 <__aeabi_dsub>
 8009004:	9e02      	ldr	r6, [sp, #8]
 8009006:	9f01      	ldr	r7, [sp, #4]
 8009008:	3630      	adds	r6, #48	; 0x30
 800900a:	f805 6b01 	strb.w	r6, [r5], #1
 800900e:	9e00      	ldr	r6, [sp, #0]
 8009010:	1bae      	subs	r6, r5, r6
 8009012:	42b7      	cmp	r7, r6
 8009014:	4602      	mov	r2, r0
 8009016:	460b      	mov	r3, r1
 8009018:	d137      	bne.n	800908a <_dtoa_r+0x722>
 800901a:	f7f7 f93f 	bl	800029c <__adddf3>
 800901e:	4642      	mov	r2, r8
 8009020:	464b      	mov	r3, r9
 8009022:	4606      	mov	r6, r0
 8009024:	460f      	mov	r7, r1
 8009026:	f7f7 fd7f 	bl	8000b28 <__aeabi_dcmpgt>
 800902a:	b9c8      	cbnz	r0, 8009060 <_dtoa_r+0x6f8>
 800902c:	4642      	mov	r2, r8
 800902e:	464b      	mov	r3, r9
 8009030:	4630      	mov	r0, r6
 8009032:	4639      	mov	r1, r7
 8009034:	f7f7 fd50 	bl	8000ad8 <__aeabi_dcmpeq>
 8009038:	b110      	cbz	r0, 8009040 <_dtoa_r+0x6d8>
 800903a:	9b02      	ldr	r3, [sp, #8]
 800903c:	07d9      	lsls	r1, r3, #31
 800903e:	d40f      	bmi.n	8009060 <_dtoa_r+0x6f8>
 8009040:	4620      	mov	r0, r4
 8009042:	4659      	mov	r1, fp
 8009044:	f000 fce8 	bl	8009a18 <_Bfree>
 8009048:	2300      	movs	r3, #0
 800904a:	702b      	strb	r3, [r5, #0]
 800904c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800904e:	f10a 0001 	add.w	r0, sl, #1
 8009052:	6018      	str	r0, [r3, #0]
 8009054:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009056:	2b00      	cmp	r3, #0
 8009058:	f43f acd8 	beq.w	8008a0c <_dtoa_r+0xa4>
 800905c:	601d      	str	r5, [r3, #0]
 800905e:	e4d5      	b.n	8008a0c <_dtoa_r+0xa4>
 8009060:	f8cd a01c 	str.w	sl, [sp, #28]
 8009064:	462b      	mov	r3, r5
 8009066:	461d      	mov	r5, r3
 8009068:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800906c:	2a39      	cmp	r2, #57	; 0x39
 800906e:	d108      	bne.n	8009082 <_dtoa_r+0x71a>
 8009070:	9a00      	ldr	r2, [sp, #0]
 8009072:	429a      	cmp	r2, r3
 8009074:	d1f7      	bne.n	8009066 <_dtoa_r+0x6fe>
 8009076:	9a07      	ldr	r2, [sp, #28]
 8009078:	9900      	ldr	r1, [sp, #0]
 800907a:	3201      	adds	r2, #1
 800907c:	9207      	str	r2, [sp, #28]
 800907e:	2230      	movs	r2, #48	; 0x30
 8009080:	700a      	strb	r2, [r1, #0]
 8009082:	781a      	ldrb	r2, [r3, #0]
 8009084:	3201      	adds	r2, #1
 8009086:	701a      	strb	r2, [r3, #0]
 8009088:	e78c      	b.n	8008fa4 <_dtoa_r+0x63c>
 800908a:	4b7f      	ldr	r3, [pc, #508]	; (8009288 <_dtoa_r+0x920>)
 800908c:	2200      	movs	r2, #0
 800908e:	f7f7 fabb 	bl	8000608 <__aeabi_dmul>
 8009092:	2200      	movs	r2, #0
 8009094:	2300      	movs	r3, #0
 8009096:	4606      	mov	r6, r0
 8009098:	460f      	mov	r7, r1
 800909a:	f7f7 fd1d 	bl	8000ad8 <__aeabi_dcmpeq>
 800909e:	2800      	cmp	r0, #0
 80090a0:	d09b      	beq.n	8008fda <_dtoa_r+0x672>
 80090a2:	e7cd      	b.n	8009040 <_dtoa_r+0x6d8>
 80090a4:	9a08      	ldr	r2, [sp, #32]
 80090a6:	2a00      	cmp	r2, #0
 80090a8:	f000 80c4 	beq.w	8009234 <_dtoa_r+0x8cc>
 80090ac:	9a05      	ldr	r2, [sp, #20]
 80090ae:	2a01      	cmp	r2, #1
 80090b0:	f300 80a8 	bgt.w	8009204 <_dtoa_r+0x89c>
 80090b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80090b6:	2a00      	cmp	r2, #0
 80090b8:	f000 80a0 	beq.w	80091fc <_dtoa_r+0x894>
 80090bc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80090c0:	9e06      	ldr	r6, [sp, #24]
 80090c2:	4645      	mov	r5, r8
 80090c4:	9a04      	ldr	r2, [sp, #16]
 80090c6:	2101      	movs	r1, #1
 80090c8:	441a      	add	r2, r3
 80090ca:	4620      	mov	r0, r4
 80090cc:	4498      	add	r8, r3
 80090ce:	9204      	str	r2, [sp, #16]
 80090d0:	f000 fd5e 	bl	8009b90 <__i2b>
 80090d4:	4607      	mov	r7, r0
 80090d6:	2d00      	cmp	r5, #0
 80090d8:	dd0b      	ble.n	80090f2 <_dtoa_r+0x78a>
 80090da:	9b04      	ldr	r3, [sp, #16]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	dd08      	ble.n	80090f2 <_dtoa_r+0x78a>
 80090e0:	42ab      	cmp	r3, r5
 80090e2:	9a04      	ldr	r2, [sp, #16]
 80090e4:	bfa8      	it	ge
 80090e6:	462b      	movge	r3, r5
 80090e8:	eba8 0803 	sub.w	r8, r8, r3
 80090ec:	1aed      	subs	r5, r5, r3
 80090ee:	1ad3      	subs	r3, r2, r3
 80090f0:	9304      	str	r3, [sp, #16]
 80090f2:	9b06      	ldr	r3, [sp, #24]
 80090f4:	b1fb      	cbz	r3, 8009136 <_dtoa_r+0x7ce>
 80090f6:	9b08      	ldr	r3, [sp, #32]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	f000 809f 	beq.w	800923c <_dtoa_r+0x8d4>
 80090fe:	2e00      	cmp	r6, #0
 8009100:	dd11      	ble.n	8009126 <_dtoa_r+0x7be>
 8009102:	4639      	mov	r1, r7
 8009104:	4632      	mov	r2, r6
 8009106:	4620      	mov	r0, r4
 8009108:	f000 fdfe 	bl	8009d08 <__pow5mult>
 800910c:	465a      	mov	r2, fp
 800910e:	4601      	mov	r1, r0
 8009110:	4607      	mov	r7, r0
 8009112:	4620      	mov	r0, r4
 8009114:	f000 fd52 	bl	8009bbc <__multiply>
 8009118:	4659      	mov	r1, fp
 800911a:	9007      	str	r0, [sp, #28]
 800911c:	4620      	mov	r0, r4
 800911e:	f000 fc7b 	bl	8009a18 <_Bfree>
 8009122:	9b07      	ldr	r3, [sp, #28]
 8009124:	469b      	mov	fp, r3
 8009126:	9b06      	ldr	r3, [sp, #24]
 8009128:	1b9a      	subs	r2, r3, r6
 800912a:	d004      	beq.n	8009136 <_dtoa_r+0x7ce>
 800912c:	4659      	mov	r1, fp
 800912e:	4620      	mov	r0, r4
 8009130:	f000 fdea 	bl	8009d08 <__pow5mult>
 8009134:	4683      	mov	fp, r0
 8009136:	2101      	movs	r1, #1
 8009138:	4620      	mov	r0, r4
 800913a:	f000 fd29 	bl	8009b90 <__i2b>
 800913e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009140:	2b00      	cmp	r3, #0
 8009142:	4606      	mov	r6, r0
 8009144:	dd7c      	ble.n	8009240 <_dtoa_r+0x8d8>
 8009146:	461a      	mov	r2, r3
 8009148:	4601      	mov	r1, r0
 800914a:	4620      	mov	r0, r4
 800914c:	f000 fddc 	bl	8009d08 <__pow5mult>
 8009150:	9b05      	ldr	r3, [sp, #20]
 8009152:	2b01      	cmp	r3, #1
 8009154:	4606      	mov	r6, r0
 8009156:	dd76      	ble.n	8009246 <_dtoa_r+0x8de>
 8009158:	2300      	movs	r3, #0
 800915a:	9306      	str	r3, [sp, #24]
 800915c:	6933      	ldr	r3, [r6, #16]
 800915e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009162:	6918      	ldr	r0, [r3, #16]
 8009164:	f000 fcc4 	bl	8009af0 <__hi0bits>
 8009168:	f1c0 0020 	rsb	r0, r0, #32
 800916c:	9b04      	ldr	r3, [sp, #16]
 800916e:	4418      	add	r0, r3
 8009170:	f010 001f 	ands.w	r0, r0, #31
 8009174:	f000 8086 	beq.w	8009284 <_dtoa_r+0x91c>
 8009178:	f1c0 0320 	rsb	r3, r0, #32
 800917c:	2b04      	cmp	r3, #4
 800917e:	dd7f      	ble.n	8009280 <_dtoa_r+0x918>
 8009180:	f1c0 001c 	rsb	r0, r0, #28
 8009184:	9b04      	ldr	r3, [sp, #16]
 8009186:	4403      	add	r3, r0
 8009188:	4480      	add	r8, r0
 800918a:	4405      	add	r5, r0
 800918c:	9304      	str	r3, [sp, #16]
 800918e:	f1b8 0f00 	cmp.w	r8, #0
 8009192:	dd05      	ble.n	80091a0 <_dtoa_r+0x838>
 8009194:	4659      	mov	r1, fp
 8009196:	4642      	mov	r2, r8
 8009198:	4620      	mov	r0, r4
 800919a:	f000 fe0f 	bl	8009dbc <__lshift>
 800919e:	4683      	mov	fp, r0
 80091a0:	9b04      	ldr	r3, [sp, #16]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	dd05      	ble.n	80091b2 <_dtoa_r+0x84a>
 80091a6:	4631      	mov	r1, r6
 80091a8:	461a      	mov	r2, r3
 80091aa:	4620      	mov	r0, r4
 80091ac:	f000 fe06 	bl	8009dbc <__lshift>
 80091b0:	4606      	mov	r6, r0
 80091b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d069      	beq.n	800928c <_dtoa_r+0x924>
 80091b8:	4631      	mov	r1, r6
 80091ba:	4658      	mov	r0, fp
 80091bc:	f000 fe6a 	bl	8009e94 <__mcmp>
 80091c0:	2800      	cmp	r0, #0
 80091c2:	da63      	bge.n	800928c <_dtoa_r+0x924>
 80091c4:	2300      	movs	r3, #0
 80091c6:	4659      	mov	r1, fp
 80091c8:	220a      	movs	r2, #10
 80091ca:	4620      	mov	r0, r4
 80091cc:	f000 fc46 	bl	8009a5c <__multadd>
 80091d0:	9b08      	ldr	r3, [sp, #32]
 80091d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80091d6:	4683      	mov	fp, r0
 80091d8:	2b00      	cmp	r3, #0
 80091da:	f000 818f 	beq.w	80094fc <_dtoa_r+0xb94>
 80091de:	4639      	mov	r1, r7
 80091e0:	2300      	movs	r3, #0
 80091e2:	220a      	movs	r2, #10
 80091e4:	4620      	mov	r0, r4
 80091e6:	f000 fc39 	bl	8009a5c <__multadd>
 80091ea:	f1b9 0f00 	cmp.w	r9, #0
 80091ee:	4607      	mov	r7, r0
 80091f0:	f300 808e 	bgt.w	8009310 <_dtoa_r+0x9a8>
 80091f4:	9b05      	ldr	r3, [sp, #20]
 80091f6:	2b02      	cmp	r3, #2
 80091f8:	dc50      	bgt.n	800929c <_dtoa_r+0x934>
 80091fa:	e089      	b.n	8009310 <_dtoa_r+0x9a8>
 80091fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80091fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009202:	e75d      	b.n	80090c0 <_dtoa_r+0x758>
 8009204:	9b01      	ldr	r3, [sp, #4]
 8009206:	1e5e      	subs	r6, r3, #1
 8009208:	9b06      	ldr	r3, [sp, #24]
 800920a:	42b3      	cmp	r3, r6
 800920c:	bfbf      	itttt	lt
 800920e:	9b06      	ldrlt	r3, [sp, #24]
 8009210:	9606      	strlt	r6, [sp, #24]
 8009212:	1af2      	sublt	r2, r6, r3
 8009214:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8009216:	bfb6      	itet	lt
 8009218:	189b      	addlt	r3, r3, r2
 800921a:	1b9e      	subge	r6, r3, r6
 800921c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800921e:	9b01      	ldr	r3, [sp, #4]
 8009220:	bfb8      	it	lt
 8009222:	2600      	movlt	r6, #0
 8009224:	2b00      	cmp	r3, #0
 8009226:	bfb5      	itete	lt
 8009228:	eba8 0503 	sublt.w	r5, r8, r3
 800922c:	9b01      	ldrge	r3, [sp, #4]
 800922e:	2300      	movlt	r3, #0
 8009230:	4645      	movge	r5, r8
 8009232:	e747      	b.n	80090c4 <_dtoa_r+0x75c>
 8009234:	9e06      	ldr	r6, [sp, #24]
 8009236:	9f08      	ldr	r7, [sp, #32]
 8009238:	4645      	mov	r5, r8
 800923a:	e74c      	b.n	80090d6 <_dtoa_r+0x76e>
 800923c:	9a06      	ldr	r2, [sp, #24]
 800923e:	e775      	b.n	800912c <_dtoa_r+0x7c4>
 8009240:	9b05      	ldr	r3, [sp, #20]
 8009242:	2b01      	cmp	r3, #1
 8009244:	dc18      	bgt.n	8009278 <_dtoa_r+0x910>
 8009246:	9b02      	ldr	r3, [sp, #8]
 8009248:	b9b3      	cbnz	r3, 8009278 <_dtoa_r+0x910>
 800924a:	9b03      	ldr	r3, [sp, #12]
 800924c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009250:	b9a3      	cbnz	r3, 800927c <_dtoa_r+0x914>
 8009252:	9b03      	ldr	r3, [sp, #12]
 8009254:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009258:	0d1b      	lsrs	r3, r3, #20
 800925a:	051b      	lsls	r3, r3, #20
 800925c:	b12b      	cbz	r3, 800926a <_dtoa_r+0x902>
 800925e:	9b04      	ldr	r3, [sp, #16]
 8009260:	3301      	adds	r3, #1
 8009262:	9304      	str	r3, [sp, #16]
 8009264:	f108 0801 	add.w	r8, r8, #1
 8009268:	2301      	movs	r3, #1
 800926a:	9306      	str	r3, [sp, #24]
 800926c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800926e:	2b00      	cmp	r3, #0
 8009270:	f47f af74 	bne.w	800915c <_dtoa_r+0x7f4>
 8009274:	2001      	movs	r0, #1
 8009276:	e779      	b.n	800916c <_dtoa_r+0x804>
 8009278:	2300      	movs	r3, #0
 800927a:	e7f6      	b.n	800926a <_dtoa_r+0x902>
 800927c:	9b02      	ldr	r3, [sp, #8]
 800927e:	e7f4      	b.n	800926a <_dtoa_r+0x902>
 8009280:	d085      	beq.n	800918e <_dtoa_r+0x826>
 8009282:	4618      	mov	r0, r3
 8009284:	301c      	adds	r0, #28
 8009286:	e77d      	b.n	8009184 <_dtoa_r+0x81c>
 8009288:	40240000 	.word	0x40240000
 800928c:	9b01      	ldr	r3, [sp, #4]
 800928e:	2b00      	cmp	r3, #0
 8009290:	dc38      	bgt.n	8009304 <_dtoa_r+0x99c>
 8009292:	9b05      	ldr	r3, [sp, #20]
 8009294:	2b02      	cmp	r3, #2
 8009296:	dd35      	ble.n	8009304 <_dtoa_r+0x99c>
 8009298:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800929c:	f1b9 0f00 	cmp.w	r9, #0
 80092a0:	d10d      	bne.n	80092be <_dtoa_r+0x956>
 80092a2:	4631      	mov	r1, r6
 80092a4:	464b      	mov	r3, r9
 80092a6:	2205      	movs	r2, #5
 80092a8:	4620      	mov	r0, r4
 80092aa:	f000 fbd7 	bl	8009a5c <__multadd>
 80092ae:	4601      	mov	r1, r0
 80092b0:	4606      	mov	r6, r0
 80092b2:	4658      	mov	r0, fp
 80092b4:	f000 fdee 	bl	8009e94 <__mcmp>
 80092b8:	2800      	cmp	r0, #0
 80092ba:	f73f adbd 	bgt.w	8008e38 <_dtoa_r+0x4d0>
 80092be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092c0:	9d00      	ldr	r5, [sp, #0]
 80092c2:	ea6f 0a03 	mvn.w	sl, r3
 80092c6:	f04f 0800 	mov.w	r8, #0
 80092ca:	4631      	mov	r1, r6
 80092cc:	4620      	mov	r0, r4
 80092ce:	f000 fba3 	bl	8009a18 <_Bfree>
 80092d2:	2f00      	cmp	r7, #0
 80092d4:	f43f aeb4 	beq.w	8009040 <_dtoa_r+0x6d8>
 80092d8:	f1b8 0f00 	cmp.w	r8, #0
 80092dc:	d005      	beq.n	80092ea <_dtoa_r+0x982>
 80092de:	45b8      	cmp	r8, r7
 80092e0:	d003      	beq.n	80092ea <_dtoa_r+0x982>
 80092e2:	4641      	mov	r1, r8
 80092e4:	4620      	mov	r0, r4
 80092e6:	f000 fb97 	bl	8009a18 <_Bfree>
 80092ea:	4639      	mov	r1, r7
 80092ec:	4620      	mov	r0, r4
 80092ee:	f000 fb93 	bl	8009a18 <_Bfree>
 80092f2:	e6a5      	b.n	8009040 <_dtoa_r+0x6d8>
 80092f4:	2600      	movs	r6, #0
 80092f6:	4637      	mov	r7, r6
 80092f8:	e7e1      	b.n	80092be <_dtoa_r+0x956>
 80092fa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80092fc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009300:	4637      	mov	r7, r6
 8009302:	e599      	b.n	8008e38 <_dtoa_r+0x4d0>
 8009304:	9b08      	ldr	r3, [sp, #32]
 8009306:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800930a:	2b00      	cmp	r3, #0
 800930c:	f000 80fd 	beq.w	800950a <_dtoa_r+0xba2>
 8009310:	2d00      	cmp	r5, #0
 8009312:	dd05      	ble.n	8009320 <_dtoa_r+0x9b8>
 8009314:	4639      	mov	r1, r7
 8009316:	462a      	mov	r2, r5
 8009318:	4620      	mov	r0, r4
 800931a:	f000 fd4f 	bl	8009dbc <__lshift>
 800931e:	4607      	mov	r7, r0
 8009320:	9b06      	ldr	r3, [sp, #24]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d05c      	beq.n	80093e0 <_dtoa_r+0xa78>
 8009326:	6879      	ldr	r1, [r7, #4]
 8009328:	4620      	mov	r0, r4
 800932a:	f000 fb35 	bl	8009998 <_Balloc>
 800932e:	4605      	mov	r5, r0
 8009330:	b928      	cbnz	r0, 800933e <_dtoa_r+0x9d6>
 8009332:	4b80      	ldr	r3, [pc, #512]	; (8009534 <_dtoa_r+0xbcc>)
 8009334:	4602      	mov	r2, r0
 8009336:	f240 21ea 	movw	r1, #746	; 0x2ea
 800933a:	f7ff bb2e 	b.w	800899a <_dtoa_r+0x32>
 800933e:	693a      	ldr	r2, [r7, #16]
 8009340:	3202      	adds	r2, #2
 8009342:	0092      	lsls	r2, r2, #2
 8009344:	f107 010c 	add.w	r1, r7, #12
 8009348:	300c      	adds	r0, #12
 800934a:	f7fe fcb1 	bl	8007cb0 <memcpy>
 800934e:	2201      	movs	r2, #1
 8009350:	4629      	mov	r1, r5
 8009352:	4620      	mov	r0, r4
 8009354:	f000 fd32 	bl	8009dbc <__lshift>
 8009358:	9b00      	ldr	r3, [sp, #0]
 800935a:	3301      	adds	r3, #1
 800935c:	9301      	str	r3, [sp, #4]
 800935e:	9b00      	ldr	r3, [sp, #0]
 8009360:	444b      	add	r3, r9
 8009362:	9307      	str	r3, [sp, #28]
 8009364:	9b02      	ldr	r3, [sp, #8]
 8009366:	f003 0301 	and.w	r3, r3, #1
 800936a:	46b8      	mov	r8, r7
 800936c:	9306      	str	r3, [sp, #24]
 800936e:	4607      	mov	r7, r0
 8009370:	9b01      	ldr	r3, [sp, #4]
 8009372:	4631      	mov	r1, r6
 8009374:	3b01      	subs	r3, #1
 8009376:	4658      	mov	r0, fp
 8009378:	9302      	str	r3, [sp, #8]
 800937a:	f7ff fa67 	bl	800884c <quorem>
 800937e:	4603      	mov	r3, r0
 8009380:	3330      	adds	r3, #48	; 0x30
 8009382:	9004      	str	r0, [sp, #16]
 8009384:	4641      	mov	r1, r8
 8009386:	4658      	mov	r0, fp
 8009388:	9308      	str	r3, [sp, #32]
 800938a:	f000 fd83 	bl	8009e94 <__mcmp>
 800938e:	463a      	mov	r2, r7
 8009390:	4681      	mov	r9, r0
 8009392:	4631      	mov	r1, r6
 8009394:	4620      	mov	r0, r4
 8009396:	f000 fd99 	bl	8009ecc <__mdiff>
 800939a:	68c2      	ldr	r2, [r0, #12]
 800939c:	9b08      	ldr	r3, [sp, #32]
 800939e:	4605      	mov	r5, r0
 80093a0:	bb02      	cbnz	r2, 80093e4 <_dtoa_r+0xa7c>
 80093a2:	4601      	mov	r1, r0
 80093a4:	4658      	mov	r0, fp
 80093a6:	f000 fd75 	bl	8009e94 <__mcmp>
 80093aa:	9b08      	ldr	r3, [sp, #32]
 80093ac:	4602      	mov	r2, r0
 80093ae:	4629      	mov	r1, r5
 80093b0:	4620      	mov	r0, r4
 80093b2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80093b6:	f000 fb2f 	bl	8009a18 <_Bfree>
 80093ba:	9b05      	ldr	r3, [sp, #20]
 80093bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80093be:	9d01      	ldr	r5, [sp, #4]
 80093c0:	ea43 0102 	orr.w	r1, r3, r2
 80093c4:	9b06      	ldr	r3, [sp, #24]
 80093c6:	430b      	orrs	r3, r1
 80093c8:	9b08      	ldr	r3, [sp, #32]
 80093ca:	d10d      	bne.n	80093e8 <_dtoa_r+0xa80>
 80093cc:	2b39      	cmp	r3, #57	; 0x39
 80093ce:	d029      	beq.n	8009424 <_dtoa_r+0xabc>
 80093d0:	f1b9 0f00 	cmp.w	r9, #0
 80093d4:	dd01      	ble.n	80093da <_dtoa_r+0xa72>
 80093d6:	9b04      	ldr	r3, [sp, #16]
 80093d8:	3331      	adds	r3, #49	; 0x31
 80093da:	9a02      	ldr	r2, [sp, #8]
 80093dc:	7013      	strb	r3, [r2, #0]
 80093de:	e774      	b.n	80092ca <_dtoa_r+0x962>
 80093e0:	4638      	mov	r0, r7
 80093e2:	e7b9      	b.n	8009358 <_dtoa_r+0x9f0>
 80093e4:	2201      	movs	r2, #1
 80093e6:	e7e2      	b.n	80093ae <_dtoa_r+0xa46>
 80093e8:	f1b9 0f00 	cmp.w	r9, #0
 80093ec:	db06      	blt.n	80093fc <_dtoa_r+0xa94>
 80093ee:	9905      	ldr	r1, [sp, #20]
 80093f0:	ea41 0909 	orr.w	r9, r1, r9
 80093f4:	9906      	ldr	r1, [sp, #24]
 80093f6:	ea59 0101 	orrs.w	r1, r9, r1
 80093fa:	d120      	bne.n	800943e <_dtoa_r+0xad6>
 80093fc:	2a00      	cmp	r2, #0
 80093fe:	ddec      	ble.n	80093da <_dtoa_r+0xa72>
 8009400:	4659      	mov	r1, fp
 8009402:	2201      	movs	r2, #1
 8009404:	4620      	mov	r0, r4
 8009406:	9301      	str	r3, [sp, #4]
 8009408:	f000 fcd8 	bl	8009dbc <__lshift>
 800940c:	4631      	mov	r1, r6
 800940e:	4683      	mov	fp, r0
 8009410:	f000 fd40 	bl	8009e94 <__mcmp>
 8009414:	2800      	cmp	r0, #0
 8009416:	9b01      	ldr	r3, [sp, #4]
 8009418:	dc02      	bgt.n	8009420 <_dtoa_r+0xab8>
 800941a:	d1de      	bne.n	80093da <_dtoa_r+0xa72>
 800941c:	07da      	lsls	r2, r3, #31
 800941e:	d5dc      	bpl.n	80093da <_dtoa_r+0xa72>
 8009420:	2b39      	cmp	r3, #57	; 0x39
 8009422:	d1d8      	bne.n	80093d6 <_dtoa_r+0xa6e>
 8009424:	9a02      	ldr	r2, [sp, #8]
 8009426:	2339      	movs	r3, #57	; 0x39
 8009428:	7013      	strb	r3, [r2, #0]
 800942a:	462b      	mov	r3, r5
 800942c:	461d      	mov	r5, r3
 800942e:	3b01      	subs	r3, #1
 8009430:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009434:	2a39      	cmp	r2, #57	; 0x39
 8009436:	d050      	beq.n	80094da <_dtoa_r+0xb72>
 8009438:	3201      	adds	r2, #1
 800943a:	701a      	strb	r2, [r3, #0]
 800943c:	e745      	b.n	80092ca <_dtoa_r+0x962>
 800943e:	2a00      	cmp	r2, #0
 8009440:	dd03      	ble.n	800944a <_dtoa_r+0xae2>
 8009442:	2b39      	cmp	r3, #57	; 0x39
 8009444:	d0ee      	beq.n	8009424 <_dtoa_r+0xabc>
 8009446:	3301      	adds	r3, #1
 8009448:	e7c7      	b.n	80093da <_dtoa_r+0xa72>
 800944a:	9a01      	ldr	r2, [sp, #4]
 800944c:	9907      	ldr	r1, [sp, #28]
 800944e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009452:	428a      	cmp	r2, r1
 8009454:	d02a      	beq.n	80094ac <_dtoa_r+0xb44>
 8009456:	4659      	mov	r1, fp
 8009458:	2300      	movs	r3, #0
 800945a:	220a      	movs	r2, #10
 800945c:	4620      	mov	r0, r4
 800945e:	f000 fafd 	bl	8009a5c <__multadd>
 8009462:	45b8      	cmp	r8, r7
 8009464:	4683      	mov	fp, r0
 8009466:	f04f 0300 	mov.w	r3, #0
 800946a:	f04f 020a 	mov.w	r2, #10
 800946e:	4641      	mov	r1, r8
 8009470:	4620      	mov	r0, r4
 8009472:	d107      	bne.n	8009484 <_dtoa_r+0xb1c>
 8009474:	f000 faf2 	bl	8009a5c <__multadd>
 8009478:	4680      	mov	r8, r0
 800947a:	4607      	mov	r7, r0
 800947c:	9b01      	ldr	r3, [sp, #4]
 800947e:	3301      	adds	r3, #1
 8009480:	9301      	str	r3, [sp, #4]
 8009482:	e775      	b.n	8009370 <_dtoa_r+0xa08>
 8009484:	f000 faea 	bl	8009a5c <__multadd>
 8009488:	4639      	mov	r1, r7
 800948a:	4680      	mov	r8, r0
 800948c:	2300      	movs	r3, #0
 800948e:	220a      	movs	r2, #10
 8009490:	4620      	mov	r0, r4
 8009492:	f000 fae3 	bl	8009a5c <__multadd>
 8009496:	4607      	mov	r7, r0
 8009498:	e7f0      	b.n	800947c <_dtoa_r+0xb14>
 800949a:	f1b9 0f00 	cmp.w	r9, #0
 800949e:	9a00      	ldr	r2, [sp, #0]
 80094a0:	bfcc      	ite	gt
 80094a2:	464d      	movgt	r5, r9
 80094a4:	2501      	movle	r5, #1
 80094a6:	4415      	add	r5, r2
 80094a8:	f04f 0800 	mov.w	r8, #0
 80094ac:	4659      	mov	r1, fp
 80094ae:	2201      	movs	r2, #1
 80094b0:	4620      	mov	r0, r4
 80094b2:	9301      	str	r3, [sp, #4]
 80094b4:	f000 fc82 	bl	8009dbc <__lshift>
 80094b8:	4631      	mov	r1, r6
 80094ba:	4683      	mov	fp, r0
 80094bc:	f000 fcea 	bl	8009e94 <__mcmp>
 80094c0:	2800      	cmp	r0, #0
 80094c2:	dcb2      	bgt.n	800942a <_dtoa_r+0xac2>
 80094c4:	d102      	bne.n	80094cc <_dtoa_r+0xb64>
 80094c6:	9b01      	ldr	r3, [sp, #4]
 80094c8:	07db      	lsls	r3, r3, #31
 80094ca:	d4ae      	bmi.n	800942a <_dtoa_r+0xac2>
 80094cc:	462b      	mov	r3, r5
 80094ce:	461d      	mov	r5, r3
 80094d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80094d4:	2a30      	cmp	r2, #48	; 0x30
 80094d6:	d0fa      	beq.n	80094ce <_dtoa_r+0xb66>
 80094d8:	e6f7      	b.n	80092ca <_dtoa_r+0x962>
 80094da:	9a00      	ldr	r2, [sp, #0]
 80094dc:	429a      	cmp	r2, r3
 80094de:	d1a5      	bne.n	800942c <_dtoa_r+0xac4>
 80094e0:	f10a 0a01 	add.w	sl, sl, #1
 80094e4:	2331      	movs	r3, #49	; 0x31
 80094e6:	e779      	b.n	80093dc <_dtoa_r+0xa74>
 80094e8:	4b13      	ldr	r3, [pc, #76]	; (8009538 <_dtoa_r+0xbd0>)
 80094ea:	f7ff baaf 	b.w	8008a4c <_dtoa_r+0xe4>
 80094ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	f47f aa86 	bne.w	8008a02 <_dtoa_r+0x9a>
 80094f6:	4b11      	ldr	r3, [pc, #68]	; (800953c <_dtoa_r+0xbd4>)
 80094f8:	f7ff baa8 	b.w	8008a4c <_dtoa_r+0xe4>
 80094fc:	f1b9 0f00 	cmp.w	r9, #0
 8009500:	dc03      	bgt.n	800950a <_dtoa_r+0xba2>
 8009502:	9b05      	ldr	r3, [sp, #20]
 8009504:	2b02      	cmp	r3, #2
 8009506:	f73f aec9 	bgt.w	800929c <_dtoa_r+0x934>
 800950a:	9d00      	ldr	r5, [sp, #0]
 800950c:	4631      	mov	r1, r6
 800950e:	4658      	mov	r0, fp
 8009510:	f7ff f99c 	bl	800884c <quorem>
 8009514:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009518:	f805 3b01 	strb.w	r3, [r5], #1
 800951c:	9a00      	ldr	r2, [sp, #0]
 800951e:	1aaa      	subs	r2, r5, r2
 8009520:	4591      	cmp	r9, r2
 8009522:	ddba      	ble.n	800949a <_dtoa_r+0xb32>
 8009524:	4659      	mov	r1, fp
 8009526:	2300      	movs	r3, #0
 8009528:	220a      	movs	r2, #10
 800952a:	4620      	mov	r0, r4
 800952c:	f000 fa96 	bl	8009a5c <__multadd>
 8009530:	4683      	mov	fp, r0
 8009532:	e7eb      	b.n	800950c <_dtoa_r+0xba4>
 8009534:	0800ab7b 	.word	0x0800ab7b
 8009538:	0800aad4 	.word	0x0800aad4
 800953c:	0800aaf8 	.word	0x0800aaf8

08009540 <__sflush_r>:
 8009540:	898a      	ldrh	r2, [r1, #12]
 8009542:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009546:	4605      	mov	r5, r0
 8009548:	0710      	lsls	r0, r2, #28
 800954a:	460c      	mov	r4, r1
 800954c:	d458      	bmi.n	8009600 <__sflush_r+0xc0>
 800954e:	684b      	ldr	r3, [r1, #4]
 8009550:	2b00      	cmp	r3, #0
 8009552:	dc05      	bgt.n	8009560 <__sflush_r+0x20>
 8009554:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009556:	2b00      	cmp	r3, #0
 8009558:	dc02      	bgt.n	8009560 <__sflush_r+0x20>
 800955a:	2000      	movs	r0, #0
 800955c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009560:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009562:	2e00      	cmp	r6, #0
 8009564:	d0f9      	beq.n	800955a <__sflush_r+0x1a>
 8009566:	2300      	movs	r3, #0
 8009568:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800956c:	682f      	ldr	r7, [r5, #0]
 800956e:	602b      	str	r3, [r5, #0]
 8009570:	d032      	beq.n	80095d8 <__sflush_r+0x98>
 8009572:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009574:	89a3      	ldrh	r3, [r4, #12]
 8009576:	075a      	lsls	r2, r3, #29
 8009578:	d505      	bpl.n	8009586 <__sflush_r+0x46>
 800957a:	6863      	ldr	r3, [r4, #4]
 800957c:	1ac0      	subs	r0, r0, r3
 800957e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009580:	b10b      	cbz	r3, 8009586 <__sflush_r+0x46>
 8009582:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009584:	1ac0      	subs	r0, r0, r3
 8009586:	2300      	movs	r3, #0
 8009588:	4602      	mov	r2, r0
 800958a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800958c:	6a21      	ldr	r1, [r4, #32]
 800958e:	4628      	mov	r0, r5
 8009590:	47b0      	blx	r6
 8009592:	1c43      	adds	r3, r0, #1
 8009594:	89a3      	ldrh	r3, [r4, #12]
 8009596:	d106      	bne.n	80095a6 <__sflush_r+0x66>
 8009598:	6829      	ldr	r1, [r5, #0]
 800959a:	291d      	cmp	r1, #29
 800959c:	d82c      	bhi.n	80095f8 <__sflush_r+0xb8>
 800959e:	4a2a      	ldr	r2, [pc, #168]	; (8009648 <__sflush_r+0x108>)
 80095a0:	40ca      	lsrs	r2, r1
 80095a2:	07d6      	lsls	r6, r2, #31
 80095a4:	d528      	bpl.n	80095f8 <__sflush_r+0xb8>
 80095a6:	2200      	movs	r2, #0
 80095a8:	6062      	str	r2, [r4, #4]
 80095aa:	04d9      	lsls	r1, r3, #19
 80095ac:	6922      	ldr	r2, [r4, #16]
 80095ae:	6022      	str	r2, [r4, #0]
 80095b0:	d504      	bpl.n	80095bc <__sflush_r+0x7c>
 80095b2:	1c42      	adds	r2, r0, #1
 80095b4:	d101      	bne.n	80095ba <__sflush_r+0x7a>
 80095b6:	682b      	ldr	r3, [r5, #0]
 80095b8:	b903      	cbnz	r3, 80095bc <__sflush_r+0x7c>
 80095ba:	6560      	str	r0, [r4, #84]	; 0x54
 80095bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80095be:	602f      	str	r7, [r5, #0]
 80095c0:	2900      	cmp	r1, #0
 80095c2:	d0ca      	beq.n	800955a <__sflush_r+0x1a>
 80095c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80095c8:	4299      	cmp	r1, r3
 80095ca:	d002      	beq.n	80095d2 <__sflush_r+0x92>
 80095cc:	4628      	mov	r0, r5
 80095ce:	f000 fd71 	bl	800a0b4 <_free_r>
 80095d2:	2000      	movs	r0, #0
 80095d4:	6360      	str	r0, [r4, #52]	; 0x34
 80095d6:	e7c1      	b.n	800955c <__sflush_r+0x1c>
 80095d8:	6a21      	ldr	r1, [r4, #32]
 80095da:	2301      	movs	r3, #1
 80095dc:	4628      	mov	r0, r5
 80095de:	47b0      	blx	r6
 80095e0:	1c41      	adds	r1, r0, #1
 80095e2:	d1c7      	bne.n	8009574 <__sflush_r+0x34>
 80095e4:	682b      	ldr	r3, [r5, #0]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d0c4      	beq.n	8009574 <__sflush_r+0x34>
 80095ea:	2b1d      	cmp	r3, #29
 80095ec:	d001      	beq.n	80095f2 <__sflush_r+0xb2>
 80095ee:	2b16      	cmp	r3, #22
 80095f0:	d101      	bne.n	80095f6 <__sflush_r+0xb6>
 80095f2:	602f      	str	r7, [r5, #0]
 80095f4:	e7b1      	b.n	800955a <__sflush_r+0x1a>
 80095f6:	89a3      	ldrh	r3, [r4, #12]
 80095f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095fc:	81a3      	strh	r3, [r4, #12]
 80095fe:	e7ad      	b.n	800955c <__sflush_r+0x1c>
 8009600:	690f      	ldr	r7, [r1, #16]
 8009602:	2f00      	cmp	r7, #0
 8009604:	d0a9      	beq.n	800955a <__sflush_r+0x1a>
 8009606:	0793      	lsls	r3, r2, #30
 8009608:	680e      	ldr	r6, [r1, #0]
 800960a:	bf08      	it	eq
 800960c:	694b      	ldreq	r3, [r1, #20]
 800960e:	600f      	str	r7, [r1, #0]
 8009610:	bf18      	it	ne
 8009612:	2300      	movne	r3, #0
 8009614:	eba6 0807 	sub.w	r8, r6, r7
 8009618:	608b      	str	r3, [r1, #8]
 800961a:	f1b8 0f00 	cmp.w	r8, #0
 800961e:	dd9c      	ble.n	800955a <__sflush_r+0x1a>
 8009620:	6a21      	ldr	r1, [r4, #32]
 8009622:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009624:	4643      	mov	r3, r8
 8009626:	463a      	mov	r2, r7
 8009628:	4628      	mov	r0, r5
 800962a:	47b0      	blx	r6
 800962c:	2800      	cmp	r0, #0
 800962e:	dc06      	bgt.n	800963e <__sflush_r+0xfe>
 8009630:	89a3      	ldrh	r3, [r4, #12]
 8009632:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009636:	81a3      	strh	r3, [r4, #12]
 8009638:	f04f 30ff 	mov.w	r0, #4294967295
 800963c:	e78e      	b.n	800955c <__sflush_r+0x1c>
 800963e:	4407      	add	r7, r0
 8009640:	eba8 0800 	sub.w	r8, r8, r0
 8009644:	e7e9      	b.n	800961a <__sflush_r+0xda>
 8009646:	bf00      	nop
 8009648:	20400001 	.word	0x20400001

0800964c <_fflush_r>:
 800964c:	b538      	push	{r3, r4, r5, lr}
 800964e:	690b      	ldr	r3, [r1, #16]
 8009650:	4605      	mov	r5, r0
 8009652:	460c      	mov	r4, r1
 8009654:	b913      	cbnz	r3, 800965c <_fflush_r+0x10>
 8009656:	2500      	movs	r5, #0
 8009658:	4628      	mov	r0, r5
 800965a:	bd38      	pop	{r3, r4, r5, pc}
 800965c:	b118      	cbz	r0, 8009666 <_fflush_r+0x1a>
 800965e:	6983      	ldr	r3, [r0, #24]
 8009660:	b90b      	cbnz	r3, 8009666 <_fflush_r+0x1a>
 8009662:	f000 f887 	bl	8009774 <__sinit>
 8009666:	4b14      	ldr	r3, [pc, #80]	; (80096b8 <_fflush_r+0x6c>)
 8009668:	429c      	cmp	r4, r3
 800966a:	d11b      	bne.n	80096a4 <_fflush_r+0x58>
 800966c:	686c      	ldr	r4, [r5, #4]
 800966e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d0ef      	beq.n	8009656 <_fflush_r+0xa>
 8009676:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009678:	07d0      	lsls	r0, r2, #31
 800967a:	d404      	bmi.n	8009686 <_fflush_r+0x3a>
 800967c:	0599      	lsls	r1, r3, #22
 800967e:	d402      	bmi.n	8009686 <_fflush_r+0x3a>
 8009680:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009682:	f000 f91a 	bl	80098ba <__retarget_lock_acquire_recursive>
 8009686:	4628      	mov	r0, r5
 8009688:	4621      	mov	r1, r4
 800968a:	f7ff ff59 	bl	8009540 <__sflush_r>
 800968e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009690:	07da      	lsls	r2, r3, #31
 8009692:	4605      	mov	r5, r0
 8009694:	d4e0      	bmi.n	8009658 <_fflush_r+0xc>
 8009696:	89a3      	ldrh	r3, [r4, #12]
 8009698:	059b      	lsls	r3, r3, #22
 800969a:	d4dd      	bmi.n	8009658 <_fflush_r+0xc>
 800969c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800969e:	f000 f90d 	bl	80098bc <__retarget_lock_release_recursive>
 80096a2:	e7d9      	b.n	8009658 <_fflush_r+0xc>
 80096a4:	4b05      	ldr	r3, [pc, #20]	; (80096bc <_fflush_r+0x70>)
 80096a6:	429c      	cmp	r4, r3
 80096a8:	d101      	bne.n	80096ae <_fflush_r+0x62>
 80096aa:	68ac      	ldr	r4, [r5, #8]
 80096ac:	e7df      	b.n	800966e <_fflush_r+0x22>
 80096ae:	4b04      	ldr	r3, [pc, #16]	; (80096c0 <_fflush_r+0x74>)
 80096b0:	429c      	cmp	r4, r3
 80096b2:	bf08      	it	eq
 80096b4:	68ec      	ldreq	r4, [r5, #12]
 80096b6:	e7da      	b.n	800966e <_fflush_r+0x22>
 80096b8:	0800abac 	.word	0x0800abac
 80096bc:	0800abcc 	.word	0x0800abcc
 80096c0:	0800ab8c 	.word	0x0800ab8c

080096c4 <std>:
 80096c4:	2300      	movs	r3, #0
 80096c6:	b510      	push	{r4, lr}
 80096c8:	4604      	mov	r4, r0
 80096ca:	e9c0 3300 	strd	r3, r3, [r0]
 80096ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80096d2:	6083      	str	r3, [r0, #8]
 80096d4:	8181      	strh	r1, [r0, #12]
 80096d6:	6643      	str	r3, [r0, #100]	; 0x64
 80096d8:	81c2      	strh	r2, [r0, #14]
 80096da:	6183      	str	r3, [r0, #24]
 80096dc:	4619      	mov	r1, r3
 80096de:	2208      	movs	r2, #8
 80096e0:	305c      	adds	r0, #92	; 0x5c
 80096e2:	f7fe faf3 	bl	8007ccc <memset>
 80096e6:	4b05      	ldr	r3, [pc, #20]	; (80096fc <std+0x38>)
 80096e8:	6263      	str	r3, [r4, #36]	; 0x24
 80096ea:	4b05      	ldr	r3, [pc, #20]	; (8009700 <std+0x3c>)
 80096ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80096ee:	4b05      	ldr	r3, [pc, #20]	; (8009704 <std+0x40>)
 80096f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80096f2:	4b05      	ldr	r3, [pc, #20]	; (8009708 <std+0x44>)
 80096f4:	6224      	str	r4, [r4, #32]
 80096f6:	6323      	str	r3, [r4, #48]	; 0x30
 80096f8:	bd10      	pop	{r4, pc}
 80096fa:	bf00      	nop
 80096fc:	0800a4dd 	.word	0x0800a4dd
 8009700:	0800a4ff 	.word	0x0800a4ff
 8009704:	0800a537 	.word	0x0800a537
 8009708:	0800a55b 	.word	0x0800a55b

0800970c <_cleanup_r>:
 800970c:	4901      	ldr	r1, [pc, #4]	; (8009714 <_cleanup_r+0x8>)
 800970e:	f000 b8af 	b.w	8009870 <_fwalk_reent>
 8009712:	bf00      	nop
 8009714:	0800964d 	.word	0x0800964d

08009718 <__sfmoreglue>:
 8009718:	b570      	push	{r4, r5, r6, lr}
 800971a:	1e4a      	subs	r2, r1, #1
 800971c:	2568      	movs	r5, #104	; 0x68
 800971e:	4355      	muls	r5, r2
 8009720:	460e      	mov	r6, r1
 8009722:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009726:	f000 fd15 	bl	800a154 <_malloc_r>
 800972a:	4604      	mov	r4, r0
 800972c:	b140      	cbz	r0, 8009740 <__sfmoreglue+0x28>
 800972e:	2100      	movs	r1, #0
 8009730:	e9c0 1600 	strd	r1, r6, [r0]
 8009734:	300c      	adds	r0, #12
 8009736:	60a0      	str	r0, [r4, #8]
 8009738:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800973c:	f7fe fac6 	bl	8007ccc <memset>
 8009740:	4620      	mov	r0, r4
 8009742:	bd70      	pop	{r4, r5, r6, pc}

08009744 <__sfp_lock_acquire>:
 8009744:	4801      	ldr	r0, [pc, #4]	; (800974c <__sfp_lock_acquire+0x8>)
 8009746:	f000 b8b8 	b.w	80098ba <__retarget_lock_acquire_recursive>
 800974a:	bf00      	nop
 800974c:	20005228 	.word	0x20005228

08009750 <__sfp_lock_release>:
 8009750:	4801      	ldr	r0, [pc, #4]	; (8009758 <__sfp_lock_release+0x8>)
 8009752:	f000 b8b3 	b.w	80098bc <__retarget_lock_release_recursive>
 8009756:	bf00      	nop
 8009758:	20005228 	.word	0x20005228

0800975c <__sinit_lock_acquire>:
 800975c:	4801      	ldr	r0, [pc, #4]	; (8009764 <__sinit_lock_acquire+0x8>)
 800975e:	f000 b8ac 	b.w	80098ba <__retarget_lock_acquire_recursive>
 8009762:	bf00      	nop
 8009764:	20005223 	.word	0x20005223

08009768 <__sinit_lock_release>:
 8009768:	4801      	ldr	r0, [pc, #4]	; (8009770 <__sinit_lock_release+0x8>)
 800976a:	f000 b8a7 	b.w	80098bc <__retarget_lock_release_recursive>
 800976e:	bf00      	nop
 8009770:	20005223 	.word	0x20005223

08009774 <__sinit>:
 8009774:	b510      	push	{r4, lr}
 8009776:	4604      	mov	r4, r0
 8009778:	f7ff fff0 	bl	800975c <__sinit_lock_acquire>
 800977c:	69a3      	ldr	r3, [r4, #24]
 800977e:	b11b      	cbz	r3, 8009788 <__sinit+0x14>
 8009780:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009784:	f7ff bff0 	b.w	8009768 <__sinit_lock_release>
 8009788:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800978c:	6523      	str	r3, [r4, #80]	; 0x50
 800978e:	4b13      	ldr	r3, [pc, #76]	; (80097dc <__sinit+0x68>)
 8009790:	4a13      	ldr	r2, [pc, #76]	; (80097e0 <__sinit+0x6c>)
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	62a2      	str	r2, [r4, #40]	; 0x28
 8009796:	42a3      	cmp	r3, r4
 8009798:	bf04      	itt	eq
 800979a:	2301      	moveq	r3, #1
 800979c:	61a3      	streq	r3, [r4, #24]
 800979e:	4620      	mov	r0, r4
 80097a0:	f000 f820 	bl	80097e4 <__sfp>
 80097a4:	6060      	str	r0, [r4, #4]
 80097a6:	4620      	mov	r0, r4
 80097a8:	f000 f81c 	bl	80097e4 <__sfp>
 80097ac:	60a0      	str	r0, [r4, #8]
 80097ae:	4620      	mov	r0, r4
 80097b0:	f000 f818 	bl	80097e4 <__sfp>
 80097b4:	2200      	movs	r2, #0
 80097b6:	60e0      	str	r0, [r4, #12]
 80097b8:	2104      	movs	r1, #4
 80097ba:	6860      	ldr	r0, [r4, #4]
 80097bc:	f7ff ff82 	bl	80096c4 <std>
 80097c0:	68a0      	ldr	r0, [r4, #8]
 80097c2:	2201      	movs	r2, #1
 80097c4:	2109      	movs	r1, #9
 80097c6:	f7ff ff7d 	bl	80096c4 <std>
 80097ca:	68e0      	ldr	r0, [r4, #12]
 80097cc:	2202      	movs	r2, #2
 80097ce:	2112      	movs	r1, #18
 80097d0:	f7ff ff78 	bl	80096c4 <std>
 80097d4:	2301      	movs	r3, #1
 80097d6:	61a3      	str	r3, [r4, #24]
 80097d8:	e7d2      	b.n	8009780 <__sinit+0xc>
 80097da:	bf00      	nop
 80097dc:	0800aac0 	.word	0x0800aac0
 80097e0:	0800970d 	.word	0x0800970d

080097e4 <__sfp>:
 80097e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097e6:	4607      	mov	r7, r0
 80097e8:	f7ff ffac 	bl	8009744 <__sfp_lock_acquire>
 80097ec:	4b1e      	ldr	r3, [pc, #120]	; (8009868 <__sfp+0x84>)
 80097ee:	681e      	ldr	r6, [r3, #0]
 80097f0:	69b3      	ldr	r3, [r6, #24]
 80097f2:	b913      	cbnz	r3, 80097fa <__sfp+0x16>
 80097f4:	4630      	mov	r0, r6
 80097f6:	f7ff ffbd 	bl	8009774 <__sinit>
 80097fa:	3648      	adds	r6, #72	; 0x48
 80097fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009800:	3b01      	subs	r3, #1
 8009802:	d503      	bpl.n	800980c <__sfp+0x28>
 8009804:	6833      	ldr	r3, [r6, #0]
 8009806:	b30b      	cbz	r3, 800984c <__sfp+0x68>
 8009808:	6836      	ldr	r6, [r6, #0]
 800980a:	e7f7      	b.n	80097fc <__sfp+0x18>
 800980c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009810:	b9d5      	cbnz	r5, 8009848 <__sfp+0x64>
 8009812:	4b16      	ldr	r3, [pc, #88]	; (800986c <__sfp+0x88>)
 8009814:	60e3      	str	r3, [r4, #12]
 8009816:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800981a:	6665      	str	r5, [r4, #100]	; 0x64
 800981c:	f000 f84c 	bl	80098b8 <__retarget_lock_init_recursive>
 8009820:	f7ff ff96 	bl	8009750 <__sfp_lock_release>
 8009824:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009828:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800982c:	6025      	str	r5, [r4, #0]
 800982e:	61a5      	str	r5, [r4, #24]
 8009830:	2208      	movs	r2, #8
 8009832:	4629      	mov	r1, r5
 8009834:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009838:	f7fe fa48 	bl	8007ccc <memset>
 800983c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009840:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009844:	4620      	mov	r0, r4
 8009846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009848:	3468      	adds	r4, #104	; 0x68
 800984a:	e7d9      	b.n	8009800 <__sfp+0x1c>
 800984c:	2104      	movs	r1, #4
 800984e:	4638      	mov	r0, r7
 8009850:	f7ff ff62 	bl	8009718 <__sfmoreglue>
 8009854:	4604      	mov	r4, r0
 8009856:	6030      	str	r0, [r6, #0]
 8009858:	2800      	cmp	r0, #0
 800985a:	d1d5      	bne.n	8009808 <__sfp+0x24>
 800985c:	f7ff ff78 	bl	8009750 <__sfp_lock_release>
 8009860:	230c      	movs	r3, #12
 8009862:	603b      	str	r3, [r7, #0]
 8009864:	e7ee      	b.n	8009844 <__sfp+0x60>
 8009866:	bf00      	nop
 8009868:	0800aac0 	.word	0x0800aac0
 800986c:	ffff0001 	.word	0xffff0001

08009870 <_fwalk_reent>:
 8009870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009874:	4606      	mov	r6, r0
 8009876:	4688      	mov	r8, r1
 8009878:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800987c:	2700      	movs	r7, #0
 800987e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009882:	f1b9 0901 	subs.w	r9, r9, #1
 8009886:	d505      	bpl.n	8009894 <_fwalk_reent+0x24>
 8009888:	6824      	ldr	r4, [r4, #0]
 800988a:	2c00      	cmp	r4, #0
 800988c:	d1f7      	bne.n	800987e <_fwalk_reent+0xe>
 800988e:	4638      	mov	r0, r7
 8009890:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009894:	89ab      	ldrh	r3, [r5, #12]
 8009896:	2b01      	cmp	r3, #1
 8009898:	d907      	bls.n	80098aa <_fwalk_reent+0x3a>
 800989a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800989e:	3301      	adds	r3, #1
 80098a0:	d003      	beq.n	80098aa <_fwalk_reent+0x3a>
 80098a2:	4629      	mov	r1, r5
 80098a4:	4630      	mov	r0, r6
 80098a6:	47c0      	blx	r8
 80098a8:	4307      	orrs	r7, r0
 80098aa:	3568      	adds	r5, #104	; 0x68
 80098ac:	e7e9      	b.n	8009882 <_fwalk_reent+0x12>
	...

080098b0 <_localeconv_r>:
 80098b0:	4800      	ldr	r0, [pc, #0]	; (80098b4 <_localeconv_r+0x4>)
 80098b2:	4770      	bx	lr
 80098b4:	20000164 	.word	0x20000164

080098b8 <__retarget_lock_init_recursive>:
 80098b8:	4770      	bx	lr

080098ba <__retarget_lock_acquire_recursive>:
 80098ba:	4770      	bx	lr

080098bc <__retarget_lock_release_recursive>:
 80098bc:	4770      	bx	lr

080098be <__swhatbuf_r>:
 80098be:	b570      	push	{r4, r5, r6, lr}
 80098c0:	460e      	mov	r6, r1
 80098c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098c6:	2900      	cmp	r1, #0
 80098c8:	b096      	sub	sp, #88	; 0x58
 80098ca:	4614      	mov	r4, r2
 80098cc:	461d      	mov	r5, r3
 80098ce:	da07      	bge.n	80098e0 <__swhatbuf_r+0x22>
 80098d0:	2300      	movs	r3, #0
 80098d2:	602b      	str	r3, [r5, #0]
 80098d4:	89b3      	ldrh	r3, [r6, #12]
 80098d6:	061a      	lsls	r2, r3, #24
 80098d8:	d410      	bmi.n	80098fc <__swhatbuf_r+0x3e>
 80098da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80098de:	e00e      	b.n	80098fe <__swhatbuf_r+0x40>
 80098e0:	466a      	mov	r2, sp
 80098e2:	f000 fe91 	bl	800a608 <_fstat_r>
 80098e6:	2800      	cmp	r0, #0
 80098e8:	dbf2      	blt.n	80098d0 <__swhatbuf_r+0x12>
 80098ea:	9a01      	ldr	r2, [sp, #4]
 80098ec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80098f0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80098f4:	425a      	negs	r2, r3
 80098f6:	415a      	adcs	r2, r3
 80098f8:	602a      	str	r2, [r5, #0]
 80098fa:	e7ee      	b.n	80098da <__swhatbuf_r+0x1c>
 80098fc:	2340      	movs	r3, #64	; 0x40
 80098fe:	2000      	movs	r0, #0
 8009900:	6023      	str	r3, [r4, #0]
 8009902:	b016      	add	sp, #88	; 0x58
 8009904:	bd70      	pop	{r4, r5, r6, pc}
	...

08009908 <__smakebuf_r>:
 8009908:	898b      	ldrh	r3, [r1, #12]
 800990a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800990c:	079d      	lsls	r5, r3, #30
 800990e:	4606      	mov	r6, r0
 8009910:	460c      	mov	r4, r1
 8009912:	d507      	bpl.n	8009924 <__smakebuf_r+0x1c>
 8009914:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009918:	6023      	str	r3, [r4, #0]
 800991a:	6123      	str	r3, [r4, #16]
 800991c:	2301      	movs	r3, #1
 800991e:	6163      	str	r3, [r4, #20]
 8009920:	b002      	add	sp, #8
 8009922:	bd70      	pop	{r4, r5, r6, pc}
 8009924:	ab01      	add	r3, sp, #4
 8009926:	466a      	mov	r2, sp
 8009928:	f7ff ffc9 	bl	80098be <__swhatbuf_r>
 800992c:	9900      	ldr	r1, [sp, #0]
 800992e:	4605      	mov	r5, r0
 8009930:	4630      	mov	r0, r6
 8009932:	f000 fc0f 	bl	800a154 <_malloc_r>
 8009936:	b948      	cbnz	r0, 800994c <__smakebuf_r+0x44>
 8009938:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800993c:	059a      	lsls	r2, r3, #22
 800993e:	d4ef      	bmi.n	8009920 <__smakebuf_r+0x18>
 8009940:	f023 0303 	bic.w	r3, r3, #3
 8009944:	f043 0302 	orr.w	r3, r3, #2
 8009948:	81a3      	strh	r3, [r4, #12]
 800994a:	e7e3      	b.n	8009914 <__smakebuf_r+0xc>
 800994c:	4b0d      	ldr	r3, [pc, #52]	; (8009984 <__smakebuf_r+0x7c>)
 800994e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009950:	89a3      	ldrh	r3, [r4, #12]
 8009952:	6020      	str	r0, [r4, #0]
 8009954:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009958:	81a3      	strh	r3, [r4, #12]
 800995a:	9b00      	ldr	r3, [sp, #0]
 800995c:	6163      	str	r3, [r4, #20]
 800995e:	9b01      	ldr	r3, [sp, #4]
 8009960:	6120      	str	r0, [r4, #16]
 8009962:	b15b      	cbz	r3, 800997c <__smakebuf_r+0x74>
 8009964:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009968:	4630      	mov	r0, r6
 800996a:	f000 fe5f 	bl	800a62c <_isatty_r>
 800996e:	b128      	cbz	r0, 800997c <__smakebuf_r+0x74>
 8009970:	89a3      	ldrh	r3, [r4, #12]
 8009972:	f023 0303 	bic.w	r3, r3, #3
 8009976:	f043 0301 	orr.w	r3, r3, #1
 800997a:	81a3      	strh	r3, [r4, #12]
 800997c:	89a0      	ldrh	r0, [r4, #12]
 800997e:	4305      	orrs	r5, r0
 8009980:	81a5      	strh	r5, [r4, #12]
 8009982:	e7cd      	b.n	8009920 <__smakebuf_r+0x18>
 8009984:	0800970d 	.word	0x0800970d

08009988 <malloc>:
 8009988:	4b02      	ldr	r3, [pc, #8]	; (8009994 <malloc+0xc>)
 800998a:	4601      	mov	r1, r0
 800998c:	6818      	ldr	r0, [r3, #0]
 800998e:	f000 bbe1 	b.w	800a154 <_malloc_r>
 8009992:	bf00      	nop
 8009994:	20000010 	.word	0x20000010

08009998 <_Balloc>:
 8009998:	b570      	push	{r4, r5, r6, lr}
 800999a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800999c:	4604      	mov	r4, r0
 800999e:	460d      	mov	r5, r1
 80099a0:	b976      	cbnz	r6, 80099c0 <_Balloc+0x28>
 80099a2:	2010      	movs	r0, #16
 80099a4:	f7ff fff0 	bl	8009988 <malloc>
 80099a8:	4602      	mov	r2, r0
 80099aa:	6260      	str	r0, [r4, #36]	; 0x24
 80099ac:	b920      	cbnz	r0, 80099b8 <_Balloc+0x20>
 80099ae:	4b18      	ldr	r3, [pc, #96]	; (8009a10 <_Balloc+0x78>)
 80099b0:	4818      	ldr	r0, [pc, #96]	; (8009a14 <_Balloc+0x7c>)
 80099b2:	2166      	movs	r1, #102	; 0x66
 80099b4:	f000 fde8 	bl	800a588 <__assert_func>
 80099b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80099bc:	6006      	str	r6, [r0, #0]
 80099be:	60c6      	str	r6, [r0, #12]
 80099c0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80099c2:	68f3      	ldr	r3, [r6, #12]
 80099c4:	b183      	cbz	r3, 80099e8 <_Balloc+0x50>
 80099c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80099c8:	68db      	ldr	r3, [r3, #12]
 80099ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80099ce:	b9b8      	cbnz	r0, 8009a00 <_Balloc+0x68>
 80099d0:	2101      	movs	r1, #1
 80099d2:	fa01 f605 	lsl.w	r6, r1, r5
 80099d6:	1d72      	adds	r2, r6, #5
 80099d8:	0092      	lsls	r2, r2, #2
 80099da:	4620      	mov	r0, r4
 80099dc:	f000 fb5a 	bl	800a094 <_calloc_r>
 80099e0:	b160      	cbz	r0, 80099fc <_Balloc+0x64>
 80099e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80099e6:	e00e      	b.n	8009a06 <_Balloc+0x6e>
 80099e8:	2221      	movs	r2, #33	; 0x21
 80099ea:	2104      	movs	r1, #4
 80099ec:	4620      	mov	r0, r4
 80099ee:	f000 fb51 	bl	800a094 <_calloc_r>
 80099f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80099f4:	60f0      	str	r0, [r6, #12]
 80099f6:	68db      	ldr	r3, [r3, #12]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d1e4      	bne.n	80099c6 <_Balloc+0x2e>
 80099fc:	2000      	movs	r0, #0
 80099fe:	bd70      	pop	{r4, r5, r6, pc}
 8009a00:	6802      	ldr	r2, [r0, #0]
 8009a02:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009a06:	2300      	movs	r3, #0
 8009a08:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009a0c:	e7f7      	b.n	80099fe <_Balloc+0x66>
 8009a0e:	bf00      	nop
 8009a10:	0800ab05 	.word	0x0800ab05
 8009a14:	0800abec 	.word	0x0800abec

08009a18 <_Bfree>:
 8009a18:	b570      	push	{r4, r5, r6, lr}
 8009a1a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009a1c:	4605      	mov	r5, r0
 8009a1e:	460c      	mov	r4, r1
 8009a20:	b976      	cbnz	r6, 8009a40 <_Bfree+0x28>
 8009a22:	2010      	movs	r0, #16
 8009a24:	f7ff ffb0 	bl	8009988 <malloc>
 8009a28:	4602      	mov	r2, r0
 8009a2a:	6268      	str	r0, [r5, #36]	; 0x24
 8009a2c:	b920      	cbnz	r0, 8009a38 <_Bfree+0x20>
 8009a2e:	4b09      	ldr	r3, [pc, #36]	; (8009a54 <_Bfree+0x3c>)
 8009a30:	4809      	ldr	r0, [pc, #36]	; (8009a58 <_Bfree+0x40>)
 8009a32:	218a      	movs	r1, #138	; 0x8a
 8009a34:	f000 fda8 	bl	800a588 <__assert_func>
 8009a38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009a3c:	6006      	str	r6, [r0, #0]
 8009a3e:	60c6      	str	r6, [r0, #12]
 8009a40:	b13c      	cbz	r4, 8009a52 <_Bfree+0x3a>
 8009a42:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009a44:	6862      	ldr	r2, [r4, #4]
 8009a46:	68db      	ldr	r3, [r3, #12]
 8009a48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009a4c:	6021      	str	r1, [r4, #0]
 8009a4e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009a52:	bd70      	pop	{r4, r5, r6, pc}
 8009a54:	0800ab05 	.word	0x0800ab05
 8009a58:	0800abec 	.word	0x0800abec

08009a5c <__multadd>:
 8009a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a60:	690e      	ldr	r6, [r1, #16]
 8009a62:	4607      	mov	r7, r0
 8009a64:	4698      	mov	r8, r3
 8009a66:	460c      	mov	r4, r1
 8009a68:	f101 0014 	add.w	r0, r1, #20
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	6805      	ldr	r5, [r0, #0]
 8009a70:	b2a9      	uxth	r1, r5
 8009a72:	fb02 8101 	mla	r1, r2, r1, r8
 8009a76:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8009a7a:	0c2d      	lsrs	r5, r5, #16
 8009a7c:	fb02 c505 	mla	r5, r2, r5, ip
 8009a80:	b289      	uxth	r1, r1
 8009a82:	3301      	adds	r3, #1
 8009a84:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8009a88:	429e      	cmp	r6, r3
 8009a8a:	f840 1b04 	str.w	r1, [r0], #4
 8009a8e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8009a92:	dcec      	bgt.n	8009a6e <__multadd+0x12>
 8009a94:	f1b8 0f00 	cmp.w	r8, #0
 8009a98:	d022      	beq.n	8009ae0 <__multadd+0x84>
 8009a9a:	68a3      	ldr	r3, [r4, #8]
 8009a9c:	42b3      	cmp	r3, r6
 8009a9e:	dc19      	bgt.n	8009ad4 <__multadd+0x78>
 8009aa0:	6861      	ldr	r1, [r4, #4]
 8009aa2:	4638      	mov	r0, r7
 8009aa4:	3101      	adds	r1, #1
 8009aa6:	f7ff ff77 	bl	8009998 <_Balloc>
 8009aaa:	4605      	mov	r5, r0
 8009aac:	b928      	cbnz	r0, 8009aba <__multadd+0x5e>
 8009aae:	4602      	mov	r2, r0
 8009ab0:	4b0d      	ldr	r3, [pc, #52]	; (8009ae8 <__multadd+0x8c>)
 8009ab2:	480e      	ldr	r0, [pc, #56]	; (8009aec <__multadd+0x90>)
 8009ab4:	21b5      	movs	r1, #181	; 0xb5
 8009ab6:	f000 fd67 	bl	800a588 <__assert_func>
 8009aba:	6922      	ldr	r2, [r4, #16]
 8009abc:	3202      	adds	r2, #2
 8009abe:	f104 010c 	add.w	r1, r4, #12
 8009ac2:	0092      	lsls	r2, r2, #2
 8009ac4:	300c      	adds	r0, #12
 8009ac6:	f7fe f8f3 	bl	8007cb0 <memcpy>
 8009aca:	4621      	mov	r1, r4
 8009acc:	4638      	mov	r0, r7
 8009ace:	f7ff ffa3 	bl	8009a18 <_Bfree>
 8009ad2:	462c      	mov	r4, r5
 8009ad4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009ad8:	3601      	adds	r6, #1
 8009ada:	f8c3 8014 	str.w	r8, [r3, #20]
 8009ade:	6126      	str	r6, [r4, #16]
 8009ae0:	4620      	mov	r0, r4
 8009ae2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ae6:	bf00      	nop
 8009ae8:	0800ab7b 	.word	0x0800ab7b
 8009aec:	0800abec 	.word	0x0800abec

08009af0 <__hi0bits>:
 8009af0:	0c03      	lsrs	r3, r0, #16
 8009af2:	041b      	lsls	r3, r3, #16
 8009af4:	b9d3      	cbnz	r3, 8009b2c <__hi0bits+0x3c>
 8009af6:	0400      	lsls	r0, r0, #16
 8009af8:	2310      	movs	r3, #16
 8009afa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009afe:	bf04      	itt	eq
 8009b00:	0200      	lsleq	r0, r0, #8
 8009b02:	3308      	addeq	r3, #8
 8009b04:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009b08:	bf04      	itt	eq
 8009b0a:	0100      	lsleq	r0, r0, #4
 8009b0c:	3304      	addeq	r3, #4
 8009b0e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009b12:	bf04      	itt	eq
 8009b14:	0080      	lsleq	r0, r0, #2
 8009b16:	3302      	addeq	r3, #2
 8009b18:	2800      	cmp	r0, #0
 8009b1a:	db05      	blt.n	8009b28 <__hi0bits+0x38>
 8009b1c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009b20:	f103 0301 	add.w	r3, r3, #1
 8009b24:	bf08      	it	eq
 8009b26:	2320      	moveq	r3, #32
 8009b28:	4618      	mov	r0, r3
 8009b2a:	4770      	bx	lr
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	e7e4      	b.n	8009afa <__hi0bits+0xa>

08009b30 <__lo0bits>:
 8009b30:	6803      	ldr	r3, [r0, #0]
 8009b32:	f013 0207 	ands.w	r2, r3, #7
 8009b36:	4601      	mov	r1, r0
 8009b38:	d00b      	beq.n	8009b52 <__lo0bits+0x22>
 8009b3a:	07da      	lsls	r2, r3, #31
 8009b3c:	d424      	bmi.n	8009b88 <__lo0bits+0x58>
 8009b3e:	0798      	lsls	r0, r3, #30
 8009b40:	bf49      	itett	mi
 8009b42:	085b      	lsrmi	r3, r3, #1
 8009b44:	089b      	lsrpl	r3, r3, #2
 8009b46:	2001      	movmi	r0, #1
 8009b48:	600b      	strmi	r3, [r1, #0]
 8009b4a:	bf5c      	itt	pl
 8009b4c:	600b      	strpl	r3, [r1, #0]
 8009b4e:	2002      	movpl	r0, #2
 8009b50:	4770      	bx	lr
 8009b52:	b298      	uxth	r0, r3
 8009b54:	b9b0      	cbnz	r0, 8009b84 <__lo0bits+0x54>
 8009b56:	0c1b      	lsrs	r3, r3, #16
 8009b58:	2010      	movs	r0, #16
 8009b5a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009b5e:	bf04      	itt	eq
 8009b60:	0a1b      	lsreq	r3, r3, #8
 8009b62:	3008      	addeq	r0, #8
 8009b64:	071a      	lsls	r2, r3, #28
 8009b66:	bf04      	itt	eq
 8009b68:	091b      	lsreq	r3, r3, #4
 8009b6a:	3004      	addeq	r0, #4
 8009b6c:	079a      	lsls	r2, r3, #30
 8009b6e:	bf04      	itt	eq
 8009b70:	089b      	lsreq	r3, r3, #2
 8009b72:	3002      	addeq	r0, #2
 8009b74:	07da      	lsls	r2, r3, #31
 8009b76:	d403      	bmi.n	8009b80 <__lo0bits+0x50>
 8009b78:	085b      	lsrs	r3, r3, #1
 8009b7a:	f100 0001 	add.w	r0, r0, #1
 8009b7e:	d005      	beq.n	8009b8c <__lo0bits+0x5c>
 8009b80:	600b      	str	r3, [r1, #0]
 8009b82:	4770      	bx	lr
 8009b84:	4610      	mov	r0, r2
 8009b86:	e7e8      	b.n	8009b5a <__lo0bits+0x2a>
 8009b88:	2000      	movs	r0, #0
 8009b8a:	4770      	bx	lr
 8009b8c:	2020      	movs	r0, #32
 8009b8e:	4770      	bx	lr

08009b90 <__i2b>:
 8009b90:	b510      	push	{r4, lr}
 8009b92:	460c      	mov	r4, r1
 8009b94:	2101      	movs	r1, #1
 8009b96:	f7ff feff 	bl	8009998 <_Balloc>
 8009b9a:	4602      	mov	r2, r0
 8009b9c:	b928      	cbnz	r0, 8009baa <__i2b+0x1a>
 8009b9e:	4b05      	ldr	r3, [pc, #20]	; (8009bb4 <__i2b+0x24>)
 8009ba0:	4805      	ldr	r0, [pc, #20]	; (8009bb8 <__i2b+0x28>)
 8009ba2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009ba6:	f000 fcef 	bl	800a588 <__assert_func>
 8009baa:	2301      	movs	r3, #1
 8009bac:	6144      	str	r4, [r0, #20]
 8009bae:	6103      	str	r3, [r0, #16]
 8009bb0:	bd10      	pop	{r4, pc}
 8009bb2:	bf00      	nop
 8009bb4:	0800ab7b 	.word	0x0800ab7b
 8009bb8:	0800abec 	.word	0x0800abec

08009bbc <__multiply>:
 8009bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bc0:	4614      	mov	r4, r2
 8009bc2:	690a      	ldr	r2, [r1, #16]
 8009bc4:	6923      	ldr	r3, [r4, #16]
 8009bc6:	429a      	cmp	r2, r3
 8009bc8:	bfb8      	it	lt
 8009bca:	460b      	movlt	r3, r1
 8009bcc:	460d      	mov	r5, r1
 8009bce:	bfbc      	itt	lt
 8009bd0:	4625      	movlt	r5, r4
 8009bd2:	461c      	movlt	r4, r3
 8009bd4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8009bd8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009bdc:	68ab      	ldr	r3, [r5, #8]
 8009bde:	6869      	ldr	r1, [r5, #4]
 8009be0:	eb0a 0709 	add.w	r7, sl, r9
 8009be4:	42bb      	cmp	r3, r7
 8009be6:	b085      	sub	sp, #20
 8009be8:	bfb8      	it	lt
 8009bea:	3101      	addlt	r1, #1
 8009bec:	f7ff fed4 	bl	8009998 <_Balloc>
 8009bf0:	b930      	cbnz	r0, 8009c00 <__multiply+0x44>
 8009bf2:	4602      	mov	r2, r0
 8009bf4:	4b42      	ldr	r3, [pc, #264]	; (8009d00 <__multiply+0x144>)
 8009bf6:	4843      	ldr	r0, [pc, #268]	; (8009d04 <__multiply+0x148>)
 8009bf8:	f240 115d 	movw	r1, #349	; 0x15d
 8009bfc:	f000 fcc4 	bl	800a588 <__assert_func>
 8009c00:	f100 0614 	add.w	r6, r0, #20
 8009c04:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009c08:	4633      	mov	r3, r6
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	4543      	cmp	r3, r8
 8009c0e:	d31e      	bcc.n	8009c4e <__multiply+0x92>
 8009c10:	f105 0c14 	add.w	ip, r5, #20
 8009c14:	f104 0314 	add.w	r3, r4, #20
 8009c18:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009c1c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009c20:	9202      	str	r2, [sp, #8]
 8009c22:	ebac 0205 	sub.w	r2, ip, r5
 8009c26:	3a15      	subs	r2, #21
 8009c28:	f022 0203 	bic.w	r2, r2, #3
 8009c2c:	3204      	adds	r2, #4
 8009c2e:	f105 0115 	add.w	r1, r5, #21
 8009c32:	458c      	cmp	ip, r1
 8009c34:	bf38      	it	cc
 8009c36:	2204      	movcc	r2, #4
 8009c38:	9201      	str	r2, [sp, #4]
 8009c3a:	9a02      	ldr	r2, [sp, #8]
 8009c3c:	9303      	str	r3, [sp, #12]
 8009c3e:	429a      	cmp	r2, r3
 8009c40:	d808      	bhi.n	8009c54 <__multiply+0x98>
 8009c42:	2f00      	cmp	r7, #0
 8009c44:	dc55      	bgt.n	8009cf2 <__multiply+0x136>
 8009c46:	6107      	str	r7, [r0, #16]
 8009c48:	b005      	add	sp, #20
 8009c4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c4e:	f843 2b04 	str.w	r2, [r3], #4
 8009c52:	e7db      	b.n	8009c0c <__multiply+0x50>
 8009c54:	f8b3 a000 	ldrh.w	sl, [r3]
 8009c58:	f1ba 0f00 	cmp.w	sl, #0
 8009c5c:	d020      	beq.n	8009ca0 <__multiply+0xe4>
 8009c5e:	f105 0e14 	add.w	lr, r5, #20
 8009c62:	46b1      	mov	r9, r6
 8009c64:	2200      	movs	r2, #0
 8009c66:	f85e 4b04 	ldr.w	r4, [lr], #4
 8009c6a:	f8d9 b000 	ldr.w	fp, [r9]
 8009c6e:	b2a1      	uxth	r1, r4
 8009c70:	fa1f fb8b 	uxth.w	fp, fp
 8009c74:	fb0a b101 	mla	r1, sl, r1, fp
 8009c78:	4411      	add	r1, r2
 8009c7a:	f8d9 2000 	ldr.w	r2, [r9]
 8009c7e:	0c24      	lsrs	r4, r4, #16
 8009c80:	0c12      	lsrs	r2, r2, #16
 8009c82:	fb0a 2404 	mla	r4, sl, r4, r2
 8009c86:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009c8a:	b289      	uxth	r1, r1
 8009c8c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009c90:	45f4      	cmp	ip, lr
 8009c92:	f849 1b04 	str.w	r1, [r9], #4
 8009c96:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009c9a:	d8e4      	bhi.n	8009c66 <__multiply+0xaa>
 8009c9c:	9901      	ldr	r1, [sp, #4]
 8009c9e:	5072      	str	r2, [r6, r1]
 8009ca0:	9a03      	ldr	r2, [sp, #12]
 8009ca2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009ca6:	3304      	adds	r3, #4
 8009ca8:	f1b9 0f00 	cmp.w	r9, #0
 8009cac:	d01f      	beq.n	8009cee <__multiply+0x132>
 8009cae:	6834      	ldr	r4, [r6, #0]
 8009cb0:	f105 0114 	add.w	r1, r5, #20
 8009cb4:	46b6      	mov	lr, r6
 8009cb6:	f04f 0a00 	mov.w	sl, #0
 8009cba:	880a      	ldrh	r2, [r1, #0]
 8009cbc:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009cc0:	fb09 b202 	mla	r2, r9, r2, fp
 8009cc4:	4492      	add	sl, r2
 8009cc6:	b2a4      	uxth	r4, r4
 8009cc8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009ccc:	f84e 4b04 	str.w	r4, [lr], #4
 8009cd0:	f851 4b04 	ldr.w	r4, [r1], #4
 8009cd4:	f8be 2000 	ldrh.w	r2, [lr]
 8009cd8:	0c24      	lsrs	r4, r4, #16
 8009cda:	fb09 2404 	mla	r4, r9, r4, r2
 8009cde:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009ce2:	458c      	cmp	ip, r1
 8009ce4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009ce8:	d8e7      	bhi.n	8009cba <__multiply+0xfe>
 8009cea:	9a01      	ldr	r2, [sp, #4]
 8009cec:	50b4      	str	r4, [r6, r2]
 8009cee:	3604      	adds	r6, #4
 8009cf0:	e7a3      	b.n	8009c3a <__multiply+0x7e>
 8009cf2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d1a5      	bne.n	8009c46 <__multiply+0x8a>
 8009cfa:	3f01      	subs	r7, #1
 8009cfc:	e7a1      	b.n	8009c42 <__multiply+0x86>
 8009cfe:	bf00      	nop
 8009d00:	0800ab7b 	.word	0x0800ab7b
 8009d04:	0800abec 	.word	0x0800abec

08009d08 <__pow5mult>:
 8009d08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d0c:	4615      	mov	r5, r2
 8009d0e:	f012 0203 	ands.w	r2, r2, #3
 8009d12:	4606      	mov	r6, r0
 8009d14:	460f      	mov	r7, r1
 8009d16:	d007      	beq.n	8009d28 <__pow5mult+0x20>
 8009d18:	4c25      	ldr	r4, [pc, #148]	; (8009db0 <__pow5mult+0xa8>)
 8009d1a:	3a01      	subs	r2, #1
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009d22:	f7ff fe9b 	bl	8009a5c <__multadd>
 8009d26:	4607      	mov	r7, r0
 8009d28:	10ad      	asrs	r5, r5, #2
 8009d2a:	d03d      	beq.n	8009da8 <__pow5mult+0xa0>
 8009d2c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009d2e:	b97c      	cbnz	r4, 8009d50 <__pow5mult+0x48>
 8009d30:	2010      	movs	r0, #16
 8009d32:	f7ff fe29 	bl	8009988 <malloc>
 8009d36:	4602      	mov	r2, r0
 8009d38:	6270      	str	r0, [r6, #36]	; 0x24
 8009d3a:	b928      	cbnz	r0, 8009d48 <__pow5mult+0x40>
 8009d3c:	4b1d      	ldr	r3, [pc, #116]	; (8009db4 <__pow5mult+0xac>)
 8009d3e:	481e      	ldr	r0, [pc, #120]	; (8009db8 <__pow5mult+0xb0>)
 8009d40:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009d44:	f000 fc20 	bl	800a588 <__assert_func>
 8009d48:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009d4c:	6004      	str	r4, [r0, #0]
 8009d4e:	60c4      	str	r4, [r0, #12]
 8009d50:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009d54:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009d58:	b94c      	cbnz	r4, 8009d6e <__pow5mult+0x66>
 8009d5a:	f240 2171 	movw	r1, #625	; 0x271
 8009d5e:	4630      	mov	r0, r6
 8009d60:	f7ff ff16 	bl	8009b90 <__i2b>
 8009d64:	2300      	movs	r3, #0
 8009d66:	f8c8 0008 	str.w	r0, [r8, #8]
 8009d6a:	4604      	mov	r4, r0
 8009d6c:	6003      	str	r3, [r0, #0]
 8009d6e:	f04f 0900 	mov.w	r9, #0
 8009d72:	07eb      	lsls	r3, r5, #31
 8009d74:	d50a      	bpl.n	8009d8c <__pow5mult+0x84>
 8009d76:	4639      	mov	r1, r7
 8009d78:	4622      	mov	r2, r4
 8009d7a:	4630      	mov	r0, r6
 8009d7c:	f7ff ff1e 	bl	8009bbc <__multiply>
 8009d80:	4639      	mov	r1, r7
 8009d82:	4680      	mov	r8, r0
 8009d84:	4630      	mov	r0, r6
 8009d86:	f7ff fe47 	bl	8009a18 <_Bfree>
 8009d8a:	4647      	mov	r7, r8
 8009d8c:	106d      	asrs	r5, r5, #1
 8009d8e:	d00b      	beq.n	8009da8 <__pow5mult+0xa0>
 8009d90:	6820      	ldr	r0, [r4, #0]
 8009d92:	b938      	cbnz	r0, 8009da4 <__pow5mult+0x9c>
 8009d94:	4622      	mov	r2, r4
 8009d96:	4621      	mov	r1, r4
 8009d98:	4630      	mov	r0, r6
 8009d9a:	f7ff ff0f 	bl	8009bbc <__multiply>
 8009d9e:	6020      	str	r0, [r4, #0]
 8009da0:	f8c0 9000 	str.w	r9, [r0]
 8009da4:	4604      	mov	r4, r0
 8009da6:	e7e4      	b.n	8009d72 <__pow5mult+0x6a>
 8009da8:	4638      	mov	r0, r7
 8009daa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009dae:	bf00      	nop
 8009db0:	0800ad40 	.word	0x0800ad40
 8009db4:	0800ab05 	.word	0x0800ab05
 8009db8:	0800abec 	.word	0x0800abec

08009dbc <__lshift>:
 8009dbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009dc0:	460c      	mov	r4, r1
 8009dc2:	6849      	ldr	r1, [r1, #4]
 8009dc4:	6923      	ldr	r3, [r4, #16]
 8009dc6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009dca:	68a3      	ldr	r3, [r4, #8]
 8009dcc:	4607      	mov	r7, r0
 8009dce:	4691      	mov	r9, r2
 8009dd0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009dd4:	f108 0601 	add.w	r6, r8, #1
 8009dd8:	42b3      	cmp	r3, r6
 8009dda:	db0b      	blt.n	8009df4 <__lshift+0x38>
 8009ddc:	4638      	mov	r0, r7
 8009dde:	f7ff fddb 	bl	8009998 <_Balloc>
 8009de2:	4605      	mov	r5, r0
 8009de4:	b948      	cbnz	r0, 8009dfa <__lshift+0x3e>
 8009de6:	4602      	mov	r2, r0
 8009de8:	4b28      	ldr	r3, [pc, #160]	; (8009e8c <__lshift+0xd0>)
 8009dea:	4829      	ldr	r0, [pc, #164]	; (8009e90 <__lshift+0xd4>)
 8009dec:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009df0:	f000 fbca 	bl	800a588 <__assert_func>
 8009df4:	3101      	adds	r1, #1
 8009df6:	005b      	lsls	r3, r3, #1
 8009df8:	e7ee      	b.n	8009dd8 <__lshift+0x1c>
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	f100 0114 	add.w	r1, r0, #20
 8009e00:	f100 0210 	add.w	r2, r0, #16
 8009e04:	4618      	mov	r0, r3
 8009e06:	4553      	cmp	r3, sl
 8009e08:	db33      	blt.n	8009e72 <__lshift+0xb6>
 8009e0a:	6920      	ldr	r0, [r4, #16]
 8009e0c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009e10:	f104 0314 	add.w	r3, r4, #20
 8009e14:	f019 091f 	ands.w	r9, r9, #31
 8009e18:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009e1c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009e20:	d02b      	beq.n	8009e7a <__lshift+0xbe>
 8009e22:	f1c9 0e20 	rsb	lr, r9, #32
 8009e26:	468a      	mov	sl, r1
 8009e28:	2200      	movs	r2, #0
 8009e2a:	6818      	ldr	r0, [r3, #0]
 8009e2c:	fa00 f009 	lsl.w	r0, r0, r9
 8009e30:	4302      	orrs	r2, r0
 8009e32:	f84a 2b04 	str.w	r2, [sl], #4
 8009e36:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e3a:	459c      	cmp	ip, r3
 8009e3c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009e40:	d8f3      	bhi.n	8009e2a <__lshift+0x6e>
 8009e42:	ebac 0304 	sub.w	r3, ip, r4
 8009e46:	3b15      	subs	r3, #21
 8009e48:	f023 0303 	bic.w	r3, r3, #3
 8009e4c:	3304      	adds	r3, #4
 8009e4e:	f104 0015 	add.w	r0, r4, #21
 8009e52:	4584      	cmp	ip, r0
 8009e54:	bf38      	it	cc
 8009e56:	2304      	movcc	r3, #4
 8009e58:	50ca      	str	r2, [r1, r3]
 8009e5a:	b10a      	cbz	r2, 8009e60 <__lshift+0xa4>
 8009e5c:	f108 0602 	add.w	r6, r8, #2
 8009e60:	3e01      	subs	r6, #1
 8009e62:	4638      	mov	r0, r7
 8009e64:	612e      	str	r6, [r5, #16]
 8009e66:	4621      	mov	r1, r4
 8009e68:	f7ff fdd6 	bl	8009a18 <_Bfree>
 8009e6c:	4628      	mov	r0, r5
 8009e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e72:	f842 0f04 	str.w	r0, [r2, #4]!
 8009e76:	3301      	adds	r3, #1
 8009e78:	e7c5      	b.n	8009e06 <__lshift+0x4a>
 8009e7a:	3904      	subs	r1, #4
 8009e7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e80:	f841 2f04 	str.w	r2, [r1, #4]!
 8009e84:	459c      	cmp	ip, r3
 8009e86:	d8f9      	bhi.n	8009e7c <__lshift+0xc0>
 8009e88:	e7ea      	b.n	8009e60 <__lshift+0xa4>
 8009e8a:	bf00      	nop
 8009e8c:	0800ab7b 	.word	0x0800ab7b
 8009e90:	0800abec 	.word	0x0800abec

08009e94 <__mcmp>:
 8009e94:	b530      	push	{r4, r5, lr}
 8009e96:	6902      	ldr	r2, [r0, #16]
 8009e98:	690c      	ldr	r4, [r1, #16]
 8009e9a:	1b12      	subs	r2, r2, r4
 8009e9c:	d10e      	bne.n	8009ebc <__mcmp+0x28>
 8009e9e:	f100 0314 	add.w	r3, r0, #20
 8009ea2:	3114      	adds	r1, #20
 8009ea4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009ea8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009eac:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009eb0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009eb4:	42a5      	cmp	r5, r4
 8009eb6:	d003      	beq.n	8009ec0 <__mcmp+0x2c>
 8009eb8:	d305      	bcc.n	8009ec6 <__mcmp+0x32>
 8009eba:	2201      	movs	r2, #1
 8009ebc:	4610      	mov	r0, r2
 8009ebe:	bd30      	pop	{r4, r5, pc}
 8009ec0:	4283      	cmp	r3, r0
 8009ec2:	d3f3      	bcc.n	8009eac <__mcmp+0x18>
 8009ec4:	e7fa      	b.n	8009ebc <__mcmp+0x28>
 8009ec6:	f04f 32ff 	mov.w	r2, #4294967295
 8009eca:	e7f7      	b.n	8009ebc <__mcmp+0x28>

08009ecc <__mdiff>:
 8009ecc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ed0:	460c      	mov	r4, r1
 8009ed2:	4606      	mov	r6, r0
 8009ed4:	4611      	mov	r1, r2
 8009ed6:	4620      	mov	r0, r4
 8009ed8:	4617      	mov	r7, r2
 8009eda:	f7ff ffdb 	bl	8009e94 <__mcmp>
 8009ede:	1e05      	subs	r5, r0, #0
 8009ee0:	d110      	bne.n	8009f04 <__mdiff+0x38>
 8009ee2:	4629      	mov	r1, r5
 8009ee4:	4630      	mov	r0, r6
 8009ee6:	f7ff fd57 	bl	8009998 <_Balloc>
 8009eea:	b930      	cbnz	r0, 8009efa <__mdiff+0x2e>
 8009eec:	4b39      	ldr	r3, [pc, #228]	; (8009fd4 <__mdiff+0x108>)
 8009eee:	4602      	mov	r2, r0
 8009ef0:	f240 2132 	movw	r1, #562	; 0x232
 8009ef4:	4838      	ldr	r0, [pc, #224]	; (8009fd8 <__mdiff+0x10c>)
 8009ef6:	f000 fb47 	bl	800a588 <__assert_func>
 8009efa:	2301      	movs	r3, #1
 8009efc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009f00:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f04:	bfa4      	itt	ge
 8009f06:	463b      	movge	r3, r7
 8009f08:	4627      	movge	r7, r4
 8009f0a:	4630      	mov	r0, r6
 8009f0c:	6879      	ldr	r1, [r7, #4]
 8009f0e:	bfa6      	itte	ge
 8009f10:	461c      	movge	r4, r3
 8009f12:	2500      	movge	r5, #0
 8009f14:	2501      	movlt	r5, #1
 8009f16:	f7ff fd3f 	bl	8009998 <_Balloc>
 8009f1a:	b920      	cbnz	r0, 8009f26 <__mdiff+0x5a>
 8009f1c:	4b2d      	ldr	r3, [pc, #180]	; (8009fd4 <__mdiff+0x108>)
 8009f1e:	4602      	mov	r2, r0
 8009f20:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009f24:	e7e6      	b.n	8009ef4 <__mdiff+0x28>
 8009f26:	693e      	ldr	r6, [r7, #16]
 8009f28:	60c5      	str	r5, [r0, #12]
 8009f2a:	6925      	ldr	r5, [r4, #16]
 8009f2c:	f107 0114 	add.w	r1, r7, #20
 8009f30:	f104 0914 	add.w	r9, r4, #20
 8009f34:	f100 0e14 	add.w	lr, r0, #20
 8009f38:	f107 0210 	add.w	r2, r7, #16
 8009f3c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8009f40:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8009f44:	46f2      	mov	sl, lr
 8009f46:	2700      	movs	r7, #0
 8009f48:	f859 3b04 	ldr.w	r3, [r9], #4
 8009f4c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009f50:	fa1f f883 	uxth.w	r8, r3
 8009f54:	fa17 f78b 	uxtah	r7, r7, fp
 8009f58:	0c1b      	lsrs	r3, r3, #16
 8009f5a:	eba7 0808 	sub.w	r8, r7, r8
 8009f5e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009f62:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009f66:	fa1f f888 	uxth.w	r8, r8
 8009f6a:	141f      	asrs	r7, r3, #16
 8009f6c:	454d      	cmp	r5, r9
 8009f6e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009f72:	f84a 3b04 	str.w	r3, [sl], #4
 8009f76:	d8e7      	bhi.n	8009f48 <__mdiff+0x7c>
 8009f78:	1b2b      	subs	r3, r5, r4
 8009f7a:	3b15      	subs	r3, #21
 8009f7c:	f023 0303 	bic.w	r3, r3, #3
 8009f80:	3304      	adds	r3, #4
 8009f82:	3415      	adds	r4, #21
 8009f84:	42a5      	cmp	r5, r4
 8009f86:	bf38      	it	cc
 8009f88:	2304      	movcc	r3, #4
 8009f8a:	4419      	add	r1, r3
 8009f8c:	4473      	add	r3, lr
 8009f8e:	469e      	mov	lr, r3
 8009f90:	460d      	mov	r5, r1
 8009f92:	4565      	cmp	r5, ip
 8009f94:	d30e      	bcc.n	8009fb4 <__mdiff+0xe8>
 8009f96:	f10c 0203 	add.w	r2, ip, #3
 8009f9a:	1a52      	subs	r2, r2, r1
 8009f9c:	f022 0203 	bic.w	r2, r2, #3
 8009fa0:	3903      	subs	r1, #3
 8009fa2:	458c      	cmp	ip, r1
 8009fa4:	bf38      	it	cc
 8009fa6:	2200      	movcc	r2, #0
 8009fa8:	441a      	add	r2, r3
 8009faa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009fae:	b17b      	cbz	r3, 8009fd0 <__mdiff+0x104>
 8009fb0:	6106      	str	r6, [r0, #16]
 8009fb2:	e7a5      	b.n	8009f00 <__mdiff+0x34>
 8009fb4:	f855 8b04 	ldr.w	r8, [r5], #4
 8009fb8:	fa17 f488 	uxtah	r4, r7, r8
 8009fbc:	1422      	asrs	r2, r4, #16
 8009fbe:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8009fc2:	b2a4      	uxth	r4, r4
 8009fc4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009fc8:	f84e 4b04 	str.w	r4, [lr], #4
 8009fcc:	1417      	asrs	r7, r2, #16
 8009fce:	e7e0      	b.n	8009f92 <__mdiff+0xc6>
 8009fd0:	3e01      	subs	r6, #1
 8009fd2:	e7ea      	b.n	8009faa <__mdiff+0xde>
 8009fd4:	0800ab7b 	.word	0x0800ab7b
 8009fd8:	0800abec 	.word	0x0800abec

08009fdc <__d2b>:
 8009fdc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009fe0:	4689      	mov	r9, r1
 8009fe2:	2101      	movs	r1, #1
 8009fe4:	ec57 6b10 	vmov	r6, r7, d0
 8009fe8:	4690      	mov	r8, r2
 8009fea:	f7ff fcd5 	bl	8009998 <_Balloc>
 8009fee:	4604      	mov	r4, r0
 8009ff0:	b930      	cbnz	r0, 800a000 <__d2b+0x24>
 8009ff2:	4602      	mov	r2, r0
 8009ff4:	4b25      	ldr	r3, [pc, #148]	; (800a08c <__d2b+0xb0>)
 8009ff6:	4826      	ldr	r0, [pc, #152]	; (800a090 <__d2b+0xb4>)
 8009ff8:	f240 310a 	movw	r1, #778	; 0x30a
 8009ffc:	f000 fac4 	bl	800a588 <__assert_func>
 800a000:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a004:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a008:	bb35      	cbnz	r5, 800a058 <__d2b+0x7c>
 800a00a:	2e00      	cmp	r6, #0
 800a00c:	9301      	str	r3, [sp, #4]
 800a00e:	d028      	beq.n	800a062 <__d2b+0x86>
 800a010:	4668      	mov	r0, sp
 800a012:	9600      	str	r6, [sp, #0]
 800a014:	f7ff fd8c 	bl	8009b30 <__lo0bits>
 800a018:	9900      	ldr	r1, [sp, #0]
 800a01a:	b300      	cbz	r0, 800a05e <__d2b+0x82>
 800a01c:	9a01      	ldr	r2, [sp, #4]
 800a01e:	f1c0 0320 	rsb	r3, r0, #32
 800a022:	fa02 f303 	lsl.w	r3, r2, r3
 800a026:	430b      	orrs	r3, r1
 800a028:	40c2      	lsrs	r2, r0
 800a02a:	6163      	str	r3, [r4, #20]
 800a02c:	9201      	str	r2, [sp, #4]
 800a02e:	9b01      	ldr	r3, [sp, #4]
 800a030:	61a3      	str	r3, [r4, #24]
 800a032:	2b00      	cmp	r3, #0
 800a034:	bf14      	ite	ne
 800a036:	2202      	movne	r2, #2
 800a038:	2201      	moveq	r2, #1
 800a03a:	6122      	str	r2, [r4, #16]
 800a03c:	b1d5      	cbz	r5, 800a074 <__d2b+0x98>
 800a03e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a042:	4405      	add	r5, r0
 800a044:	f8c9 5000 	str.w	r5, [r9]
 800a048:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a04c:	f8c8 0000 	str.w	r0, [r8]
 800a050:	4620      	mov	r0, r4
 800a052:	b003      	add	sp, #12
 800a054:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a058:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a05c:	e7d5      	b.n	800a00a <__d2b+0x2e>
 800a05e:	6161      	str	r1, [r4, #20]
 800a060:	e7e5      	b.n	800a02e <__d2b+0x52>
 800a062:	a801      	add	r0, sp, #4
 800a064:	f7ff fd64 	bl	8009b30 <__lo0bits>
 800a068:	9b01      	ldr	r3, [sp, #4]
 800a06a:	6163      	str	r3, [r4, #20]
 800a06c:	2201      	movs	r2, #1
 800a06e:	6122      	str	r2, [r4, #16]
 800a070:	3020      	adds	r0, #32
 800a072:	e7e3      	b.n	800a03c <__d2b+0x60>
 800a074:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a078:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a07c:	f8c9 0000 	str.w	r0, [r9]
 800a080:	6918      	ldr	r0, [r3, #16]
 800a082:	f7ff fd35 	bl	8009af0 <__hi0bits>
 800a086:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a08a:	e7df      	b.n	800a04c <__d2b+0x70>
 800a08c:	0800ab7b 	.word	0x0800ab7b
 800a090:	0800abec 	.word	0x0800abec

0800a094 <_calloc_r>:
 800a094:	b513      	push	{r0, r1, r4, lr}
 800a096:	434a      	muls	r2, r1
 800a098:	4611      	mov	r1, r2
 800a09a:	9201      	str	r2, [sp, #4]
 800a09c:	f000 f85a 	bl	800a154 <_malloc_r>
 800a0a0:	4604      	mov	r4, r0
 800a0a2:	b118      	cbz	r0, 800a0ac <_calloc_r+0x18>
 800a0a4:	9a01      	ldr	r2, [sp, #4]
 800a0a6:	2100      	movs	r1, #0
 800a0a8:	f7fd fe10 	bl	8007ccc <memset>
 800a0ac:	4620      	mov	r0, r4
 800a0ae:	b002      	add	sp, #8
 800a0b0:	bd10      	pop	{r4, pc}
	...

0800a0b4 <_free_r>:
 800a0b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a0b6:	2900      	cmp	r1, #0
 800a0b8:	d048      	beq.n	800a14c <_free_r+0x98>
 800a0ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0be:	9001      	str	r0, [sp, #4]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	f1a1 0404 	sub.w	r4, r1, #4
 800a0c6:	bfb8      	it	lt
 800a0c8:	18e4      	addlt	r4, r4, r3
 800a0ca:	f000 fae3 	bl	800a694 <__malloc_lock>
 800a0ce:	4a20      	ldr	r2, [pc, #128]	; (800a150 <_free_r+0x9c>)
 800a0d0:	9801      	ldr	r0, [sp, #4]
 800a0d2:	6813      	ldr	r3, [r2, #0]
 800a0d4:	4615      	mov	r5, r2
 800a0d6:	b933      	cbnz	r3, 800a0e6 <_free_r+0x32>
 800a0d8:	6063      	str	r3, [r4, #4]
 800a0da:	6014      	str	r4, [r2, #0]
 800a0dc:	b003      	add	sp, #12
 800a0de:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a0e2:	f000 badd 	b.w	800a6a0 <__malloc_unlock>
 800a0e6:	42a3      	cmp	r3, r4
 800a0e8:	d90b      	bls.n	800a102 <_free_r+0x4e>
 800a0ea:	6821      	ldr	r1, [r4, #0]
 800a0ec:	1862      	adds	r2, r4, r1
 800a0ee:	4293      	cmp	r3, r2
 800a0f0:	bf04      	itt	eq
 800a0f2:	681a      	ldreq	r2, [r3, #0]
 800a0f4:	685b      	ldreq	r3, [r3, #4]
 800a0f6:	6063      	str	r3, [r4, #4]
 800a0f8:	bf04      	itt	eq
 800a0fa:	1852      	addeq	r2, r2, r1
 800a0fc:	6022      	streq	r2, [r4, #0]
 800a0fe:	602c      	str	r4, [r5, #0]
 800a100:	e7ec      	b.n	800a0dc <_free_r+0x28>
 800a102:	461a      	mov	r2, r3
 800a104:	685b      	ldr	r3, [r3, #4]
 800a106:	b10b      	cbz	r3, 800a10c <_free_r+0x58>
 800a108:	42a3      	cmp	r3, r4
 800a10a:	d9fa      	bls.n	800a102 <_free_r+0x4e>
 800a10c:	6811      	ldr	r1, [r2, #0]
 800a10e:	1855      	adds	r5, r2, r1
 800a110:	42a5      	cmp	r5, r4
 800a112:	d10b      	bne.n	800a12c <_free_r+0x78>
 800a114:	6824      	ldr	r4, [r4, #0]
 800a116:	4421      	add	r1, r4
 800a118:	1854      	adds	r4, r2, r1
 800a11a:	42a3      	cmp	r3, r4
 800a11c:	6011      	str	r1, [r2, #0]
 800a11e:	d1dd      	bne.n	800a0dc <_free_r+0x28>
 800a120:	681c      	ldr	r4, [r3, #0]
 800a122:	685b      	ldr	r3, [r3, #4]
 800a124:	6053      	str	r3, [r2, #4]
 800a126:	4421      	add	r1, r4
 800a128:	6011      	str	r1, [r2, #0]
 800a12a:	e7d7      	b.n	800a0dc <_free_r+0x28>
 800a12c:	d902      	bls.n	800a134 <_free_r+0x80>
 800a12e:	230c      	movs	r3, #12
 800a130:	6003      	str	r3, [r0, #0]
 800a132:	e7d3      	b.n	800a0dc <_free_r+0x28>
 800a134:	6825      	ldr	r5, [r4, #0]
 800a136:	1961      	adds	r1, r4, r5
 800a138:	428b      	cmp	r3, r1
 800a13a:	bf04      	itt	eq
 800a13c:	6819      	ldreq	r1, [r3, #0]
 800a13e:	685b      	ldreq	r3, [r3, #4]
 800a140:	6063      	str	r3, [r4, #4]
 800a142:	bf04      	itt	eq
 800a144:	1949      	addeq	r1, r1, r5
 800a146:	6021      	streq	r1, [r4, #0]
 800a148:	6054      	str	r4, [r2, #4]
 800a14a:	e7c7      	b.n	800a0dc <_free_r+0x28>
 800a14c:	b003      	add	sp, #12
 800a14e:	bd30      	pop	{r4, r5, pc}
 800a150:	20004d94 	.word	0x20004d94

0800a154 <_malloc_r>:
 800a154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a156:	1ccd      	adds	r5, r1, #3
 800a158:	f025 0503 	bic.w	r5, r5, #3
 800a15c:	3508      	adds	r5, #8
 800a15e:	2d0c      	cmp	r5, #12
 800a160:	bf38      	it	cc
 800a162:	250c      	movcc	r5, #12
 800a164:	2d00      	cmp	r5, #0
 800a166:	4606      	mov	r6, r0
 800a168:	db01      	blt.n	800a16e <_malloc_r+0x1a>
 800a16a:	42a9      	cmp	r1, r5
 800a16c:	d903      	bls.n	800a176 <_malloc_r+0x22>
 800a16e:	230c      	movs	r3, #12
 800a170:	6033      	str	r3, [r6, #0]
 800a172:	2000      	movs	r0, #0
 800a174:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a176:	f000 fa8d 	bl	800a694 <__malloc_lock>
 800a17a:	4921      	ldr	r1, [pc, #132]	; (800a200 <_malloc_r+0xac>)
 800a17c:	680a      	ldr	r2, [r1, #0]
 800a17e:	4614      	mov	r4, r2
 800a180:	b99c      	cbnz	r4, 800a1aa <_malloc_r+0x56>
 800a182:	4f20      	ldr	r7, [pc, #128]	; (800a204 <_malloc_r+0xb0>)
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	b923      	cbnz	r3, 800a192 <_malloc_r+0x3e>
 800a188:	4621      	mov	r1, r4
 800a18a:	4630      	mov	r0, r6
 800a18c:	f000 f996 	bl	800a4bc <_sbrk_r>
 800a190:	6038      	str	r0, [r7, #0]
 800a192:	4629      	mov	r1, r5
 800a194:	4630      	mov	r0, r6
 800a196:	f000 f991 	bl	800a4bc <_sbrk_r>
 800a19a:	1c43      	adds	r3, r0, #1
 800a19c:	d123      	bne.n	800a1e6 <_malloc_r+0x92>
 800a19e:	230c      	movs	r3, #12
 800a1a0:	6033      	str	r3, [r6, #0]
 800a1a2:	4630      	mov	r0, r6
 800a1a4:	f000 fa7c 	bl	800a6a0 <__malloc_unlock>
 800a1a8:	e7e3      	b.n	800a172 <_malloc_r+0x1e>
 800a1aa:	6823      	ldr	r3, [r4, #0]
 800a1ac:	1b5b      	subs	r3, r3, r5
 800a1ae:	d417      	bmi.n	800a1e0 <_malloc_r+0x8c>
 800a1b0:	2b0b      	cmp	r3, #11
 800a1b2:	d903      	bls.n	800a1bc <_malloc_r+0x68>
 800a1b4:	6023      	str	r3, [r4, #0]
 800a1b6:	441c      	add	r4, r3
 800a1b8:	6025      	str	r5, [r4, #0]
 800a1ba:	e004      	b.n	800a1c6 <_malloc_r+0x72>
 800a1bc:	6863      	ldr	r3, [r4, #4]
 800a1be:	42a2      	cmp	r2, r4
 800a1c0:	bf0c      	ite	eq
 800a1c2:	600b      	streq	r3, [r1, #0]
 800a1c4:	6053      	strne	r3, [r2, #4]
 800a1c6:	4630      	mov	r0, r6
 800a1c8:	f000 fa6a 	bl	800a6a0 <__malloc_unlock>
 800a1cc:	f104 000b 	add.w	r0, r4, #11
 800a1d0:	1d23      	adds	r3, r4, #4
 800a1d2:	f020 0007 	bic.w	r0, r0, #7
 800a1d6:	1ac2      	subs	r2, r0, r3
 800a1d8:	d0cc      	beq.n	800a174 <_malloc_r+0x20>
 800a1da:	1a1b      	subs	r3, r3, r0
 800a1dc:	50a3      	str	r3, [r4, r2]
 800a1de:	e7c9      	b.n	800a174 <_malloc_r+0x20>
 800a1e0:	4622      	mov	r2, r4
 800a1e2:	6864      	ldr	r4, [r4, #4]
 800a1e4:	e7cc      	b.n	800a180 <_malloc_r+0x2c>
 800a1e6:	1cc4      	adds	r4, r0, #3
 800a1e8:	f024 0403 	bic.w	r4, r4, #3
 800a1ec:	42a0      	cmp	r0, r4
 800a1ee:	d0e3      	beq.n	800a1b8 <_malloc_r+0x64>
 800a1f0:	1a21      	subs	r1, r4, r0
 800a1f2:	4630      	mov	r0, r6
 800a1f4:	f000 f962 	bl	800a4bc <_sbrk_r>
 800a1f8:	3001      	adds	r0, #1
 800a1fa:	d1dd      	bne.n	800a1b8 <_malloc_r+0x64>
 800a1fc:	e7cf      	b.n	800a19e <_malloc_r+0x4a>
 800a1fe:	bf00      	nop
 800a200:	20004d94 	.word	0x20004d94
 800a204:	20004d98 	.word	0x20004d98

0800a208 <__sfputc_r>:
 800a208:	6893      	ldr	r3, [r2, #8]
 800a20a:	3b01      	subs	r3, #1
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	b410      	push	{r4}
 800a210:	6093      	str	r3, [r2, #8]
 800a212:	da08      	bge.n	800a226 <__sfputc_r+0x1e>
 800a214:	6994      	ldr	r4, [r2, #24]
 800a216:	42a3      	cmp	r3, r4
 800a218:	db01      	blt.n	800a21e <__sfputc_r+0x16>
 800a21a:	290a      	cmp	r1, #10
 800a21c:	d103      	bne.n	800a226 <__sfputc_r+0x1e>
 800a21e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a222:	f7fe ba53 	b.w	80086cc <__swbuf_r>
 800a226:	6813      	ldr	r3, [r2, #0]
 800a228:	1c58      	adds	r0, r3, #1
 800a22a:	6010      	str	r0, [r2, #0]
 800a22c:	7019      	strb	r1, [r3, #0]
 800a22e:	4608      	mov	r0, r1
 800a230:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a234:	4770      	bx	lr

0800a236 <__sfputs_r>:
 800a236:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a238:	4606      	mov	r6, r0
 800a23a:	460f      	mov	r7, r1
 800a23c:	4614      	mov	r4, r2
 800a23e:	18d5      	adds	r5, r2, r3
 800a240:	42ac      	cmp	r4, r5
 800a242:	d101      	bne.n	800a248 <__sfputs_r+0x12>
 800a244:	2000      	movs	r0, #0
 800a246:	e007      	b.n	800a258 <__sfputs_r+0x22>
 800a248:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a24c:	463a      	mov	r2, r7
 800a24e:	4630      	mov	r0, r6
 800a250:	f7ff ffda 	bl	800a208 <__sfputc_r>
 800a254:	1c43      	adds	r3, r0, #1
 800a256:	d1f3      	bne.n	800a240 <__sfputs_r+0xa>
 800a258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a25c <_vfiprintf_r>:
 800a25c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a260:	460d      	mov	r5, r1
 800a262:	b09d      	sub	sp, #116	; 0x74
 800a264:	4614      	mov	r4, r2
 800a266:	4698      	mov	r8, r3
 800a268:	4606      	mov	r6, r0
 800a26a:	b118      	cbz	r0, 800a274 <_vfiprintf_r+0x18>
 800a26c:	6983      	ldr	r3, [r0, #24]
 800a26e:	b90b      	cbnz	r3, 800a274 <_vfiprintf_r+0x18>
 800a270:	f7ff fa80 	bl	8009774 <__sinit>
 800a274:	4b89      	ldr	r3, [pc, #548]	; (800a49c <_vfiprintf_r+0x240>)
 800a276:	429d      	cmp	r5, r3
 800a278:	d11b      	bne.n	800a2b2 <_vfiprintf_r+0x56>
 800a27a:	6875      	ldr	r5, [r6, #4]
 800a27c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a27e:	07d9      	lsls	r1, r3, #31
 800a280:	d405      	bmi.n	800a28e <_vfiprintf_r+0x32>
 800a282:	89ab      	ldrh	r3, [r5, #12]
 800a284:	059a      	lsls	r2, r3, #22
 800a286:	d402      	bmi.n	800a28e <_vfiprintf_r+0x32>
 800a288:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a28a:	f7ff fb16 	bl	80098ba <__retarget_lock_acquire_recursive>
 800a28e:	89ab      	ldrh	r3, [r5, #12]
 800a290:	071b      	lsls	r3, r3, #28
 800a292:	d501      	bpl.n	800a298 <_vfiprintf_r+0x3c>
 800a294:	692b      	ldr	r3, [r5, #16]
 800a296:	b9eb      	cbnz	r3, 800a2d4 <_vfiprintf_r+0x78>
 800a298:	4629      	mov	r1, r5
 800a29a:	4630      	mov	r0, r6
 800a29c:	f7fe fa68 	bl	8008770 <__swsetup_r>
 800a2a0:	b1c0      	cbz	r0, 800a2d4 <_vfiprintf_r+0x78>
 800a2a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a2a4:	07dc      	lsls	r4, r3, #31
 800a2a6:	d50e      	bpl.n	800a2c6 <_vfiprintf_r+0x6a>
 800a2a8:	f04f 30ff 	mov.w	r0, #4294967295
 800a2ac:	b01d      	add	sp, #116	; 0x74
 800a2ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2b2:	4b7b      	ldr	r3, [pc, #492]	; (800a4a0 <_vfiprintf_r+0x244>)
 800a2b4:	429d      	cmp	r5, r3
 800a2b6:	d101      	bne.n	800a2bc <_vfiprintf_r+0x60>
 800a2b8:	68b5      	ldr	r5, [r6, #8]
 800a2ba:	e7df      	b.n	800a27c <_vfiprintf_r+0x20>
 800a2bc:	4b79      	ldr	r3, [pc, #484]	; (800a4a4 <_vfiprintf_r+0x248>)
 800a2be:	429d      	cmp	r5, r3
 800a2c0:	bf08      	it	eq
 800a2c2:	68f5      	ldreq	r5, [r6, #12]
 800a2c4:	e7da      	b.n	800a27c <_vfiprintf_r+0x20>
 800a2c6:	89ab      	ldrh	r3, [r5, #12]
 800a2c8:	0598      	lsls	r0, r3, #22
 800a2ca:	d4ed      	bmi.n	800a2a8 <_vfiprintf_r+0x4c>
 800a2cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a2ce:	f7ff faf5 	bl	80098bc <__retarget_lock_release_recursive>
 800a2d2:	e7e9      	b.n	800a2a8 <_vfiprintf_r+0x4c>
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	9309      	str	r3, [sp, #36]	; 0x24
 800a2d8:	2320      	movs	r3, #32
 800a2da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a2de:	f8cd 800c 	str.w	r8, [sp, #12]
 800a2e2:	2330      	movs	r3, #48	; 0x30
 800a2e4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a4a8 <_vfiprintf_r+0x24c>
 800a2e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a2ec:	f04f 0901 	mov.w	r9, #1
 800a2f0:	4623      	mov	r3, r4
 800a2f2:	469a      	mov	sl, r3
 800a2f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a2f8:	b10a      	cbz	r2, 800a2fe <_vfiprintf_r+0xa2>
 800a2fa:	2a25      	cmp	r2, #37	; 0x25
 800a2fc:	d1f9      	bne.n	800a2f2 <_vfiprintf_r+0x96>
 800a2fe:	ebba 0b04 	subs.w	fp, sl, r4
 800a302:	d00b      	beq.n	800a31c <_vfiprintf_r+0xc0>
 800a304:	465b      	mov	r3, fp
 800a306:	4622      	mov	r2, r4
 800a308:	4629      	mov	r1, r5
 800a30a:	4630      	mov	r0, r6
 800a30c:	f7ff ff93 	bl	800a236 <__sfputs_r>
 800a310:	3001      	adds	r0, #1
 800a312:	f000 80aa 	beq.w	800a46a <_vfiprintf_r+0x20e>
 800a316:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a318:	445a      	add	r2, fp
 800a31a:	9209      	str	r2, [sp, #36]	; 0x24
 800a31c:	f89a 3000 	ldrb.w	r3, [sl]
 800a320:	2b00      	cmp	r3, #0
 800a322:	f000 80a2 	beq.w	800a46a <_vfiprintf_r+0x20e>
 800a326:	2300      	movs	r3, #0
 800a328:	f04f 32ff 	mov.w	r2, #4294967295
 800a32c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a330:	f10a 0a01 	add.w	sl, sl, #1
 800a334:	9304      	str	r3, [sp, #16]
 800a336:	9307      	str	r3, [sp, #28]
 800a338:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a33c:	931a      	str	r3, [sp, #104]	; 0x68
 800a33e:	4654      	mov	r4, sl
 800a340:	2205      	movs	r2, #5
 800a342:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a346:	4858      	ldr	r0, [pc, #352]	; (800a4a8 <_vfiprintf_r+0x24c>)
 800a348:	f7f5 ff52 	bl	80001f0 <memchr>
 800a34c:	9a04      	ldr	r2, [sp, #16]
 800a34e:	b9d8      	cbnz	r0, 800a388 <_vfiprintf_r+0x12c>
 800a350:	06d1      	lsls	r1, r2, #27
 800a352:	bf44      	itt	mi
 800a354:	2320      	movmi	r3, #32
 800a356:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a35a:	0713      	lsls	r3, r2, #28
 800a35c:	bf44      	itt	mi
 800a35e:	232b      	movmi	r3, #43	; 0x2b
 800a360:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a364:	f89a 3000 	ldrb.w	r3, [sl]
 800a368:	2b2a      	cmp	r3, #42	; 0x2a
 800a36a:	d015      	beq.n	800a398 <_vfiprintf_r+0x13c>
 800a36c:	9a07      	ldr	r2, [sp, #28]
 800a36e:	4654      	mov	r4, sl
 800a370:	2000      	movs	r0, #0
 800a372:	f04f 0c0a 	mov.w	ip, #10
 800a376:	4621      	mov	r1, r4
 800a378:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a37c:	3b30      	subs	r3, #48	; 0x30
 800a37e:	2b09      	cmp	r3, #9
 800a380:	d94e      	bls.n	800a420 <_vfiprintf_r+0x1c4>
 800a382:	b1b0      	cbz	r0, 800a3b2 <_vfiprintf_r+0x156>
 800a384:	9207      	str	r2, [sp, #28]
 800a386:	e014      	b.n	800a3b2 <_vfiprintf_r+0x156>
 800a388:	eba0 0308 	sub.w	r3, r0, r8
 800a38c:	fa09 f303 	lsl.w	r3, r9, r3
 800a390:	4313      	orrs	r3, r2
 800a392:	9304      	str	r3, [sp, #16]
 800a394:	46a2      	mov	sl, r4
 800a396:	e7d2      	b.n	800a33e <_vfiprintf_r+0xe2>
 800a398:	9b03      	ldr	r3, [sp, #12]
 800a39a:	1d19      	adds	r1, r3, #4
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	9103      	str	r1, [sp, #12]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	bfbb      	ittet	lt
 800a3a4:	425b      	neglt	r3, r3
 800a3a6:	f042 0202 	orrlt.w	r2, r2, #2
 800a3aa:	9307      	strge	r3, [sp, #28]
 800a3ac:	9307      	strlt	r3, [sp, #28]
 800a3ae:	bfb8      	it	lt
 800a3b0:	9204      	strlt	r2, [sp, #16]
 800a3b2:	7823      	ldrb	r3, [r4, #0]
 800a3b4:	2b2e      	cmp	r3, #46	; 0x2e
 800a3b6:	d10c      	bne.n	800a3d2 <_vfiprintf_r+0x176>
 800a3b8:	7863      	ldrb	r3, [r4, #1]
 800a3ba:	2b2a      	cmp	r3, #42	; 0x2a
 800a3bc:	d135      	bne.n	800a42a <_vfiprintf_r+0x1ce>
 800a3be:	9b03      	ldr	r3, [sp, #12]
 800a3c0:	1d1a      	adds	r2, r3, #4
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	9203      	str	r2, [sp, #12]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	bfb8      	it	lt
 800a3ca:	f04f 33ff 	movlt.w	r3, #4294967295
 800a3ce:	3402      	adds	r4, #2
 800a3d0:	9305      	str	r3, [sp, #20]
 800a3d2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a4b8 <_vfiprintf_r+0x25c>
 800a3d6:	7821      	ldrb	r1, [r4, #0]
 800a3d8:	2203      	movs	r2, #3
 800a3da:	4650      	mov	r0, sl
 800a3dc:	f7f5 ff08 	bl	80001f0 <memchr>
 800a3e0:	b140      	cbz	r0, 800a3f4 <_vfiprintf_r+0x198>
 800a3e2:	2340      	movs	r3, #64	; 0x40
 800a3e4:	eba0 000a 	sub.w	r0, r0, sl
 800a3e8:	fa03 f000 	lsl.w	r0, r3, r0
 800a3ec:	9b04      	ldr	r3, [sp, #16]
 800a3ee:	4303      	orrs	r3, r0
 800a3f0:	3401      	adds	r4, #1
 800a3f2:	9304      	str	r3, [sp, #16]
 800a3f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3f8:	482c      	ldr	r0, [pc, #176]	; (800a4ac <_vfiprintf_r+0x250>)
 800a3fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a3fe:	2206      	movs	r2, #6
 800a400:	f7f5 fef6 	bl	80001f0 <memchr>
 800a404:	2800      	cmp	r0, #0
 800a406:	d03f      	beq.n	800a488 <_vfiprintf_r+0x22c>
 800a408:	4b29      	ldr	r3, [pc, #164]	; (800a4b0 <_vfiprintf_r+0x254>)
 800a40a:	bb1b      	cbnz	r3, 800a454 <_vfiprintf_r+0x1f8>
 800a40c:	9b03      	ldr	r3, [sp, #12]
 800a40e:	3307      	adds	r3, #7
 800a410:	f023 0307 	bic.w	r3, r3, #7
 800a414:	3308      	adds	r3, #8
 800a416:	9303      	str	r3, [sp, #12]
 800a418:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a41a:	443b      	add	r3, r7
 800a41c:	9309      	str	r3, [sp, #36]	; 0x24
 800a41e:	e767      	b.n	800a2f0 <_vfiprintf_r+0x94>
 800a420:	fb0c 3202 	mla	r2, ip, r2, r3
 800a424:	460c      	mov	r4, r1
 800a426:	2001      	movs	r0, #1
 800a428:	e7a5      	b.n	800a376 <_vfiprintf_r+0x11a>
 800a42a:	2300      	movs	r3, #0
 800a42c:	3401      	adds	r4, #1
 800a42e:	9305      	str	r3, [sp, #20]
 800a430:	4619      	mov	r1, r3
 800a432:	f04f 0c0a 	mov.w	ip, #10
 800a436:	4620      	mov	r0, r4
 800a438:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a43c:	3a30      	subs	r2, #48	; 0x30
 800a43e:	2a09      	cmp	r2, #9
 800a440:	d903      	bls.n	800a44a <_vfiprintf_r+0x1ee>
 800a442:	2b00      	cmp	r3, #0
 800a444:	d0c5      	beq.n	800a3d2 <_vfiprintf_r+0x176>
 800a446:	9105      	str	r1, [sp, #20]
 800a448:	e7c3      	b.n	800a3d2 <_vfiprintf_r+0x176>
 800a44a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a44e:	4604      	mov	r4, r0
 800a450:	2301      	movs	r3, #1
 800a452:	e7f0      	b.n	800a436 <_vfiprintf_r+0x1da>
 800a454:	ab03      	add	r3, sp, #12
 800a456:	9300      	str	r3, [sp, #0]
 800a458:	462a      	mov	r2, r5
 800a45a:	4b16      	ldr	r3, [pc, #88]	; (800a4b4 <_vfiprintf_r+0x258>)
 800a45c:	a904      	add	r1, sp, #16
 800a45e:	4630      	mov	r0, r6
 800a460:	f7fd fcdc 	bl	8007e1c <_printf_float>
 800a464:	4607      	mov	r7, r0
 800a466:	1c78      	adds	r0, r7, #1
 800a468:	d1d6      	bne.n	800a418 <_vfiprintf_r+0x1bc>
 800a46a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a46c:	07d9      	lsls	r1, r3, #31
 800a46e:	d405      	bmi.n	800a47c <_vfiprintf_r+0x220>
 800a470:	89ab      	ldrh	r3, [r5, #12]
 800a472:	059a      	lsls	r2, r3, #22
 800a474:	d402      	bmi.n	800a47c <_vfiprintf_r+0x220>
 800a476:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a478:	f7ff fa20 	bl	80098bc <__retarget_lock_release_recursive>
 800a47c:	89ab      	ldrh	r3, [r5, #12]
 800a47e:	065b      	lsls	r3, r3, #25
 800a480:	f53f af12 	bmi.w	800a2a8 <_vfiprintf_r+0x4c>
 800a484:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a486:	e711      	b.n	800a2ac <_vfiprintf_r+0x50>
 800a488:	ab03      	add	r3, sp, #12
 800a48a:	9300      	str	r3, [sp, #0]
 800a48c:	462a      	mov	r2, r5
 800a48e:	4b09      	ldr	r3, [pc, #36]	; (800a4b4 <_vfiprintf_r+0x258>)
 800a490:	a904      	add	r1, sp, #16
 800a492:	4630      	mov	r0, r6
 800a494:	f7fd ff66 	bl	8008364 <_printf_i>
 800a498:	e7e4      	b.n	800a464 <_vfiprintf_r+0x208>
 800a49a:	bf00      	nop
 800a49c:	0800abac 	.word	0x0800abac
 800a4a0:	0800abcc 	.word	0x0800abcc
 800a4a4:	0800ab8c 	.word	0x0800ab8c
 800a4a8:	0800ad4c 	.word	0x0800ad4c
 800a4ac:	0800ad56 	.word	0x0800ad56
 800a4b0:	08007e1d 	.word	0x08007e1d
 800a4b4:	0800a237 	.word	0x0800a237
 800a4b8:	0800ad52 	.word	0x0800ad52

0800a4bc <_sbrk_r>:
 800a4bc:	b538      	push	{r3, r4, r5, lr}
 800a4be:	4d06      	ldr	r5, [pc, #24]	; (800a4d8 <_sbrk_r+0x1c>)
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	4604      	mov	r4, r0
 800a4c4:	4608      	mov	r0, r1
 800a4c6:	602b      	str	r3, [r5, #0]
 800a4c8:	f7f7 faae 	bl	8001a28 <_sbrk>
 800a4cc:	1c43      	adds	r3, r0, #1
 800a4ce:	d102      	bne.n	800a4d6 <_sbrk_r+0x1a>
 800a4d0:	682b      	ldr	r3, [r5, #0]
 800a4d2:	b103      	cbz	r3, 800a4d6 <_sbrk_r+0x1a>
 800a4d4:	6023      	str	r3, [r4, #0]
 800a4d6:	bd38      	pop	{r3, r4, r5, pc}
 800a4d8:	2000522c 	.word	0x2000522c

0800a4dc <__sread>:
 800a4dc:	b510      	push	{r4, lr}
 800a4de:	460c      	mov	r4, r1
 800a4e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4e4:	f000 f8e2 	bl	800a6ac <_read_r>
 800a4e8:	2800      	cmp	r0, #0
 800a4ea:	bfab      	itete	ge
 800a4ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a4ee:	89a3      	ldrhlt	r3, [r4, #12]
 800a4f0:	181b      	addge	r3, r3, r0
 800a4f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a4f6:	bfac      	ite	ge
 800a4f8:	6563      	strge	r3, [r4, #84]	; 0x54
 800a4fa:	81a3      	strhlt	r3, [r4, #12]
 800a4fc:	bd10      	pop	{r4, pc}

0800a4fe <__swrite>:
 800a4fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a502:	461f      	mov	r7, r3
 800a504:	898b      	ldrh	r3, [r1, #12]
 800a506:	05db      	lsls	r3, r3, #23
 800a508:	4605      	mov	r5, r0
 800a50a:	460c      	mov	r4, r1
 800a50c:	4616      	mov	r6, r2
 800a50e:	d505      	bpl.n	800a51c <__swrite+0x1e>
 800a510:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a514:	2302      	movs	r3, #2
 800a516:	2200      	movs	r2, #0
 800a518:	f000 f898 	bl	800a64c <_lseek_r>
 800a51c:	89a3      	ldrh	r3, [r4, #12]
 800a51e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a522:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a526:	81a3      	strh	r3, [r4, #12]
 800a528:	4632      	mov	r2, r6
 800a52a:	463b      	mov	r3, r7
 800a52c:	4628      	mov	r0, r5
 800a52e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a532:	f000 b817 	b.w	800a564 <_write_r>

0800a536 <__sseek>:
 800a536:	b510      	push	{r4, lr}
 800a538:	460c      	mov	r4, r1
 800a53a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a53e:	f000 f885 	bl	800a64c <_lseek_r>
 800a542:	1c43      	adds	r3, r0, #1
 800a544:	89a3      	ldrh	r3, [r4, #12]
 800a546:	bf15      	itete	ne
 800a548:	6560      	strne	r0, [r4, #84]	; 0x54
 800a54a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a54e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a552:	81a3      	strheq	r3, [r4, #12]
 800a554:	bf18      	it	ne
 800a556:	81a3      	strhne	r3, [r4, #12]
 800a558:	bd10      	pop	{r4, pc}

0800a55a <__sclose>:
 800a55a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a55e:	f000 b831 	b.w	800a5c4 <_close_r>
	...

0800a564 <_write_r>:
 800a564:	b538      	push	{r3, r4, r5, lr}
 800a566:	4d07      	ldr	r5, [pc, #28]	; (800a584 <_write_r+0x20>)
 800a568:	4604      	mov	r4, r0
 800a56a:	4608      	mov	r0, r1
 800a56c:	4611      	mov	r1, r2
 800a56e:	2200      	movs	r2, #0
 800a570:	602a      	str	r2, [r5, #0]
 800a572:	461a      	mov	r2, r3
 800a574:	f7f7 fa07 	bl	8001986 <_write>
 800a578:	1c43      	adds	r3, r0, #1
 800a57a:	d102      	bne.n	800a582 <_write_r+0x1e>
 800a57c:	682b      	ldr	r3, [r5, #0]
 800a57e:	b103      	cbz	r3, 800a582 <_write_r+0x1e>
 800a580:	6023      	str	r3, [r4, #0]
 800a582:	bd38      	pop	{r3, r4, r5, pc}
 800a584:	2000522c 	.word	0x2000522c

0800a588 <__assert_func>:
 800a588:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a58a:	4614      	mov	r4, r2
 800a58c:	461a      	mov	r2, r3
 800a58e:	4b09      	ldr	r3, [pc, #36]	; (800a5b4 <__assert_func+0x2c>)
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	4605      	mov	r5, r0
 800a594:	68d8      	ldr	r0, [r3, #12]
 800a596:	b14c      	cbz	r4, 800a5ac <__assert_func+0x24>
 800a598:	4b07      	ldr	r3, [pc, #28]	; (800a5b8 <__assert_func+0x30>)
 800a59a:	9100      	str	r1, [sp, #0]
 800a59c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a5a0:	4906      	ldr	r1, [pc, #24]	; (800a5bc <__assert_func+0x34>)
 800a5a2:	462b      	mov	r3, r5
 800a5a4:	f000 f81e 	bl	800a5e4 <fiprintf>
 800a5a8:	f000 f89f 	bl	800a6ea <abort>
 800a5ac:	4b04      	ldr	r3, [pc, #16]	; (800a5c0 <__assert_func+0x38>)
 800a5ae:	461c      	mov	r4, r3
 800a5b0:	e7f3      	b.n	800a59a <__assert_func+0x12>
 800a5b2:	bf00      	nop
 800a5b4:	20000010 	.word	0x20000010
 800a5b8:	0800ad5d 	.word	0x0800ad5d
 800a5bc:	0800ad6a 	.word	0x0800ad6a
 800a5c0:	0800ad98 	.word	0x0800ad98

0800a5c4 <_close_r>:
 800a5c4:	b538      	push	{r3, r4, r5, lr}
 800a5c6:	4d06      	ldr	r5, [pc, #24]	; (800a5e0 <_close_r+0x1c>)
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	4604      	mov	r4, r0
 800a5cc:	4608      	mov	r0, r1
 800a5ce:	602b      	str	r3, [r5, #0]
 800a5d0:	f7f7 f9f5 	bl	80019be <_close>
 800a5d4:	1c43      	adds	r3, r0, #1
 800a5d6:	d102      	bne.n	800a5de <_close_r+0x1a>
 800a5d8:	682b      	ldr	r3, [r5, #0]
 800a5da:	b103      	cbz	r3, 800a5de <_close_r+0x1a>
 800a5dc:	6023      	str	r3, [r4, #0]
 800a5de:	bd38      	pop	{r3, r4, r5, pc}
 800a5e0:	2000522c 	.word	0x2000522c

0800a5e4 <fiprintf>:
 800a5e4:	b40e      	push	{r1, r2, r3}
 800a5e6:	b503      	push	{r0, r1, lr}
 800a5e8:	4601      	mov	r1, r0
 800a5ea:	ab03      	add	r3, sp, #12
 800a5ec:	4805      	ldr	r0, [pc, #20]	; (800a604 <fiprintf+0x20>)
 800a5ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5f2:	6800      	ldr	r0, [r0, #0]
 800a5f4:	9301      	str	r3, [sp, #4]
 800a5f6:	f7ff fe31 	bl	800a25c <_vfiprintf_r>
 800a5fa:	b002      	add	sp, #8
 800a5fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800a600:	b003      	add	sp, #12
 800a602:	4770      	bx	lr
 800a604:	20000010 	.word	0x20000010

0800a608 <_fstat_r>:
 800a608:	b538      	push	{r3, r4, r5, lr}
 800a60a:	4d07      	ldr	r5, [pc, #28]	; (800a628 <_fstat_r+0x20>)
 800a60c:	2300      	movs	r3, #0
 800a60e:	4604      	mov	r4, r0
 800a610:	4608      	mov	r0, r1
 800a612:	4611      	mov	r1, r2
 800a614:	602b      	str	r3, [r5, #0]
 800a616:	f7f7 f9de 	bl	80019d6 <_fstat>
 800a61a:	1c43      	adds	r3, r0, #1
 800a61c:	d102      	bne.n	800a624 <_fstat_r+0x1c>
 800a61e:	682b      	ldr	r3, [r5, #0]
 800a620:	b103      	cbz	r3, 800a624 <_fstat_r+0x1c>
 800a622:	6023      	str	r3, [r4, #0]
 800a624:	bd38      	pop	{r3, r4, r5, pc}
 800a626:	bf00      	nop
 800a628:	2000522c 	.word	0x2000522c

0800a62c <_isatty_r>:
 800a62c:	b538      	push	{r3, r4, r5, lr}
 800a62e:	4d06      	ldr	r5, [pc, #24]	; (800a648 <_isatty_r+0x1c>)
 800a630:	2300      	movs	r3, #0
 800a632:	4604      	mov	r4, r0
 800a634:	4608      	mov	r0, r1
 800a636:	602b      	str	r3, [r5, #0]
 800a638:	f7f7 f9dd 	bl	80019f6 <_isatty>
 800a63c:	1c43      	adds	r3, r0, #1
 800a63e:	d102      	bne.n	800a646 <_isatty_r+0x1a>
 800a640:	682b      	ldr	r3, [r5, #0]
 800a642:	b103      	cbz	r3, 800a646 <_isatty_r+0x1a>
 800a644:	6023      	str	r3, [r4, #0]
 800a646:	bd38      	pop	{r3, r4, r5, pc}
 800a648:	2000522c 	.word	0x2000522c

0800a64c <_lseek_r>:
 800a64c:	b538      	push	{r3, r4, r5, lr}
 800a64e:	4d07      	ldr	r5, [pc, #28]	; (800a66c <_lseek_r+0x20>)
 800a650:	4604      	mov	r4, r0
 800a652:	4608      	mov	r0, r1
 800a654:	4611      	mov	r1, r2
 800a656:	2200      	movs	r2, #0
 800a658:	602a      	str	r2, [r5, #0]
 800a65a:	461a      	mov	r2, r3
 800a65c:	f7f7 f9d6 	bl	8001a0c <_lseek>
 800a660:	1c43      	adds	r3, r0, #1
 800a662:	d102      	bne.n	800a66a <_lseek_r+0x1e>
 800a664:	682b      	ldr	r3, [r5, #0]
 800a666:	b103      	cbz	r3, 800a66a <_lseek_r+0x1e>
 800a668:	6023      	str	r3, [r4, #0]
 800a66a:	bd38      	pop	{r3, r4, r5, pc}
 800a66c:	2000522c 	.word	0x2000522c

0800a670 <__ascii_mbtowc>:
 800a670:	b082      	sub	sp, #8
 800a672:	b901      	cbnz	r1, 800a676 <__ascii_mbtowc+0x6>
 800a674:	a901      	add	r1, sp, #4
 800a676:	b142      	cbz	r2, 800a68a <__ascii_mbtowc+0x1a>
 800a678:	b14b      	cbz	r3, 800a68e <__ascii_mbtowc+0x1e>
 800a67a:	7813      	ldrb	r3, [r2, #0]
 800a67c:	600b      	str	r3, [r1, #0]
 800a67e:	7812      	ldrb	r2, [r2, #0]
 800a680:	1e10      	subs	r0, r2, #0
 800a682:	bf18      	it	ne
 800a684:	2001      	movne	r0, #1
 800a686:	b002      	add	sp, #8
 800a688:	4770      	bx	lr
 800a68a:	4610      	mov	r0, r2
 800a68c:	e7fb      	b.n	800a686 <__ascii_mbtowc+0x16>
 800a68e:	f06f 0001 	mvn.w	r0, #1
 800a692:	e7f8      	b.n	800a686 <__ascii_mbtowc+0x16>

0800a694 <__malloc_lock>:
 800a694:	4801      	ldr	r0, [pc, #4]	; (800a69c <__malloc_lock+0x8>)
 800a696:	f7ff b910 	b.w	80098ba <__retarget_lock_acquire_recursive>
 800a69a:	bf00      	nop
 800a69c:	20005224 	.word	0x20005224

0800a6a0 <__malloc_unlock>:
 800a6a0:	4801      	ldr	r0, [pc, #4]	; (800a6a8 <__malloc_unlock+0x8>)
 800a6a2:	f7ff b90b 	b.w	80098bc <__retarget_lock_release_recursive>
 800a6a6:	bf00      	nop
 800a6a8:	20005224 	.word	0x20005224

0800a6ac <_read_r>:
 800a6ac:	b538      	push	{r3, r4, r5, lr}
 800a6ae:	4d07      	ldr	r5, [pc, #28]	; (800a6cc <_read_r+0x20>)
 800a6b0:	4604      	mov	r4, r0
 800a6b2:	4608      	mov	r0, r1
 800a6b4:	4611      	mov	r1, r2
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	602a      	str	r2, [r5, #0]
 800a6ba:	461a      	mov	r2, r3
 800a6bc:	f7f7 f946 	bl	800194c <_read>
 800a6c0:	1c43      	adds	r3, r0, #1
 800a6c2:	d102      	bne.n	800a6ca <_read_r+0x1e>
 800a6c4:	682b      	ldr	r3, [r5, #0]
 800a6c6:	b103      	cbz	r3, 800a6ca <_read_r+0x1e>
 800a6c8:	6023      	str	r3, [r4, #0]
 800a6ca:	bd38      	pop	{r3, r4, r5, pc}
 800a6cc:	2000522c 	.word	0x2000522c

0800a6d0 <__ascii_wctomb>:
 800a6d0:	b149      	cbz	r1, 800a6e6 <__ascii_wctomb+0x16>
 800a6d2:	2aff      	cmp	r2, #255	; 0xff
 800a6d4:	bf85      	ittet	hi
 800a6d6:	238a      	movhi	r3, #138	; 0x8a
 800a6d8:	6003      	strhi	r3, [r0, #0]
 800a6da:	700a      	strbls	r2, [r1, #0]
 800a6dc:	f04f 30ff 	movhi.w	r0, #4294967295
 800a6e0:	bf98      	it	ls
 800a6e2:	2001      	movls	r0, #1
 800a6e4:	4770      	bx	lr
 800a6e6:	4608      	mov	r0, r1
 800a6e8:	4770      	bx	lr

0800a6ea <abort>:
 800a6ea:	b508      	push	{r3, lr}
 800a6ec:	2006      	movs	r0, #6
 800a6ee:	f000 f82b 	bl	800a748 <raise>
 800a6f2:	2001      	movs	r0, #1
 800a6f4:	f7f7 f920 	bl	8001938 <_exit>

0800a6f8 <_raise_r>:
 800a6f8:	291f      	cmp	r1, #31
 800a6fa:	b538      	push	{r3, r4, r5, lr}
 800a6fc:	4604      	mov	r4, r0
 800a6fe:	460d      	mov	r5, r1
 800a700:	d904      	bls.n	800a70c <_raise_r+0x14>
 800a702:	2316      	movs	r3, #22
 800a704:	6003      	str	r3, [r0, #0]
 800a706:	f04f 30ff 	mov.w	r0, #4294967295
 800a70a:	bd38      	pop	{r3, r4, r5, pc}
 800a70c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a70e:	b112      	cbz	r2, 800a716 <_raise_r+0x1e>
 800a710:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a714:	b94b      	cbnz	r3, 800a72a <_raise_r+0x32>
 800a716:	4620      	mov	r0, r4
 800a718:	f000 f830 	bl	800a77c <_getpid_r>
 800a71c:	462a      	mov	r2, r5
 800a71e:	4601      	mov	r1, r0
 800a720:	4620      	mov	r0, r4
 800a722:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a726:	f000 b817 	b.w	800a758 <_kill_r>
 800a72a:	2b01      	cmp	r3, #1
 800a72c:	d00a      	beq.n	800a744 <_raise_r+0x4c>
 800a72e:	1c59      	adds	r1, r3, #1
 800a730:	d103      	bne.n	800a73a <_raise_r+0x42>
 800a732:	2316      	movs	r3, #22
 800a734:	6003      	str	r3, [r0, #0]
 800a736:	2001      	movs	r0, #1
 800a738:	e7e7      	b.n	800a70a <_raise_r+0x12>
 800a73a:	2400      	movs	r4, #0
 800a73c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a740:	4628      	mov	r0, r5
 800a742:	4798      	blx	r3
 800a744:	2000      	movs	r0, #0
 800a746:	e7e0      	b.n	800a70a <_raise_r+0x12>

0800a748 <raise>:
 800a748:	4b02      	ldr	r3, [pc, #8]	; (800a754 <raise+0xc>)
 800a74a:	4601      	mov	r1, r0
 800a74c:	6818      	ldr	r0, [r3, #0]
 800a74e:	f7ff bfd3 	b.w	800a6f8 <_raise_r>
 800a752:	bf00      	nop
 800a754:	20000010 	.word	0x20000010

0800a758 <_kill_r>:
 800a758:	b538      	push	{r3, r4, r5, lr}
 800a75a:	4d07      	ldr	r5, [pc, #28]	; (800a778 <_kill_r+0x20>)
 800a75c:	2300      	movs	r3, #0
 800a75e:	4604      	mov	r4, r0
 800a760:	4608      	mov	r0, r1
 800a762:	4611      	mov	r1, r2
 800a764:	602b      	str	r3, [r5, #0]
 800a766:	f7f7 f8d7 	bl	8001918 <_kill>
 800a76a:	1c43      	adds	r3, r0, #1
 800a76c:	d102      	bne.n	800a774 <_kill_r+0x1c>
 800a76e:	682b      	ldr	r3, [r5, #0]
 800a770:	b103      	cbz	r3, 800a774 <_kill_r+0x1c>
 800a772:	6023      	str	r3, [r4, #0]
 800a774:	bd38      	pop	{r3, r4, r5, pc}
 800a776:	bf00      	nop
 800a778:	2000522c 	.word	0x2000522c

0800a77c <_getpid_r>:
 800a77c:	f7f7 b8c4 	b.w	8001908 <_getpid>

0800a780 <_init>:
 800a780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a782:	bf00      	nop
 800a784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a786:	bc08      	pop	{r3}
 800a788:	469e      	mov	lr, r3
 800a78a:	4770      	bx	lr

0800a78c <_fini>:
 800a78c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a78e:	bf00      	nop
 800a790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a792:	bc08      	pop	{r3}
 800a794:	469e      	mov	lr, r3
 800a796:	4770      	bx	lr
